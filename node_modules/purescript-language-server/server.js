#!/usr/bin/env node
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// output/LanguageServer.IdePurescript.Main/foreign.js
var require_foreign = __commonJS({
  "output/LanguageServer.IdePurescript.Main/foreign.js"(exports2) {
    exports2.version = function() {
      try {
        return require("./package.json").version;
      } catch (e) {
        return e.message;
      }
    };
  }
});

// output/Control.Apply/foreign.js
var require_foreign2 = __commonJS({
  "output/Control.Apply/foreign.js"(exports2) {
    "use strict";
    exports2.arrayApply = function(fs) {
      return function(xs) {
        var l = fs.length;
        var k = xs.length;
        var result = new Array(l * k);
        var n = 0;
        for (var i = 0; i < l; i++) {
          var f = fs[i];
          for (var j = 0; j < k; j++) {
            result[n++] = f(xs[j]);
          }
        }
        return result;
      };
    };
  }
});

// output/Control.Semigroupoid/index.js
var require_Control = __commonJS({
  "output/Control.Semigroupoid/index.js"(exports2, module2) {
    "use strict";
    var semigroupoidFn = {
      compose: function(f) {
        return function(g) {
          return function(x) {
            return f(g(x));
          };
        };
      }
    };
    var compose = function(dict) {
      return dict.compose;
    };
    var composeFlipped = function(dictSemigroupoid) {
      return function(f) {
        return function(g) {
          return compose(dictSemigroupoid)(g)(f);
        };
      };
    };
    module2.exports = {
      compose,
      composeFlipped,
      semigroupoidFn
    };
  }
});

// output/Control.Category/index.js
var require_Control2 = __commonJS({
  "output/Control.Category/index.js"(exports2, module2) {
    "use strict";
    var Control_Semigroupoid = require_Control();
    var identity = function(dict) {
      return dict.identity;
    };
    var categoryFn = {
      identity: function(x) {
        return x;
      },
      Semigroupoid0: function() {
        return Control_Semigroupoid.semigroupoidFn;
      }
    };
    module2.exports = {
      identity,
      categoryFn,
      compose: Control_Semigroupoid.compose
    };
  }
});

// output/Data.Boolean/index.js
var require_Data = __commonJS({
  "output/Data.Boolean/index.js"(exports2, module2) {
    "use strict";
    var otherwise = true;
    module2.exports = {
      otherwise
    };
  }
});

// output/Data.Function/index.js
var require_Data2 = __commonJS({
  "output/Data.Function/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Boolean = require_Data();
    var on = function(f) {
      return function(g) {
        return function(x) {
          return function(y) {
            return f(g(x))(g(y));
          };
        };
      };
    };
    var flip = function(f) {
      return function(b) {
        return function(a) {
          return f(a)(b);
        };
      };
    };
    var $$const = function(a) {
      return function(v) {
        return a;
      };
    };
    var applyN = function(f) {
      var go = function($copy_n) {
        return function($copy_acc) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, acc) {
            if (n <= 0) {
              $tco_done = true;
              return acc;
            }
            ;
            if (Data_Boolean.otherwise) {
              $tco_var_n = n - 1 | 0;
              $copy_acc = f(acc);
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Function (line 100, column 3 - line 102, column 37): " + [n.constructor.name, acc.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_n, $copy_acc);
          }
          ;
          return $tco_result;
        };
      };
      return go;
    };
    var applyFlipped = function(x) {
      return function(f) {
        return f(x);
      };
    };
    var apply = function(f) {
      return function(x) {
        return f(x);
      };
    };
    module2.exports = {
      flip,
      "const": $$const,
      apply,
      applyFlipped,
      applyN,
      on,
      compose: Control_Category.compose,
      identity: Control_Category.identity
    };
  }
});

// output/Data.Functor/foreign.js
var require_foreign3 = __commonJS({
  "output/Data.Functor/foreign.js"(exports2) {
    "use strict";
    exports2.arrayMap = function(f) {
      return function(arr) {
        var l = arr.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(arr[i]);
        }
        return result;
      };
    };
  }
});

// output/Data.Unit/foreign.js
var require_foreign4 = __commonJS({
  "output/Data.Unit/foreign.js"(exports2) {
    "use strict";
    exports2.unit = {};
  }
});

// output/Data.Unit/index.js
var require_Data3 = __commonJS({
  "output/Data.Unit/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign4();
    var showUnit = {
      show: function(v) {
        return "unit";
      }
    };
    module2.exports = {
      showUnit,
      unit: $foreign.unit
    };
  }
});

// output/Type.Proxy/index.js
var require_Type = __commonJS({
  "output/Type.Proxy/index.js"(exports2, module2) {
    "use strict";
    var Proxy3 = function() {
      function Proxy32() {
      }
      ;
      Proxy32.value = new Proxy32();
      return Proxy32;
    }();
    var Proxy2 = function() {
      function Proxy22() {
      }
      ;
      Proxy22.value = new Proxy22();
      return Proxy22;
    }();
    var $$Proxy = function() {
      function $$Proxy2() {
      }
      ;
      $$Proxy2.value = new $$Proxy2();
      return $$Proxy2;
    }();
    module2.exports = {
      "Proxy": $$Proxy,
      Proxy2,
      Proxy3
    };
  }
});

// output/Data.Functor/index.js
var require_Data4 = __commonJS({
  "output/Data.Functor/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign3();
    var Control_Semigroupoid = require_Control();
    var Data_Function = require_Data2();
    var Data_Unit = require_Data3();
    var Type_Proxy = require_Type();
    var map = function(dict) {
      return dict.map;
    };
    var mapFlipped = function(dictFunctor) {
      return function(fa) {
        return function(f) {
          return map(dictFunctor)(f)(fa);
        };
      };
    };
    var $$void = function(dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
    };
    var voidLeft = function(dictFunctor) {
      return function(f) {
        return function(x) {
          return map(dictFunctor)(Data_Function["const"](x))(f);
        };
      };
    };
    var voidRight = function(dictFunctor) {
      return function(x) {
        return map(dictFunctor)(Data_Function["const"](x));
      };
    };
    var functorProxy = {
      map: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      }
    };
    var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
    };
    var functorArray = {
      map: $foreign.arrayMap
    };
    var flap = function(dictFunctor) {
      return function(ff) {
        return function(x) {
          return map(dictFunctor)(function(f) {
            return f(x);
          })(ff);
        };
      };
    };
    module2.exports = {
      map,
      mapFlipped,
      "void": $$void,
      voidRight,
      voidLeft,
      flap,
      functorFn,
      functorArray,
      functorProxy
    };
  }
});

// output/Control.Apply/index.js
var require_Control3 = __commonJS({
  "output/Control.Apply/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign2();
    var Control_Category = require_Control2();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Type_Proxy = require_Type();
    var applyProxy = {
      apply: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      },
      Functor0: function() {
        return Data_Functor.functorProxy;
      }
    };
    var applyFn = {
      apply: function(f) {
        return function(g) {
          return function(x) {
            return f(x)(g(x));
          };
        };
      },
      Functor0: function() {
        return Data_Functor.functorFn;
      }
    };
    var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function() {
        return Data_Functor.functorArray;
      }
    };
    var apply = function(dict) {
      return dict.apply;
    };
    var applyFirst = function(dictApply) {
      return function(a) {
        return function(b) {
          return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
        };
      };
    };
    var applySecond = function(dictApply) {
      return function(a) {
        return function(b) {
          return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
        };
      };
    };
    var lift2 = function(dictApply) {
      return function(f) {
        return function(a) {
          return function(b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
          };
        };
      };
    };
    var lift3 = function(dictApply) {
      return function(f) {
        return function(a) {
          return function(b) {
            return function(c) {
              return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
            };
          };
        };
      };
    };
    var lift4 = function(dictApply) {
      return function(f) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
              };
            };
          };
        };
      };
    };
    var lift5 = function(dictApply) {
      return function(f) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                };
              };
            };
          };
        };
      };
    };
    module2.exports = {
      apply,
      applyFirst,
      applySecond,
      lift2,
      lift3,
      lift4,
      lift5,
      applyFn,
      applyArray,
      applyProxy,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Control.Applicative/index.js
var require_Control4 = __commonJS({
  "output/Control.Applicative/index.js"(exports2, module2) {
    "use strict";
    var Control_Apply = require_Control3();
    var Data_Functor = require_Data4();
    var Data_Unit = require_Data3();
    var Type_Proxy = require_Type();
    var pure = function(dict) {
      return dict.pure;
    };
    var unless = function(dictApplicative) {
      return function(v) {
        return function(v1) {
          if (!v) {
            return v1;
          }
          ;
          if (v) {
            return pure(dictApplicative)(Data_Unit.unit);
          }
          ;
          throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    };
    var when = function(dictApplicative) {
      return function(v) {
        return function(v1) {
          if (v) {
            return v1;
          }
          ;
          if (!v) {
            return pure(dictApplicative)(Data_Unit.unit);
          }
          ;
          throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    };
    var liftA1 = function(dictApplicative) {
      return function(f) {
        return function(a) {
          return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
        };
      };
    };
    var applicativeProxy = {
      pure: function(v) {
        return Type_Proxy["Proxy"].value;
      },
      Apply0: function() {
        return Control_Apply.applyProxy;
      }
    };
    var applicativeFn = {
      pure: function(x) {
        return function(v) {
          return x;
        };
      },
      Apply0: function() {
        return Control_Apply.applyFn;
      }
    };
    var applicativeArray = {
      pure: function(x) {
        return [x];
      },
      Apply0: function() {
        return Control_Apply.applyArray;
      }
    };
    module2.exports = {
      pure,
      liftA1,
      unless,
      when,
      applicativeFn,
      applicativeArray,
      applicativeProxy,
      apply: Control_Apply.apply,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Control.Bind/foreign.js
var require_foreign5 = __commonJS({
  "output/Control.Bind/foreign.js"(exports2) {
    "use strict";
    exports2.arrayBind = function(arr) {
      return function(f) {
        var result = [];
        for (var i = 0, l = arr.length; i < l; i++) {
          Array.prototype.push.apply(result, f(arr[i]));
        }
        return result;
      };
    };
  }
});

// output/Control.Bind/index.js
var require_Control5 = __commonJS({
  "output/Control.Bind/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign5();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Category = require_Control2();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Type_Proxy = require_Type();
    var discard = function(dict) {
      return dict.discard;
    };
    var bindProxy = {
      bind: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      },
      Apply0: function() {
        return Control_Apply.applyProxy;
      }
    };
    var bindFn = {
      bind: function(m) {
        return function(f) {
          return function(x) {
            return f(m(x))(x);
          };
        };
      },
      Apply0: function() {
        return Control_Apply.applyFn;
      }
    };
    var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function() {
        return Control_Apply.applyArray;
      }
    };
    var bind = function(dict) {
      return dict.bind;
    };
    var bindFlipped = function(dictBind) {
      return Data_Function.flip(bind(dictBind));
    };
    var composeKleisliFlipped = function(dictBind) {
      return function(f) {
        return function(g) {
          return function(a) {
            return bindFlipped(dictBind)(f)(g(a));
          };
        };
      };
    };
    var composeKleisli = function(dictBind) {
      return function(f) {
        return function(g) {
          return function(a) {
            return bind(dictBind)(f(a))(g);
          };
        };
      };
    };
    var discardProxy = {
      discard: function(dictBind) {
        return bind(dictBind);
      }
    };
    var discardProxy2 = {
      discard: function(dictBind) {
        return bind(dictBind);
      }
    };
    var discardProxy3 = {
      discard: function(dictBind) {
        return bind(dictBind);
      }
    };
    var discardUnit = {
      discard: function(dictBind) {
        return bind(dictBind);
      }
    };
    var ifM = function(dictBind) {
      return function(cond) {
        return function(t) {
          return function(f) {
            return bind(dictBind)(cond)(function(cond$prime) {
              if (cond$prime) {
                return t;
              }
              ;
              return f;
            });
          };
        };
      };
    };
    var join = function(dictBind) {
      return function(m) {
        return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    module2.exports = {
      bind,
      bindFlipped,
      discard,
      join,
      composeKleisli,
      composeKleisliFlipped,
      ifM,
      bindFn,
      bindArray,
      bindProxy,
      discardUnit,
      discardProxy,
      discardProxy2,
      discardProxy3,
      liftA1: Control_Applicative.liftA1,
      pure: Control_Applicative.pure,
      unless: Control_Applicative.unless,
      when: Control_Applicative.when,
      apply: Control_Apply.apply,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Data.Semigroup/foreign.js
var require_foreign6 = __commonJS({
  "output/Data.Semigroup/foreign.js"(exports2) {
    "use strict";
    exports2.concatString = function(s1) {
      return function(s2) {
        return s1 + s2;
      };
    };
    exports2.concatArray = function(xs) {
      return function(ys) {
        if (xs.length === 0)
          return ys;
        if (ys.length === 0)
          return xs;
        return xs.concat(ys);
      };
    };
  }
});

// output/Data.Symbol/foreign.js
var require_foreign7 = __commonJS({
  "output/Data.Symbol/foreign.js"(exports2) {
    "use strict";
    exports2.unsafeCoerce = function(arg) {
      return arg;
    };
  }
});

// output/Data.Symbol/index.js
var require_Data5 = __commonJS({
  "output/Data.Symbol/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign7();
    var Type_Proxy = require_Type();
    var SProxy = function() {
      function SProxy2() {
      }
      ;
      SProxy2.value = new SProxy2();
      return SProxy2;
    }();
    var reifySymbol = function(s) {
      return function(f) {
        return $foreign.unsafeCoerce(function(dictIsSymbol) {
          return f(dictIsSymbol);
        })({
          reflectSymbol: function(v) {
            return s;
          }
        })(Type_Proxy["Proxy"].value);
      };
    };
    var reflectSymbol = function(dict) {
      return dict.reflectSymbol;
    };
    module2.exports = {
      reflectSymbol,
      reifySymbol,
      SProxy
    };
  }
});

// output/Data.Void/index.js
var require_Data6 = __commonJS({
  "output/Data.Void/index.js"(exports2, module2) {
    "use strict";
    var absurd = function(a) {
      var spin = function($copy_v) {
        var $tco_result;
        function $tco_loop(v) {
          $copy_v = v;
          return;
        }
        ;
        while (true) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return spin(a);
    };
    var showVoid = {
      show: absurd
    };
    module2.exports = {
      absurd,
      showVoid
    };
  }
});

// output/Record.Unsafe/foreign.js
var require_foreign8 = __commonJS({
  "output/Record.Unsafe/foreign.js"(exports2) {
    "use strict";
    exports2.unsafeHas = function(label) {
      return function(rec) {
        return {}.hasOwnProperty.call(rec, label);
      };
    };
    exports2.unsafeGet = function(label) {
      return function(rec) {
        return rec[label];
      };
    };
    exports2.unsafeSet = function(label) {
      return function(value) {
        return function(rec) {
          var copy = {};
          for (var key in rec) {
            if ({}.hasOwnProperty.call(rec, key)) {
              copy[key] = rec[key];
            }
          }
          copy[label] = value;
          return copy;
        };
      };
    };
    exports2.unsafeDelete = function(label) {
      return function(rec) {
        var copy = {};
        for (var key in rec) {
          if (key !== label && {}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        return copy;
      };
    };
  }
});

// output/Record.Unsafe/index.js
var require_Record = __commonJS({
  "output/Record.Unsafe/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign8();
    module2.exports = {
      unsafeHas: $foreign.unsafeHas,
      unsafeGet: $foreign.unsafeGet,
      unsafeSet: $foreign.unsafeSet,
      unsafeDelete: $foreign.unsafeDelete
    };
  }
});

// output/Data.Semigroup/index.js
var require_Data7 = __commonJS({
  "output/Data.Semigroup/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign6();
    var Data_Symbol = require_Data5();
    var Data_Unit = require_Data3();
    var Data_Void = require_Data6();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var semigroupVoid = {
      append: function(v) {
        return Data_Void.absurd;
      }
    };
    var semigroupUnit = {
      append: function(v) {
        return function(v1) {
          return Data_Unit.unit;
        };
      }
    };
    var semigroupString = {
      append: $foreign.concatString
    };
    var semigroupRecordNil = {
      appendRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return {};
          };
        };
      }
    };
    var semigroupProxy3 = {
      append: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy3.value;
        };
      }
    };
    var semigroupProxy2 = {
      append: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy2.value;
        };
      }
    };
    var semigroupProxy = {
      append: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      }
    };
    var semigroupArray = {
      append: $foreign.concatArray
    };
    var appendRecord = function(dict) {
      return dict.appendRecord;
    };
    var semigroupRecord = function(dictRowToList) {
      return function(dictSemigroupRecord) {
        return {
          append: appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)
        };
      };
    };
    var append = function(dict) {
      return dict.append;
    };
    var semigroupFn = function(dictSemigroup) {
      return {
        append: function(f) {
          return function(g) {
            return function(x) {
              return append(dictSemigroup)(f(x))(g(x));
            };
          };
        }
      };
    };
    var semigroupRecordCons = function(dictIsSymbol) {
      return function(dictCons) {
        return function(dictSemigroupRecord) {
          return function(dictSemigroup) {
            return {
              appendRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    var get = Record_Unsafe.unsafeGet(key);
                    return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                  };
                };
              }
            };
          };
        };
      };
    };
    module2.exports = {
      append,
      appendRecord,
      semigroupString,
      semigroupUnit,
      semigroupVoid,
      semigroupFn,
      semigroupArray,
      semigroupProxy,
      semigroupProxy2,
      semigroupProxy3,
      semigroupRecord,
      semigroupRecordNil,
      semigroupRecordCons
    };
  }
});

// output/Control.Alt/index.js
var require_Control6 = __commonJS({
  "output/Control.Alt/index.js"(exports2, module2) {
    "use strict";
    var Data_Functor = require_Data4();
    var Data_Semigroup = require_Data7();
    var altArray = {
      alt: Data_Semigroup.append(Data_Semigroup.semigroupArray),
      Functor0: function() {
        return Data_Functor.functorArray;
      }
    };
    var alt = function(dict) {
      return dict.alt;
    };
    module2.exports = {
      alt,
      altArray,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Data.Bounded/foreign.js
var require_foreign9 = __commonJS({
  "output/Data.Bounded/foreign.js"(exports2) {
    "use strict";
    exports2.topInt = 2147483647;
    exports2.bottomInt = -2147483648;
    exports2.topChar = String.fromCharCode(65535);
    exports2.bottomChar = String.fromCharCode(0);
    exports2.topNumber = Number.POSITIVE_INFINITY;
    exports2.bottomNumber = Number.NEGATIVE_INFINITY;
  }
});

// output/Data.Ord/foreign.js
var require_foreign10 = __commonJS({
  "output/Data.Ord/foreign.js"(exports2) {
    "use strict";
    var unsafeCompareImpl = function(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x === y ? eq : gt;
            };
          };
        };
      };
    };
    exports2.ordBooleanImpl = unsafeCompareImpl;
    exports2.ordIntImpl = unsafeCompareImpl;
    exports2.ordNumberImpl = unsafeCompareImpl;
    exports2.ordStringImpl = unsafeCompareImpl;
    exports2.ordCharImpl = unsafeCompareImpl;
    exports2.ordArrayImpl = function(f) {
      return function(xs) {
        return function(ys) {
          var i = 0;
          var xlen = xs.length;
          var ylen = ys.length;
          while (i < xlen && i < ylen) {
            var x = xs[i];
            var y = ys[i];
            var o = f(x)(y);
            if (o !== 0) {
              return o;
            }
            i++;
          }
          if (xlen === ylen) {
            return 0;
          } else if (xlen > ylen) {
            return -1;
          } else {
            return 1;
          }
        };
      };
    };
  }
});

// output/Data.Eq/foreign.js
var require_foreign11 = __commonJS({
  "output/Data.Eq/foreign.js"(exports2) {
    "use strict";
    var refEq = function(r1) {
      return function(r2) {
        return r1 === r2;
      };
    };
    exports2.eqBooleanImpl = refEq;
    exports2.eqIntImpl = refEq;
    exports2.eqNumberImpl = refEq;
    exports2.eqCharImpl = refEq;
    exports2.eqStringImpl = refEq;
    exports2.eqArrayImpl = function(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length)
            return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i]))
              return false;
          }
          return true;
        };
      };
    };
  }
});

// output/Data.Eq/index.js
var require_Data8 = __commonJS({
  "output/Data.Eq/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign11();
    var Data_Symbol = require_Data5();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var eqVoid = {
      eq: function(v) {
        return function(v1) {
          return true;
        };
      }
    };
    var eqUnit = {
      eq: function(v) {
        return function(v1) {
          return true;
        };
      }
    };
    var eqString = {
      eq: $foreign.eqStringImpl
    };
    var eqRowNil = {
      eqRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return true;
          };
        };
      }
    };
    var eqRecord = function(dict) {
      return dict.eqRecord;
    };
    var eqRec = function(dictRowToList) {
      return function(dictEqRecord) {
        return {
          eq: eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
        };
      };
    };
    var eqProxy3 = {
      eq: function(v) {
        return function(v1) {
          return true;
        };
      }
    };
    var eqProxy2 = {
      eq: function(v) {
        return function(v1) {
          return true;
        };
      }
    };
    var eqProxy = {
      eq: function(v) {
        return function(v1) {
          return true;
        };
      }
    };
    var eqNumber = {
      eq: $foreign.eqNumberImpl
    };
    var eqInt = {
      eq: $foreign.eqIntImpl
    };
    var eqChar = {
      eq: $foreign.eqCharImpl
    };
    var eqBoolean = {
      eq: $foreign.eqBooleanImpl
    };
    var eq1 = function(dict) {
      return dict.eq1;
    };
    var eq = function(dict) {
      return dict.eq;
    };
    var eqArray = function(dictEq) {
      return {
        eq: $foreign.eqArrayImpl(eq(dictEq))
      };
    };
    var eq1Array = {
      eq1: function(dictEq) {
        return eq(eqArray(dictEq));
      }
    };
    var eqRowCons = function(dictEqRecord) {
      return function(dictCons) {
        return function(dictIsSymbol) {
          return function(dictEq) {
            return {
              eqRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var get = Record_Unsafe.unsafeGet(key);
                    return eq(dictEq)(get(ra))(get(rb)) && tail;
                  };
                };
              }
            };
          };
        };
      };
    };
    var notEq = function(dictEq) {
      return function(x) {
        return function(y) {
          return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
        };
      };
    };
    var notEq1 = function(dictEq1) {
      return function(dictEq) {
        return function(x) {
          return function(y) {
            return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
          };
        };
      };
    };
    module2.exports = {
      eq,
      notEq,
      eq1,
      notEq1,
      eqRecord,
      eqBoolean,
      eqInt,
      eqNumber,
      eqChar,
      eqString,
      eqUnit,
      eqVoid,
      eqArray,
      eqRec,
      eqProxy,
      eqProxy2,
      eqProxy3,
      eq1Array,
      eqRowNil,
      eqRowCons
    };
  }
});

// output/Data.Ordering/index.js
var require_Data9 = __commonJS({
  "output/Data.Ordering/index.js"(exports2, module2) {
    "use strict";
    var LT = function() {
      function LT2() {
      }
      ;
      LT2.value = new LT2();
      return LT2;
    }();
    var GT = function() {
      function GT2() {
      }
      ;
      GT2.value = new GT2();
      return GT2;
    }();
    var EQ = function() {
      function EQ2() {
      }
      ;
      EQ2.value = new EQ2();
      return EQ2;
    }();
    var showOrdering = {
      show: function(v) {
        if (v instanceof LT) {
          return "LT";
        }
        ;
        if (v instanceof GT) {
          return "GT";
        }
        ;
        if (v instanceof EQ) {
          return "EQ";
        }
        ;
        throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [v.constructor.name]);
      }
    };
    var semigroupOrdering = {
      append: function(v) {
        return function(v1) {
          if (v instanceof LT) {
            return LT.value;
          }
          ;
          if (v instanceof GT) {
            return GT.value;
          }
          ;
          if (v instanceof EQ) {
            return v1;
          }
          ;
          throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [v.constructor.name, v1.constructor.name]);
        };
      }
    };
    var invert = function(v) {
      if (v instanceof GT) {
        return LT.value;
      }
      ;
      if (v instanceof EQ) {
        return EQ.value;
      }
      ;
      if (v instanceof LT) {
        return GT.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [v.constructor.name]);
    };
    var eqOrdering = {
      eq: function(v) {
        return function(v1) {
          if (v instanceof LT && v1 instanceof LT) {
            return true;
          }
          ;
          if (v instanceof GT && v1 instanceof GT) {
            return true;
          }
          ;
          if (v instanceof EQ && v1 instanceof EQ) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    module2.exports = {
      LT,
      GT,
      EQ,
      invert,
      eqOrdering,
      semigroupOrdering,
      showOrdering
    };
  }
});

// output/Data.Ring/foreign.js
var require_foreign12 = __commonJS({
  "output/Data.Ring/foreign.js"(exports2) {
    "use strict";
    exports2.intSub = function(x) {
      return function(y) {
        return x - y | 0;
      };
    };
    exports2.numSub = function(n1) {
      return function(n2) {
        return n1 - n2;
      };
    };
  }
});

// output/Data.Semiring/foreign.js
var require_foreign13 = __commonJS({
  "output/Data.Semiring/foreign.js"(exports2) {
    "use strict";
    exports2.intAdd = function(x) {
      return function(y) {
        return x + y | 0;
      };
    };
    exports2.intMul = function(x) {
      return function(y) {
        return x * y | 0;
      };
    };
    exports2.numAdd = function(n1) {
      return function(n2) {
        return n1 + n2;
      };
    };
    exports2.numMul = function(n1) {
      return function(n2) {
        return n1 * n2;
      };
    };
  }
});

// output/Data.Semiring/index.js
var require_Data10 = __commonJS({
  "output/Data.Semiring/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign13();
    var Data_Symbol = require_Data5();
    var Data_Unit = require_Data3();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var zeroRecord = function(dict) {
      return dict.zeroRecord;
    };
    var zero = function(dict) {
      return dict.zero;
    };
    var semiringUnit = {
      add: function(v) {
        return function(v1) {
          return Data_Unit.unit;
        };
      },
      zero: Data_Unit.unit,
      mul: function(v) {
        return function(v1) {
          return Data_Unit.unit;
        };
      },
      one: Data_Unit.unit
    };
    var semiringRecordNil = {
      addRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return {};
          };
        };
      },
      mulRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return {};
          };
        };
      },
      oneRecord: function(v) {
        return function(v1) {
          return {};
        };
      },
      zeroRecord: function(v) {
        return function(v1) {
          return {};
        };
      }
    };
    var semiringProxy3 = {
      add: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy3.value;
        };
      },
      mul: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy3.value;
        };
      },
      one: Type_Proxy.Proxy3.value,
      zero: Type_Proxy.Proxy3.value
    };
    var semiringProxy2 = {
      add: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy2.value;
        };
      },
      mul: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy2.value;
        };
      },
      one: Type_Proxy.Proxy2.value,
      zero: Type_Proxy.Proxy2.value
    };
    var semiringProxy = {
      add: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      },
      mul: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      },
      one: Type_Proxy["Proxy"].value,
      zero: Type_Proxy["Proxy"].value
    };
    var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0,
      mul: $foreign.numMul,
      one: 1
    };
    var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
    };
    var oneRecord = function(dict) {
      return dict.oneRecord;
    };
    var one = function(dict) {
      return dict.one;
    };
    var mulRecord = function(dict) {
      return dict.mulRecord;
    };
    var mul = function(dict) {
      return dict.mul;
    };
    var addRecord = function(dict) {
      return dict.addRecord;
    };
    var semiringRecord = function(dictRowToList) {
      return function(dictSemiringRecord) {
        return {
          add: addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
          mul: mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
          one: oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
          zero: zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)
        };
      };
    };
    var add = function(dict) {
      return dict.add;
    };
    var semiringFn = function(dictSemiring) {
      return {
        add: function(f) {
          return function(g) {
            return function(x) {
              return add(dictSemiring)(f(x))(g(x));
            };
          };
        },
        zero: function(v) {
          return zero(dictSemiring);
        },
        mul: function(f) {
          return function(g) {
            return function(x) {
              return mul(dictSemiring)(f(x))(g(x));
            };
          };
        },
        one: function(v) {
          return one(dictSemiring);
        }
      };
    };
    var semiringRecordCons = function(dictIsSymbol) {
      return function(dictCons) {
        return function(dictSemiringRecord) {
          return function(dictSemiring) {
            return {
              addRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var tail = addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    var get = Record_Unsafe.unsafeGet(key);
                    return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                  };
                };
              },
              mulRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var tail = mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    var get = Record_Unsafe.unsafeGet(key);
                    return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                  };
                };
              },
              oneRecord: function(v) {
                return function(v1) {
                  var tail = oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var insert = Record_Unsafe.unsafeSet(key);
                  return insert(one(dictSemiring))(tail);
                };
              },
              zeroRecord: function(v) {
                return function(v1) {
                  var tail = zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var insert = Record_Unsafe.unsafeSet(key);
                  return insert(zero(dictSemiring))(tail);
                };
              }
            };
          };
        };
      };
    };
    module2.exports = {
      add,
      zero,
      mul,
      one,
      addRecord,
      mulRecord,
      oneRecord,
      zeroRecord,
      semiringInt,
      semiringNumber,
      semiringFn,
      semiringUnit,
      semiringProxy,
      semiringProxy2,
      semiringProxy3,
      semiringRecord,
      semiringRecordNil,
      semiringRecordCons
    };
  }
});

// output/Data.Ring/index.js
var require_Data11 = __commonJS({
  "output/Data.Ring/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign12();
    var Data_Semiring = require_Data10();
    var Data_Symbol = require_Data5();
    var Data_Unit = require_Data3();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var subRecord = function(dict) {
      return dict.subRecord;
    };
    var sub = function(dict) {
      return dict.sub;
    };
    var ringUnit = {
      sub: function(v) {
        return function(v1) {
          return Data_Unit.unit;
        };
      },
      Semiring0: function() {
        return Data_Semiring.semiringUnit;
      }
    };
    var ringRecordNil = {
      subRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return {};
          };
        };
      },
      SemiringRecord0: function() {
        return Data_Semiring.semiringRecordNil;
      }
    };
    var ringRecordCons = function(dictIsSymbol) {
      return function(dictCons) {
        return function(dictRingRecord) {
          return function(dictRing) {
            return {
              subRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var tail = subRecord(dictRingRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    var get = Record_Unsafe.unsafeGet(key);
                    return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                  };
                };
              },
              SemiringRecord0: function() {
                return Data_Semiring.semiringRecordCons(dictIsSymbol)()(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
              }
            };
          };
        };
      };
    };
    var ringRecord = function(dictRowToList) {
      return function(dictRingRecord) {
        return {
          sub: subRecord(dictRingRecord)(Type_Proxy["Proxy"].value),
          Semiring0: function() {
            return Data_Semiring.semiringRecord()(dictRingRecord.SemiringRecord0());
          }
        };
      };
    };
    var ringProxy3 = {
      sub: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy3.value;
        };
      },
      Semiring0: function() {
        return Data_Semiring.semiringProxy3;
      }
    };
    var ringProxy2 = {
      sub: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy2.value;
        };
      },
      Semiring0: function() {
        return Data_Semiring.semiringProxy2;
      }
    };
    var ringProxy = {
      sub: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      },
      Semiring0: function() {
        return Data_Semiring.semiringProxy;
      }
    };
    var ringNumber = {
      sub: $foreign.numSub,
      Semiring0: function() {
        return Data_Semiring.semiringNumber;
      }
    };
    var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function() {
        return Data_Semiring.semiringInt;
      }
    };
    var ringFn = function(dictRing) {
      return {
        sub: function(f) {
          return function(g) {
            return function(x) {
              return sub(dictRing)(f(x))(g(x));
            };
          };
        },
        Semiring0: function() {
          return Data_Semiring.semiringFn(dictRing.Semiring0());
        }
      };
    };
    var negate = function(dictRing) {
      return function(a) {
        return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
    };
    module2.exports = {
      sub,
      negate,
      subRecord,
      ringInt,
      ringNumber,
      ringUnit,
      ringFn,
      ringProxy,
      ringProxy2,
      ringProxy3,
      ringRecord,
      ringRecordNil,
      ringRecordCons,
      add: Data_Semiring.add,
      mul: Data_Semiring.mul,
      one: Data_Semiring.one,
      zero: Data_Semiring.zero
    };
  }
});

// output/Data.Ord/index.js
var require_Data12 = __commonJS({
  "output/Data.Ord/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign10();
    var Data_Eq = require_Data8();
    var Data_Ordering = require_Data9();
    var Data_Ring = require_Data11();
    var Data_Semiring = require_Data10();
    var Data_Symbol = require_Data5();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var ordVoid = {
      compare: function(v) {
        return function(v1) {
          return Data_Ordering.EQ.value;
        };
      },
      Eq0: function() {
        return Data_Eq.eqVoid;
      }
    };
    var ordUnit = {
      compare: function(v) {
        return function(v1) {
          return Data_Ordering.EQ.value;
        };
      },
      Eq0: function() {
        return Data_Eq.eqUnit;
      }
    };
    var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function() {
        return Data_Eq.eqString;
      }
    };
    var ordRecordNil = {
      compareRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return Data_Ordering.EQ.value;
          };
        };
      },
      EqRecord0: function() {
        return Data_Eq.eqRowNil;
      }
    };
    var ordProxy3 = {
      compare: function(v) {
        return function(v1) {
          return Data_Ordering.EQ.value;
        };
      },
      Eq0: function() {
        return Data_Eq.eqProxy3;
      }
    };
    var ordProxy2 = {
      compare: function(v) {
        return function(v1) {
          return Data_Ordering.EQ.value;
        };
      },
      Eq0: function() {
        return Data_Eq.eqProxy2;
      }
    };
    var ordProxy = {
      compare: function(v) {
        return function(v1) {
          return Data_Ordering.EQ.value;
        };
      },
      Eq0: function() {
        return Data_Eq.eqProxy;
      }
    };
    var ordOrdering = {
      compare: function(v) {
        return function(v1) {
          if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.GT.value;
          }
          ;
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Ord (line 121, column 1 - line 128, column 21): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Eq0: function() {
        return Data_Ordering.eqOrdering;
      }
    };
    var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function() {
        return Data_Eq.eqNumber;
      }
    };
    var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function() {
        return Data_Eq.eqInt;
      }
    };
    var ordChar = {
      compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function() {
        return Data_Eq.eqChar;
      }
    };
    var ordBoolean = {
      compare: $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function() {
        return Data_Eq.eqBoolean;
      }
    };
    var compareRecord = function(dict) {
      return dict.compareRecord;
    };
    var ordRecord = function(dictRowToList) {
      return function(dictOrdRecord) {
        return {
          compare: compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
          Eq0: function() {
            return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
          }
        };
      };
    };
    var compare1 = function(dict) {
      return dict.compare1;
    };
    var compare = function(dict) {
      return dict.compare;
    };
    var comparing = function(dictOrd) {
      return function(f) {
        return function(x) {
          return function(y) {
            return compare(dictOrd)(f(x))(f(y));
          };
        };
      };
    };
    var greaterThan = function(dictOrd) {
      return function(a1) {
        return function(a2) {
          var v = compare(dictOrd)(a1)(a2);
          if (v instanceof Data_Ordering.GT) {
            return true;
          }
          ;
          return false;
        };
      };
    };
    var greaterThanOrEq = function(dictOrd) {
      return function(a1) {
        return function(a2) {
          var v = compare(dictOrd)(a1)(a2);
          if (v instanceof Data_Ordering.LT) {
            return false;
          }
          ;
          return true;
        };
      };
    };
    var signum = function(dictOrd) {
      return function(dictRing) {
        return function(x) {
          var $52 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
          if ($52) {
            return Data_Semiring.one(dictRing.Semiring0());
          }
          ;
          return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
        };
      };
    };
    var lessThan = function(dictOrd) {
      return function(a1) {
        return function(a2) {
          var v = compare(dictOrd)(a1)(a2);
          if (v instanceof Data_Ordering.LT) {
            return true;
          }
          ;
          return false;
        };
      };
    };
    var lessThanOrEq = function(dictOrd) {
      return function(a1) {
        return function(a2) {
          var v = compare(dictOrd)(a1)(a2);
          if (v instanceof Data_Ordering.GT) {
            return false;
          }
          ;
          return true;
        };
      };
    };
    var max = function(dictOrd) {
      return function(x) {
        return function(y) {
          var v = compare(dictOrd)(x)(y);
          if (v instanceof Data_Ordering.LT) {
            return y;
          }
          ;
          if (v instanceof Data_Ordering.EQ) {
            return x;
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return x;
          }
          ;
          throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [v.constructor.name]);
        };
      };
    };
    var min = function(dictOrd) {
      return function(x) {
        return function(y) {
          var v = compare(dictOrd)(x)(y);
          if (v instanceof Data_Ordering.LT) {
            return x;
          }
          ;
          if (v instanceof Data_Ordering.EQ) {
            return x;
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return y;
          }
          ;
          throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [v.constructor.name]);
        };
      };
    };
    var ordArray = function(dictOrd) {
      return {
        compare: function() {
          var toDelta = function(x) {
            return function(y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.EQ) {
                return 0;
              }
              ;
              if (v instanceof Data_Ordering.LT) {
                return 1;
              }
              ;
              if (v instanceof Data_Ordering.GT) {
                return -1 | 0;
              }
              ;
              throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [v.constructor.name]);
            };
          };
          return function(xs) {
            return function(ys) {
              return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
            };
          };
        }(),
        Eq0: function() {
          return Data_Eq.eqArray(dictOrd.Eq0());
        }
      };
    };
    var ord1Array = {
      compare1: function(dictOrd) {
        return compare(ordArray(dictOrd));
      },
      Eq10: function() {
        return Data_Eq.eq1Array;
      }
    };
    var ordRecordCons = function(dictOrdRecord) {
      return function(dictCons) {
        return function(dictIsSymbol) {
          return function(dictOrd) {
            return {
              compareRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                    var $58 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                    if ($58) {
                      return left;
                    }
                    ;
                    return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                  };
                };
              },
              EqRecord0: function() {
                return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
              }
            };
          };
        };
      };
    };
    var clamp = function(dictOrd) {
      return function(low) {
        return function(hi) {
          return function(x) {
            return min(dictOrd)(hi)(max(dictOrd)(low)(x));
          };
        };
      };
    };
    var between = function(dictOrd) {
      return function(low) {
        return function(hi) {
          return function(x) {
            if (lessThan(dictOrd)(x)(low)) {
              return false;
            }
            ;
            if (greaterThan(dictOrd)(x)(hi)) {
              return false;
            }
            ;
            return true;
          };
        };
      };
    };
    var abs = function(dictOrd) {
      return function(dictRing) {
        return function(x) {
          var $62 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
          if ($62) {
            return x;
          }
          ;
          return Data_Ring.negate(dictRing)(x);
        };
      };
    };
    module2.exports = {
      compare,
      compare1,
      lessThan,
      lessThanOrEq,
      greaterThan,
      greaterThanOrEq,
      comparing,
      min,
      max,
      clamp,
      between,
      abs,
      signum,
      compareRecord,
      ordBoolean,
      ordInt,
      ordNumber,
      ordString,
      ordChar,
      ordUnit,
      ordVoid,
      ordProxy,
      ordProxy2,
      ordProxy3,
      ordArray,
      ordOrdering,
      ord1Array,
      ordRecordNil,
      ordRecordCons,
      ordRecord,
      EQ: Data_Ordering.EQ,
      GT: Data_Ordering.GT,
      LT: Data_Ordering.LT
    };
  }
});

// output/Data.Bounded/index.js
var require_Data13 = __commonJS({
  "output/Data.Bounded/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign9();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Symbol = require_Data5();
    var Data_Unit = require_Data3();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var topRecord = function(dict) {
      return dict.topRecord;
    };
    var top = function(dict) {
      return dict.top;
    };
    var boundedUnit = {
      top: Data_Unit.unit,
      bottom: Data_Unit.unit,
      Ord0: function() {
        return Data_Ord.ordUnit;
      }
    };
    var boundedRecordNil = {
      topRecord: function(v) {
        return function(v1) {
          return {};
        };
      },
      bottomRecord: function(v) {
        return function(v1) {
          return {};
        };
      },
      OrdRecord0: function() {
        return Data_Ord.ordRecordNil;
      }
    };
    var boundedProxy3 = {
      bottom: Type_Proxy.Proxy3.value,
      top: Type_Proxy.Proxy3.value,
      Ord0: function() {
        return Data_Ord.ordProxy3;
      }
    };
    var boundedProxy2 = {
      bottom: Type_Proxy.Proxy2.value,
      top: Type_Proxy.Proxy2.value,
      Ord0: function() {
        return Data_Ord.ordProxy2;
      }
    };
    var boundedProxy = {
      bottom: Type_Proxy["Proxy"].value,
      top: Type_Proxy["Proxy"].value,
      Ord0: function() {
        return Data_Ord.ordProxy;
      }
    };
    var boundedOrdering = {
      top: Data_Ordering.GT.value,
      bottom: Data_Ordering.LT.value,
      Ord0: function() {
        return Data_Ord.ordOrdering;
      }
    };
    var boundedNumber = {
      top: $foreign.topNumber,
      bottom: $foreign.bottomNumber,
      Ord0: function() {
        return Data_Ord.ordNumber;
      }
    };
    var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function() {
        return Data_Ord.ordInt;
      }
    };
    var boundedChar = {
      top: $foreign.topChar,
      bottom: $foreign.bottomChar,
      Ord0: function() {
        return Data_Ord.ordChar;
      }
    };
    var boundedBoolean = {
      top: true,
      bottom: false,
      Ord0: function() {
        return Data_Ord.ordBoolean;
      }
    };
    var bottomRecord = function(dict) {
      return dict.bottomRecord;
    };
    var boundedRecord = function(dictRowToList) {
      return function(dictBoundedRecord) {
        return {
          top: topRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
          bottom: bottomRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
          Ord0: function() {
            return Data_Ord.ordRecord()(dictBoundedRecord.OrdRecord0());
          }
        };
      };
    };
    var bottom = function(dict) {
      return dict.bottom;
    };
    var boundedRecordCons = function(dictIsSymbol) {
      return function(dictBounded) {
        return function(dictCons) {
          return function(dictCons1) {
            return function(dictBoundedRecord) {
              return {
                topRecord: function(v) {
                  return function(rowProxy) {
                    var tail = topRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(rowProxy);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(top(dictBounded))(tail);
                  };
                },
                bottomRecord: function(v) {
                  return function(rowProxy) {
                    var tail = bottomRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(rowProxy);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(bottom(dictBounded))(tail);
                  };
                },
                OrdRecord0: function() {
                  return Data_Ord.ordRecordCons(dictBoundedRecord.OrdRecord0())()(dictIsSymbol)(dictBounded.Ord0());
                }
              };
            };
          };
        };
      };
    };
    module2.exports = {
      bottom,
      top,
      bottomRecord,
      topRecord,
      boundedBoolean,
      boundedInt,
      boundedChar,
      boundedOrdering,
      boundedUnit,
      boundedNumber,
      boundedProxy,
      boundedProxy2,
      boundedProxy3,
      boundedRecordNil,
      boundedRecordCons,
      boundedRecord,
      EQ: Data_Ord.EQ,
      GT: Data_Ord.GT,
      LT: Data_Ord.LT,
      compare: Data_Ord.compare
    };
  }
});

// output/Data.Functor.Invariant/index.js
var require_Data_Functor = __commonJS({
  "output/Data.Functor.Invariant/index.js"(exports2, module2) {
    "use strict";
    var Data_Functor = require_Data4();
    var invariantMultiplicative = {
      imap: function(f) {
        return function(v) {
          return function(v1) {
            return f(v1);
          };
        };
      }
    };
    var invariantEndo = {
      imap: function(ab) {
        return function(ba) {
          return function(v) {
            return function($37) {
              return ab(v(ba($37)));
            };
          };
        };
      }
    };
    var invariantDual = {
      imap: function(f) {
        return function(v) {
          return function(v1) {
            return f(v1);
          };
        };
      }
    };
    var invariantDisj = {
      imap: function(f) {
        return function(v) {
          return function(v1) {
            return f(v1);
          };
        };
      }
    };
    var invariantConj = {
      imap: function(f) {
        return function(v) {
          return function(v1) {
            return f(v1);
          };
        };
      }
    };
    var invariantAdditive = {
      imap: function(f) {
        return function(v) {
          return function(v1) {
            return f(v1);
          };
        };
      }
    };
    var imapF = function(dictFunctor) {
      return function(f) {
        return function(v) {
          return Data_Functor.map(dictFunctor)(f);
        };
      };
    };
    var invariantArray = {
      imap: imapF(Data_Functor.functorArray)
    };
    var invariantFn = {
      imap: imapF(Data_Functor.functorFn)
    };
    var imap = function(dict) {
      return dict.imap;
    };
    var invariantAlternate = function(dictInvariant) {
      return {
        imap: function(f) {
          return function(g) {
            return function(v) {
              return imap(dictInvariant)(f)(g)(v);
            };
          };
        }
      };
    };
    module2.exports = {
      imap,
      imapF,
      invariantFn,
      invariantArray,
      invariantAdditive,
      invariantConj,
      invariantDisj,
      invariantDual,
      invariantEndo,
      invariantMultiplicative,
      invariantAlternate
    };
  }
});

// output/Data.Show/foreign.js
var require_foreign14 = __commonJS({
  "output/Data.Show/foreign.js"(exports2) {
    "use strict";
    exports2.showIntImpl = function(n) {
      return n.toString();
    };
    exports2.showNumberImpl = function(n) {
      var str = n.toString();
      return isNaN(str + ".0") ? str : str + ".0";
    };
    exports2.showCharImpl = function(c) {
      var code = c.charCodeAt(0);
      if (code < 32 || code === 127) {
        switch (c) {
          case "\x07":
            return "'\\a'";
          case "\b":
            return "'\\b'";
          case "\f":
            return "'\\f'";
          case "\n":
            return "'\\n'";
          case "\r":
            return "'\\r'";
          case "	":
            return "'\\t'";
          case "\v":
            return "'\\v'";
        }
        return "'\\" + code.toString(10) + "'";
      }
      return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
    };
    exports2.showStringImpl = function(s) {
      var l = s.length;
      return '"' + s.replace(/[\0-\x1F\x7F"\\]/g, function(c, i) {
        switch (c) {
          case '"':
          case "\\":
            return "\\" + c;
          case "\x07":
            return "\\a";
          case "\b":
            return "\\b";
          case "\f":
            return "\\f";
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "	":
            return "\\t";
          case "\v":
            return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }) + '"';
    };
    exports2.showArrayImpl = function(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return "[" + ss.join(",") + "]";
      };
    };
    exports2.cons = function(head) {
      return function(tail) {
        return [head].concat(tail);
      };
    };
    exports2.join = function(separator) {
      return function(xs) {
        return xs.join(separator);
      };
    };
  }
});

// output/Data.Show/index.js
var require_Data14 = __commonJS({
  "output/Data.Show/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign14();
    var Data_Symbol = require_Data5();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var showString = {
      show: $foreign.showStringImpl
    };
    var showRecordFieldsNil = {
      showRecordFields: function(v) {
        return function(v1) {
          return [];
        };
      }
    };
    var showRecordFields = function(dict) {
      return dict.showRecordFields;
    };
    var showRecord = function(dictRowToList) {
      return function(dictShowRecordFields) {
        return {
          show: function(record) {
            var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
            if (v.length === 0) {
              return "{}";
            }
            ;
            return $foreign.join(" ")(["{", $foreign.join(", ")(v), "}"]);
          }
        };
      };
    };
    var showProxy3 = {
      show: function(v) {
        return "Proxy3";
      }
    };
    var showProxy2 = {
      show: function(v) {
        return "Proxy2";
      }
    };
    var showProxy = {
      show: function(v) {
        return "Proxy";
      }
    };
    var showNumber = {
      show: $foreign.showNumberImpl
    };
    var showInt = {
      show: $foreign.showIntImpl
    };
    var showChar = {
      show: $foreign.showCharImpl
    };
    var showBoolean = {
      show: function(v) {
        if (v) {
          return "true";
        }
        ;
        if (!v) {
          return "false";
        }
        ;
        throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [v.constructor.name]);
      }
    };
    var show = function(dict) {
      return dict.show;
    };
    var showArray = function(dictShow) {
      return {
        show: $foreign.showArrayImpl(show(dictShow))
      };
    };
    var showRecordFieldsCons = function(dictIsSymbol) {
      return function(dictShowRecordFields) {
        return function(dictShow) {
          return {
            showRecordFields: function(v) {
              return function(record) {
                var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var focus = Record_Unsafe.unsafeGet(key)(record);
                return $foreign.cons($foreign.join(": ")([key, show(dictShow)(focus)]))(tail);
              };
            }
          };
        };
      };
    };
    module2.exports = {
      show,
      showRecordFields,
      showBoolean,
      showInt,
      showNumber,
      showChar,
      showString,
      showArray,
      showProxy,
      showProxy2,
      showProxy3,
      showRecord,
      showRecordFieldsNil,
      showRecordFieldsCons
    };
  }
});

// output/Data.Generic.Rep/index.js
var require_Data_Generic = __commonJS({
  "output/Data.Generic.Rep/index.js"(exports2, module2) {
    "use strict";
    var Data_Show = require_Data14();
    var Data_Symbol = require_Data5();
    var Type_Proxy = require_Type();
    var Inl = function() {
      function Inl2(value0) {
        this.value0 = value0;
      }
      ;
      Inl2.create = function(value0) {
        return new Inl2(value0);
      };
      return Inl2;
    }();
    var Inr = function() {
      function Inr2(value0) {
        this.value0 = value0;
      }
      ;
      Inr2.create = function(value0) {
        return new Inr2(value0);
      };
      return Inr2;
    }();
    var Product = function() {
      function Product2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Product2.create = function(value0) {
        return function(value1) {
          return new Product2(value0, value1);
        };
      };
      return Product2;
    }();
    var NoArguments = function() {
      function NoArguments2() {
      }
      ;
      NoArguments2.value = new NoArguments2();
      return NoArguments2;
    }();
    var Constructor = function(x) {
      return x;
    };
    var Argument = function(x) {
      return x;
    };
    var to = function(dict) {
      return dict.to;
    };
    var showSum = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(v) {
            if (v instanceof Inl) {
              return "(Inl " + (Data_Show.show(dictShow)(v.value0) + ")");
            }
            ;
            if (v instanceof Inr) {
              return "(Inr " + (Data_Show.show(dictShow1)(v.value0) + ")");
            }
            ;
            throw new Error("Failed pattern match at Data.Generic.Rep (line 31, column 1 - line 33, column 42): " + [v.constructor.name]);
          }
        };
      };
    };
    var showProduct = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(v) {
            return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          }
        };
      };
    };
    var showNoArguments = {
      show: function(v) {
        return "NoArguments";
      }
    };
    var showConstructor = function(dictIsSymbol) {
      return function(dictShow) {
        return {
          show: function(v) {
            return "(Constructor @" + (Data_Show.show(Data_Show.showString)(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value)) + (" " + (Data_Show.show(dictShow)(v) + ")")));
          }
        };
      };
    };
    var showArgument = function(dictShow) {
      return {
        show: function(v) {
          return "(Argument " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var repOf = function(dictGeneric) {
      return function(v) {
        return Type_Proxy["Proxy"].value;
      };
    };
    var from = function(dict) {
      return dict.from;
    };
    module2.exports = {
      to,
      from,
      repOf,
      NoArguments,
      Inl,
      Inr,
      Product,
      Constructor,
      Argument,
      showNoArguments,
      showSum,
      showProduct,
      showConstructor,
      showArgument
    };
  }
});

// output/Data.Maybe/index.js
var require_Data15 = __commonJS({
  "output/Data.Maybe/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Category = require_Control2();
    var Data_Bounded = require_Data13();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Functor_Invariant = require_Data_Functor();
    var Data_Generic_Rep = require_Data_Generic();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Unit = require_Data3();
    var Nothing = function() {
      function Nothing2() {
      }
      ;
      Nothing2.value = new Nothing2();
      return Nothing2;
    }();
    var Just = function() {
      function Just2(value0) {
        this.value0 = value0;
      }
      ;
      Just2.create = function(value0) {
        return new Just2(value0);
      };
      return Just2;
    }();
    var showMaybe = function(dictShow) {
      return {
        show: function(v) {
          if (v instanceof Just) {
            return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          }
          ;
          if (v instanceof Nothing) {
            return "Nothing";
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [v.constructor.name]);
        }
      };
    };
    var semigroupMaybe = function(dictSemigroup) {
      return {
        append: function(v) {
          return function(v1) {
            if (v instanceof Nothing) {
              return v1;
            }
            ;
            if (v1 instanceof Nothing) {
              return v;
            }
            ;
            if (v instanceof Just && v1 instanceof Just) {
              return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Maybe (line 185, column 1 - line 188, column 43): " + [v.constructor.name, v1.constructor.name]);
          };
        }
      };
    };
    var optional = function(dictAlt) {
      return function(dictApplicative) {
        return function(a) {
          return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Just.create)(a))(Control_Applicative.pure(dictApplicative)(Nothing.value));
        };
      };
    };
    var monoidMaybe = function(dictSemigroup) {
      return {
        mempty: Nothing.value,
        Semigroup0: function() {
          return semigroupMaybe(dictSemigroup);
        }
      };
    };
    var maybe$prime = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v(Data_Unit.unit);
          }
          ;
          if (v2 instanceof Just) {
            return v1(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 243, column 1 - line 243, column 62): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    };
    var maybe = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v;
          }
          ;
          if (v2 instanceof Just) {
            return v1(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    };
    var isNothing = maybe(true)(Data_Function["const"](false));
    var isJust = maybe(false)(Data_Function["const"](true));
    var genericMaybe = {
      to: function(x) {
        if (x instanceof Data_Generic_Rep.Inl) {
          return Nothing.value;
        }
        ;
        if (x instanceof Data_Generic_Rep.Inr) {
          return new Just(x.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 220, column 1 - line 220, column 52): " + [x.constructor.name]);
      },
      from: function(x) {
        if (x instanceof Nothing) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        }
        ;
        if (x instanceof Just) {
          return new Data_Generic_Rep.Inr(x.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 220, column 1 - line 220, column 52): " + [x.constructor.name]);
      }
    };
    var functorMaybe = {
      map: function(v) {
        return function(v1) {
          if (v1 instanceof Just) {
            return new Just(v(v1.value0));
          }
          ;
          return Nothing.value;
        };
      }
    };
    var invariantMaybe = {
      imap: Data_Functor_Invariant.imapF(functorMaybe)
    };
    var fromMaybe$prime = function(a) {
      return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
    };
    var fromMaybe = function(a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
    };
    var fromJust = function(dictPartial) {
      return function(v) {
        if (v instanceof Just) {
          return v.value0;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [v.constructor.name]);
      };
    };
    var extendMaybe = {
      extend: function(v) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return Nothing.value;
          }
          ;
          return new Just(v(v1));
        };
      },
      Functor0: function() {
        return functorMaybe;
      }
    };
    var eqMaybe = function(dictEq) {
      return {
        eq: function(x) {
          return function(y) {
            if (x instanceof Nothing && y instanceof Nothing) {
              return true;
            }
            ;
            if (x instanceof Just && y instanceof Just) {
              return Data_Eq.eq(dictEq)(x.value0)(y.value0);
            }
            ;
            return false;
          };
        }
      };
    };
    var ordMaybe = function(dictOrd) {
      return {
        compare: function(x) {
          return function(y) {
            if (x instanceof Nothing && y instanceof Nothing) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Nothing) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Nothing) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Just && y instanceof Just) {
              return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 51): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqMaybe(dictOrd.Eq0());
        }
      };
    };
    var eq1Maybe = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqMaybe(dictEq));
      }
    };
    var ord1Maybe = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordMaybe(dictOrd));
      },
      Eq10: function() {
        return eq1Maybe;
      }
    };
    var boundedMaybe = function(dictBounded) {
      return {
        top: new Just(Data_Bounded.top(dictBounded)),
        bottom: Nothing.value,
        Ord0: function() {
          return ordMaybe(dictBounded.Ord0());
        }
      };
    };
    var applyMaybe = {
      apply: function(v) {
        return function(v1) {
          if (v instanceof Just) {
            return Data_Functor.map(functorMaybe)(v.value0)(v1);
          }
          ;
          if (v instanceof Nothing) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Functor0: function() {
        return functorMaybe;
      }
    };
    var bindMaybe = {
      bind: function(v) {
        return function(v1) {
          if (v instanceof Just) {
            return v1(v.value0);
          }
          ;
          if (v instanceof Nothing) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Apply0: function() {
        return applyMaybe;
      }
    };
    var applicativeMaybe = {
      pure: Just.create,
      Apply0: function() {
        return applyMaybe;
      }
    };
    var monadMaybe = {
      Applicative0: function() {
        return applicativeMaybe;
      },
      Bind1: function() {
        return bindMaybe;
      }
    };
    var altMaybe = {
      alt: function(v) {
        return function(v1) {
          if (v instanceof Nothing) {
            return v1;
          }
          ;
          return v;
        };
      },
      Functor0: function() {
        return functorMaybe;
      }
    };
    var plusMaybe = {
      empty: Nothing.value,
      Alt0: function() {
        return altMaybe;
      }
    };
    var alternativeMaybe = {
      Applicative0: function() {
        return applicativeMaybe;
      },
      Plus1: function() {
        return plusMaybe;
      }
    };
    var monadZeroMaybe = {
      Monad0: function() {
        return monadMaybe;
      },
      Alternative1: function() {
        return alternativeMaybe;
      },
      MonadZeroIsDeprecated2: function() {
        return void 0;
      }
    };
    module2.exports = {
      Nothing,
      Just,
      maybe,
      "maybe'": maybe$prime,
      fromMaybe,
      "fromMaybe'": fromMaybe$prime,
      isJust,
      isNothing,
      fromJust,
      optional,
      functorMaybe,
      applyMaybe,
      applicativeMaybe,
      altMaybe,
      plusMaybe,
      alternativeMaybe,
      bindMaybe,
      monadMaybe,
      monadZeroMaybe,
      extendMaybe,
      invariantMaybe,
      semigroupMaybe,
      monoidMaybe,
      eqMaybe,
      eq1Maybe,
      ordMaybe,
      ord1Maybe,
      boundedMaybe,
      showMaybe,
      genericMaybe
    };
  }
});

// output/Data.Either/index.js
var require_Data16 = __commonJS({
  "output/Data.Either/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Apply = require_Control3();
    var Data_Bounded = require_Data13();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Functor_Invariant = require_Data_Functor();
    var Data_Generic_Rep = require_Data_Generic();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Unit = require_Data3();
    var Left = function() {
      function Left2(value0) {
        this.value0 = value0;
      }
      ;
      Left2.create = function(value0) {
        return new Left2(value0);
      };
      return Left2;
    }();
    var Right = function() {
      function Right2(value0) {
        this.value0 = value0;
      }
      ;
      Right2.create = function(value0) {
        return new Right2(value0);
      };
      return Right2;
    }();
    var showEither = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(v) {
            if (v instanceof Left) {
              return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
            }
            ;
            if (v instanceof Right) {
              return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
            }
            ;
            throw new Error("Failed pattern match at Data.Either (line 173, column 1 - line 175, column 46): " + [v.constructor.name]);
          }
        };
      };
    };
    var note$prime = function(f) {
      return Data_Maybe["maybe'"](function($105) {
        return Left.create(f($105));
      })(Right.create);
    };
    var note = function(a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
    };
    var genericEither = {
      to: function(x) {
        if (x instanceof Data_Generic_Rep.Inl) {
          return new Left(x.value0);
        }
        ;
        if (x instanceof Data_Generic_Rep.Inr) {
          return new Right(x.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 33, column 1 - line 33, column 56): " + [x.constructor.name]);
      },
      from: function(x) {
        if (x instanceof Left) {
          return new Data_Generic_Rep.Inl(x.value0);
        }
        ;
        if (x instanceof Right) {
          return new Data_Generic_Rep.Inr(x.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 33, column 1 - line 33, column 56): " + [x.constructor.name]);
      }
    };
    var functorEither = {
      map: function(f) {
        return function(m) {
          if (m instanceof Left) {
            return new Left(m.value0);
          }
          ;
          if (m instanceof Right) {
            return new Right(f(m.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [m.constructor.name]);
        };
      }
    };
    var invariantEither = {
      imap: Data_Functor_Invariant.imapF(functorEither)
    };
    var fromRight$prime = function(v) {
      return function(v1) {
        if (v1 instanceof Right) {
          return v1.value0;
        }
        ;
        return v(Data_Unit.unit);
      };
    };
    var fromRight = function(v) {
      return function(v1) {
        if (v1 instanceof Right) {
          return v1.value0;
        }
        ;
        return v;
      };
    };
    var fromLeft$prime = function(v) {
      return function(v1) {
        if (v1 instanceof Left) {
          return v1.value0;
        }
        ;
        return v(Data_Unit.unit);
      };
    };
    var fromLeft = function(v) {
      return function(v1) {
        if (v1 instanceof Left) {
          return v1.value0;
        }
        ;
        return v;
      };
    };
    var extendEither = {
      extend: function(v) {
        return function(v1) {
          if (v1 instanceof Left) {
            return new Left(v1.value0);
          }
          ;
          return new Right(v(v1));
        };
      },
      Functor0: function() {
        return functorEither;
      }
    };
    var eqEither = function(dictEq) {
      return function(dictEq1) {
        return {
          eq: function(x) {
            return function(y) {
              if (x instanceof Left && y instanceof Left) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              }
              ;
              if (x instanceof Right && y instanceof Right) {
                return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
              }
              ;
              return false;
            };
          }
        };
      };
    };
    var ordEither = function(dictOrd) {
      return function(dictOrd1) {
        return {
          compare: function(x) {
            return function(y) {
              if (x instanceof Left && y instanceof Left) {
                return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              }
              ;
              if (x instanceof Left) {
                return Data_Ordering.LT.value;
              }
              ;
              if (y instanceof Left) {
                return Data_Ordering.GT.value;
              }
              ;
              if (x instanceof Right && y instanceof Right) {
                return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.Either (line 189, column 1 - line 189, column 64): " + [x.constructor.name, y.constructor.name]);
            };
          },
          Eq0: function() {
            return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
          }
        };
      };
    };
    var eq1Either = function(dictEq) {
      return {
        eq1: function(dictEq1) {
          return Data_Eq.eq(eqEither(dictEq)(dictEq1));
        }
      };
    };
    var ord1Either = function(dictOrd) {
      return {
        compare1: function(dictOrd1) {
          return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
        },
        Eq10: function() {
          return eq1Either(dictOrd.Eq0());
        }
      };
    };
    var either = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Left) {
            return v(v2.value0);
          }
          ;
          if (v2 instanceof Right) {
            return v1(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    };
    var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
    var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
    var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
    var choose = function(dictAlt) {
      return function(a) {
        return function(b) {
          return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
        };
      };
    };
    var boundedEither = function(dictBounded) {
      return function(dictBounded1) {
        return {
          top: new Right(Data_Bounded.top(dictBounded1)),
          bottom: new Left(Data_Bounded.bottom(dictBounded)),
          Ord0: function() {
            return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
          }
        };
      };
    };
    var applyEither = {
      apply: function(v) {
        return function(v1) {
          if (v instanceof Left) {
            return new Left(v.value0);
          }
          ;
          if (v instanceof Right) {
            return Data_Functor.map(functorEither)(v.value0)(v1);
          }
          ;
          throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Functor0: function() {
        return functorEither;
      }
    };
    var bindEither = {
      bind: either(function(e) {
        return function(v) {
          return new Left(e);
        };
      })(function(a) {
        return function(f) {
          return f(a);
        };
      }),
      Apply0: function() {
        return applyEither;
      }
    };
    var semigroupEither = function(dictSemigroup) {
      return {
        append: function(x) {
          return function(y) {
            return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
          };
        }
      };
    };
    var applicativeEither = {
      pure: Right.create,
      Apply0: function() {
        return applyEither;
      }
    };
    var monadEither = {
      Applicative0: function() {
        return applicativeEither;
      },
      Bind1: function() {
        return bindEither;
      }
    };
    var altEither = {
      alt: function(v) {
        return function(v1) {
          if (v instanceof Left) {
            return v1;
          }
          ;
          return v;
        };
      },
      Functor0: function() {
        return functorEither;
      }
    };
    module2.exports = {
      Left,
      Right,
      either,
      choose,
      isLeft,
      isRight,
      fromLeft,
      "fromLeft'": fromLeft$prime,
      fromRight,
      "fromRight'": fromRight$prime,
      note,
      "note'": note$prime,
      hush,
      functorEither,
      genericEither,
      invariantEither,
      applyEither,
      applicativeEither,
      altEither,
      bindEither,
      monadEither,
      extendEither,
      showEither,
      eqEither,
      eq1Either,
      ordEither,
      ord1Either,
      boundedEither,
      semigroupEither
    };
  }
});

// output/Effect/foreign.js
var require_foreign15 = __commonJS({
  "output/Effect/foreign.js"(exports2) {
    "use strict";
    exports2.pureE = function(a) {
      return function() {
        return a;
      };
    };
    exports2.bindE = function(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    };
    exports2.untilE = function(f) {
      return function() {
        while (!f())
          ;
      };
    };
    exports2.whileE = function(f) {
      return function(a) {
        return function() {
          while (f()) {
            a();
          }
        };
      };
    };
    exports2.forE = function(lo) {
      return function(hi) {
        return function(f) {
          return function() {
            for (var i = lo; i < hi; i++) {
              f(i)();
            }
          };
        };
      };
    };
    exports2.foreachE = function(as) {
      return function(f) {
        return function() {
          for (var i = 0, l = as.length; i < l; i++) {
            f(as[i])();
          }
        };
      };
    };
  }
});

// output/Control.Monad/index.js
var require_Control7 = __commonJS({
  "output/Control.Monad/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Functor = require_Data4();
    var whenM = function(dictMonad) {
      return function(mb) {
        return function(m) {
          return Control_Bind.bind(dictMonad.Bind1())(mb)(function(b) {
            return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
          });
        };
      };
    };
    var unlessM = function(dictMonad) {
      return function(mb) {
        return function(m) {
          return Control_Bind.bind(dictMonad.Bind1())(mb)(function(b) {
            return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
          });
        };
      };
    };
    var monadProxy = {
      Applicative0: function() {
        return Control_Applicative.applicativeProxy;
      },
      Bind1: function() {
        return Control_Bind.bindProxy;
      }
    };
    var monadFn = {
      Applicative0: function() {
        return Control_Applicative.applicativeFn;
      },
      Bind1: function() {
        return Control_Bind.bindFn;
      }
    };
    var monadArray = {
      Applicative0: function() {
        return Control_Applicative.applicativeArray;
      },
      Bind1: function() {
        return Control_Bind.bindArray;
      }
    };
    var liftM1 = function(dictMonad) {
      return function(f) {
        return function(a) {
          return Control_Bind.bind(dictMonad.Bind1())(a)(function(a$prime) {
            return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
          });
        };
      };
    };
    var ap = function(dictMonad) {
      return function(f) {
        return function(a) {
          return Control_Bind.bind(dictMonad.Bind1())(f)(function(f$prime) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function(a$prime) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
            });
          });
        };
      };
    };
    module2.exports = {
      liftM1,
      whenM,
      unlessM,
      ap,
      monadFn,
      monadArray,
      monadProxy,
      liftA1: Control_Applicative.liftA1,
      pure: Control_Applicative.pure,
      unless: Control_Applicative.unless,
      when: Control_Applicative.when,
      apply: Control_Apply.apply,
      bind: Control_Bind.bind,
      ifM: Control_Bind.ifM,
      join: Control_Bind.join,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Data.EuclideanRing/foreign.js
var require_foreign16 = __commonJS({
  "output/Data.EuclideanRing/foreign.js"(exports2) {
    "use strict";
    exports2.intDegree = function(x) {
      return Math.min(Math.abs(x), 2147483647);
    };
    exports2.intDiv = function(x) {
      return function(y) {
        if (y === 0)
          return 0;
        return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
      };
    };
    exports2.intMod = function(x) {
      return function(y) {
        if (y === 0)
          return 0;
        var yy = Math.abs(y);
        return (x % yy + yy) % yy;
      };
    };
    exports2.numDiv = function(n1) {
      return function(n2) {
        return n1 / n2;
      };
    };
  }
});

// output/Data.CommutativeRing/index.js
var require_Data17 = __commonJS({
  "output/Data.CommutativeRing/index.js"(exports2, module2) {
    "use strict";
    var Data_Ring = require_Data11();
    var Data_Semiring = require_Data10();
    var commutativeRingUnit = {
      Ring0: function() {
        return Data_Ring.ringUnit;
      }
    };
    var commutativeRingRecordNil = {
      RingRecord0: function() {
        return Data_Ring.ringRecordNil;
      }
    };
    var commutativeRingRecordCons = function(dictIsSymbol) {
      return function(dictCons) {
        return function(dictCommutativeRingRecord) {
          return function(dictCommutativeRing) {
            return {
              RingRecord0: function() {
                return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
              }
            };
          };
        };
      };
    };
    var commutativeRingRecord = function(dictRowToList) {
      return function(dictCommutativeRingRecord) {
        return {
          Ring0: function() {
            return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
          }
        };
      };
    };
    var commutativeRingProxy3 = {
      Ring0: function() {
        return Data_Ring.ringProxy3;
      }
    };
    var commutativeRingProxy2 = {
      Ring0: function() {
        return Data_Ring.ringProxy2;
      }
    };
    var commutativeRingProxy = {
      Ring0: function() {
        return Data_Ring.ringProxy;
      }
    };
    var commutativeRingNumber = {
      Ring0: function() {
        return Data_Ring.ringNumber;
      }
    };
    var commutativeRingInt = {
      Ring0: function() {
        return Data_Ring.ringInt;
      }
    };
    var commutativeRingFn = function(dictCommutativeRing) {
      return {
        Ring0: function() {
          return Data_Ring.ringFn(dictCommutativeRing.Ring0());
        }
      };
    };
    module2.exports = {
      commutativeRingInt,
      commutativeRingNumber,
      commutativeRingUnit,
      commutativeRingFn,
      commutativeRingRecord,
      commutativeRingProxy,
      commutativeRingProxy2,
      commutativeRingProxy3,
      commutativeRingRecordNil,
      commutativeRingRecordCons,
      add: Data_Semiring.add,
      mul: Data_Semiring.mul,
      one: Data_Semiring.one,
      zero: Data_Semiring.zero
    };
  }
});

// output/Data.EuclideanRing/index.js
var require_Data18 = __commonJS({
  "output/Data.EuclideanRing/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign16();
    var Data_CommutativeRing = require_Data17();
    var Data_Eq = require_Data8();
    var Data_Ring = require_Data11();
    var Data_Semiring = require_Data10();
    var mod = function(dict) {
      return dict.mod;
    };
    var gcd = function($copy_dictEq) {
      return function($copy_dictEuclideanRing) {
        return function($copy_a) {
          return function($copy_b) {
            var $tco_var_dictEq = $copy_dictEq;
            var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
            var $tco_var_a = $copy_a;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(dictEq, dictEuclideanRing, a, b) {
              var $8 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));
              if ($8) {
                $tco_done = true;
                return a;
              }
              ;
              $tco_var_dictEq = dictEq;
              $tco_var_dictEuclideanRing = dictEuclideanRing;
              $tco_var_a = b;
              $copy_b = mod(dictEuclideanRing)(a)(b);
              return;
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
            }
            ;
            return $tco_result;
          };
        };
      };
    };
    var euclideanRingNumber = {
      degree: function(v) {
        return 1;
      },
      div: $foreign.numDiv,
      mod: function(v) {
        return function(v1) {
          return 0;
        };
      },
      CommutativeRing0: function() {
        return Data_CommutativeRing.commutativeRingNumber;
      }
    };
    var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function() {
        return Data_CommutativeRing.commutativeRingInt;
      }
    };
    var div = function(dict) {
      return dict.div;
    };
    var lcm = function(dictEq) {
      return function(dictEuclideanRing) {
        return function(a) {
          return function(b) {
            var $10 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));
            if ($10) {
              return Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0());
            }
            ;
            return div(dictEuclideanRing)(Data_Semiring.mul(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
          };
        };
      };
    };
    var degree = function(dict) {
      return dict.degree;
    };
    module2.exports = {
      degree,
      div,
      mod,
      gcd,
      lcm,
      euclideanRingInt,
      euclideanRingNumber,
      sub: Data_Ring.sub,
      add: Data_Semiring.add,
      mul: Data_Semiring.mul,
      one: Data_Semiring.one,
      zero: Data_Semiring.zero
    };
  }
});

// output/Data.Monoid/index.js
var require_Data19 = __commonJS({
  "output/Data.Monoid/index.js"(exports2, module2) {
    "use strict";
    var Data_Boolean = require_Data();
    var Data_EuclideanRing = require_Data18();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Symbol = require_Data5();
    var Data_Unit = require_Data3();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function() {
        return Data_Semigroup.semigroupUnit;
      }
    };
    var monoidString = {
      mempty: "",
      Semigroup0: function() {
        return Data_Semigroup.semigroupString;
      }
    };
    var monoidRecordNil = {
      memptyRecord: function(v) {
        return {};
      },
      SemigroupRecord0: function() {
        return Data_Semigroup.semigroupRecordNil;
      }
    };
    var monoidOrdering = {
      mempty: Data_Ordering.EQ.value,
      Semigroup0: function() {
        return Data_Ordering.semigroupOrdering;
      }
    };
    var monoidArray = {
      mempty: [],
      Semigroup0: function() {
        return Data_Semigroup.semigroupArray;
      }
    };
    var memptyRecord = function(dict) {
      return dict.memptyRecord;
    };
    var monoidRecord = function(dictRowToList) {
      return function(dictMonoidRecord) {
        return {
          mempty: memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value),
          Semigroup0: function() {
            return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
          }
        };
      };
    };
    var mempty = function(dict) {
      return dict.mempty;
    };
    var monoidFn = function(dictMonoid) {
      return {
        mempty: function(v) {
          return mempty(dictMonoid);
        },
        Semigroup0: function() {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidRecordCons = function(dictIsSymbol) {
      return function(dictMonoid) {
        return function(dictCons) {
          return function(dictMonoidRecord) {
            return {
              memptyRecord: function(v) {
                var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                var insert = Record_Unsafe.unsafeSet(key);
                return insert(mempty(dictMonoid))(tail);
              },
              SemigroupRecord0: function() {
                return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
              }
            };
          };
        };
      };
    };
    var power = function(dictMonoid) {
      return function(x) {
        var go = function(p) {
          if (p <= 0) {
            return mempty(dictMonoid);
          }
          ;
          if (p === 1) {
            return x;
          }
          ;
          if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
            var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
            return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
          }
          ;
          if (Data_Boolean.otherwise) {
            var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
            return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
          }
          ;
          throw new Error("Failed pattern match at Data.Monoid (line 86, column 3 - line 86, column 17): " + [p.constructor.name]);
        };
        return go;
      };
    };
    var guard = function(dictMonoid) {
      return function(v) {
        return function(v1) {
          if (v) {
            return v1;
          }
          ;
          if (!v) {
            return mempty(dictMonoid);
          }
          ;
          throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    };
    module2.exports = {
      mempty,
      power,
      guard,
      memptyRecord,
      monoidUnit,
      monoidOrdering,
      monoidFn,
      monoidString,
      monoidArray,
      monoidRecord,
      monoidRecordNil,
      monoidRecordCons
    };
  }
});

// output/Effect/index.js
var require_Effect = __commonJS({
  "output/Effect/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign15();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Monad = require_Control7();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var monadEffect = {
      Applicative0: function() {
        return applicativeEffect;
      },
      Bind1: function() {
        return bindEffect;
      }
    };
    var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function() {
        return applyEffect;
      }
    };
    var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function() {
        return functorEffect;
      }
    };
    var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function() {
        return applyEffect;
      }
    };
    var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
    };
    var semigroupEffect = function(dictSemigroup) {
      return {
        append: Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup))
      };
    };
    var monoidEffect = function(dictMonoid) {
      return {
        mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),
        Semigroup0: function() {
          return semigroupEffect(dictMonoid.Semigroup0());
        }
      };
    };
    module2.exports = {
      functorEffect,
      applyEffect,
      applicativeEffect,
      bindEffect,
      monadEffect,
      semigroupEffect,
      monoidEffect,
      untilE: $foreign.untilE,
      whileE: $foreign.whileE,
      forE: $foreign.forE,
      foreachE: $foreign.foreachE
    };
  }
});

// output/Effect.Exception/foreign.js
var require_foreign17 = __commonJS({
  "output/Effect.Exception/foreign.js"(exports2) {
    "use strict";
    exports2.showErrorImpl = function(err) {
      return err.stack || err.toString();
    };
    exports2.error = function(msg) {
      return new Error(msg);
    };
    exports2.message = function(e) {
      return e.message;
    };
    exports2.name = function(e) {
      return e.name || "Error";
    };
    exports2.stackImpl = function(just) {
      return function(nothing) {
        return function(e) {
          return e.stack ? just(e.stack) : nothing;
        };
      };
    };
    exports2.throwException = function(e) {
      return function() {
        throw e;
      };
    };
    exports2.catchException = function(c) {
      return function(t) {
        return function() {
          try {
            return t();
          } catch (e) {
            if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
              return c(e)();
            } else {
              return c(new Error(e.toString()))();
            }
          }
        };
      };
    };
  }
});

// output/Effect.Exception/index.js
var require_Effect2 = __commonJS({
  "output/Effect.Exception/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign17();
    var Control_Applicative = require_Control4();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Effect = require_Effect();
    var $$try = function(action) {
      return $foreign.catchException(function() {
        var $0 = Control_Applicative.pure(Effect.applicativeEffect);
        return function($1) {
          return $0(Data_Either.Left.create($1));
        };
      }())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
    };
    var $$throw = function($2) {
      return $foreign.throwException($foreign.error($2));
    };
    var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var showError = {
      show: $foreign.showErrorImpl
    };
    module2.exports = {
      stack,
      "throw": $$throw,
      "try": $$try,
      showError,
      error: $foreign.error,
      message: $foreign.message,
      name: $foreign.name,
      throwException: $foreign.throwException,
      catchException: $foreign.catchException
    };
  }
});

// output/Control.Monad.Error.Class/index.js
var require_Control_Monad_Error = __commonJS({
  "output/Control.Monad.Error.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Exception = require_Effect2();
    var throwError = function(dict) {
      return dict.throwError;
    };
    var monadThrowMaybe = {
      throwError: Data_Function["const"](Data_Maybe.Nothing.value),
      Monad0: function() {
        return Data_Maybe.monadMaybe;
      }
    };
    var monadThrowEither = {
      throwError: Data_Either.Left.create,
      Monad0: function() {
        return Data_Either.monadEither;
      }
    };
    var monadThrowEffect = {
      throwError: Effect_Exception.throwException,
      Monad0: function() {
        return Effect.monadEffect;
      }
    };
    var monadErrorMaybe = {
      catchError: function(v) {
        return function(v1) {
          if (v instanceof Data_Maybe.Nothing) {
            return v1(Data_Unit.unit);
          }
          ;
          if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      MonadThrow0: function() {
        return monadThrowMaybe;
      }
    };
    var monadErrorEither = {
      catchError: function(v) {
        return function(v1) {
          if (v instanceof Data_Either.Left) {
            return v1(v.value0);
          }
          ;
          if (v instanceof Data_Either.Right) {
            return new Data_Either.Right(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      MonadThrow0: function() {
        return monadThrowEither;
      }
    };
    var monadErrorEffect = {
      catchError: Data_Function.flip(Effect_Exception.catchException),
      MonadThrow0: function() {
        return monadThrowEffect;
      }
    };
    var catchError = function(dict) {
      return dict.catchError;
    };
    var catchJust = function(dictMonadError) {
      return function(p) {
        return function(act) {
          return function(handler) {
            var handle = function(e) {
              var v = p(e);
              if (v instanceof Data_Maybe.Nothing) {
                return throwError(dictMonadError.MonadThrow0())(e);
              }
              ;
              if (v instanceof Data_Maybe.Just) {
                return handler(v.value0);
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [v.constructor.name]);
            };
            return catchError(dictMonadError)(act)(handle);
          };
        };
      };
    };
    var $$try = function(dictMonadError) {
      return function(a) {
        return catchError(dictMonadError)(Data_Functor.map(dictMonadError.MonadThrow0().Monad0().Bind1().Apply0().Functor0())(Data_Either.Right.create)(a))(function() {
          var $19 = Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0());
          return function($20) {
            return $19(Data_Either.Left.create($20));
          };
        }());
      };
    };
    var withResource = function(dictMonadError) {
      return function(acquire) {
        return function(release) {
          return function(kleisli) {
            return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())(acquire)(function(resource) {
              return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())($$try(dictMonadError)(kleisli(resource)))(function(result) {
                return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadError.MonadThrow0().Monad0().Bind1())(release(resource))(function() {
                  return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0()))(result);
                });
              });
            });
          };
        };
      };
    };
    module2.exports = {
      catchError,
      throwError,
      catchJust,
      "try": $$try,
      withResource,
      monadThrowEither,
      monadErrorEither,
      monadThrowMaybe,
      monadErrorMaybe,
      monadThrowEffect,
      monadErrorEffect
    };
  }
});

// output/Control.Monad.Cont.Class/index.js
var require_Control_Monad_Cont = __commonJS({
  "output/Control.Monad.Cont.Class/index.js"(exports2, module2) {
    "use strict";
    var callCC = function(dict) {
      return dict.callCC;
    };
    module2.exports = {
      callCC
    };
  }
});

// output/Control.Monad.Reader.Class/index.js
var require_Control_Monad_Reader = __commonJS({
  "output/Control.Monad.Reader.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Control_Monad = require_Control7();
    var Control_Semigroupoid = require_Control();
    var Data_Functor = require_Data4();
    var monadAskFun = {
      ask: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function() {
        return Control_Monad.monadFn;
      }
    };
    var monadReaderFun = {
      local: Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn),
      MonadAsk0: function() {
        return monadAskFun;
      }
    };
    var local = function(dict) {
      return dict.local;
    };
    var ask = function(dict) {
      return dict.ask;
    };
    var asks = function(dictMonadAsk) {
      return function(f) {
        return Data_Functor.map(dictMonadAsk.Monad0().Bind1().Apply0().Functor0())(f)(ask(dictMonadAsk));
      };
    };
    module2.exports = {
      ask,
      local,
      asks,
      monadAskFun,
      monadReaderFun
    };
  }
});

// output/Data.Identity/index.js
var require_Data20 = __commonJS({
  "output/Data.Identity/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_Functor_Invariant = require_Data_Functor();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Identity = function(x) {
      return x;
    };
    var showIdentity = function(dictShow) {
      return {
        show: function(v) {
          return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semiringIdentity = function(dictSemiring) {
      return dictSemiring;
    };
    var semigroupIdenity = function(dictSemigroup) {
      return dictSemigroup;
    };
    var ringIdentity = function(dictRing) {
      return dictRing;
    };
    var ordIdentity = function(dictOrd) {
      return dictOrd;
    };
    var newtypeIdentity = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidIdentity = function(dictMonoid) {
      return dictMonoid;
    };
    var lazyIdentity = function(dictLazy) {
      return dictLazy;
    };
    var heytingAlgebraIdentity = function(dictHeytingAlgebra) {
      return dictHeytingAlgebra;
    };
    var functorIdentity = {
      map: function(f) {
        return function(m) {
          return f(m);
        };
      }
    };
    var invariantIdentity = {
      imap: Data_Functor_Invariant.imapF(functorIdentity)
    };
    var extendIdentity = {
      extend: function(f) {
        return function(m) {
          return f(m);
        };
      },
      Functor0: function() {
        return functorIdentity;
      }
    };
    var euclideanRingIdentity = function(dictEuclideanRing) {
      return dictEuclideanRing;
    };
    var eqIdentity = function(dictEq) {
      return dictEq;
    };
    var eq1Identity = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqIdentity(dictEq));
      }
    };
    var ord1Identity = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordIdentity(dictOrd));
      },
      Eq10: function() {
        return eq1Identity;
      }
    };
    var comonadIdentity = {
      extract: function(v) {
        return v;
      },
      Extend0: function() {
        return extendIdentity;
      }
    };
    var commutativeRingIdentity = function(dictCommutativeRing) {
      return dictCommutativeRing;
    };
    var boundedIdentity = function(dictBounded) {
      return dictBounded;
    };
    var booleanAlgebraIdentity = function(dictBooleanAlgebra) {
      return dictBooleanAlgebra;
    };
    var applyIdentity = {
      apply: function(v) {
        return function(v1) {
          return v(v1);
        };
      },
      Functor0: function() {
        return functorIdentity;
      }
    };
    var bindIdentity = {
      bind: function(v) {
        return function(f) {
          return f(v);
        };
      },
      Apply0: function() {
        return applyIdentity;
      }
    };
    var applicativeIdentity = {
      pure: Identity,
      Apply0: function() {
        return applyIdentity;
      }
    };
    var monadIdentity = {
      Applicative0: function() {
        return applicativeIdentity;
      },
      Bind1: function() {
        return bindIdentity;
      }
    };
    var altIdentity = {
      alt: function(x) {
        return function(v) {
          return x;
        };
      },
      Functor0: function() {
        return functorIdentity;
      }
    };
    module2.exports = {
      Identity,
      newtypeIdentity,
      eqIdentity,
      ordIdentity,
      boundedIdentity,
      heytingAlgebraIdentity,
      booleanAlgebraIdentity,
      semigroupIdenity,
      monoidIdentity,
      semiringIdentity,
      euclideanRingIdentity,
      ringIdentity,
      commutativeRingIdentity,
      lazyIdentity,
      showIdentity,
      eq1Identity,
      ord1Identity,
      functorIdentity,
      invariantIdentity,
      altIdentity,
      applyIdentity,
      applicativeIdentity,
      bindIdentity,
      monadIdentity,
      extendIdentity,
      comonadIdentity
    };
  }
});

// output/Effect.Ref/foreign.js
var require_foreign18 = __commonJS({
  "output/Effect.Ref/foreign.js"(exports2) {
    "use strict";
    exports2.new = function(val) {
      return function() {
        return { value: val };
      };
    };
    exports2.newWithSelf = function(f) {
      return function() {
        var ref = { value: null };
        ref.value = f(ref);
        return ref;
      };
    };
    exports2.read = function(ref) {
      return function() {
        return ref.value;
      };
    };
    exports2.modifyImpl = function(f) {
      return function(ref) {
        return function() {
          var t = f(ref.value);
          ref.value = t.state;
          return t.value;
        };
      };
    };
    exports2.write = function(val) {
      return function(ref) {
        return function() {
          ref.value = val;
        };
      };
    };
  }
});

// output/Effect.Ref/index.js
var require_Effect3 = __commonJS({
  "output/Effect.Ref/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign18();
    var Data_Functor = require_Data4();
    var Effect = require_Effect();
    var modify$prime = $foreign.modifyImpl;
    var modify = function(f) {
      return modify$prime(function(s) {
        var s$prime = f(s);
        return {
          state: s$prime,
          value: s$prime
        };
      });
    };
    var modify_ = function(f) {
      return function(s) {
        return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
    };
    module2.exports = {
      "modify'": modify$prime,
      modify,
      modify_,
      "new": $foreign["new"],
      newWithSelf: $foreign.newWithSelf,
      read: $foreign.read,
      write: $foreign.write
    };
  }
});

// output/Control.Monad.Rec.Class/index.js
var require_Control_Monad_Rec = __commonJS({
  "output/Control.Monad.Rec.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Bind = require_Control5();
    var Control_Monad = require_Control7();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Ref = require_Effect3();
    var Loop = function() {
      function Loop2(value0) {
        this.value0 = value0;
      }
      ;
      Loop2.create = function(value0) {
        return new Loop2(value0);
      };
      return Loop2;
    }();
    var Done = function() {
      function Done2(value0) {
        this.value0 = value0;
      }
      ;
      Done2.create = function(value0) {
        return new Done2(value0);
      };
      return Done2;
    }();
    var tailRecM = function(dict) {
      return dict.tailRecM;
    };
    var tailRecM2 = function(dictMonadRec) {
      return function(f) {
        return function(a) {
          return function(b) {
            return tailRecM(dictMonadRec)(function(o) {
              return f(o.a)(o.b);
            })({
              a,
              b
            });
          };
        };
      };
    };
    var tailRecM3 = function(dictMonadRec) {
      return function(f) {
        return function(a) {
          return function(b) {
            return function(c) {
              return tailRecM(dictMonadRec)(function(o) {
                return f(o.a)(o.b)(o.c);
              })({
                a,
                b,
                c
              });
            };
          };
        };
      };
    };
    var untilJust = function(dictMonadRec) {
      return function(m) {
        return tailRecM(dictMonadRec)(function(v) {
          return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function(v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
              return new Loop(Data_Unit.unit);
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new Done(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 155, column 43 - line 157, column 19): " + [v1.constructor.name]);
          });
        })(Data_Unit.unit);
      };
    };
    var whileJust = function(dictMonoid) {
      return function(dictMonadRec) {
        return function(m) {
          return tailRecM(dictMonadRec)(function(v) {
            return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function(v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                return new Done(v);
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                return Loop.create(Data_Semigroup.append(dictMonoid.Semigroup0())(v)(v1.value0));
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 148, column 45 - line 150, column 26): " + [v1.constructor.name]);
            });
          })(Data_Monoid.mempty(dictMonoid));
        };
      };
    };
    var tailRec = function(f) {
      var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Loop) {
            $copy_v = f(v.value0);
            return;
          }
          ;
          if (v instanceof Done) {
            $tco_done = true;
            return v.value0;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return function($59) {
        return go(f($59));
      };
    };
    var monadRecMaybe = {
      tailRecM: function(f) {
        return function(a0) {
          var g = function(v) {
            if (v instanceof Data_Maybe.Nothing) {
              return new Done(Data_Maybe.Nothing.value);
            }
            ;
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
              return new Loop(f(v.value0.value0));
            }
            ;
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
              return new Done(new Data_Maybe.Just(v.value0.value0));
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 129, column 7 - line 129, column 31): " + [v.constructor.name]);
          };
          return tailRec(g)(f(a0));
        };
      },
      Monad0: function() {
        return Data_Maybe.monadMaybe;
      }
    };
    var monadRecIdentity = {
      tailRecM: function(f) {
        var runIdentity = function(v) {
          return v;
        };
        var $60 = tailRec(function($62) {
          return runIdentity(f($62));
        });
        return function($61) {
          return Data_Identity.Identity($60($61));
        };
      },
      Monad0: function() {
        return Data_Identity.monadIdentity;
      }
    };
    var monadRecFunction = {
      tailRecM: function(f) {
        return function(a0) {
          return function(e) {
            return tailRec(function(a) {
              return f(a)(e);
            })(a0);
          };
        };
      },
      Monad0: function() {
        return Control_Monad.monadFn;
      }
    };
    var monadRecEither = {
      tailRecM: function(f) {
        return function(a0) {
          var g = function(v) {
            if (v instanceof Data_Either.Left) {
              return new Done(new Data_Either.Left(v.value0));
            }
            ;
            if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
              return new Loop(f(v.value0.value0));
            }
            ;
            if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
              return new Done(new Data_Either.Right(v.value0.value0));
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [v.constructor.name]);
          };
          return tailRec(g)(f(a0));
        };
      },
      Monad0: function() {
        return Data_Either.monadEither;
      }
    };
    var monadRecEffect = {
      tailRecM: function(f) {
        return function(a) {
          var fromDone = function(v) {
            if (v instanceof Done) {
              return v.value0;
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [v.constructor.name]);
          };
          return function __do() {
            var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
            (function() {
              while (!function __do2() {
                var v = Effect_Ref.read(r)();
                if (v instanceof Loop) {
                  var e = f(v.value0)();
                  Effect_Ref.write(e)(r)();
                  return false;
                }
                ;
                if (v instanceof Done) {
                  return true;
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [v.constructor.name]);
              }()) {
              }
              ;
              return {};
            })();
            return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
          };
        };
      },
      Monad0: function() {
        return Effect.monadEffect;
      }
    };
    var functorStep = {
      map: function(f) {
        return function(m) {
          if (m instanceof Loop) {
            return new Loop(m.value0);
          }
          ;
          if (m instanceof Done) {
            return new Done(f(m.value0));
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 27, column 48): " + [m.constructor.name]);
        };
      }
    };
    var forever = function(dictMonadRec) {
      return function(ma) {
        return tailRecM(dictMonadRec)(function(u) {
          return Data_Functor.voidRight(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(new Loop(u))(ma);
        })(Data_Unit.unit);
      };
    };
    var bifunctorStep = {
      bimap: function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Loop) {
              return new Loop(v(v2.value0));
            }
            ;
            if (v2 instanceof Done) {
              return new Done(v1(v2.value0));
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      }
    };
    module2.exports = {
      Loop,
      Done,
      tailRec,
      tailRecM,
      tailRecM2,
      tailRecM3,
      forever,
      whileJust,
      untilJust,
      functorStep,
      bifunctorStep,
      monadRecIdentity,
      monadRecEffect,
      monadRecFunction,
      monadRecEither,
      monadRecMaybe
    };
  }
});

// output/Control.Lazy/index.js
var require_Control8 = __commonJS({
  "output/Control.Lazy/index.js"(exports2, module2) {
    "use strict";
    var Data_Unit = require_Data3();
    var lazyUnit = {
      defer: function(v) {
        return Data_Unit.unit;
      }
    };
    var lazyFn = {
      defer: function(f) {
        return function(x) {
          return f(Data_Unit.unit)(x);
        };
      }
    };
    var defer = function(dict) {
      return dict.defer;
    };
    var fix = function(dictLazy) {
      return function(f) {
        var go = defer(dictLazy)(function(v) {
          return f(go);
        });
        return go;
      };
    };
    module2.exports = {
      defer,
      fix,
      lazyFn,
      lazyUnit
    };
  }
});

// output/Data.HeytingAlgebra/foreign.js
var require_foreign19 = __commonJS({
  "output/Data.HeytingAlgebra/foreign.js"(exports2) {
    "use strict";
    exports2.boolConj = function(b1) {
      return function(b2) {
        return b1 && b2;
      };
    };
    exports2.boolDisj = function(b1) {
      return function(b2) {
        return b1 || b2;
      };
    };
    exports2.boolNot = function(b) {
      return !b;
    };
  }
});

// output/Data.HeytingAlgebra/index.js
var require_Data21 = __commonJS({
  "output/Data.HeytingAlgebra/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign19();
    var Data_Symbol = require_Data5();
    var Data_Unit = require_Data3();
    var Record_Unsafe = require_Record();
    var Type_Proxy = require_Type();
    var ttRecord = function(dict) {
      return dict.ttRecord;
    };
    var tt = function(dict) {
      return dict.tt;
    };
    var notRecord = function(dict) {
      return dict.notRecord;
    };
    var not = function(dict) {
      return dict.not;
    };
    var impliesRecord = function(dict) {
      return dict.impliesRecord;
    };
    var implies = function(dict) {
      return dict.implies;
    };
    var heytingAlgebraUnit = {
      ff: Data_Unit.unit,
      tt: Data_Unit.unit,
      implies: function(v) {
        return function(v1) {
          return Data_Unit.unit;
        };
      },
      conj: function(v) {
        return function(v1) {
          return Data_Unit.unit;
        };
      },
      disj: function(v) {
        return function(v1) {
          return Data_Unit.unit;
        };
      },
      not: function(v) {
        return Data_Unit.unit;
      }
    };
    var heytingAlgebraRecordNil = {
      conjRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return {};
          };
        };
      },
      disjRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return {};
          };
        };
      },
      ffRecord: function(v) {
        return function(v1) {
          return {};
        };
      },
      impliesRecord: function(v) {
        return function(v1) {
          return function(v2) {
            return {};
          };
        };
      },
      notRecord: function(v) {
        return function(v1) {
          return {};
        };
      },
      ttRecord: function(v) {
        return function(v1) {
          return {};
        };
      }
    };
    var heytingAlgebraProxy3 = {
      conj: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy3.value;
        };
      },
      disj: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy3.value;
        };
      },
      implies: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy3.value;
        };
      },
      ff: Type_Proxy.Proxy3.value,
      not: function(v) {
        return Type_Proxy.Proxy3.value;
      },
      tt: Type_Proxy.Proxy3.value
    };
    var heytingAlgebraProxy2 = {
      conj: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy2.value;
        };
      },
      disj: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy2.value;
        };
      },
      implies: function(v) {
        return function(v1) {
          return Type_Proxy.Proxy2.value;
        };
      },
      ff: Type_Proxy.Proxy2.value,
      not: function(v) {
        return Type_Proxy.Proxy2.value;
      },
      tt: Type_Proxy.Proxy2.value
    };
    var heytingAlgebraProxy = {
      conj: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      },
      disj: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      },
      implies: function(v) {
        return function(v1) {
          return Type_Proxy["Proxy"].value;
        };
      },
      ff: Type_Proxy["Proxy"].value,
      not: function(v) {
        return Type_Proxy["Proxy"].value;
      },
      tt: Type_Proxy["Proxy"].value
    };
    var ffRecord = function(dict) {
      return dict.ffRecord;
    };
    var ff = function(dict) {
      return dict.ff;
    };
    var disjRecord = function(dict) {
      return dict.disjRecord;
    };
    var disj = function(dict) {
      return dict.disj;
    };
    var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function(a) {
        return function(b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
        };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
    };
    var conjRecord = function(dict) {
      return dict.conjRecord;
    };
    var heytingAlgebraRecord = function(dictRowToList) {
      return function(dictHeytingAlgebraRecord) {
        return {
          ff: ffRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
          tt: ttRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
          conj: conjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value),
          disj: disjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value),
          implies: impliesRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value),
          not: notRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)
        };
      };
    };
    var conj = function(dict) {
      return dict.conj;
    };
    var heytingAlgebraFunction = function(dictHeytingAlgebra) {
      return {
        ff: function(v) {
          return ff(dictHeytingAlgebra);
        },
        tt: function(v) {
          return tt(dictHeytingAlgebra);
        },
        implies: function(f) {
          return function(g) {
            return function(a) {
              return implies(dictHeytingAlgebra)(f(a))(g(a));
            };
          };
        },
        conj: function(f) {
          return function(g) {
            return function(a) {
              return conj(dictHeytingAlgebra)(f(a))(g(a));
            };
          };
        },
        disj: function(f) {
          return function(g) {
            return function(a) {
              return disj(dictHeytingAlgebra)(f(a))(g(a));
            };
          };
        },
        not: function(f) {
          return function(a) {
            return not(dictHeytingAlgebra)(f(a));
          };
        }
      };
    };
    var heytingAlgebraRecordCons = function(dictIsSymbol) {
      return function(dictCons) {
        return function(dictHeytingAlgebraRecord) {
          return function(dictHeytingAlgebra) {
            return {
              conjRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    var get = Record_Unsafe.unsafeGet(key);
                    return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                  };
                };
              },
              disjRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    var get = Record_Unsafe.unsafeGet(key);
                    return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                  };
                };
              },
              impliesRecord: function(v) {
                return function(ra) {
                  return function(rb) {
                    var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    var get = Record_Unsafe.unsafeGet(key);
                    return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                  };
                };
              },
              ffRecord: function(v) {
                return function(row) {
                  var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var insert = Record_Unsafe.unsafeSet(key);
                  return insert(ff(dictHeytingAlgebra))(tail);
                };
              },
              notRecord: function(v) {
                return function(row) {
                  var tail = notRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var insert = Record_Unsafe.unsafeSet(key);
                  var get = Record_Unsafe.unsafeGet(key);
                  return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                };
              },
              ttRecord: function(v) {
                return function(row) {
                  var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var insert = Record_Unsafe.unsafeSet(key);
                  return insert(tt(dictHeytingAlgebra))(tail);
                };
              }
            };
          };
        };
      };
    };
    module2.exports = {
      tt,
      ff,
      implies,
      conj,
      disj,
      not,
      ffRecord,
      ttRecord,
      impliesRecord,
      conjRecord,
      disjRecord,
      notRecord,
      heytingAlgebraBoolean,
      heytingAlgebraUnit,
      heytingAlgebraFunction,
      heytingAlgebraProxy,
      heytingAlgebraProxy2,
      heytingAlgebraProxy3,
      heytingAlgebraRecord,
      heytingAlgebraRecordNil,
      heytingAlgebraRecordCons
    };
  }
});

// output/Data.Tuple/index.js
var require_Data22 = __commonJS({
  "output/Data.Tuple/index.js"(exports2, module2) {
    "use strict";
    var Control_Lazy = require_Control8();
    var Data_Bounded = require_Data13();
    var Data_Eq = require_Data8();
    var Data_Functor_Invariant = require_Data_Functor();
    var Data_Generic_Rep = require_Data_Generic();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Ring = require_Data11();
    var Data_Semigroup = require_Data7();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Data_Unit = require_Data3();
    var Tuple = function() {
      function Tuple2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Tuple2.create = function(value0) {
        return function(value1) {
          return new Tuple2(value0, value1);
        };
      };
      return Tuple2;
    }();
    var uncurry = function(f) {
      return function(v) {
        return f(v.value0)(v.value1);
      };
    };
    var swap = function(v) {
      return new Tuple(v.value1, v.value0);
    };
    var snd = function(v) {
      return v.value1;
    };
    var showTuple = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(v) {
            return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          }
        };
      };
    };
    var semiringTuple = function(dictSemiring) {
      return function(dictSemiring1) {
        return {
          add: function(v) {
            return function(v1) {
              return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
            };
          },
          one: new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)),
          mul: function(v) {
            return function(v1) {
              return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
            };
          },
          zero: new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1))
        };
      };
    };
    var semigroupoidTuple = {
      compose: function(v) {
        return function(v1) {
          return new Tuple(v1.value0, v.value1);
        };
      }
    };
    var semigroupTuple = function(dictSemigroup) {
      return function(dictSemigroup1) {
        return {
          append: function(v) {
            return function(v1) {
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
            };
          }
        };
      };
    };
    var ringTuple = function(dictRing) {
      return function(dictRing1) {
        return {
          sub: function(v) {
            return function(v1) {
              return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
            };
          },
          Semiring0: function() {
            return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
          }
        };
      };
    };
    var monoidTuple = function(dictMonoid) {
      return function(dictMonoid1) {
        return {
          mempty: new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)),
          Semigroup0: function() {
            return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
          }
        };
      };
    };
    var heytingAlgebraTuple = function(dictHeytingAlgebra) {
      return function(dictHeytingAlgebra1) {
        return {
          tt: new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)),
          ff: new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)),
          implies: function(v) {
            return function(v1) {
              return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
          },
          conj: function(v) {
            return function(v1) {
              return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
          },
          disj: function(v) {
            return function(v1) {
              return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
            };
          },
          not: function(v) {
            return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
          }
        };
      };
    };
    var genericTuple = {
      to: function(x) {
        return new Tuple(x.value0, x.value1);
      },
      from: function(x) {
        return new Data_Generic_Rep.Product(x.value0, x.value1);
      }
    };
    var functorTuple = {
      map: function(f) {
        return function(m) {
          return new Tuple(m.value0, f(m.value1));
        };
      }
    };
    var invariantTuple = {
      imap: Data_Functor_Invariant.imapF(functorTuple)
    };
    var fst = function(v) {
      return v.value0;
    };
    var lazyTuple = function(dictLazy) {
      return function(dictLazy1) {
        return {
          defer: function(f) {
            return new Tuple(Control_Lazy.defer(dictLazy)(function(v) {
              return fst(f(Data_Unit.unit));
            }), Control_Lazy.defer(dictLazy1)(function(v) {
              return snd(f(Data_Unit.unit));
            }));
          }
        };
      };
    };
    var extendTuple = {
      extend: function(f) {
        return function(v) {
          return new Tuple(v.value0, f(v));
        };
      },
      Functor0: function() {
        return functorTuple;
      }
    };
    var eqTuple = function(dictEq) {
      return function(dictEq1) {
        return {
          eq: function(x) {
            return function(y) {
              return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
          }
        };
      };
    };
    var ordTuple = function(dictOrd) {
      return function(dictOrd1) {
        return {
          compare: function(x) {
            return function(y) {
              var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
              }
              ;
              if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
              }
              ;
              return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
          },
          Eq0: function() {
            return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }
        };
      };
    };
    var eq1Tuple = function(dictEq) {
      return {
        eq1: function(dictEq1) {
          return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
        }
      };
    };
    var ord1Tuple = function(dictOrd) {
      return {
        compare1: function(dictOrd1) {
          return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
        },
        Eq10: function() {
          return eq1Tuple(dictOrd.Eq0());
        }
      };
    };
    var curry = function(f) {
      return function(a) {
        return function(b) {
          return f(new Tuple(a, b));
        };
      };
    };
    var comonadTuple = {
      extract: snd,
      Extend0: function() {
        return extendTuple;
      }
    };
    var commutativeRingTuple = function(dictCommutativeRing) {
      return function(dictCommutativeRing1) {
        return {
          Ring0: function() {
            return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
          }
        };
      };
    };
    var boundedTuple = function(dictBounded) {
      return function(dictBounded1) {
        return {
          top: new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)),
          bottom: new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)),
          Ord0: function() {
            return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
          }
        };
      };
    };
    var booleanAlgebraTuple = function(dictBooleanAlgebra) {
      return function(dictBooleanAlgebra1) {
        return {
          HeytingAlgebra0: function() {
            return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
          }
        };
      };
    };
    var applyTuple = function(dictSemigroup) {
      return {
        apply: function(v) {
          return function(v1) {
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
        },
        Functor0: function() {
          return functorTuple;
        }
      };
    };
    var bindTuple = function(dictSemigroup) {
      return {
        bind: function(v) {
          return function(f) {
            var v1 = f(v.value1);
            return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
          };
        },
        Apply0: function() {
          return applyTuple(dictSemigroup);
        }
      };
    };
    var applicativeTuple = function(dictMonoid) {
      return {
        pure: Tuple.create(Data_Monoid.mempty(dictMonoid)),
        Apply0: function() {
          return applyTuple(dictMonoid.Semigroup0());
        }
      };
    };
    var monadTuple = function(dictMonoid) {
      return {
        Applicative0: function() {
          return applicativeTuple(dictMonoid);
        },
        Bind1: function() {
          return bindTuple(dictMonoid.Semigroup0());
        }
      };
    };
    module2.exports = {
      Tuple,
      fst,
      snd,
      curry,
      uncurry,
      swap,
      showTuple,
      eqTuple,
      eq1Tuple,
      ordTuple,
      ord1Tuple,
      boundedTuple,
      semigroupoidTuple,
      semigroupTuple,
      monoidTuple,
      semiringTuple,
      ringTuple,
      commutativeRingTuple,
      heytingAlgebraTuple,
      booleanAlgebraTuple,
      functorTuple,
      genericTuple,
      invariantTuple,
      applyTuple,
      applicativeTuple,
      bindTuple,
      monadTuple,
      extendTuple,
      comonadTuple,
      lazyTuple
    };
  }
});

// output/Control.Monad.State.Class/index.js
var require_Control_Monad_State = __commonJS({
  "output/Control.Monad.State.Class/index.js"(exports2, module2) {
    "use strict";
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var state = function(dict) {
      return dict.state;
    };
    var put = function(dictMonadState) {
      return function(s) {
        return state(dictMonadState)(function(v) {
          return new Data_Tuple.Tuple(Data_Unit.unit, s);
        });
      };
    };
    var modify_ = function(dictMonadState) {
      return function(f) {
        return state(dictMonadState)(function(s) {
          return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
        });
      };
    };
    var modify = function(dictMonadState) {
      return function(f) {
        return state(dictMonadState)(function(s) {
          var s$prime = f(s);
          return new Data_Tuple.Tuple(s$prime, s$prime);
        });
      };
    };
    var gets = function(dictMonadState) {
      return function(f) {
        return state(dictMonadState)(function(s) {
          return new Data_Tuple.Tuple(f(s), s);
        });
      };
    };
    var get = function(dictMonadState) {
      return state(dictMonadState)(function(s) {
        return new Data_Tuple.Tuple(s, s);
      });
    };
    module2.exports = {
      state,
      get,
      gets,
      put,
      modify,
      modify_
    };
  }
});

// output/Control.Monad.Trans.Class/index.js
var require_Control_Monad_Trans = __commonJS({
  "output/Control.Monad.Trans.Class/index.js"(exports2, module2) {
    "use strict";
    var lift = function(dict) {
      return dict.lift;
    };
    module2.exports = {
      lift
    };
  }
});

// output/Control.Monad.Writer.Class/index.js
var require_Control_Monad_Writer = __commonJS({
  "output/Control.Monad.Writer.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Tuple = require_Data22();
    var tell = function(dict) {
      return dict.tell;
    };
    var pass = function(dict) {
      return dict.pass;
    };
    var listen = function(dict) {
      return dict.listen;
    };
    var listens = function(dictMonadWriter) {
      return function(f) {
        return function(m) {
          return Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(listen(dictMonadWriter)(m))(function(v) {
            return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
          });
        };
      };
    };
    var censor = function(dictMonadWriter) {
      return function(f) {
        return function(m) {
          return pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(m)(function(a) {
            return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(new Data_Tuple.Tuple(a, f));
          }));
        };
      };
    };
    module2.exports = {
      listen,
      pass,
      tell,
      listens,
      censor
    };
  }
});

// output/Effect.Class/index.js
var require_Effect4 = __commonJS({
  "output/Effect.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Effect = require_Effect();
    var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function() {
        return Effect.monadEffect;
      }
    };
    var liftEffect = function(dict) {
      return dict.liftEffect;
    };
    module2.exports = {
      liftEffect,
      monadEffectEffect
    };
  }
});

// output/Control.Monad.Except.Trans/index.js
var require_Control_Monad_Except = __commonJS({
  "output/Control.Monad.Except.Trans/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad = require_Control7();
    var Control_Monad_Cont_Class = require_Control_Monad_Cont();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Monad_Reader_Class = require_Control_Monad_Reader();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Control_Monad_State_Class = require_Control_Monad_State();
    var Control_Monad_Trans_Class = require_Control_Monad_Trans();
    var Control_Monad_Writer_Class = require_Control_Monad_Writer();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Tuple = require_Data22();
    var Effect_Class = require_Effect4();
    var ExceptT = function(x) {
      return x;
    };
    var withExceptT = function(dictFunctor) {
      return function(f) {
        return function(v) {
          var mapLeft = function(v1) {
            return function(v2) {
              if (v2 instanceof Data_Either.Right) {
                return new Data_Either.Right(v2.value0);
              }
              ;
              if (v2 instanceof Data_Either.Left) {
                return new Data_Either.Left(v1(v2.value0));
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 43, column 3 - line 43, column 32): " + [v1.constructor.name, v2.constructor.name]);
            };
          };
          return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
        };
      };
    };
    var runExceptT = function(v) {
      return v;
    };
    var newtypeExceptT = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monadTransExceptT = {
      lift: function(dictMonad) {
        return function(m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function(a) {
            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
        };
      }
    };
    var mapExceptT = function(f) {
      return function(v) {
        return f(v);
      };
    };
    var functorExceptT = function(dictFunctor) {
      return {
        map: function(f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
        }
      };
    };
    var except = function(dictApplicative) {
      var $89 = Control_Applicative.pure(dictApplicative);
      return function($90) {
        return ExceptT($89($90));
      };
    };
    var monadExceptT = function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeExceptT(dictMonad);
        },
        Bind1: function() {
          return bindExceptT(dictMonad);
        }
      };
    };
    var bindExceptT = function(dictMonad) {
      return {
        bind: function(v) {
          return function(k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function() {
              var $91 = Control_Applicative.pure(dictMonad.Applicative0());
              return function($92) {
                return $91(Data_Either.Left.create($92));
              };
            }())(function(a) {
              var v1 = k(a);
              return v1;
            }));
          };
        },
        Apply0: function() {
          return applyExceptT(dictMonad);
        }
      };
    };
    var applyExceptT = function(dictMonad) {
      return {
        apply: Control_Monad.ap(monadExceptT(dictMonad)),
        Functor0: function() {
          return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
        }
      };
    };
    var applicativeExceptT = function(dictMonad) {
      return {
        pure: function() {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function($94) {
            return ExceptT($93(Data_Either.Right.create($94)));
          };
        }(),
        Apply0: function() {
          return applyExceptT(dictMonad);
        }
      };
    };
    var semigroupExceptT = function(dictMonad) {
      return function(dictSemigroup) {
        return {
          append: Control_Apply.lift2(applyExceptT(dictMonad))(Data_Semigroup.append(dictSemigroup))
        };
      };
    };
    var monadAskExceptT = function(dictMonadAsk) {
      return {
        ask: Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),
        Monad0: function() {
          return monadExceptT(dictMonadAsk.Monad0());
        }
      };
    };
    var monadReaderExceptT = function(dictMonadReader) {
      return {
        local: function(f) {
          return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
        },
        MonadAsk0: function() {
          return monadAskExceptT(dictMonadReader.MonadAsk0());
        }
      };
    };
    var monadContExceptT = function(dictMonadCont) {
      return {
        callCC: function(f) {
          return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function(c) {
            var v = f(function(a) {
              return ExceptT(c(new Data_Either.Right(a)));
            });
            return v;
          }));
        },
        Monad0: function() {
          return monadExceptT(dictMonadCont.Monad0());
        }
      };
    };
    var monadEffectExceptT = function(dictMonadEffect) {
      return {
        liftEffect: function() {
          var $95 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
          var $96 = Effect_Class.liftEffect(dictMonadEffect);
          return function($97) {
            return $95($96($97));
          };
        }(),
        Monad0: function() {
          return monadExceptT(dictMonadEffect.Monad0());
        }
      };
    };
    var monadRecExceptT = function(dictMonadRec) {
      return {
        tailRecM: function(f) {
          var $98 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function(a) {
            var v = f(a);
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v)(function(m$prime) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function() {
                if (m$prime instanceof Data_Either.Left) {
                  return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                }
                ;
                if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                }
                ;
                if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 75, column 14 - line 78, column 43): " + [m$prime.constructor.name]);
              }());
            });
          });
          return function($99) {
            return ExceptT($98($99));
          };
        },
        Monad0: function() {
          return monadExceptT(dictMonadRec.Monad0());
        }
      };
    };
    var monadStateExceptT = function(dictMonadState) {
      return {
        state: function(f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
        },
        Monad0: function() {
          return monadExceptT(dictMonadState.Monad0());
        }
      };
    };
    var monadTellExceptT = function(dictMonadTell) {
      return {
        tell: function() {
          var $100 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad1());
          var $101 = Control_Monad_Writer_Class.tell(dictMonadTell);
          return function($102) {
            return $100($101($102));
          };
        }(),
        Semigroup0: dictMonadTell.Semigroup0,
        Monad1: function() {
          return monadExceptT(dictMonadTell.Monad1());
        }
      };
    };
    var monadWriterExceptT = function(dictMonadWriter) {
      return {
        listen: mapExceptT(function(m) {
          return Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function(v) {
            return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(Data_Functor.map(Data_Either.functorEither)(function(r) {
              return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
          });
        }),
        pass: mapExceptT(function(m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(m)(function(a) {
            return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(function() {
              if (a instanceof Data_Either.Left) {
                return new Data_Tuple.Tuple(new Data_Either.Left(a.value0), Control_Category.identity(Control_Category.categoryFn));
              }
              ;
              if (a instanceof Data_Either.Right) {
                return new Data_Tuple.Tuple(new Data_Either.Right(a.value0.value0), a.value0.value1);
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 137, column 10 - line 139, column 45): " + [a.constructor.name]);
            }());
          }));
        }),
        Monoid0: dictMonadWriter.Monoid0,
        MonadTell1: function() {
          return monadTellExceptT(dictMonadWriter.MonadTell1());
        }
      };
    };
    var monadThrowExceptT = function(dictMonad) {
      return {
        throwError: function() {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function($104) {
            return ExceptT($103(Data_Either.Left.create($104)));
          };
        }(),
        Monad0: function() {
          return monadExceptT(dictMonad);
        }
      };
    };
    var monadErrorExceptT = function(dictMonad) {
      return {
        catchError: function(v) {
          return function(k) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function(a) {
              var v1 = k(a);
              return v1;
            })(function() {
              var $105 = Control_Applicative.pure(dictMonad.Applicative0());
              return function($106) {
                return $105(Data_Either.Right.create($106));
              };
            }()));
          };
        },
        MonadThrow0: function() {
          return monadThrowExceptT(dictMonad);
        }
      };
    };
    var monoidExceptT = function(dictMonad) {
      return function(dictMonoid) {
        return {
          mempty: Control_Applicative.pure(applicativeExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function() {
            return semigroupExceptT(dictMonad)(dictMonoid.Semigroup0());
          }
        };
      };
    };
    var altExceptT = function(dictSemigroup) {
      return function(dictMonad) {
        return {
          alt: function(v) {
            return function(v1) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function(rm) {
                if (rm instanceof Data_Either.Right) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                }
                ;
                if (rm instanceof Data_Either.Left) {
                  return Control_Bind.bind(dictMonad.Bind1())(v1)(function(rn) {
                    if (rn instanceof Data_Either.Right) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                    }
                    ;
                    if (rn instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                    }
                    ;
                    throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [rn.constructor.name]);
                  });
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [rm.constructor.name]);
              });
            };
          },
          Functor0: function() {
            return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
          }
        };
      };
    };
    var plusExceptT = function(dictMonoid) {
      return function(dictMonad) {
        return {
          empty: Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)),
          Alt0: function() {
            return altExceptT(dictMonoid.Semigroup0())(dictMonad);
          }
        };
      };
    };
    var alternativeExceptT = function(dictMonoid) {
      return function(dictMonad) {
        return {
          Applicative0: function() {
            return applicativeExceptT(dictMonad);
          },
          Plus1: function() {
            return plusExceptT(dictMonoid)(dictMonad);
          }
        };
      };
    };
    var monadPlusExceptT = function(dictMonoid) {
      return function(dictMonad) {
        return {
          Monad0: function() {
            return monadExceptT(dictMonad);
          },
          Alternative1: function() {
            return alternativeExceptT(dictMonoid)(dictMonad);
          }
        };
      };
    };
    var monadZeroExceptT = function(dictMonoid) {
      return function(dictMonad) {
        return {
          Monad0: function() {
            return monadExceptT(dictMonad);
          },
          Alternative1: function() {
            return alternativeExceptT(dictMonoid)(dictMonad);
          },
          MonadZeroIsDeprecated2: function() {
            return void 0;
          }
        };
      };
    };
    module2.exports = {
      ExceptT,
      runExceptT,
      withExceptT,
      mapExceptT,
      except,
      newtypeExceptT,
      functorExceptT,
      applyExceptT,
      applicativeExceptT,
      bindExceptT,
      monadExceptT,
      monadRecExceptT,
      altExceptT,
      plusExceptT,
      alternativeExceptT,
      monadPlusExceptT,
      monadZeroExceptT,
      monadTransExceptT,
      monadEffectExceptT,
      monadContExceptT,
      monadThrowExceptT,
      monadErrorExceptT,
      monadAskExceptT,
      monadReaderExceptT,
      monadStateExceptT,
      monadTellExceptT,
      monadWriterExceptT,
      semigroupExceptT,
      monoidExceptT,
      catchError: Control_Monad_Error_Class.catchError,
      throwError: Control_Monad_Error_Class.throwError,
      lift: Control_Monad_Trans_Class.lift
    };
  }
});

// output/Unsafe.Coerce/foreign.js
var require_foreign20 = __commonJS({
  "output/Unsafe.Coerce/foreign.js"(exports2) {
    "use strict";
    exports2.unsafeCoerce = function(x) {
      return x;
    };
  }
});

// output/Unsafe.Coerce/index.js
var require_Unsafe = __commonJS({
  "output/Unsafe.Coerce/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign20();
    module2.exports = {
      unsafeCoerce: $foreign.unsafeCoerce
    };
  }
});

// output/Safe.Coerce/index.js
var require_Safe = __commonJS({
  "output/Safe.Coerce/index.js"(exports2, module2) {
    "use strict";
    var Unsafe_Coerce = require_Unsafe();
    var coerce = function(dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
    };
    module2.exports = {
      coerce
    };
  }
});

// output/Data.Newtype/index.js
var require_Data23 = __commonJS({
  "output/Data.Newtype/index.js"(exports2, module2) {
    "use strict";
    var Safe_Coerce = require_Safe();
    var wrap = function(dictNewtype) {
      return Safe_Coerce.coerce();
    };
    var unwrap = function(dictNewtype) {
      return Safe_Coerce.coerce();
    };
    var underF2 = function(dictCoercible) {
      return function(dictCoercible1) {
        return function(dictNewtype) {
          return function(dictNewtype1) {
            return function(v) {
              return Safe_Coerce.coerce();
            };
          };
        };
      };
    };
    var underF = function(dictCoercible) {
      return function(dictCoercible1) {
        return function(dictNewtype) {
          return function(dictNewtype1) {
            return function(v) {
              return Safe_Coerce.coerce();
            };
          };
        };
      };
    };
    var under2 = function(dictNewtype) {
      return function(dictNewtype1) {
        return function(v) {
          return Safe_Coerce.coerce();
        };
      };
    };
    var under = function(dictNewtype) {
      return function(dictNewtype1) {
        return function(v) {
          return Safe_Coerce.coerce();
        };
      };
    };
    var un = function(dictNewtype) {
      return function(v) {
        return unwrap();
      };
    };
    var traverse = function(dictCoercible) {
      return function(dictNewtype) {
        return function(v) {
          return Safe_Coerce.coerce();
        };
      };
    };
    var overF2 = function(dictCoercible) {
      return function(dictCoercible1) {
        return function(dictNewtype) {
          return function(dictNewtype1) {
            return function(v) {
              return Safe_Coerce.coerce();
            };
          };
        };
      };
    };
    var overF = function(dictCoercible) {
      return function(dictCoercible1) {
        return function(dictNewtype) {
          return function(dictNewtype1) {
            return function(v) {
              return Safe_Coerce.coerce();
            };
          };
        };
      };
    };
    var over2 = function(dictNewtype) {
      return function(dictNewtype1) {
        return function(v) {
          return Safe_Coerce.coerce();
        };
      };
    };
    var over = function(dictNewtype) {
      return function(dictNewtype1) {
        return function(v) {
          return Safe_Coerce.coerce();
        };
      };
    };
    var newtypeMultiplicative = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeLast = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeFirst = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeEndo = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeDual = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeDisj = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeConj = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeAdditive = {
      Coercible0: function() {
        return void 0;
      }
    };
    var collect = function(dictCoercible) {
      return function(dictNewtype) {
        return function(v) {
          return Safe_Coerce.coerce();
        };
      };
    };
    var alaF = function(dictCoercible) {
      return function(dictCoercible1) {
        return function(dictNewtype) {
          return function(dictNewtype1) {
            return function(v) {
              return Safe_Coerce.coerce();
            };
          };
        };
      };
    };
    var ala = function(dictCoercible) {
      return function(dictNewtype) {
        return function(dictNewtype1) {
          return function(v) {
            return function(f) {
              return Safe_Coerce.coerce()(f(wrap()));
            };
          };
        };
      };
    };
    module2.exports = {
      wrap,
      unwrap,
      un,
      ala,
      alaF,
      over,
      overF,
      under,
      underF,
      over2,
      overF2,
      under2,
      underF2,
      traverse,
      collect,
      newtypeAdditive,
      newtypeMultiplicative,
      newtypeConj,
      newtypeDisj,
      newtypeDual,
      newtypeEndo,
      newtypeFirst,
      newtypeLast
    };
  }
});

// output/Control.Monad.Except/index.js
var require_Control_Monad = __commonJS({
  "output/Control.Monad.Except/index.js"(exports2, module2) {
    "use strict";
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Identity = require_Data20();
    var Data_Newtype = require_Data23();
    var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
    var runExcept = function() {
      var $0 = Data_Newtype.unwrap();
      return function($1) {
        return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
    }();
    var mapExcept = function(f) {
      return Control_Monad_Except_Trans.mapExceptT(function() {
        var $2 = Data_Newtype.unwrap();
        return function($3) {
          return Data_Identity.Identity(f($2($3)));
        };
      }());
    };
    module2.exports = {
      runExcept,
      mapExcept,
      withExcept,
      catchError: Control_Monad_Error_Class.catchError,
      catchJust: Control_Monad_Error_Class.catchJust,
      throwError: Control_Monad_Error_Class.throwError,
      ExceptT: Control_Monad_Except_Trans.ExceptT,
      except: Control_Monad_Except_Trans.except,
      lift: Control_Monad_Except_Trans.lift,
      mapExceptT: Control_Monad_Except_Trans.mapExceptT,
      runExceptT: Control_Monad_Except_Trans.runExceptT,
      withExceptT: Control_Monad_Except_Trans.withExceptT
    };
  }
});

// output/Control.Promise/foreign.js
var require_foreign21 = __commonJS({
  "output/Control.Promise/foreign.js"(exports2) {
    exports2.promise = function(f) {
      return function() {
        return new Promise(function(success, error) {
          var succF = function(s) {
            return function() {
              return success(s);
            };
          };
          var failF = function(s) {
            return function() {
              return error(s);
            };
          };
          try {
            f(succF)(failF)();
          } catch (e) {
            error(e);
          }
        });
      };
    };
    exports2.thenImpl = function(promise) {
      return function(errCB) {
        return function(succCB) {
          return function() {
            promise.then(succCB, errCB);
          };
        };
      };
    };
  }
});

// output/Data.Foldable/foreign.js
var require_foreign22 = __commonJS({
  "output/Data.Foldable/foreign.js"(exports2) {
    "use strict";
    exports2.foldrArray = function(f) {
      return function(init) {
        return function(xs) {
          var acc = init;
          var len = xs.length;
          for (var i = len - 1; i >= 0; i--) {
            acc = f(xs[i])(acc);
          }
          return acc;
        };
      };
    };
    exports2.foldlArray = function(f) {
      return function(init) {
        return function(xs) {
          var acc = init;
          var len = xs.length;
          for (var i = 0; i < len; i++) {
            acc = f(acc)(xs[i]);
          }
          return acc;
        };
      };
    };
  }
});

// output/Control.Plus/index.js
var require_Control9 = __commonJS({
  "output/Control.Plus/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Data_Functor = require_Data4();
    var plusArray = {
      empty: [],
      Alt0: function() {
        return Control_Alt.altArray;
      }
    };
    var empty = function(dict) {
      return dict.empty;
    };
    module2.exports = {
      empty,
      plusArray,
      alt: Control_Alt.alt,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Control.Extend/foreign.js
var require_foreign23 = __commonJS({
  "output/Control.Extend/foreign.js"(exports2) {
    "use strict";
    exports2.arrayExtend = function(f) {
      return function(xs) {
        return xs.map(function(_, i, xs2) {
          return f(xs2.slice(i));
        });
      };
    };
  }
});

// output/Control.Extend/index.js
var require_Control10 = __commonJS({
  "output/Control.Extend/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign23();
    var Control_Category = require_Control2();
    var Data_Functor = require_Data4();
    var Data_Semigroup = require_Data7();
    var extendFn = function(dictSemigroup) {
      return {
        extend: function(f) {
          return function(g) {
            return function(w) {
              return f(function(w$prime) {
                return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
              });
            };
          };
        },
        Functor0: function() {
          return Data_Functor.functorFn;
        }
      };
    };
    var extendArray = {
      extend: $foreign.arrayExtend,
      Functor0: function() {
        return Data_Functor.functorArray;
      }
    };
    var extend = function(dict) {
      return dict.extend;
    };
    var extendFlipped = function(dictExtend) {
      return function(w) {
        return function(f) {
          return extend(dictExtend)(f)(w);
        };
      };
    };
    var duplicate = function(dictExtend) {
      return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
    };
    var composeCoKleisliFlipped = function(dictExtend) {
      return function(f) {
        return function(g) {
          return function(w) {
            return f(extend(dictExtend)(g)(w));
          };
        };
      };
    };
    var composeCoKleisli = function(dictExtend) {
      return function(f) {
        return function(g) {
          return function(w) {
            return g(extend(dictExtend)(f)(w));
          };
        };
      };
    };
    module2.exports = {
      extend,
      extendFlipped,
      composeCoKleisli,
      composeCoKleisliFlipped,
      duplicate,
      extendFn,
      extendArray,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Control.Comonad/index.js
var require_Control11 = __commonJS({
  "output/Control.Comonad/index.js"(exports2, module2) {
    "use strict";
    var Control_Extend = require_Control10();
    var Data_Functor = require_Data4();
    var extract = function(dict) {
      return dict.extract;
    };
    module2.exports = {
      extract,
      duplicate: Control_Extend.duplicate,
      extend: Control_Extend.extend,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Data.Bifunctor/index.js
var require_Data24 = __commonJS({
  "output/Data.Bifunctor/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Either = require_Data16();
    var Data_Tuple = require_Data22();
    var bimap = function(dict) {
      return dict.bimap;
    };
    var lmap = function(dictBifunctor) {
      return function(f) {
        return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var rmap = function(dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
    };
    var bifunctorTuple = {
      bimap: function(f) {
        return function(g) {
          return function(v) {
            return new Data_Tuple.Tuple(f(v.value0), g(v.value1));
          };
        };
      }
    };
    var bifunctorEither = {
      bimap: function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Data_Either.Left) {
              return new Data_Either.Left(v(v2.value0));
            }
            ;
            if (v2 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1(v2.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      }
    };
    var bifunctorConst = {
      bimap: function(f) {
        return function(v) {
          return function(v1) {
            return f(v1);
          };
        };
      }
    };
    module2.exports = {
      bimap,
      lmap,
      rmap,
      bifunctorEither,
      bifunctorTuple,
      bifunctorConst
    };
  }
});

// output/Data.Functor.Coproduct/index.js
var require_Data_Functor2 = __commonJS({
  "output/Data.Functor.Coproduct/index.js"(exports2, module2) {
    "use strict";
    var Control_Comonad = require_Control11();
    var Control_Extend = require_Control10();
    var Data_Bifunctor = require_Data24();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Functor = require_Data4();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Coproduct = function(x) {
      return x;
    };
    var showCoproduct = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(v) {
            if (v instanceof Data_Either.Left) {
              return "(left " + (Data_Show.show(dictShow)(v.value0) + ")");
            }
            ;
            if (v instanceof Data_Either.Right) {
              return "(right " + (Data_Show.show(dictShow1)(v.value0) + ")");
            }
            ;
            throw new Error("Failed pattern match at Data.Functor.Coproduct (line 63, column 1 - line 65, column 60): " + [v.constructor.name]);
          }
        };
      };
    };
    var right = function(ga) {
      return new Data_Either.Right(ga);
    };
    var newtypeCoproduct = {
      Coercible0: function() {
        return void 0;
      }
    };
    var left = function(fa) {
      return new Data_Either.Left(fa);
    };
    var functorCoproduct = function(dictFunctor) {
      return function(dictFunctor1) {
        return {
          map: function(f) {
            return function(v) {
              return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
            };
          }
        };
      };
    };
    var eq1Coproduct = function(dictEq1) {
      return function(dictEq11) {
        return {
          eq1: function(dictEq) {
            return function(v) {
              return function(v1) {
                if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                  return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0);
                }
                ;
                if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                  return Data_Eq.eq1(dictEq11)(dictEq)(v.value0)(v1.value0);
                }
                ;
                return false;
              };
            };
          }
        };
      };
    };
    var eqCoproduct = function(dictEq1) {
      return function(dictEq11) {
        return function(dictEq) {
          return {
            eq: Data_Eq.eq1(eq1Coproduct(dictEq1)(dictEq11))(dictEq)
          };
        };
      };
    };
    var ord1Coproduct = function(dictOrd1) {
      return function(dictOrd11) {
        return {
          compare1: function(dictOrd) {
            return function(v) {
              return function(v1) {
                if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                  return Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                }
                ;
                if (v instanceof Data_Either.Left) {
                  return Data_Ordering.LT.value;
                }
                ;
                if (v1 instanceof Data_Either.Left) {
                  return Data_Ordering.GT.value;
                }
                ;
                if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                  return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value0)(v1.value0);
                }
                ;
                throw new Error("Failed pattern match at Data.Functor.Coproduct (line 57, column 5 - line 61, column 43): " + [v.constructor.name, v1.constructor.name]);
              };
            };
          },
          Eq10: function() {
            return eq1Coproduct(dictOrd1.Eq10())(dictOrd11.Eq10());
          }
        };
      };
    };
    var ordCoproduct = function(dictOrd1) {
      return function(dictOrd11) {
        return function(dictOrd) {
          return {
            compare: Data_Ord.compare1(ord1Coproduct(dictOrd1)(dictOrd11))(dictOrd),
            Eq0: function() {
              return eqCoproduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }
          };
        };
      };
    };
    var coproduct = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Data_Either.Left) {
            return v(v2.value0);
          }
          ;
          if (v2 instanceof Data_Either.Right) {
            return v1(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Functor.Coproduct (line 27, column 1 - line 27, column 78): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    };
    var extendCoproduct = function(dictExtend) {
      return function(dictExtend1) {
        return {
          extend: function(f) {
            var $61 = coproduct(function() {
              var $63 = Control_Extend.extend(dictExtend)(function($65) {
                return f(Coproduct(Data_Either.Left.create($65)));
              });
              return function($64) {
                return Data_Either.Left.create($63($64));
              };
            }())(function() {
              var $66 = Control_Extend.extend(dictExtend1)(function($68) {
                return f(Coproduct(Data_Either.Right.create($68)));
              });
              return function($67) {
                return Data_Either.Right.create($66($67));
              };
            }());
            return function($62) {
              return Coproduct($61($62));
            };
          },
          Functor0: function() {
            return functorCoproduct(dictExtend.Functor0())(dictExtend1.Functor0());
          }
        };
      };
    };
    var comonadCoproduct = function(dictComonad) {
      return function(dictComonad1) {
        return {
          extract: coproduct(Control_Comonad.extract(dictComonad))(Control_Comonad.extract(dictComonad1)),
          Extend0: function() {
            return extendCoproduct(dictComonad.Extend0())(dictComonad1.Extend0());
          }
        };
      };
    };
    var bihoistCoproduct = function(natF) {
      return function(natG) {
        return function(v) {
          return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(natF)(natG)(v);
        };
      };
    };
    module2.exports = {
      Coproduct,
      left,
      right,
      coproduct,
      bihoistCoproduct,
      newtypeCoproduct,
      eqCoproduct,
      eq1Coproduct,
      ordCoproduct,
      ord1Coproduct,
      showCoproduct,
      functorCoproduct,
      extendCoproduct,
      comonadCoproduct
    };
  }
});

// output/Data.Maybe.First/index.js
var require_Data_Maybe = __commonJS({
  "output/Data.Maybe.First/index.js"(exports2, module2) {
    "use strict";
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var First = function(x) {
      return x;
    };
    var showFirst = function(dictShow) {
      return {
        show: function(v) {
          return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
        }
      };
    };
    var semigroupFirst = {
      append: function(v) {
        return function(v1) {
          if (v instanceof Data_Maybe.Just) {
            return v;
          }
          ;
          return v1;
        };
      }
    };
    var ordFirst = function(dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
    };
    var ord1First = Data_Maybe.ord1Maybe;
    var newtypeFirst = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidFirst = {
      mempty: Data_Maybe.Nothing.value,
      Semigroup0: function() {
        return semigroupFirst;
      }
    };
    var monadFirst = Data_Maybe.monadMaybe;
    var invariantFirst = Data_Maybe.invariantMaybe;
    var functorFirst = Data_Maybe.functorMaybe;
    var extendFirst = Data_Maybe.extendMaybe;
    var eqFirst = function(dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
    };
    var eq1First = Data_Maybe.eq1Maybe;
    var boundedFirst = function(dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
    };
    var bindFirst = Data_Maybe.bindMaybe;
    var applyFirst = Data_Maybe.applyMaybe;
    var applicativeFirst = Data_Maybe.applicativeMaybe;
    var altFirst = {
      alt: Data_Semigroup.append(semigroupFirst),
      Functor0: function() {
        return functorFirst;
      }
    };
    var plusFirst = {
      empty: Data_Monoid.mempty(monoidFirst),
      Alt0: function() {
        return altFirst;
      }
    };
    var alternativeFirst = {
      Applicative0: function() {
        return applicativeFirst;
      },
      Plus1: function() {
        return plusFirst;
      }
    };
    var monadZeroFirst = {
      Monad0: function() {
        return monadFirst;
      },
      Alternative1: function() {
        return alternativeFirst;
      },
      MonadZeroIsDeprecated2: function() {
        return void 0;
      }
    };
    module2.exports = {
      First,
      newtypeFirst,
      eqFirst,
      eq1First,
      ordFirst,
      ord1First,
      boundedFirst,
      functorFirst,
      invariantFirst,
      applyFirst,
      applicativeFirst,
      bindFirst,
      monadFirst,
      extendFirst,
      showFirst,
      semigroupFirst,
      monoidFirst,
      altFirst,
      plusFirst,
      alternativeFirst,
      monadZeroFirst
    };
  }
});

// output/Data.Monoid.Conj/index.js
var require_Data_Monoid = __commonJS({
  "output/Data.Monoid.Conj/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Conj = function(x) {
      return x;
    };
    var showConj = function(dictShow) {
      return {
        show: function(v) {
          return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semiringConj = function(dictHeytingAlgebra) {
      return {
        zero: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
        one: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
        add: function(v) {
          return function(v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
        },
        mul: function(v) {
          return function(v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
        }
      };
    };
    var semigroupConj = function(dictHeytingAlgebra) {
      return {
        append: function(v) {
          return function(v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
        }
      };
    };
    var ordConj = function(dictOrd) {
      return dictOrd;
    };
    var monoidConj = function(dictHeytingAlgebra) {
      return {
        mempty: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
        Semigroup0: function() {
          return semigroupConj(dictHeytingAlgebra);
        }
      };
    };
    var functorConj = {
      map: function(f) {
        return function(m) {
          return f(m);
        };
      }
    };
    var eqConj = function(dictEq) {
      return dictEq;
    };
    var eq1Conj = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqConj(dictEq));
      }
    };
    var ord1Conj = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordConj(dictOrd));
      },
      Eq10: function() {
        return eq1Conj;
      }
    };
    var boundedConj = function(dictBounded) {
      return dictBounded;
    };
    var applyConj = {
      apply: function(v) {
        return function(v1) {
          return v(v1);
        };
      },
      Functor0: function() {
        return functorConj;
      }
    };
    var bindConj = {
      bind: function(v) {
        return function(f) {
          return f(v);
        };
      },
      Apply0: function() {
        return applyConj;
      }
    };
    var applicativeConj = {
      pure: Conj,
      Apply0: function() {
        return applyConj;
      }
    };
    var monadConj = {
      Applicative0: function() {
        return applicativeConj;
      },
      Bind1: function() {
        return bindConj;
      }
    };
    module2.exports = {
      Conj,
      eqConj,
      eq1Conj,
      ordConj,
      ord1Conj,
      boundedConj,
      showConj,
      functorConj,
      applyConj,
      applicativeConj,
      bindConj,
      monadConj,
      semigroupConj,
      monoidConj,
      semiringConj
    };
  }
});

// output/Data.Monoid.Disj/index.js
var require_Data_Monoid2 = __commonJS({
  "output/Data.Monoid.Disj/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Disj = function(x) {
      return x;
    };
    var showDisj = function(dictShow) {
      return {
        show: function(v) {
          return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semiringDisj = function(dictHeytingAlgebra) {
      return {
        zero: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
        one: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
        add: function(v) {
          return function(v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
        },
        mul: function(v) {
          return function(v1) {
            return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
        }
      };
    };
    var semigroupDisj = function(dictHeytingAlgebra) {
      return {
        append: function(v) {
          return function(v1) {
            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
        }
      };
    };
    var ordDisj = function(dictOrd) {
      return dictOrd;
    };
    var monoidDisj = function(dictHeytingAlgebra) {
      return {
        mempty: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
        Semigroup0: function() {
          return semigroupDisj(dictHeytingAlgebra);
        }
      };
    };
    var functorDisj = {
      map: function(f) {
        return function(m) {
          return f(m);
        };
      }
    };
    var eqDisj = function(dictEq) {
      return dictEq;
    };
    var eq1Disj = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqDisj(dictEq));
      }
    };
    var ord1Disj = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordDisj(dictOrd));
      },
      Eq10: function() {
        return eq1Disj;
      }
    };
    var boundedDisj = function(dictBounded) {
      return dictBounded;
    };
    var applyDisj = {
      apply: function(v) {
        return function(v1) {
          return v(v1);
        };
      },
      Functor0: function() {
        return functorDisj;
      }
    };
    var bindDisj = {
      bind: function(v) {
        return function(f) {
          return f(v);
        };
      },
      Apply0: function() {
        return applyDisj;
      }
    };
    var applicativeDisj = {
      pure: Disj,
      Apply0: function() {
        return applyDisj;
      }
    };
    var monadDisj = {
      Applicative0: function() {
        return applicativeDisj;
      },
      Bind1: function() {
        return bindDisj;
      }
    };
    module2.exports = {
      Disj,
      eqDisj,
      eq1Disj,
      ordDisj,
      ord1Disj,
      boundedDisj,
      showDisj,
      functorDisj,
      applyDisj,
      applicativeDisj,
      bindDisj,
      monadDisj,
      semigroupDisj,
      monoidDisj,
      semiringDisj
    };
  }
});

// output/Data.Monoid.Dual/index.js
var require_Data_Monoid3 = __commonJS({
  "output/Data.Monoid.Dual/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Dual = function(x) {
      return x;
    };
    var showDual = function(dictShow) {
      return {
        show: function(v) {
          return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semigroupDual = function(dictSemigroup) {
      return {
        append: function(v) {
          return function(v1) {
            return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
        }
      };
    };
    var ordDual = function(dictOrd) {
      return dictOrd;
    };
    var monoidDual = function(dictMonoid) {
      return {
        mempty: Data_Monoid.mempty(dictMonoid),
        Semigroup0: function() {
          return semigroupDual(dictMonoid.Semigroup0());
        }
      };
    };
    var functorDual = {
      map: function(f) {
        return function(m) {
          return f(m);
        };
      }
    };
    var eqDual = function(dictEq) {
      return dictEq;
    };
    var eq1Dual = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqDual(dictEq));
      }
    };
    var ord1Dual = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordDual(dictOrd));
      },
      Eq10: function() {
        return eq1Dual;
      }
    };
    var boundedDual = function(dictBounded) {
      return dictBounded;
    };
    var applyDual = {
      apply: function(v) {
        return function(v1) {
          return v(v1);
        };
      },
      Functor0: function() {
        return functorDual;
      }
    };
    var bindDual = {
      bind: function(v) {
        return function(f) {
          return f(v);
        };
      },
      Apply0: function() {
        return applyDual;
      }
    };
    var applicativeDual = {
      pure: Dual,
      Apply0: function() {
        return applyDual;
      }
    };
    var monadDual = {
      Applicative0: function() {
        return applicativeDual;
      },
      Bind1: function() {
        return bindDual;
      }
    };
    module2.exports = {
      Dual,
      eqDual,
      eq1Dual,
      ordDual,
      ord1Dual,
      boundedDual,
      showDual,
      functorDual,
      applyDual,
      applicativeDual,
      bindDual,
      monadDual,
      semigroupDual,
      monoidDual
    };
  }
});

// output/Data.Monoid.Endo/index.js
var require_Data_Monoid4 = __commonJS({
  "output/Data.Monoid.Endo/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Control_Semigroupoid = require_Control();
    var Data_Show = require_Data14();
    var Endo = function(x) {
      return x;
    };
    var showEndo = function(dictShow) {
      return {
        show: function(v) {
          return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semigroupEndo = function(dictSemigroupoid) {
      return {
        append: function(v) {
          return function(v1) {
            return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
          };
        }
      };
    };
    var ordEndo = function(dictOrd) {
      return dictOrd;
    };
    var monoidEndo = function(dictCategory) {
      return {
        mempty: Control_Category.identity(dictCategory),
        Semigroup0: function() {
          return semigroupEndo(dictCategory.Semigroupoid0());
        }
      };
    };
    var eqEndo = function(dictEq) {
      return dictEq;
    };
    var boundedEndo = function(dictBounded) {
      return dictBounded;
    };
    module2.exports = {
      Endo,
      eqEndo,
      ordEndo,
      boundedEndo,
      showEndo,
      semigroupEndo,
      monoidEndo
    };
  }
});

// output/Data.Foldable/index.js
var require_Data25 = __commonJS({
  "output/Data.Foldable/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign22();
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Plus = require_Control9();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor_Coproduct = require_Data_Functor2();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Maybe = require_Data15();
    var Data_Maybe_First = require_Data_Maybe();
    var Data_Monoid = require_Data19();
    var Data_Monoid_Conj = require_Data_Monoid();
    var Data_Monoid_Disj = require_Data_Monoid2();
    var Data_Monoid_Dual = require_Data_Monoid3();
    var Data_Monoid_Endo = require_Data_Monoid4();
    var Data_Newtype = require_Data23();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Semiring = require_Data10();
    var Data_Unit = require_Data3();
    var foldr = function(dict) {
      return dict.foldr;
    };
    var indexr = function(dictFoldable) {
      return function(idx) {
        var go = function(a) {
          return function(cursor) {
            if (cursor.elem instanceof Data_Maybe.Just) {
              return cursor;
            }
            ;
            var $153 = cursor.pos === idx;
            if ($153) {
              return {
                elem: new Data_Maybe.Just(a),
                pos: cursor.pos
              };
            }
            ;
            return {
              pos: cursor.pos + 1 | 0,
              elem: cursor.elem
            };
          };
        };
        var $312 = foldr(dictFoldable)(go)({
          elem: Data_Maybe.Nothing.value,
          pos: 0
        });
        return function($313) {
          return function(v) {
            return v.elem;
          }($312($313));
        };
      };
    };
    var $$null = function(dictFoldable) {
      return foldr(dictFoldable)(function(v) {
        return function(v1) {
          return false;
        };
      })(true);
    };
    var oneOf = function(dictFoldable) {
      return function(dictPlus) {
        return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
    };
    var oneOfMap = function(dictFoldable) {
      return function(dictPlus) {
        return function(f) {
          return foldr(dictFoldable)(function() {
            var $314 = Control_Alt.alt(dictPlus.Alt0());
            return function($315) {
              return $314(f($315));
            };
          }())(Control_Plus.empty(dictPlus));
        };
      };
    };
    var traverse_ = function(dictApplicative) {
      return function(dictFoldable) {
        return function(f) {
          return foldr(dictFoldable)(function() {
            var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
            return function($317) {
              return $316(f($317));
            };
          }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
      };
    };
    var for_ = function(dictApplicative) {
      return function(dictFoldable) {
        return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
    };
    var sequence_ = function(dictApplicative) {
      return function(dictFoldable) {
        return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var foldl = function(dict) {
      return dict.foldl;
    };
    var indexl = function(dictFoldable) {
      return function(idx) {
        var go = function(cursor) {
          return function(a) {
            if (cursor.elem instanceof Data_Maybe.Just) {
              return cursor;
            }
            ;
            var $157 = cursor.pos === idx;
            if ($157) {
              return {
                elem: new Data_Maybe.Just(a),
                pos: cursor.pos
              };
            }
            ;
            return {
              pos: cursor.pos + 1 | 0,
              elem: cursor.elem
            };
          };
        };
        var $318 = foldl(dictFoldable)(go)({
          elem: Data_Maybe.Nothing.value,
          pos: 0
        });
        return function($319) {
          return function(v) {
            return v.elem;
          }($318($319));
        };
      };
    };
    var intercalate = function(dictFoldable) {
      return function(dictMonoid) {
        return function(sep) {
          return function(xs) {
            var go = function(v) {
              return function(x) {
                if (v.init) {
                  return {
                    init: false,
                    acc: x
                  };
                }
                ;
                return {
                  init: false,
                  acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                };
              };
            };
            return foldl(dictFoldable)(go)({
              init: true,
              acc: Data_Monoid.mempty(dictMonoid)
            })(xs).acc;
          };
        };
      };
    };
    var length = function(dictFoldable) {
      return function(dictSemiring) {
        return foldl(dictFoldable)(function(c) {
          return function(v) {
            return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
          };
        })(Data_Semiring.zero(dictSemiring));
      };
    };
    var maximumBy = function(dictFoldable) {
      return function(cmp) {
        var max$prime = function(v) {
          return function(v1) {
            if (v instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(v1);
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(function() {
                var $164 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                if ($164) {
                  return v.value0;
                }
                ;
                return v1;
              }());
            }
            ;
            throw new Error("Failed pattern match at Data.Foldable (line 441, column 3 - line 441, column 27): " + [v.constructor.name, v1.constructor.name]);
          };
        };
        return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
    };
    var maximum = function(dictOrd) {
      return function(dictFoldable) {
        return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
    };
    var minimumBy = function(dictFoldable) {
      return function(cmp) {
        var min$prime = function(v) {
          return function(v1) {
            if (v instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(v1);
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(function() {
                var $168 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                if ($168) {
                  return v.value0;
                }
                ;
                return v1;
              }());
            }
            ;
            throw new Error("Failed pattern match at Data.Foldable (line 454, column 3 - line 454, column 27): " + [v.constructor.name, v1.constructor.name]);
          };
        };
        return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
    };
    var minimum = function(dictOrd) {
      return function(dictFoldable) {
        return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
    };
    var product = function(dictFoldable) {
      return function(dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
      };
    };
    var sum = function(dictFoldable) {
      return function(dictSemiring) {
        return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
    };
    var foldableTuple = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return f(v.value1)(z);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return f(z)(v.value1);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(v.value1);
          };
        };
      }
    };
    var foldableMultiplicative = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return f(v)(z);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return f(z)(v);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      }
    };
    var foldableMaybe = {
      foldr: function(v) {
        return function(z) {
          return function(v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
              return z;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return v(v1.value0)(z);
            }
            ;
            throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
          };
        };
      },
      foldl: function(v) {
        return function(z) {
          return function(v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
              return z;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return v(z)(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
              return Data_Monoid.mempty(dictMonoid);
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return v(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      }
    };
    var foldableIdentity = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return f(v)(z);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return f(z)(v);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      }
    };
    var foldableEither = {
      foldr: function(v) {
        return function(z) {
          return function(v1) {
            if (v1 instanceof Data_Either.Left) {
              return z;
            }
            ;
            if (v1 instanceof Data_Either.Right) {
              return v(v1.value0)(z);
            }
            ;
            throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
          };
        };
      },
      foldl: function(v) {
        return function(z) {
          return function(v1) {
            if (v1 instanceof Data_Either.Left) {
              return z;
            }
            ;
            if (v1 instanceof Data_Either.Right) {
              return v(z)(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Data_Either.Left) {
              return Data_Monoid.mempty(dictMonoid);
            }
            ;
            if (v1 instanceof Data_Either.Right) {
              return v(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      }
    };
    var foldableDual = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return f(v)(z);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return f(z)(v);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      }
    };
    var foldableDisj = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return f(v)(z);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return f(z)(v);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      }
    };
    var foldableConst = {
      foldr: function(v) {
        return function(z) {
          return function(v1) {
            return z;
          };
        };
      },
      foldl: function(v) {
        return function(z) {
          return function(v1) {
            return z;
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(v) {
          return function(v1) {
            return Data_Monoid.mempty(dictMonoid);
          };
        };
      }
    };
    var foldableConj = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return f(v)(z);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return f(z)(v);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      }
    };
    var foldableAdditive = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return f(v)(z);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return f(z)(v);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      }
    };
    var foldMapDefaultR = function(dictFoldable) {
      return function(dictMonoid) {
        return function(f) {
          return foldr(dictFoldable)(function(x) {
            return function(acc) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
            };
          })(Data_Monoid.mempty(dictMonoid));
        };
      };
    };
    var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function(dictMonoid) {
        return foldMapDefaultR(foldableArray)(dictMonoid);
      }
    };
    var foldMapDefaultL = function(dictFoldable) {
      return function(dictMonoid) {
        return function(f) {
          return foldl(dictFoldable)(function(acc) {
            return function(x) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
            };
          })(Data_Monoid.mempty(dictMonoid));
        };
      };
    };
    var foldMap = function(dict) {
      return dict.foldMap;
    };
    var foldableApp = function(dictFoldable) {
      return {
        foldr: function(f) {
          return function(i) {
            return function(v) {
              return foldr(dictFoldable)(f)(i)(v);
            };
          };
        },
        foldl: function(f) {
          return function(i) {
            return function(v) {
              return foldl(dictFoldable)(f)(i)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return foldMap(dictFoldable)(dictMonoid)(f)(v);
            };
          };
        }
      };
    };
    var foldableCompose = function(dictFoldable) {
      return function(dictFoldable1) {
        return {
          foldr: function(f) {
            return function(i) {
              return function(v) {
                return foldr(dictFoldable)(Data_Function.flip(foldr(dictFoldable1)(f)))(i)(v);
              };
            };
          },
          foldl: function(f) {
            return function(i) {
              return function(v) {
                return foldl(dictFoldable)(foldl(dictFoldable1)(f))(i)(v);
              };
            };
          },
          foldMap: function(dictMonoid) {
            return function(f) {
              return function(v) {
                return foldMap(dictFoldable)(dictMonoid)(foldMap(dictFoldable1)(dictMonoid)(f))(v);
              };
            };
          }
        };
      };
    };
    var foldableCoproduct = function(dictFoldable) {
      return function(dictFoldable1) {
        return {
          foldr: function(f) {
            return function(z) {
              return Data_Functor_Coproduct.coproduct(foldr(dictFoldable)(f)(z))(foldr(dictFoldable1)(f)(z));
            };
          },
          foldl: function(f) {
            return function(z) {
              return Data_Functor_Coproduct.coproduct(foldl(dictFoldable)(f)(z))(foldl(dictFoldable1)(f)(z));
            };
          },
          foldMap: function(dictMonoid) {
            return function(f) {
              return Data_Functor_Coproduct.coproduct(foldMap(dictFoldable)(dictMonoid)(f))(foldMap(dictFoldable1)(dictMonoid)(f));
            };
          }
        };
      };
    };
    var foldableFirst = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return foldr(foldableMaybe)(f)(z)(v);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return foldl(foldableMaybe)(f)(z)(v);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
        };
      }
    };
    var foldableLast = {
      foldr: function(f) {
        return function(z) {
          return function(v) {
            return foldr(foldableMaybe)(f)(z)(v);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(v) {
            return foldl(foldableMaybe)(f)(z)(v);
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
        };
      }
    };
    var foldableProduct = function(dictFoldable) {
      return function(dictFoldable1) {
        return {
          foldr: function(f) {
            return function(z) {
              return function(v) {
                return foldr(dictFoldable)(f)(foldr(dictFoldable1)(f)(z)(v.value1))(v.value0);
              };
            };
          },
          foldl: function(f) {
            return function(z) {
              return function(v) {
                return foldl(dictFoldable1)(f)(foldl(dictFoldable)(f)(z)(v.value0))(v.value1);
              };
            };
          },
          foldMap: function(dictMonoid) {
            return function(f) {
              return function(v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(foldMap(dictFoldable)(dictMonoid)(f)(v.value0))(foldMap(dictFoldable1)(dictMonoid)(f)(v.value1));
              };
            };
          }
        };
      };
    };
    var foldlDefault = function(dictFoldable) {
      return function(c) {
        return function(u) {
          return function(xs) {
            return Data_Newtype.unwrap()(Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function() {
              var $320 = Data_Function.flip(c);
              return function($321) {
                return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($320($321)));
              };
            }())(xs)))(u);
          };
        };
      };
    };
    var foldrDefault = function(dictFoldable) {
      return function(c) {
        return function(u) {
          return function(xs) {
            return Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function($322) {
              return Data_Monoid_Endo.Endo(c($322));
            })(xs))(u);
          };
        };
      };
    };
    var lookup = function(dictFoldable) {
      return function(dictEq) {
        return function(a) {
          var $323 = Data_Newtype.unwrap();
          var $324 = foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function(v) {
            var $305 = Data_Eq.eq(dictEq)(a)(v.value0);
            if ($305) {
              return new Data_Maybe.Just(v.value1);
            }
            ;
            return Data_Maybe.Nothing.value;
          });
          return function($325) {
            return $323($324($325));
          };
        };
      };
    };
    var surroundMap = function(dictFoldable) {
      return function(dictSemigroup) {
        return function(d) {
          return function(t) {
            return function(f) {
              var joined = function(a) {
                return function(m) {
                  return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
                };
              };
              return Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
            };
          };
        };
      };
    };
    var surround = function(dictFoldable) {
      return function(dictSemigroup) {
        return function(d) {
          return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
    };
    var foldM = function(dictFoldable) {
      return function(dictMonad) {
        return function(f) {
          return function(b0) {
            return foldl(dictFoldable)(function(b) {
              return function(a) {
                return Control_Bind.bind(dictMonad.Bind1())(b)(Data_Function.flip(f)(a));
              };
            })(Control_Applicative.pure(dictMonad.Applicative0())(b0));
          };
        };
      };
    };
    var fold = function(dictFoldable) {
      return function(dictMonoid) {
        return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var findMap = function(dictFoldable) {
      return function(p) {
        var go = function(v) {
          return function(v1) {
            if (v instanceof Data_Maybe.Nothing) {
              return p(v1);
            }
            ;
            return v;
          };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
    };
    var find = function(dictFoldable) {
      return function(p) {
        var go = function(v) {
          return function(v1) {
            if (v instanceof Data_Maybe.Nothing && p(v1)) {
              return new Data_Maybe.Just(v1);
            }
            ;
            return v;
          };
        };
        return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
    };
    var any = function(dictFoldable) {
      return function(dictHeytingAlgebra) {
        return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
    };
    var elem = function(dictFoldable) {
      return function(dictEq) {
        var $326 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
        var $327 = Data_Eq.eq(dictEq);
        return function($328) {
          return $326($327($328));
        };
      };
    };
    var notElem = function(dictFoldable) {
      return function(dictEq) {
        return function(x) {
          var $329 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $330 = elem(dictFoldable)(dictEq)(x);
          return function($331) {
            return $329($330($331));
          };
        };
      };
    };
    var or = function(dictFoldable) {
      return function(dictHeytingAlgebra) {
        return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var all = function(dictFoldable) {
      return function(dictHeytingAlgebra) {
        return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
    };
    var and = function(dictFoldable) {
      return function(dictHeytingAlgebra) {
        return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    module2.exports = {
      foldr,
      foldl,
      foldMap,
      foldrDefault,
      foldlDefault,
      foldMapDefaultL,
      foldMapDefaultR,
      fold,
      foldM,
      traverse_,
      for_,
      sequence_,
      oneOf,
      oneOfMap,
      intercalate,
      surroundMap,
      surround,
      and,
      or,
      all,
      any,
      sum,
      product,
      elem,
      notElem,
      indexl,
      indexr,
      find,
      findMap,
      maximum,
      maximumBy,
      minimum,
      minimumBy,
      "null": $$null,
      length,
      lookup,
      foldableArray,
      foldableMaybe,
      foldableFirst,
      foldableLast,
      foldableAdditive,
      foldableDual,
      foldableDisj,
      foldableConj,
      foldableMultiplicative,
      foldableEither,
      foldableTuple,
      foldableIdentity,
      foldableConst,
      foldableProduct,
      foldableCoproduct,
      foldableCompose,
      foldableApp
    };
  }
});

// output/Data.FunctorWithIndex/foreign.js
var require_foreign24 = __commonJS({
  "output/Data.FunctorWithIndex/foreign.js"(exports2) {
    "use strict";
    exports2.mapWithIndexArray = function(f) {
      return function(xs) {
        var l = xs.length;
        var result = Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(i)(xs[i]);
        }
        return result;
      };
    };
  }
});

// output/Data.Const/index.js
var require_Data26 = __commonJS({
  "output/Data.Const/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_Functor_Invariant = require_Data_Functor();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Const = function(x) {
      return x;
    };
    var showConst = function(dictShow) {
      return {
        show: function(v) {
          return "(Const " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semiringConst = function(dictSemiring) {
      return dictSemiring;
    };
    var semigroupoidConst = {
      compose: function(v) {
        return function(v1) {
          return v1;
        };
      }
    };
    var semigroupConst = function(dictSemigroup) {
      return dictSemigroup;
    };
    var ringConst = function(dictRing) {
      return dictRing;
    };
    var ordConst = function(dictOrd) {
      return dictOrd;
    };
    var newtypeConst = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidConst = function(dictMonoid) {
      return dictMonoid;
    };
    var heytingAlgebraConst = function(dictHeytingAlgebra) {
      return dictHeytingAlgebra;
    };
    var functorConst = {
      map: function(f) {
        return function(m) {
          return m;
        };
      }
    };
    var invariantConst = {
      imap: Data_Functor_Invariant.imapF(functorConst)
    };
    var euclideanRingConst = function(dictEuclideanRing) {
      return dictEuclideanRing;
    };
    var eqConst = function(dictEq) {
      return dictEq;
    };
    var eq1Const = function(dictEq) {
      return {
        eq1: function(dictEq1) {
          return Data_Eq.eq(eqConst(dictEq));
        }
      };
    };
    var ord1Const = function(dictOrd) {
      return {
        compare1: function(dictOrd1) {
          return Data_Ord.compare(ordConst(dictOrd));
        },
        Eq10: function() {
          return eq1Const(dictOrd.Eq0());
        }
      };
    };
    var commutativeRingConst = function(dictCommutativeRing) {
      return dictCommutativeRing;
    };
    var boundedConst = function(dictBounded) {
      return dictBounded;
    };
    var booleanAlgebraConst = function(dictBooleanAlgebra) {
      return dictBooleanAlgebra;
    };
    var applyConst = function(dictSemigroup) {
      return {
        apply: function(v) {
          return function(v1) {
            return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
        },
        Functor0: function() {
          return functorConst;
        }
      };
    };
    var applicativeConst = function(dictMonoid) {
      return {
        pure: function(v) {
          return Data_Monoid.mempty(dictMonoid);
        },
        Apply0: function() {
          return applyConst(dictMonoid.Semigroup0());
        }
      };
    };
    module2.exports = {
      Const,
      newtypeConst,
      eqConst,
      eq1Const,
      ordConst,
      ord1Const,
      boundedConst,
      showConst,
      semigroupoidConst,
      semigroupConst,
      monoidConst,
      semiringConst,
      ringConst,
      euclideanRingConst,
      commutativeRingConst,
      heytingAlgebraConst,
      booleanAlgebraConst,
      functorConst,
      invariantConst,
      applyConst,
      applicativeConst
    };
  }
});

// output/Data.Functor.App/index.js
var require_Data_Functor3 = __commonJS({
  "output/Data.Functor.App/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Data_Eq = require_Data8();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Unsafe_Coerce = require_Unsafe();
    var App = function(x) {
      return x;
    };
    var showApp = function(dictShow) {
      return {
        show: function(v) {
          return "(App " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semigroupApp = function(dictApply) {
      return function(dictSemigroup) {
        return {
          append: function(v) {
            return function(v1) {
              return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
            };
          }
        };
      };
    };
    var plusApp = function(dictPlus) {
      return dictPlus;
    };
    var newtypeApp = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidApp = function(dictApplicative) {
      return function(dictMonoid) {
        return {
          mempty: Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function() {
            return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }
        };
      };
    };
    var monadPlusApp = function(dictMonadPlus) {
      return dictMonadPlus;
    };
    var monadApp = function(dictMonad) {
      return dictMonad;
    };
    var lazyApp = function(dictLazy) {
      return dictLazy;
    };
    var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
    var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;
    var hoistApp = function(f) {
      return function(v) {
        return f(v);
      };
    };
    var functorApp = function(dictFunctor) {
      return dictFunctor;
    };
    var extendApp = function(dictExtend) {
      return dictExtend;
    };
    var eqApp = function(dictEq1) {
      return function(dictEq) {
        return {
          eq: function(x) {
            return function(y) {
              return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
            };
          }
        };
      };
    };
    var ordApp = function(dictOrd1) {
      return function(dictOrd) {
        return {
          compare: function(x) {
            return function(y) {
              return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
            };
          },
          Eq0: function() {
            return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
          }
        };
      };
    };
    var eq1App = function(dictEq1) {
      return {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqApp(dictEq1)(dictEq));
        }
      };
    };
    var ord1App = function(dictOrd1) {
      return {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
        },
        Eq10: function() {
          return eq1App(dictOrd1.Eq10());
        }
      };
    };
    var comonadApp = function(dictComonad) {
      return dictComonad;
    };
    var bindApp = function(dictBind) {
      return dictBind;
    };
    var applyApp = function(dictApply) {
      return dictApply;
    };
    var applicativeApp = function(dictApplicative) {
      return dictApplicative;
    };
    var alternativeApp = function(dictAlternative) {
      return dictAlternative;
    };
    var monadZeroApp = function(dictMonadZero) {
      return {
        Monad0: function() {
          return monadApp(dictMonadZero.Monad0());
        },
        Alternative1: function() {
          return alternativeApp(dictMonadZero.Alternative1());
        },
        MonadZeroIsDeprecated2: function() {
          return void 0;
        }
      };
    };
    var altApp = function(dictAlt) {
      return dictAlt;
    };
    module2.exports = {
      App,
      hoistApp,
      hoistLiftApp,
      hoistLowerApp,
      newtypeApp,
      eqApp,
      eq1App,
      ordApp,
      ord1App,
      showApp,
      semigroupApp,
      monoidApp,
      monadZeroApp,
      functorApp,
      applyApp,
      applicativeApp,
      bindApp,
      monadApp,
      altApp,
      plusApp,
      alternativeApp,
      monadPlusApp,
      lazyApp,
      extendApp,
      comonadApp
    };
  }
});

// output/Data.Functor.Compose/index.js
var require_Data_Functor4 = __commonJS({
  "output/Data.Functor.Compose/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Plus = require_Control9();
    var Data_Eq = require_Data8();
    var Data_Functor = require_Data4();
    var Data_Functor_App = require_Data_Functor3();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Compose = function(x) {
      return x;
    };
    var showCompose = function(dictShow) {
      return {
        show: function(v) {
          return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var newtypeCompose = {
      Coercible0: function() {
        return void 0;
      }
    };
    var functorCompose = function(dictFunctor) {
      return function(dictFunctor1) {
        return {
          map: function(f) {
            return function(v) {
              return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
            };
          }
        };
      };
    };
    var eqCompose = function(dictEq1) {
      return function(dictEq11) {
        return function(dictEq) {
          return {
            eq: function(v) {
              return function(v1) {
                return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
              };
            }
          };
        };
      };
    };
    var ordCompose = function(dictOrd1) {
      return function(dictOrd11) {
        return function(dictOrd) {
          return {
            compare: function(v) {
              return function(v1) {
                return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
              };
            },
            Eq0: function() {
              return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }
          };
        };
      };
    };
    var eq1Compose = function(dictEq1) {
      return function(dictEq11) {
        return {
          eq1: function(dictEq) {
            return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
          }
        };
      };
    };
    var ord1Compose = function(dictOrd1) {
      return function(dictOrd11) {
        return {
          compare1: function(dictOrd) {
            return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
          },
          Eq10: function() {
            return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
          }
        };
      };
    };
    var bihoistCompose = function(dictFunctor) {
      return function(natF) {
        return function(natG) {
          return function(v) {
            return natF(Data_Functor.map(dictFunctor)(natG)(v));
          };
        };
      };
    };
    var applyCompose = function(dictApply) {
      return function(dictApply1) {
        return {
          apply: function(v) {
            return function(v1) {
              return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
            };
          },
          Functor0: function() {
            return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
          }
        };
      };
    };
    var applicativeCompose = function(dictApplicative) {
      return function(dictApplicative1) {
        return {
          pure: function() {
            var $51 = Control_Applicative.pure(dictApplicative);
            var $52 = Control_Applicative.pure(dictApplicative1);
            return function($53) {
              return Compose($51($52($53)));
            };
          }(),
          Apply0: function() {
            return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
          }
        };
      };
    };
    var altCompose = function(dictAlt) {
      return function(dictFunctor) {
        return {
          alt: function(v) {
            return function(v1) {
              return Compose(Control_Alt.alt(dictAlt)(v)(v1));
            };
          },
          Functor0: function() {
            return functorCompose(dictAlt.Functor0())(dictFunctor);
          }
        };
      };
    };
    var plusCompose = function(dictPlus) {
      return function(dictFunctor) {
        return {
          empty: Control_Plus.empty(dictPlus),
          Alt0: function() {
            return altCompose(dictPlus.Alt0())(dictFunctor);
          }
        };
      };
    };
    var alternativeCompose = function(dictAlternative) {
      return function(dictApplicative) {
        return {
          Applicative0: function() {
            return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
          },
          Plus1: function() {
            return plusCompose(dictAlternative.Plus1())(dictApplicative.Apply0().Functor0());
          }
        };
      };
    };
    module2.exports = {
      Compose,
      bihoistCompose,
      newtypeCompose,
      eqCompose,
      eq1Compose,
      ordCompose,
      ord1Compose,
      showCompose,
      functorCompose,
      applyCompose,
      applicativeCompose,
      altCompose,
      plusCompose,
      alternativeCompose
    };
  }
});

// output/Data.Functor.Product/index.js
var require_Data_Functor5 = __commonJS({
  "output/Data.Functor.Product/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Bifunctor = require_Data24();
    var Data_Eq = require_Data8();
    var Data_Functor = require_Data4();
    var Data_Newtype = require_Data23();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Data_Tuple = require_Data22();
    var Product = function(x) {
      return x;
    };
    var showProduct = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(v) {
            return "(product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          }
        };
      };
    };
    var product = function(fa) {
      return function(ga) {
        return new Data_Tuple.Tuple(fa, ga);
      };
    };
    var newtypeProduct = {
      Coercible0: function() {
        return void 0;
      }
    };
    var functorProduct = function(dictFunctor) {
      return function(dictFunctor1) {
        return {
          map: function(f) {
            return function(v) {
              return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
            };
          }
        };
      };
    };
    var eq1Product = function(dictEq1) {
      return function(dictEq11) {
        return {
          eq1: function(dictEq) {
            return function(v) {
              return function(v1) {
                return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq11)(dictEq)(v.value1)(v1.value1);
              };
            };
          }
        };
      };
    };
    var eqProduct = function(dictEq1) {
      return function(dictEq11) {
        return function(dictEq) {
          return {
            eq: Data_Eq.eq1(eq1Product(dictEq1)(dictEq11))(dictEq)
          };
        };
      };
    };
    var ord1Product = function(dictOrd1) {
      return function(dictOrd11) {
        return {
          compare1: function(dictOrd) {
            return function(v) {
              return function(v1) {
                var v2 = Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                if (v2 instanceof Data_Ordering.EQ) {
                  return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value1)(v1.value1);
                }
                ;
                return v2;
              };
            };
          },
          Eq10: function() {
            return eq1Product(dictOrd1.Eq10())(dictOrd11.Eq10());
          }
        };
      };
    };
    var ordProduct = function(dictOrd1) {
      return function(dictOrd11) {
        return function(dictOrd) {
          return {
            compare: Data_Ord.compare1(ord1Product(dictOrd1)(dictOrd11))(dictOrd),
            Eq0: function() {
              return eqProduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
            }
          };
        };
      };
    };
    var bihoistProduct = function(natF) {
      return function(natG) {
        return function(v) {
          return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(natF)(natG)(v);
        };
      };
    };
    var applyProduct = function(dictApply) {
      return function(dictApply1) {
        return {
          apply: function(v) {
            return function(v1) {
              return product(Control_Apply.apply(dictApply)(v.value0)(v1.value0))(Control_Apply.apply(dictApply1)(v.value1)(v1.value1));
            };
          },
          Functor0: function() {
            return functorProduct(dictApply.Functor0())(dictApply1.Functor0());
          }
        };
      };
    };
    var bindProduct = function(dictBind) {
      return function(dictBind1) {
        return {
          bind: function(v) {
            return function(f) {
              return product(Control_Bind.bind(dictBind)(v.value0)(function() {
                var $67 = Data_Newtype.unwrap();
                return function($68) {
                  return Data_Tuple.fst($67(f($68)));
                };
              }()))(Control_Bind.bind(dictBind1)(v.value1)(function() {
                var $69 = Data_Newtype.unwrap();
                return function($70) {
                  return Data_Tuple.snd($69(f($70)));
                };
              }()));
            };
          },
          Apply0: function() {
            return applyProduct(dictBind.Apply0())(dictBind1.Apply0());
          }
        };
      };
    };
    var applicativeProduct = function(dictApplicative) {
      return function(dictApplicative1) {
        return {
          pure: function(a) {
            return product(Control_Applicative.pure(dictApplicative)(a))(Control_Applicative.pure(dictApplicative1)(a));
          },
          Apply0: function() {
            return applyProduct(dictApplicative.Apply0())(dictApplicative1.Apply0());
          }
        };
      };
    };
    var monadProduct = function(dictMonad) {
      return function(dictMonad1) {
        return {
          Applicative0: function() {
            return applicativeProduct(dictMonad.Applicative0())(dictMonad1.Applicative0());
          },
          Bind1: function() {
            return bindProduct(dictMonad.Bind1())(dictMonad1.Bind1());
          }
        };
      };
    };
    module2.exports = {
      Product,
      product,
      bihoistProduct,
      newtypeProduct,
      eqProduct,
      eq1Product,
      ordProduct,
      ord1Product,
      showProduct,
      functorProduct,
      applyProduct,
      applicativeProduct,
      bindProduct,
      monadProduct
    };
  }
});

// output/Data.Maybe.Last/index.js
var require_Data_Maybe2 = __commonJS({
  "output/Data.Maybe.Last/index.js"(exports2, module2) {
    "use strict";
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Last = function(x) {
      return x;
    };
    var showLast = function(dictShow) {
      return {
        show: function(v) {
          return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
        }
      };
    };
    var semigroupLast = {
      append: function(v) {
        return function(v1) {
          if (v1 instanceof Data_Maybe.Just) {
            return v1;
          }
          ;
          if (v1 instanceof Data_Maybe.Nothing) {
            return v;
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [v.constructor.name, v1.constructor.name]);
        };
      }
    };
    var ordLast = function(dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
    };
    var ord1Last = Data_Maybe.ord1Maybe;
    var newtypeLast = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidLast = {
      mempty: Data_Maybe.Nothing.value,
      Semigroup0: function() {
        return semigroupLast;
      }
    };
    var monadLast = Data_Maybe.monadMaybe;
    var invariantLast = Data_Maybe.invariantMaybe;
    var functorLast = Data_Maybe.functorMaybe;
    var extendLast = Data_Maybe.extendMaybe;
    var eqLast = function(dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
    };
    var eq1Last = Data_Maybe.eq1Maybe;
    var boundedLast = function(dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
    };
    var bindLast = Data_Maybe.bindMaybe;
    var applyLast = Data_Maybe.applyMaybe;
    var applicativeLast = Data_Maybe.applicativeMaybe;
    var altLast = {
      alt: Data_Semigroup.append(semigroupLast),
      Functor0: function() {
        return functorLast;
      }
    };
    var plusLast = {
      empty: Data_Monoid.mempty(monoidLast),
      Alt0: function() {
        return altLast;
      }
    };
    var alternativeLast = {
      Applicative0: function() {
        return applicativeLast;
      },
      Plus1: function() {
        return plusLast;
      }
    };
    var monadZeroLast = {
      Monad0: function() {
        return monadLast;
      },
      Alternative1: function() {
        return alternativeLast;
      },
      MonadZeroIsDeprecated2: function() {
        return void 0;
      }
    };
    module2.exports = {
      Last,
      newtypeLast,
      eqLast,
      eq1Last,
      ordLast,
      ord1Last,
      boundedLast,
      functorLast,
      invariantLast,
      applyLast,
      applicativeLast,
      bindLast,
      monadLast,
      extendLast,
      showLast,
      semigroupLast,
      monoidLast,
      altLast,
      plusLast,
      alternativeLast,
      monadZeroLast
    };
  }
});

// output/Data.Monoid.Additive/index.js
var require_Data_Monoid5 = __commonJS({
  "output/Data.Monoid.Additive/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_Ord = require_Data12();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Additive = function(x) {
      return x;
    };
    var showAdditive = function(dictShow) {
      return {
        show: function(v) {
          return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semigroupAdditive = function(dictSemiring) {
      return {
        append: function(v) {
          return function(v1) {
            return Data_Semiring.add(dictSemiring)(v)(v1);
          };
        }
      };
    };
    var ordAdditive = function(dictOrd) {
      return dictOrd;
    };
    var monoidAdditive = function(dictSemiring) {
      return {
        mempty: Data_Semiring.zero(dictSemiring),
        Semigroup0: function() {
          return semigroupAdditive(dictSemiring);
        }
      };
    };
    var functorAdditive = {
      map: function(f) {
        return function(m) {
          return f(m);
        };
      }
    };
    var eqAdditive = function(dictEq) {
      return dictEq;
    };
    var eq1Additive = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqAdditive(dictEq));
      }
    };
    var ord1Additive = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordAdditive(dictOrd));
      },
      Eq10: function() {
        return eq1Additive;
      }
    };
    var boundedAdditive = function(dictBounded) {
      return dictBounded;
    };
    var applyAdditive = {
      apply: function(v) {
        return function(v1) {
          return v(v1);
        };
      },
      Functor0: function() {
        return functorAdditive;
      }
    };
    var bindAdditive = {
      bind: function(v) {
        return function(f) {
          return f(v);
        };
      },
      Apply0: function() {
        return applyAdditive;
      }
    };
    var applicativeAdditive = {
      pure: Additive,
      Apply0: function() {
        return applyAdditive;
      }
    };
    var monadAdditive = {
      Applicative0: function() {
        return applicativeAdditive;
      },
      Bind1: function() {
        return bindAdditive;
      }
    };
    module2.exports = {
      Additive,
      eqAdditive,
      eq1Additive,
      ordAdditive,
      ord1Additive,
      boundedAdditive,
      showAdditive,
      functorAdditive,
      applyAdditive,
      applicativeAdditive,
      bindAdditive,
      monadAdditive,
      semigroupAdditive,
      monoidAdditive
    };
  }
});

// output/Data.Monoid.Multiplicative/index.js
var require_Data_Monoid6 = __commonJS({
  "output/Data.Monoid.Multiplicative/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_Ord = require_Data12();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Multiplicative = function(x) {
      return x;
    };
    var showMultiplicative = function(dictShow) {
      return {
        show: function(v) {
          return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semigroupMultiplicative = function(dictSemiring) {
      return {
        append: function(v) {
          return function(v1) {
            return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
        }
      };
    };
    var ordMultiplicative = function(dictOrd) {
      return dictOrd;
    };
    var monoidMultiplicative = function(dictSemiring) {
      return {
        mempty: Data_Semiring.one(dictSemiring),
        Semigroup0: function() {
          return semigroupMultiplicative(dictSemiring);
        }
      };
    };
    var functorMultiplicative = {
      map: function(f) {
        return function(m) {
          return f(m);
        };
      }
    };
    var eqMultiplicative = function(dictEq) {
      return dictEq;
    };
    var eq1Multiplicative = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqMultiplicative(dictEq));
      }
    };
    var ord1Multiplicative = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordMultiplicative(dictOrd));
      },
      Eq10: function() {
        return eq1Multiplicative;
      }
    };
    var boundedMultiplicative = function(dictBounded) {
      return dictBounded;
    };
    var applyMultiplicative = {
      apply: function(v) {
        return function(v1) {
          return v(v1);
        };
      },
      Functor0: function() {
        return functorMultiplicative;
      }
    };
    var bindMultiplicative = {
      bind: function(v) {
        return function(f) {
          return f(v);
        };
      },
      Apply0: function() {
        return applyMultiplicative;
      }
    };
    var applicativeMultiplicative = {
      pure: Multiplicative,
      Apply0: function() {
        return applyMultiplicative;
      }
    };
    var monadMultiplicative = {
      Applicative0: function() {
        return applicativeMultiplicative;
      },
      Bind1: function() {
        return bindMultiplicative;
      }
    };
    module2.exports = {
      Multiplicative,
      eqMultiplicative,
      eq1Multiplicative,
      ordMultiplicative,
      ord1Multiplicative,
      boundedMultiplicative,
      showMultiplicative,
      functorMultiplicative,
      applyMultiplicative,
      applicativeMultiplicative,
      bindMultiplicative,
      monadMultiplicative,
      semigroupMultiplicative,
      monoidMultiplicative
    };
  }
});

// output/Data.FunctorWithIndex/index.js
var require_Data27 = __commonJS({
  "output/Data.FunctorWithIndex/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign24();
    var Data_Bifunctor = require_Data24();
    var Data_Const = require_Data26();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Functor_App = require_Data_Functor3();
    var Data_Functor_Compose = require_Data_Functor4();
    var Data_Functor_Coproduct = require_Data_Functor2();
    var Data_Functor_Product = require_Data_Functor5();
    var Data_Identity = require_Data20();
    var Data_Maybe = require_Data15();
    var Data_Maybe_First = require_Data_Maybe();
    var Data_Maybe_Last = require_Data_Maybe2();
    var Data_Monoid_Additive = require_Data_Monoid5();
    var Data_Monoid_Conj = require_Data_Monoid();
    var Data_Monoid_Disj = require_Data_Monoid2();
    var Data_Monoid_Dual = require_Data_Monoid3();
    var Data_Monoid_Multiplicative = require_Data_Monoid6();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var mapWithIndex = function(dict) {
      return dict.mapWithIndex;
    };
    var mapDefault = function(dictFunctorWithIndex) {
      return function(f) {
        return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
      };
    };
    var functorWithIndexTuple = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Tuple.functorTuple)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Tuple.functorTuple;
      }
    };
    var functorWithIndexProduct = function(dictFunctorWithIndex) {
      return function(dictFunctorWithIndex1) {
        return {
          mapWithIndex: function(f) {
            return function(v) {
              return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(mapWithIndex(dictFunctorWithIndex)(function($28) {
                return f(Data_Either.Left.create($28));
              }))(mapWithIndex(dictFunctorWithIndex1)(function($29) {
                return f(Data_Either.Right.create($29));
              }))(v);
            };
          },
          Functor0: function() {
            return Data_Functor_Product.functorProduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }
        };
      };
    };
    var functorWithIndexMultiplicative = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Monoid_Multiplicative.functorMultiplicative;
      }
    };
    var functorWithIndexMaybe = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Maybe.functorMaybe;
      }
    };
    var functorWithIndexLast = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Maybe_Last.functorLast;
      }
    };
    var functorWithIndexIdentity = {
      mapWithIndex: function(f) {
        return function(v) {
          return f(Data_Unit.unit)(v);
        };
      },
      Functor0: function() {
        return Data_Identity.functorIdentity;
      }
    };
    var functorWithIndexFirst = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Maybe_First.functorFirst;
      }
    };
    var functorWithIndexEither = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Either.functorEither)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Either.functorEither;
      }
    };
    var functorWithIndexDual = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Monoid_Dual.functorDual;
      }
    };
    var functorWithIndexDisj = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Monoid_Disj.functorDisj;
      }
    };
    var functorWithIndexCoproduct = function(dictFunctorWithIndex) {
      return function(dictFunctorWithIndex1) {
        return {
          mapWithIndex: function(f) {
            return function(v) {
              return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(mapWithIndex(dictFunctorWithIndex)(function($30) {
                return f(Data_Either.Left.create($30));
              }))(mapWithIndex(dictFunctorWithIndex1)(function($31) {
                return f(Data_Either.Right.create($31));
              }))(v);
            };
          },
          Functor0: function() {
            return Data_Functor_Coproduct.functorCoproduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }
        };
      };
    };
    var functorWithIndexConst = {
      mapWithIndex: function(v) {
        return function(v1) {
          return v1;
        };
      },
      Functor0: function() {
        return Data_Const.functorConst;
      }
    };
    var functorWithIndexConj = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Monoid_Conj.functorConj;
      }
    };
    var functorWithIndexCompose = function(dictFunctorWithIndex) {
      return function(dictFunctorWithIndex1) {
        return {
          mapWithIndex: function(f) {
            return function(v) {
              return Data_Functor_Compose.Compose(mapWithIndex(dictFunctorWithIndex)(function() {
                var $32 = mapWithIndex(dictFunctorWithIndex1);
                var $33 = Data_Tuple.curry(f);
                return function($34) {
                  return $32($33($34));
                };
              }())(v));
            };
          },
          Functor0: function() {
            return Data_Functor_Compose.functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
          }
        };
      };
    };
    var functorWithIndexArray = {
      mapWithIndex: $foreign.mapWithIndexArray,
      Functor0: function() {
        return Data_Functor.functorArray;
      }
    };
    var functorWithIndexApp = function(dictFunctorWithIndex) {
      return {
        mapWithIndex: function(f) {
          return function(v) {
            return Data_Functor_App.App(mapWithIndex(dictFunctorWithIndex)(f)(v));
          };
        },
        Functor0: function() {
          return Data_Functor_App.functorApp(dictFunctorWithIndex.Functor0());
        }
      };
    };
    var functorWithIndexAdditive = {
      mapWithIndex: function(f) {
        return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return Data_Monoid_Additive.functorAdditive;
      }
    };
    module2.exports = {
      mapWithIndex,
      mapDefault,
      functorWithIndexArray,
      functorWithIndexMaybe,
      functorWithIndexFirst,
      functorWithIndexLast,
      functorWithIndexAdditive,
      functorWithIndexDual,
      functorWithIndexConj,
      functorWithIndexDisj,
      functorWithIndexMultiplicative,
      functorWithIndexEither,
      functorWithIndexTuple,
      functorWithIndexIdentity,
      functorWithIndexConst,
      functorWithIndexProduct,
      functorWithIndexCoproduct,
      functorWithIndexCompose,
      functorWithIndexApp
    };
  }
});

// output/Data.FoldableWithIndex/index.js
var require_Data28 = __commonJS({
  "output/Data.FoldableWithIndex/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor_Coproduct = require_Data_Functor2();
    var Data_FunctorWithIndex = require_Data27();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Monoid_Conj = require_Data_Monoid();
    var Data_Monoid_Disj = require_Data_Monoid2();
    var Data_Monoid_Dual = require_Data_Monoid3();
    var Data_Monoid_Endo = require_Data_Monoid4();
    var Data_Newtype = require_Data23();
    var Data_Semigroup = require_Data7();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var foldrWithIndex = function(dict) {
      return dict.foldrWithIndex;
    };
    var traverseWithIndex_ = function(dictApplicative) {
      return function(dictFoldableWithIndex) {
        return function(f) {
          return foldrWithIndex(dictFoldableWithIndex)(function(i) {
            var $164 = Control_Apply.applySecond(dictApplicative.Apply0());
            var $165 = f(i);
            return function($166) {
              return $164($165($166));
            };
          })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
      };
    };
    var forWithIndex_ = function(dictApplicative) {
      return function(dictFoldableWithIndex) {
        return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
      };
    };
    var foldrDefault = function(dictFoldableWithIndex) {
      return function(f) {
        return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
      };
    };
    var foldlWithIndex = function(dict) {
      return dict.foldlWithIndex;
    };
    var foldlDefault = function(dictFoldableWithIndex) {
      return function(f) {
        return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
      };
    };
    var foldableWithIndexTuple = {
      foldrWithIndex: function(f) {
        return function(z) {
          return function(v) {
            return f(Data_Unit.unit)(v.value1)(z);
          };
        };
      },
      foldlWithIndex: function(f) {
        return function(z) {
          return function(v) {
            return f(Data_Unit.unit)(z)(v.value1);
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(Data_Unit.unit)(v.value1);
          };
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableTuple;
      }
    };
    var foldableWithIndexMultiplicative = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableMultiplicative;
      }
    };
    var foldableWithIndexMaybe = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableMaybe;
      }
    };
    var foldableWithIndexLast = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableLast;
      }
    };
    var foldableWithIndexIdentity = {
      foldrWithIndex: function(f) {
        return function(z) {
          return function(v) {
            return f(Data_Unit.unit)(v)(z);
          };
        };
      },
      foldlWithIndex: function(f) {
        return function(z) {
          return function(v) {
            return f(Data_Unit.unit)(z)(v);
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(Data_Unit.unit)(v);
          };
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableIdentity;
      }
    };
    var foldableWithIndexFirst = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableFirst;
      }
    };
    var foldableWithIndexEither = {
      foldrWithIndex: function(v) {
        return function(z) {
          return function(v1) {
            if (v1 instanceof Data_Either.Left) {
              return z;
            }
            ;
            if (v1 instanceof Data_Either.Right) {
              return v(Data_Unit.unit)(v1.value0)(z);
            }
            ;
            throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
          };
        };
      },
      foldlWithIndex: function(v) {
        return function(z) {
          return function(v1) {
            if (v1 instanceof Data_Either.Left) {
              return z;
            }
            ;
            if (v1 instanceof Data_Either.Right) {
              return v(Data_Unit.unit)(z)(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Data_Either.Left) {
              return Data_Monoid.mempty(dictMonoid);
            }
            ;
            if (v1 instanceof Data_Either.Right) {
              return v(Data_Unit.unit)(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableEither;
      }
    };
    var foldableWithIndexDual = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableDual;
      }
    };
    var foldableWithIndexDisj = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableDisj;
      }
    };
    var foldableWithIndexConst = {
      foldrWithIndex: function(v) {
        return function(z) {
          return function(v1) {
            return z;
          };
        };
      },
      foldlWithIndex: function(v) {
        return function(z) {
          return function(v1) {
            return z;
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(v) {
          return function(v1) {
            return Data_Monoid.mempty(dictMonoid);
          };
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableConst;
      }
    };
    var foldableWithIndexConj = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableConj;
      }
    };
    var foldableWithIndexAdditive = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableAdditive;
      }
    };
    var foldWithIndexM = function(dictFoldableWithIndex) {
      return function(dictMonad) {
        return function(f) {
          return function(a0) {
            return foldlWithIndex(dictFoldableWithIndex)(function(i) {
              return function(ma) {
                return function(b) {
                  return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                };
              };
            })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
          };
        };
      };
    };
    var foldMapWithIndexDefaultR = function(dictFoldableWithIndex) {
      return function(dictMonoid) {
        return function(f) {
          return foldrWithIndex(dictFoldableWithIndex)(function(i) {
            return function(x) {
              return function(acc) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
              };
            };
          })(Data_Monoid.mempty(dictMonoid));
        };
      };
    };
    var foldableWithIndexArray = {
      foldrWithIndex: function(f) {
        return function(z) {
          var $167 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function(v) {
            return function(y) {
              return f(v.value0)(v.value1)(y);
            };
          })(z);
          var $168 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function($169) {
            return $167($168($169));
          };
        };
      },
      foldlWithIndex: function(f) {
        return function(z) {
          var $170 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function(y) {
            return function(v) {
              return f(v.value0)(y)(v.value1);
            };
          })(z);
          var $171 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
          return function($172) {
            return $170($171($172));
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
      },
      Foldable0: function() {
        return Data_Foldable.foldableArray;
      }
    };
    var foldMapWithIndexDefaultL = function(dictFoldableWithIndex) {
      return function(dictMonoid) {
        return function(f) {
          return foldlWithIndex(dictFoldableWithIndex)(function(i) {
            return function(acc) {
              return function(x) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
              };
            };
          })(Data_Monoid.mempty(dictMonoid));
        };
      };
    };
    var foldMapWithIndex = function(dict) {
      return dict.foldMapWithIndex;
    };
    var foldableWithIndexApp = function(dictFoldableWithIndex) {
      return {
        foldrWithIndex: function(f) {
          return function(z) {
            return function(v) {
              return foldrWithIndex(dictFoldableWithIndex)(f)(z)(v);
            };
          };
        },
        foldlWithIndex: function(f) {
          return function(z) {
            return function(v) {
              return foldlWithIndex(dictFoldableWithIndex)(f)(z)(v);
            };
          };
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(f)(v);
            };
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableApp(dictFoldableWithIndex.Foldable0());
        }
      };
    };
    var foldableWithIndexCompose = function(dictFoldableWithIndex) {
      return function(dictFoldableWithIndex1) {
        return {
          foldrWithIndex: function(f) {
            return function(i) {
              return function(v) {
                return foldrWithIndex(dictFoldableWithIndex)(function(a) {
                  return Data_Function.flip(foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
                })(i)(v);
              };
            };
          },
          foldlWithIndex: function(f) {
            return function(i) {
              return function(v) {
                return foldlWithIndex(dictFoldableWithIndex)(function() {
                  var $173 = foldlWithIndex(dictFoldableWithIndex1);
                  var $174 = Data_Tuple.curry(f);
                  return function($175) {
                    return $173($174($175));
                  };
                }())(i)(v);
              };
            };
          },
          foldMapWithIndex: function(dictMonoid) {
            return function(f) {
              return function(v) {
                return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function() {
                  var $176 = foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid);
                  var $177 = Data_Tuple.curry(f);
                  return function($178) {
                    return $176($177($178));
                  };
                }())(v);
              };
            };
          },
          Foldable0: function() {
            return Data_Foldable.foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }
        };
      };
    };
    var foldableWithIndexCoproduct = function(dictFoldableWithIndex) {
      return function(dictFoldableWithIndex1) {
        return {
          foldrWithIndex: function(f) {
            return function(z) {
              return Data_Functor_Coproduct.coproduct(foldrWithIndex(dictFoldableWithIndex)(function($179) {
                return f(Data_Either.Left.create($179));
              })(z))(foldrWithIndex(dictFoldableWithIndex1)(function($180) {
                return f(Data_Either.Right.create($180));
              })(z));
            };
          },
          foldlWithIndex: function(f) {
            return function(z) {
              return Data_Functor_Coproduct.coproduct(foldlWithIndex(dictFoldableWithIndex)(function($181) {
                return f(Data_Either.Left.create($181));
              })(z))(foldlWithIndex(dictFoldableWithIndex1)(function($182) {
                return f(Data_Either.Right.create($182));
              })(z));
            };
          },
          foldMapWithIndex: function(dictMonoid) {
            return function(f) {
              return Data_Functor_Coproduct.coproduct(foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function($183) {
                return f(Data_Either.Left.create($183));
              }))(foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function($184) {
                return f(Data_Either.Right.create($184));
              }));
            };
          },
          Foldable0: function() {
            return Data_Foldable.foldableCoproduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }
        };
      };
    };
    var foldableWithIndexProduct = function(dictFoldableWithIndex) {
      return function(dictFoldableWithIndex1) {
        return {
          foldrWithIndex: function(f) {
            return function(z) {
              return function(v) {
                return foldrWithIndex(dictFoldableWithIndex)(function($185) {
                  return f(Data_Either.Left.create($185));
                })(foldrWithIndex(dictFoldableWithIndex1)(function($186) {
                  return f(Data_Either.Right.create($186));
                })(z)(v.value1))(v.value0);
              };
            };
          },
          foldlWithIndex: function(f) {
            return function(z) {
              return function(v) {
                return foldlWithIndex(dictFoldableWithIndex1)(function($187) {
                  return f(Data_Either.Right.create($187));
                })(foldlWithIndex(dictFoldableWithIndex)(function($188) {
                  return f(Data_Either.Left.create($188));
                })(z)(v.value0))(v.value1);
              };
            };
          },
          foldMapWithIndex: function(dictMonoid) {
            return function(f) {
              return function(v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function($189) {
                  return f(Data_Either.Left.create($189));
                })(v.value0))(foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function($190) {
                  return f(Data_Either.Right.create($190));
                })(v.value1));
              };
            };
          },
          Foldable0: function() {
            return Data_Foldable.foldableProduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
          }
        };
      };
    };
    var foldlWithIndexDefault = function(dictFoldableWithIndex) {
      return function(c) {
        return function(u) {
          return function(xs) {
            return Data_Newtype.unwrap()(Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function(i) {
              var $191 = Data_Function.flip(c(i));
              return function($192) {
                return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($191($192)));
              };
            })(xs)))(u);
          };
        };
      };
    };
    var foldrWithIndexDefault = function(dictFoldableWithIndex) {
      return function(c) {
        return function(u) {
          return function(xs) {
            return Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function(i) {
              var $193 = c(i);
              return function($194) {
                return Data_Monoid_Endo.Endo($193($194));
              };
            })(xs))(u);
          };
        };
      };
    };
    var surroundMapWithIndex = function(dictFoldableWithIndex) {
      return function(dictSemigroup) {
        return function(d) {
          return function(t) {
            return function(f) {
              var joined = function(i) {
                return function(a) {
                  return function(m) {
                    return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
                  };
                };
              };
              return Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
            };
          };
        };
      };
    };
    var foldMapDefault = function(dictFoldableWithIndex) {
      return function(dictMonoid) {
        return function(f) {
          return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
        };
      };
    };
    var findWithIndex = function(dictFoldableWithIndex) {
      return function(p) {
        var go = function(v) {
          return function(v1) {
            return function(v2) {
              if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
                return new Data_Maybe.Just({
                  index: v,
                  value: v2
                });
              }
              ;
              return v1;
            };
          };
        };
        return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
      };
    };
    var findMapWithIndex = function(dictFoldableWithIndex) {
      return function(f) {
        var go = function(v) {
          return function(v1) {
            return function(v2) {
              if (v1 instanceof Data_Maybe.Nothing) {
                return f(v)(v2);
              }
              ;
              return v1;
            };
          };
        };
        return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
      };
    };
    var anyWithIndex = function(dictFoldableWithIndex) {
      return function(dictHeytingAlgebra) {
        return function(t) {
          var $195 = Data_Newtype.unwrap();
          var $196 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function(i) {
            var $198 = t(i);
            return function($199) {
              return Data_Monoid_Disj.Disj($198($199));
            };
          });
          return function($197) {
            return $195($196($197));
          };
        };
      };
    };
    var allWithIndex = function(dictFoldableWithIndex) {
      return function(dictHeytingAlgebra) {
        return function(t) {
          var $200 = Data_Newtype.unwrap();
          var $201 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function(i) {
            var $203 = t(i);
            return function($204) {
              return Data_Monoid_Conj.Conj($203($204));
            };
          });
          return function($202) {
            return $200($201($202));
          };
        };
      };
    };
    module2.exports = {
      foldrWithIndex,
      foldlWithIndex,
      foldMapWithIndex,
      foldrWithIndexDefault,
      foldlWithIndexDefault,
      foldMapWithIndexDefaultR,
      foldMapWithIndexDefaultL,
      foldWithIndexM,
      traverseWithIndex_,
      forWithIndex_,
      surroundMapWithIndex,
      allWithIndex,
      anyWithIndex,
      findWithIndex,
      findMapWithIndex,
      foldrDefault,
      foldlDefault,
      foldMapDefault,
      foldableWithIndexArray,
      foldableWithIndexMaybe,
      foldableWithIndexFirst,
      foldableWithIndexLast,
      foldableWithIndexAdditive,
      foldableWithIndexDual,
      foldableWithIndexDisj,
      foldableWithIndexConj,
      foldableWithIndexMultiplicative,
      foldableWithIndexEither,
      foldableWithIndexTuple,
      foldableWithIndexIdentity,
      foldableWithIndexConst,
      foldableWithIndexProduct,
      foldableWithIndexCoproduct,
      foldableWithIndexCompose,
      foldableWithIndexApp
    };
  }
});

// output/Data.Ord.Max/index.js
var require_Data_Ord = __commonJS({
  "output/Data.Ord.Max/index.js"(exports2, module2) {
    "use strict";
    var Data_Bounded = require_Data13();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Max = function(x) {
      return x;
    };
    var showMax = function(dictShow) {
      return {
        show: function(v) {
          return "(Max " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semigroupMax = function(dictOrd) {
      return {
        append: function(v) {
          return function(v1) {
            return Data_Ord.max(dictOrd)(v)(v1);
          };
        }
      };
    };
    var newtypeMax = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidMax = function(dictBounded) {
      return {
        mempty: Data_Bounded.bottom(dictBounded),
        Semigroup0: function() {
          return semigroupMax(dictBounded.Ord0());
        }
      };
    };
    var eqMax = function(dictEq) {
      return dictEq;
    };
    var ordMax = function(dictOrd) {
      return {
        compare: function(v) {
          return function(v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
          };
        },
        Eq0: function() {
          return eqMax(dictOrd.Eq0());
        }
      };
    };
    module2.exports = {
      Max,
      newtypeMax,
      eqMax,
      ordMax,
      semigroupMax,
      monoidMax,
      showMax
    };
  }
});

// output/Data.Ord.Min/index.js
var require_Data_Ord2 = __commonJS({
  "output/Data.Ord.Min/index.js"(exports2, module2) {
    "use strict";
    var Data_Bounded = require_Data13();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Min = function(x) {
      return x;
    };
    var showMin = function(dictShow) {
      return {
        show: function(v) {
          return "(Min " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semigroupMin = function(dictOrd) {
      return {
        append: function(v) {
          return function(v1) {
            return Data_Ord.min(dictOrd)(v)(v1);
          };
        }
      };
    };
    var newtypeMin = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidMin = function(dictBounded) {
      return {
        mempty: Data_Bounded.top(dictBounded),
        Semigroup0: function() {
          return semigroupMin(dictBounded.Ord0());
        }
      };
    };
    var eqMin = function(dictEq) {
      return dictEq;
    };
    var ordMin = function(dictOrd) {
      return {
        compare: function(v) {
          return function(v1) {
            return Data_Ord.compare(dictOrd)(v)(v1);
          };
        },
        Eq0: function() {
          return eqMin(dictOrd.Eq0());
        }
      };
    };
    module2.exports = {
      Min,
      newtypeMin,
      eqMin,
      ordMin,
      semigroupMin,
      monoidMin,
      showMin
    };
  }
});

// output/Data.Semigroup.Foldable/index.js
var require_Data_Semigroup = __commonJS({
  "output/Data.Semigroup.Foldable/index.js"(exports2, module2) {
    "use strict";
    var Control_Apply = require_Control3();
    var Control_Category = require_Control2();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Monoid_Dual = require_Data_Monoid3();
    var Data_Newtype = require_Data23();
    var Data_Ord_Max = require_Data_Ord();
    var Data_Ord_Min = require_Data_Ord2();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Unit = require_Data3();
    var JoinWith = function(x) {
      return x;
    };
    var FoldRight1 = function() {
      function FoldRight12(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      FoldRight12.create = function(value0) {
        return function(value1) {
          return new FoldRight12(value0, value1);
        };
      };
      return FoldRight12;
    }();
    var Act = function(x) {
      return x;
    };
    var semigroupJoinWith = function(dictSemigroup) {
      return {
        append: function(v) {
          return function(v1) {
            return JoinWith(function(j) {
              return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
            });
          };
        }
      };
    };
    var semigroupAct = function(dictApply) {
      return {
        append: function(v) {
          return function(v1) {
            return Control_Apply.applySecond(dictApply)(v)(v1);
          };
        }
      };
    };
    var runFoldRight1 = function(v) {
      return v.value0(v.value1);
    };
    var mkFoldRight1 = FoldRight1.create(Data_Function["const"]);
    var joinee = function(v) {
      return v;
    };
    var getAct = function(v) {
      return v;
    };
    var foldr1 = function(dict) {
      return dict.foldr1;
    };
    var foldl1 = function(dict) {
      return dict.foldl1;
    };
    var maximumBy = function(dictFoldable1) {
      return function(cmp) {
        return foldl1(dictFoldable1)(function(x) {
          return function(y) {
            var $76 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
            if ($76) {
              return x;
            }
            ;
            return y;
          };
        });
      };
    };
    var minimumBy = function(dictFoldable1) {
      return function(cmp) {
        return foldl1(dictFoldable1)(function(x) {
          return function(y) {
            var $77 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.LT.value);
            if ($77) {
              return x;
            }
            ;
            return y;
          };
        });
      };
    };
    var foldableTuple = {
      foldMap1: function(dictSemigroup) {
        return function(f) {
          return function(v) {
            return f(v.value1);
          };
        };
      },
      foldr1: function(v) {
        return function(v1) {
          return v1.value1;
        };
      },
      foldl1: function(v) {
        return function(v1) {
          return v1.value1;
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableTuple;
      }
    };
    var foldableMultiplicative = {
      foldr1: function(v) {
        return function(v1) {
          return v1;
        };
      },
      foldl1: function(v) {
        return function(v1) {
          return v1;
        };
      },
      foldMap1: function(dictSemigroup) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableMultiplicative;
      }
    };
    var foldableIdentity = {
      foldMap1: function(dictSemigroup) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      },
      foldl1: function(v) {
        return function(v1) {
          return v1;
        };
      },
      foldr1: function(v) {
        return function(v1) {
          return v1;
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableIdentity;
      }
    };
    var foldableDual = {
      foldr1: function(v) {
        return function(v1) {
          return v1;
        };
      },
      foldl1: function(v) {
        return function(v1) {
          return v1;
        };
      },
      foldMap1: function(dictSemigroup) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      },
      Foldable0: function() {
        return Data_Foldable.foldableDual;
      }
    };
    var foldRight1Semigroup = {
      append: function(v) {
        return function(v1) {
          return new FoldRight1(function(a) {
            return function(f) {
              return v.value0(f(v.value1)(v1.value0(a)(f)))(f);
            };
          }, v1.value1);
        };
      }
    };
    var foldMap1DefaultR = function(dictFoldable1) {
      return function(dictFunctor) {
        return function(dictSemigroup) {
          return function(f) {
            var $115 = foldr1(dictFoldable1)(Data_Semigroup.append(dictSemigroup));
            var $116 = Data_Functor.map(dictFunctor)(f);
            return function($117) {
              return $115($116($117));
            };
          };
        };
      };
    };
    var foldMap1DefaultL = function(dictFoldable1) {
      return function(dictFunctor) {
        return function(dictSemigroup) {
          return function(f) {
            var $118 = foldl1(dictFoldable1)(Data_Semigroup.append(dictSemigroup));
            var $119 = Data_Functor.map(dictFunctor)(f);
            return function($120) {
              return $118($119($120));
            };
          };
        };
      };
    };
    var foldMap1Default = function(dictWarn) {
      return function(dictFoldable1) {
        return function(dictFunctor) {
          return function(dictSemigroup) {
            return foldMap1DefaultL(dictFoldable1)(dictFunctor)(dictSemigroup);
          };
        };
      };
    };
    var foldMap1 = function(dict) {
      return dict.foldMap1;
    };
    var foldl1Default = function(dictFoldable1) {
      var $121 = Data_Function.flip(function() {
        var $123 = Data_Newtype.alaF()()()()(Data_Monoid_Dual.Dual)(foldMap1(dictFoldable1)(Data_Monoid_Dual.semigroupDual(foldRight1Semigroup)))(mkFoldRight1);
        return function($124) {
          return runFoldRight1($123($124));
        };
      }());
      return function($122) {
        return $121(Data_Function.flip($122));
      };
    };
    var foldr1Default = function(dictFoldable1) {
      return Data_Function.flip(function() {
        var $125 = foldMap1(dictFoldable1)(foldRight1Semigroup)(mkFoldRight1);
        return function($126) {
          return runFoldRight1($125($126));
        };
      }());
    };
    var intercalateMap = function(dictFoldable1) {
      return function(dictSemigroup) {
        return function(j) {
          return function(f) {
            return function(foldable) {
              return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function($127) {
                return JoinWith(Data_Function["const"](f($127)));
              })(foldable))(j);
            };
          };
        };
      };
    };
    var intercalate = function(dictFoldable1) {
      return function(dictSemigroup) {
        return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var maximum = function(dictOrd) {
      return function(dictFoldable1) {
        return Data_Newtype.ala()()()(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
      };
    };
    var minimum = function(dictOrd) {
      return function(dictFoldable1) {
        return Data_Newtype.ala()()()(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
      };
    };
    var traverse1_ = function(dictFoldable1) {
      return function(dictApply) {
        return function(f) {
          return function(t) {
            return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function($128) {
              return Act(f($128));
            })(t)));
          };
        };
      };
    };
    var for1_ = function(dictFoldable1) {
      return function(dictApply) {
        return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
      };
    };
    var sequence1_ = function(dictFoldable1) {
      return function(dictApply) {
        return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var fold1 = function(dictFoldable1) {
      return function(dictSemigroup) {
        return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    module2.exports = {
      foldMap1,
      fold1,
      foldr1,
      foldl1,
      traverse1_,
      for1_,
      sequence1_,
      foldr1Default,
      foldl1Default,
      foldMap1DefaultR,
      foldMap1DefaultL,
      foldMap1Default,
      intercalate,
      intercalateMap,
      maximum,
      maximumBy,
      minimum,
      minimumBy,
      foldableDual,
      foldableMultiplicative,
      foldableTuple,
      foldableIdentity
    };
  }
});

// output/Data.Traversable/foreign.js
var require_foreign25 = __commonJS({
  "output/Data.Traversable/foreign.js"(exports2) {
    "use strict";
    exports2.traverseArrayImpl = function() {
      function array1(a) {
        return [a];
      }
      function array2(a) {
        return function(b) {
          return [a, b];
        };
      }
      function array3(a) {
        return function(b) {
          return function(c) {
            return [a, b, c];
          };
        };
      }
      function concat2(xs) {
        return function(ys) {
          return xs.concat(ys);
        };
      }
      return function(apply) {
        return function(map) {
          return function(pure) {
            return function(f) {
              return function(array) {
                function go(bot, top) {
                  switch (top - bot) {
                    case 0:
                      return pure([]);
                    case 1:
                      return map(array1)(f(array[bot]));
                    case 2:
                      return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                    case 3:
                      return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                    default:
                      var pivot = bot + Math.floor((top - bot) / 4) * 2;
                      return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                  }
                }
                return go(0, array.length);
              };
            };
          };
        };
      };
    }();
  }
});

// output/Data.Traversable.Accum/index.js
var require_Data_Traversable = __commonJS({
  "output/Data.Traversable.Accum/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// output/Data.Traversable.Accum.Internal/index.js
var require_Data_Traversable_Accum = __commonJS({
  "output/Data.Traversable.Accum.Internal/index.js"(exports2, module2) {
    "use strict";
    var StateR = function(x) {
      return x;
    };
    var StateL = function(x) {
      return x;
    };
    var stateR = function(v) {
      return v;
    };
    var stateL = function(v) {
      return v;
    };
    var functorStateR = {
      map: function(f) {
        return function(k) {
          return function(s) {
            var v = stateR(k)(s);
            return {
              accum: v.accum,
              value: f(v.value)
            };
          };
        };
      }
    };
    var functorStateL = {
      map: function(f) {
        return function(k) {
          return function(s) {
            var v = stateL(k)(s);
            return {
              accum: v.accum,
              value: f(v.value)
            };
          };
        };
      }
    };
    var applyStateR = {
      apply: function(f) {
        return function(x) {
          return function(s) {
            var v = stateR(x)(s);
            var v1 = stateR(f)(v.accum);
            return {
              accum: v1.accum,
              value: v1.value(v.value)
            };
          };
        };
      },
      Functor0: function() {
        return functorStateR;
      }
    };
    var applyStateL = {
      apply: function(f) {
        return function(x) {
          return function(s) {
            var v = stateL(f)(s);
            var v1 = stateL(x)(v.accum);
            return {
              accum: v1.accum,
              value: v.value(v1.value)
            };
          };
        };
      },
      Functor0: function() {
        return functorStateL;
      }
    };
    var applicativeStateR = {
      pure: function(a) {
        return function(s) {
          return {
            accum: s,
            value: a
          };
        };
      },
      Apply0: function() {
        return applyStateR;
      }
    };
    var applicativeStateL = {
      pure: function(a) {
        return function(s) {
          return {
            accum: s,
            value: a
          };
        };
      },
      Apply0: function() {
        return applyStateL;
      }
    };
    module2.exports = {
      StateL,
      stateL,
      StateR,
      stateR,
      functorStateL,
      applyStateL,
      applicativeStateL,
      functorStateR,
      applyStateR,
      applicativeStateR
    };
  }
});

// output/Data.Traversable/index.js
var require_Data29 = __commonJS({
  "output/Data.Traversable/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign25();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Category = require_Control2();
    var Data_Const = require_Data26();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_Functor_App = require_Data_Functor3();
    var Data_Functor_Compose = require_Data_Functor4();
    var Data_Functor_Coproduct = require_Data_Functor2();
    var Data_Functor_Product = require_Data_Functor5();
    var Data_Identity = require_Data20();
    var Data_Maybe = require_Data15();
    var Data_Maybe_First = require_Data_Maybe();
    var Data_Maybe_Last = require_Data_Maybe2();
    var Data_Monoid_Additive = require_Data_Monoid5();
    var Data_Monoid_Conj = require_Data_Monoid();
    var Data_Monoid_Disj = require_Data_Monoid2();
    var Data_Monoid_Dual = require_Data_Monoid3();
    var Data_Monoid_Multiplicative = require_Data_Monoid6();
    var Data_Traversable_Accum = require_Data_Traversable();
    var Data_Traversable_Accum_Internal = require_Data_Traversable_Accum();
    var Data_Tuple = require_Data22();
    var traverse = function(dict) {
      return dict.traverse;
    };
    var traversableTuple = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
        };
      },
      Functor0: function() {
        return Data_Tuple.functorTuple;
      },
      Foldable1: function() {
        return Data_Foldable.foldableTuple;
      }
    };
    var traversableMultiplicative = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
        };
      },
      Functor0: function() {
        return Data_Monoid_Multiplicative.functorMultiplicative;
      },
      Foldable1: function() {
        return Data_Foldable.foldableMultiplicative;
      }
    };
    var traversableMaybe = {
      traverse: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v(v1.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
          }
          ;
          if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name]);
        };
      },
      Functor0: function() {
        return Data_Maybe.functorMaybe;
      },
      Foldable1: function() {
        return Data_Foldable.foldableMaybe;
      }
    };
    var traversableIdentity = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Identity.Identity)(f(v));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Identity.Identity)(v);
        };
      },
      Functor0: function() {
        return Data_Identity.functorIdentity;
      },
      Foldable1: function() {
        return Data_Foldable.foldableIdentity;
      }
    };
    var traversableEither = {
      traverse: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Data_Either.Left) {
              return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v1.value0));
            }
            ;
            if (v1 instanceof Data_Either.Right) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create)(v(v1.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          if (v instanceof Data_Either.Left) {
            return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v.value0));
          }
          ;
          if (v instanceof Data_Either.Right) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36): " + [v.constructor.name]);
        };
      },
      Functor0: function() {
        return Data_Either.functorEither;
      },
      Foldable1: function() {
        return Data_Foldable.foldableEither;
      }
    };
    var traversableDual = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(f(v));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(v);
        };
      },
      Functor0: function() {
        return Data_Monoid_Dual.functorDual;
      },
      Foldable1: function() {
        return Data_Foldable.foldableDual;
      }
    };
    var traversableDisj = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(f(v));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(v);
        };
      },
      Functor0: function() {
        return Data_Monoid_Disj.functorDisj;
      },
      Foldable1: function() {
        return Data_Foldable.foldableDisj;
      }
    };
    var traversableConst = {
      traverse: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            return Control_Applicative.pure(dictApplicative)(v1);
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Control_Applicative.pure(dictApplicative)(v);
        };
      },
      Functor0: function() {
        return Data_Const.functorConst;
      },
      Foldable1: function() {
        return Data_Foldable.foldableConst;
      }
    };
    var traversableConj = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(f(v));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(v);
        };
      },
      Functor0: function() {
        return Data_Monoid_Conj.functorConj;
      },
      Foldable1: function() {
        return Data_Foldable.foldableConj;
      }
    };
    var traversableCompose = function(dictTraversable) {
      return function(dictTraversable1) {
        return {
          traverse: function(dictApplicative) {
            return function(f) {
              return function(v) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Compose.Compose)(traverse(dictTraversable)(dictApplicative)(traverse(dictTraversable1)(dictApplicative)(f))(v));
              };
            };
          },
          sequence: function(dictApplicative) {
            return traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
          },
          Functor0: function() {
            return Data_Functor_Compose.functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
          },
          Foldable1: function() {
            return Data_Foldable.foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }
        };
      };
    };
    var traversableAdditive = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(f(v));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(v);
        };
      },
      Functor0: function() {
        return Data_Monoid_Additive.functorAdditive;
      },
      Foldable1: function() {
        return Data_Foldable.foldableAdditive;
      }
    };
    var sequenceDefault = function(dictTraversable) {
      return function(dictApplicative) {
        return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var traversableArray = {
      traverse: function(dictApplicative) {
        return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map(dictApplicative.Apply0().Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function(dictApplicative) {
        return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function() {
        return Data_Functor.functorArray;
      },
      Foldable1: function() {
        return Data_Foldable.foldableArray;
      }
    };
    var sequence = function(dict) {
      return dict.sequence;
    };
    var traversableApp = function(dictTraversable) {
      return {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_App.App)(traverse(dictTraversable)(dictApplicative)(f)(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_App.App)(sequence(dictTraversable)(dictApplicative)(v));
          };
        },
        Functor0: function() {
          return Data_Functor_App.functorApp(dictTraversable.Functor0());
        },
        Foldable1: function() {
          return Data_Foldable.foldableApp(dictTraversable.Foldable1());
        }
      };
    };
    var traversableCoproduct = function(dictTraversable) {
      return function(dictTraversable1) {
        return {
          traverse: function(dictApplicative) {
            return function(f) {
              return Data_Functor_Coproduct.coproduct(function() {
                var $143 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($146) {
                  return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($146));
                });
                var $144 = traverse(dictTraversable)(dictApplicative)(f);
                return function($145) {
                  return $143($144($145));
                };
              }())(function() {
                var $147 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($150) {
                  return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($150));
                });
                var $148 = traverse(dictTraversable1)(dictApplicative)(f);
                return function($149) {
                  return $147($148($149));
                };
              }());
            };
          },
          sequence: function(dictApplicative) {
            return Data_Functor_Coproduct.coproduct(function() {
              var $151 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($154) {
                return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($154));
              });
              var $152 = sequence(dictTraversable)(dictApplicative);
              return function($153) {
                return $151($152($153));
              };
            }())(function() {
              var $155 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($158) {
                return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($158));
              });
              var $156 = sequence(dictTraversable1)(dictApplicative);
              return function($157) {
                return $155($156($157));
              };
            }());
          },
          Functor0: function() {
            return Data_Functor_Coproduct.functorCoproduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
          },
          Foldable1: function() {
            return Data_Foldable.foldableCoproduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }
        };
      };
    };
    var traversableFirst = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
        };
      },
      Functor0: function() {
        return Data_Maybe_First.functorFirst;
      },
      Foldable1: function() {
        return Data_Foldable.foldableFirst;
      }
    };
    var traversableLast = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
        };
      },
      Functor0: function() {
        return Data_Maybe_Last.functorLast;
      },
      Foldable1: function() {
        return Data_Foldable.foldableLast;
      }
    };
    var traversableProduct = function(dictTraversable) {
      return function(dictTraversable1) {
        return {
          traverse: function(dictApplicative) {
            return function(f) {
              return function(v) {
                return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(traverse(dictTraversable)(dictApplicative)(f)(v.value0))(traverse(dictTraversable1)(dictApplicative)(f)(v.value1));
              };
            };
          },
          sequence: function(dictApplicative) {
            return function(v) {
              return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(sequence(dictTraversable)(dictApplicative)(v.value0))(sequence(dictTraversable1)(dictApplicative)(v.value1));
            };
          },
          Functor0: function() {
            return Data_Functor_Product.functorProduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
          },
          Foldable1: function() {
            return Data_Foldable.foldableProduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
          }
        };
      };
    };
    var traverseDefault = function(dictTraversable) {
      return function(dictApplicative) {
        return function(f) {
          return function(ta) {
            return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
          };
        };
      };
    };
    var mapAccumR = function(dictTraversable) {
      return function(f) {
        return function(s0) {
          return function(xs) {
            return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function(a) {
              return function(s) {
                return f(s)(a);
              };
            })(xs))(s0);
          };
        };
      };
    };
    var scanr = function(dictTraversable) {
      return function(f) {
        return function(b0) {
          return function(xs) {
            return mapAccumR(dictTraversable)(function(b) {
              return function(a) {
                var b$prime = f(a)(b);
                return {
                  accum: b$prime,
                  value: b$prime
                };
              };
            })(b0)(xs).value;
          };
        };
      };
    };
    var mapAccumL = function(dictTraversable) {
      return function(f) {
        return function(s0) {
          return function(xs) {
            return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function(a) {
              return function(s) {
                return f(s)(a);
              };
            })(xs))(s0);
          };
        };
      };
    };
    var scanl = function(dictTraversable) {
      return function(f) {
        return function(b0) {
          return function(xs) {
            return mapAccumL(dictTraversable)(function(b) {
              return function(a) {
                var b$prime = f(b)(a);
                return {
                  accum: b$prime,
                  value: b$prime
                };
              };
            })(b0)(xs).value;
          };
        };
      };
    };
    var $$for = function(dictApplicative) {
      return function(dictTraversable) {
        return function(x) {
          return function(f) {
            return traverse(dictTraversable)(dictApplicative)(f)(x);
          };
        };
      };
    };
    module2.exports = {
      traverse,
      sequence,
      traverseDefault,
      sequenceDefault,
      "for": $$for,
      scanl,
      scanr,
      mapAccumL,
      mapAccumR,
      traversableArray,
      traversableMaybe,
      traversableFirst,
      traversableLast,
      traversableAdditive,
      traversableDual,
      traversableConj,
      traversableDisj,
      traversableMultiplicative,
      traversableEither,
      traversableTuple,
      traversableIdentity,
      traversableConst,
      traversableProduct,
      traversableCoproduct,
      traversableCompose,
      traversableApp,
      all: Data_Foldable.all,
      and: Data_Foldable.and,
      any: Data_Foldable.any,
      elem: Data_Foldable.elem,
      find: Data_Foldable.find,
      fold: Data_Foldable.fold,
      foldMap: Data_Foldable.foldMap,
      foldMapDefaultL: Data_Foldable.foldMapDefaultL,
      foldMapDefaultR: Data_Foldable.foldMapDefaultR,
      foldl: Data_Foldable.foldl,
      foldlDefault: Data_Foldable.foldlDefault,
      foldr: Data_Foldable.foldr,
      foldrDefault: Data_Foldable.foldrDefault,
      for_: Data_Foldable.for_,
      intercalate: Data_Foldable.intercalate,
      maximum: Data_Foldable.maximum,
      maximumBy: Data_Foldable.maximumBy,
      minimum: Data_Foldable.minimum,
      minimumBy: Data_Foldable.minimumBy,
      notElem: Data_Foldable.notElem,
      oneOf: Data_Foldable.oneOf,
      or: Data_Foldable.or,
      sequence_: Data_Foldable.sequence_,
      sum: Data_Foldable.sum,
      traverse_: Data_Foldable.traverse_
    };
  }
});

// output/Data.TraversableWithIndex/index.js
var require_Data30 = __commonJS({
  "output/Data.TraversableWithIndex/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Data_Either = require_Data16();
    var Data_FoldableWithIndex = require_Data28();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Functor_App = require_Data_Functor3();
    var Data_Functor_Compose = require_Data_Functor4();
    var Data_Functor_Coproduct = require_Data_Functor2();
    var Data_Functor_Product = require_Data_Functor5();
    var Data_FunctorWithIndex = require_Data27();
    var Data_Identity = require_Data20();
    var Data_Traversable = require_Data29();
    var Data_Traversable_Accum = require_Data_Traversable();
    var Data_Traversable_Accum_Internal = require_Data_Traversable_Accum();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var traverseWithIndexDefault = function(dictTraversableWithIndex) {
      return function(dictApplicative) {
        return function(f) {
          var $64 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
          var $65 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
          return function($66) {
            return $64($65($66));
          };
        };
      };
    };
    var traverseWithIndex = function(dict) {
      return dict.traverseWithIndex;
    };
    var traverseDefault = function(dictTraversableWithIndex) {
      return function(dictApplicative) {
        return function(f) {
          return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
        };
      };
    };
    var traversableWithIndexTuple = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
          };
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexTuple;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexTuple;
      },
      Traversable2: function() {
        return Data_Traversable.traversableTuple;
      }
    };
    var traversableWithIndexProduct = function(dictTraversableWithIndex) {
      return function(dictTraversableWithIndex1) {
        return {
          traverseWithIndex: function(dictApplicative) {
            return function(f) {
              return function(v) {
                return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function($67) {
                  return f(Data_Either.Left.create($67));
                })(v.value0))(traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function($68) {
                  return f(Data_Either.Right.create($68));
                })(v.value1));
              };
            };
          },
          FunctorWithIndex0: function() {
            return Data_FunctorWithIndex.functorWithIndexProduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          },
          FoldableWithIndex1: function() {
            return Data_FoldableWithIndex.foldableWithIndexProduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          },
          Traversable2: function() {
            return Data_Traversable.traversableProduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }
        };
      };
    };
    var traversableWithIndexMultiplicative = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexMultiplicative;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
      },
      Traversable2: function() {
        return Data_Traversable.traversableMultiplicative;
      }
    };
    var traversableWithIndexMaybe = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexMaybe;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexMaybe;
      },
      Traversable2: function() {
        return Data_Traversable.traversableMaybe;
      }
    };
    var traversableWithIndexLast = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexLast;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexLast;
      },
      Traversable2: function() {
        return Data_Traversable.traversableLast;
      }
    };
    var traversableWithIndexIdentity = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Identity.Identity)(f(Data_Unit.unit)(v));
          };
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexIdentity;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexIdentity;
      },
      Traversable2: function() {
        return Data_Traversable.traversableIdentity;
      }
    };
    var traversableWithIndexFirst = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexFirst;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexFirst;
      },
      Traversable2: function() {
        return Data_Traversable.traversableFirst;
      }
    };
    var traversableWithIndexEither = {
      traverseWithIndex: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Data_Either.Left) {
              return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v1.value0));
            }
            ;
            if (v1 instanceof Data_Either.Right) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create)(v(Data_Unit.unit)(v1.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.TraversableWithIndex (line 95, column 1 - line 97, column 53): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexEither;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexEither;
      },
      Traversable2: function() {
        return Data_Traversable.traversableEither;
      }
    };
    var traversableWithIndexDual = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexDual;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexDual;
      },
      Traversable2: function() {
        return Data_Traversable.traversableDual;
      }
    };
    var traversableWithIndexDisj = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexDisj;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexDisj;
      },
      Traversable2: function() {
        return Data_Traversable.traversableDisj;
      }
    };
    var traversableWithIndexCoproduct = function(dictTraversableWithIndex) {
      return function(dictTraversableWithIndex1) {
        return {
          traverseWithIndex: function(dictApplicative) {
            return function(f) {
              return Data_Functor_Coproduct.coproduct(function() {
                var $69 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($72) {
                  return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($72));
                });
                var $70 = traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function($73) {
                  return f(Data_Either.Left.create($73));
                });
                return function($71) {
                  return $69($70($71));
                };
              }())(function() {
                var $74 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($77) {
                  return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($77));
                });
                var $75 = traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function($78) {
                  return f(Data_Either.Right.create($78));
                });
                return function($76) {
                  return $74($75($76));
                };
              }());
            };
          },
          FunctorWithIndex0: function() {
            return Data_FunctorWithIndex.functorWithIndexCoproduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          },
          FoldableWithIndex1: function() {
            return Data_FoldableWithIndex.foldableWithIndexCoproduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          },
          Traversable2: function() {
            return Data_Traversable.traversableCoproduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }
        };
      };
    };
    var traversableWithIndexConst = {
      traverseWithIndex: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            return Control_Applicative.pure(dictApplicative)(v1);
          };
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexConst;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexConst;
      },
      Traversable2: function() {
        return Data_Traversable.traversableConst;
      }
    };
    var traversableWithIndexConj = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexConj;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexConj;
      },
      Traversable2: function() {
        return Data_Traversable.traversableConj;
      }
    };
    var traversableWithIndexCompose = function(dictTraversableWithIndex) {
      return function(dictTraversableWithIndex1) {
        return {
          traverseWithIndex: function(dictApplicative) {
            return function(f) {
              return function(v) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Compose.Compose)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function() {
                  var $79 = traverseWithIndex(dictTraversableWithIndex1)(dictApplicative);
                  var $80 = Data_Tuple.curry(f);
                  return function($81) {
                    return $79($80($81));
                  };
                }())(v));
              };
            };
          },
          FunctorWithIndex0: function() {
            return Data_FunctorWithIndex.functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
          },
          FoldableWithIndex1: function() {
            return Data_FoldableWithIndex.foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
          },
          Traversable2: function() {
            return Data_Traversable.traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
          }
        };
      };
    };
    var traversableWithIndexArray = {
      traverseWithIndex: function(dictApplicative) {
        return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexArray;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexArray;
      },
      Traversable2: function() {
        return Data_Traversable.traversableArray;
      }
    };
    var traversableWithIndexApp = function(dictTraversableWithIndex) {
      return {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_App.App)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(f)(v));
            };
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexApp(dictTraversableWithIndex.FunctorWithIndex0());
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexApp(dictTraversableWithIndex.FoldableWithIndex1());
        },
        Traversable2: function() {
          return Data_Traversable.traversableApp(dictTraversableWithIndex.Traversable2());
        }
      };
    };
    var traversableWithIndexAdditive = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return Data_FunctorWithIndex.functorWithIndexAdditive;
      },
      FoldableWithIndex1: function() {
        return Data_FoldableWithIndex.foldableWithIndexAdditive;
      },
      Traversable2: function() {
        return Data_Traversable.traversableAdditive;
      }
    };
    var mapAccumRWithIndex = function(dictTraversableWithIndex) {
      return function(f) {
        return function(s0) {
          return function(xs) {
            return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function(i) {
              return function(a) {
                return function(s) {
                  return f(i)(s)(a);
                };
              };
            })(xs))(s0);
          };
        };
      };
    };
    var scanrWithIndex = function(dictTraversableWithIndex) {
      return function(f) {
        return function(b0) {
          return function(xs) {
            return mapAccumRWithIndex(dictTraversableWithIndex)(function(i) {
              return function(b) {
                return function(a) {
                  var b$prime = f(i)(a)(b);
                  return {
                    accum: b$prime,
                    value: b$prime
                  };
                };
              };
            })(b0)(xs).value;
          };
        };
      };
    };
    var mapAccumLWithIndex = function(dictTraversableWithIndex) {
      return function(f) {
        return function(s0) {
          return function(xs) {
            return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function(i) {
              return function(a) {
                return function(s) {
                  return f(i)(s)(a);
                };
              };
            })(xs))(s0);
          };
        };
      };
    };
    var scanlWithIndex = function(dictTraversableWithIndex) {
      return function(f) {
        return function(b0) {
          return function(xs) {
            return mapAccumLWithIndex(dictTraversableWithIndex)(function(i) {
              return function(b) {
                return function(a) {
                  var b$prime = f(i)(b)(a);
                  return {
                    accum: b$prime,
                    value: b$prime
                  };
                };
              };
            })(b0)(xs).value;
          };
        };
      };
    };
    var forWithIndex = function(dictApplicative) {
      return function(dictTraversableWithIndex) {
        return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
      };
    };
    module2.exports = {
      traverseWithIndex,
      traverseWithIndexDefault,
      forWithIndex,
      scanlWithIndex,
      mapAccumLWithIndex,
      scanrWithIndex,
      mapAccumRWithIndex,
      traverseDefault,
      traversableWithIndexArray,
      traversableWithIndexMaybe,
      traversableWithIndexFirst,
      traversableWithIndexLast,
      traversableWithIndexAdditive,
      traversableWithIndexDual,
      traversableWithIndexConj,
      traversableWithIndexDisj,
      traversableWithIndexMultiplicative,
      traversableWithIndexEither,
      traversableWithIndexTuple,
      traversableWithIndexIdentity,
      traversableWithIndexConst,
      traversableWithIndexProduct,
      traversableWithIndexCoproduct,
      traversableWithIndexCompose,
      traversableWithIndexApp
    };
  }
});

// output/Data.Unfoldable/foreign.js
var require_foreign26 = __commonJS({
  "output/Data.Unfoldable/foreign.js"(exports2) {
    "use strict";
    exports2.unfoldrArrayImpl = function(isNothing) {
      return function(fromJust) {
        return function(fst) {
          return function(snd) {
            return function(f) {
              return function(b) {
                var result = [];
                var value = b;
                while (true) {
                  var maybe = f(value);
                  if (isNothing(maybe))
                    return result;
                  var tuple = fromJust(maybe);
                  result.push(fst(tuple));
                  value = snd(tuple);
                }
              };
            };
          };
        };
      };
    };
  }
});

// output/Data.Unfoldable1/foreign.js
var require_foreign27 = __commonJS({
  "output/Data.Unfoldable1/foreign.js"(exports2) {
    "use strict";
    exports2.unfoldr1ArrayImpl = function(isNothing) {
      return function(fromJust) {
        return function(fst) {
          return function(snd) {
            return function(f) {
              return function(b) {
                var result = [];
                var value = b;
                while (true) {
                  var tuple = f(value);
                  result.push(fst(tuple));
                  var maybe = snd(tuple);
                  if (isNothing(maybe))
                    return result;
                  value = fromJust(maybe);
                }
              };
            };
          };
        };
      };
    };
  }
});

// output/Data.Semigroup.Traversable/index.js
var require_Data_Semigroup2 = __commonJS({
  "output/Data.Semigroup.Traversable/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Monoid_Dual = require_Data_Monoid3();
    var Data_Monoid_Multiplicative = require_Data_Monoid6();
    var Data_Semigroup_Foldable = require_Data_Semigroup();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var traverse1 = function(dict) {
      return dict.traverse1;
    };
    var traversableTuple = {
      traverse1: function(dictApply) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
          };
        };
      },
      sequence1: function(dictApply) {
        return function(v) {
          return Data_Functor.map(dictApply.Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
        };
      },
      Foldable10: function() {
        return Data_Semigroup_Foldable.foldableTuple;
      },
      Traversable1: function() {
        return Data_Traversable.traversableTuple;
      }
    };
    var traversableIdentity = {
      traverse1: function(dictApply) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Identity.Identity)(f(v));
          };
        };
      },
      sequence1: function(dictApply) {
        return function(v) {
          return Data_Functor.map(dictApply.Functor0())(Data_Identity.Identity)(v);
        };
      },
      Foldable10: function() {
        return Data_Semigroup_Foldable.foldableIdentity;
      },
      Traversable1: function() {
        return Data_Traversable.traversableIdentity;
      }
    };
    var sequence1Default = function(dictTraversable1) {
      return function(dictApply) {
        return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var traversableDual = {
      traverse1: function(dictApply) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
          };
        };
      },
      sequence1: function(dictApply) {
        return sequence1Default(traversableDual)(dictApply);
      },
      Foldable10: function() {
        return Data_Semigroup_Foldable.foldableDual;
      },
      Traversable1: function() {
        return Data_Traversable.traversableDual;
      }
    };
    var traversableMultiplicative = {
      traverse1: function(dictApply) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
        };
      },
      sequence1: function(dictApply) {
        return sequence1Default(traversableMultiplicative)(dictApply);
      },
      Foldable10: function() {
        return Data_Semigroup_Foldable.foldableMultiplicative;
      },
      Traversable1: function() {
        return Data_Traversable.traversableMultiplicative;
      }
    };
    var sequence1 = function(dict) {
      return dict.sequence1;
    };
    var traverse1Default = function(dictTraversable1) {
      return function(dictApply) {
        return function(f) {
          return function(ta) {
            return sequence1(dictTraversable1)(dictApply)(Data_Functor.map(dictTraversable1.Traversable1().Functor0())(f)(ta));
          };
        };
      };
    };
    module2.exports = {
      sequence1,
      traverse1,
      traverse1Default,
      sequence1Default,
      traversableDual,
      traversableMultiplicative,
      traversableTuple,
      traversableIdentity
    };
  }
});

// output/Data.Unfoldable1/index.js
var require_Data31 = __commonJS({
  "output/Data.Unfoldable1/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign27();
    var Data_Boolean = require_Data();
    var Data_Maybe = require_Data15();
    var Data_Semigroup_Traversable = require_Data_Semigroup2();
    var Data_Tuple = require_Data22();
    var unfoldr1 = function(dict) {
      return dict.unfoldr1;
    };
    var unfoldable1Maybe = {
      unfoldr1: function(f) {
        return function(b) {
          return new Data_Maybe.Just(Data_Tuple.fst(f(b)));
        };
      }
    };
    var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
    };
    var replicate1 = function(dictUnfoldable1) {
      return function(n) {
        return function(v) {
          var step = function(i) {
            if (i <= 0) {
              return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
            }
            ;
            if (Data_Boolean.otherwise) {
              return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
            }
            ;
            throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [i.constructor.name]);
          };
          return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
        };
      };
    };
    var replicate1A = function(dictApply) {
      return function(dictUnfoldable1) {
        return function(dictTraversable1) {
          return function(n) {
            return function(m) {
              return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
            };
          };
        };
      };
    };
    var singleton = function(dictUnfoldable1) {
      return replicate1(dictUnfoldable1)(1);
    };
    var range = function(dictUnfoldable1) {
      return function(start) {
        return function(end) {
          var go = function(delta2) {
            return function(i) {
              var i$prime = i + delta2 | 0;
              return new Data_Tuple.Tuple(i, function() {
                var $9 = i === end;
                if ($9) {
                  return Data_Maybe.Nothing.value;
                }
                ;
                return new Data_Maybe.Just(i$prime);
              }());
            };
          };
          var delta = function() {
            var $10 = end >= start;
            if ($10) {
              return 1;
            }
            ;
            return -1 | 0;
          }();
          return unfoldr1(dictUnfoldable1)(go(delta))(start);
        };
      };
    };
    module2.exports = {
      unfoldr1,
      replicate1,
      replicate1A,
      singleton,
      range,
      unfoldable1Array,
      unfoldable1Maybe
    };
  }
});

// output/Data.Unfoldable/index.js
var require_Data32 = __commonJS({
  "output/Data.Unfoldable/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign26();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable1 = require_Data31();
    var Data_Unit = require_Data3();
    var unfoldr = function(dict) {
      return dict.unfoldr;
    };
    var unfoldableMaybe = {
      unfoldr: function(f) {
        return function(b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(f(b));
        };
      },
      Unfoldable10: function() {
        return Data_Unfoldable1.unfoldable1Maybe;
      }
    };
    var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function() {
        return Data_Unfoldable1.unfoldable1Array;
      }
    };
    var replicate = function(dictUnfoldable) {
      return function(n) {
        return function(v) {
          var step = function(i) {
            var $8 = i <= 0;
            if ($8) {
              return Data_Maybe.Nothing.value;
            }
            ;
            return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
          };
          return unfoldr(dictUnfoldable)(step)(n);
        };
      };
    };
    var replicateA = function(dictApplicative) {
      return function(dictUnfoldable) {
        return function(dictTraversable) {
          return function(n) {
            return function(m) {
              return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
            };
          };
        };
      };
    };
    var none = function(dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
    };
    var fromMaybe = function(dictUnfoldable) {
      return unfoldr(dictUnfoldable)(function(b) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
      });
    };
    module2.exports = {
      unfoldr,
      replicate,
      replicateA,
      none,
      fromMaybe,
      unfoldableArray,
      unfoldableMaybe,
      range: Data_Unfoldable1.range,
      replicate1: Data_Unfoldable1.replicate1,
      replicate1A: Data_Unfoldable1.replicate1A,
      singleton: Data_Unfoldable1.singleton,
      unfoldr1: Data_Unfoldable1.unfoldr1
    };
  }
});

// output/Data.NonEmpty/index.js
var require_Data33 = __commonJS({
  "output/Data.NonEmpty/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Plus = require_Control9();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_FoldableWithIndex = require_Data28();
    var Data_Functor = require_Data4();
    var Data_FunctorWithIndex = require_Data27();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Semigroup_Foldable = require_Data_Semigroup();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_TraversableWithIndex = require_Data30();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var NonEmpty = function() {
      function NonEmpty2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      NonEmpty2.create = function(value0) {
        return function(value1) {
          return new NonEmpty2(value0, value1);
        };
      };
      return NonEmpty2;
    }();
    var unfoldable1NonEmpty = function(dictUnfoldable) {
      return {
        unfoldr1: function(f) {
          return function(b) {
            return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
          };
        }
      };
    };
    var tail = function(v) {
      return v.value1;
    };
    var singleton = function(dictPlus) {
      return function(a) {
        return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
    };
    var showNonEmpty = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(v) {
            return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          }
        };
      };
    };
    var oneOf = function(dictAlternative) {
      return function(v) {
        return Control_Alt.alt(dictAlternative.Plus1().Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
      };
    };
    var head = function(v) {
      return v.value0;
    };
    var functorNonEmpty = function(dictFunctor) {
      return {
        map: function(f) {
          return function(m) {
            return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
        }
      };
    };
    var functorWithIndex = function(dictFunctorWithIndex) {
      return {
        mapWithIndex: function(f) {
          return function(v) {
            return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function($151) {
              return f(Data_Maybe.Just.create($151));
            })(v.value1));
          };
        },
        Functor0: function() {
          return functorNonEmpty(dictFunctorWithIndex.Functor0());
        }
      };
    };
    var fromNonEmpty = function(f) {
      return function(v) {
        return f(v.value0)(v.value1);
      };
    };
    var foldableNonEmpty = function(dictFoldable) {
      return {
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
            };
          };
        },
        foldl: function(f) {
          return function(b) {
            return function(v) {
              return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
            };
          };
        },
        foldr: function(f) {
          return function(b) {
            return function(v) {
              return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
            };
          };
        }
      };
    };
    var foldableWithIndexNonEmpty = function(dictFoldableWithIndex) {
      return {
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function($152) {
                return f(Data_Maybe.Just.create($152));
              })(v.value1));
            };
          };
        },
        foldlWithIndex: function(f) {
          return function(b) {
            return function(v) {
              return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function($153) {
                return f(Data_Maybe.Just.create($153));
              })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
            };
          };
        },
        foldrWithIndex: function(f) {
          return function(b) {
            return function(v) {
              return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function($154) {
                return f(Data_Maybe.Just.create($154));
              })(b)(v.value1));
            };
          };
        },
        Foldable0: function() {
          return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
        }
      };
    };
    var traversableNonEmpty = function(dictTraversable) {
      return {
        sequence: function(dictApplicative) {
          return function(v) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
          };
        },
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
            };
          };
        },
        Functor0: function() {
          return functorNonEmpty(dictTraversable.Functor0());
        },
        Foldable1: function() {
          return foldableNonEmpty(dictTraversable.Foldable1());
        }
      };
    };
    var traversableWithIndexNonEmpty = function(dictTraversableWithIndex) {
      return {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function($155) {
                return f(Data_Maybe.Just.create($155));
              })(v.value1));
            };
          };
        },
        FunctorWithIndex0: function() {
          return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
        },
        FoldableWithIndex1: function() {
          return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
        },
        Traversable2: function() {
          return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
        }
      };
    };
    var foldable1NonEmpty = function(dictFoldable) {
      return {
        foldMap1: function(dictSemigroup) {
          return function(f) {
            return function(v) {
              return Data_Foldable.foldl(dictFoldable)(function(s) {
                return function(a1) {
                  return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                };
              })(f(v.value0))(v.value1);
            };
          };
        },
        foldr1: function(f) {
          return function(v) {
            return Data_Maybe.maybe(v.value0)(f(v.value0))(Data_Foldable.foldr(dictFoldable)(function(a1) {
              var $156 = Data_Maybe.maybe(a1)(f(a1));
              return function($157) {
                return Data_Maybe.Just.create($156($157));
              };
            })(Data_Maybe.Nothing.value)(v.value1));
          };
        },
        foldl1: function(f) {
          return function(v) {
            return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
        },
        Foldable0: function() {
          return foldableNonEmpty(dictFoldable);
        }
      };
    };
    var foldl1 = function(dictFoldable) {
      return function(dictWarn) {
        return Data_Semigroup_Foldable.foldl1(foldable1NonEmpty(dictFoldable));
      };
    };
    var eqNonEmpty = function(dictEq1) {
      return function(dictEq) {
        return {
          eq: function(x) {
            return function(y) {
              return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
            };
          }
        };
      };
    };
    var ordNonEmpty = function(dictOrd1) {
      return function(dictOrd) {
        return {
          compare: function(x) {
            return function(y) {
              var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
              }
              ;
              if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
              }
              ;
              return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
            };
          },
          Eq0: function() {
            return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
          }
        };
      };
    };
    var eq1NonEmpty = function(dictEq1) {
      return {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
        }
      };
    };
    var ord1NonEmpty = function(dictOrd1) {
      return {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
        },
        Eq10: function() {
          return eq1NonEmpty(dictOrd1.Eq10());
        }
      };
    };
    module2.exports = {
      NonEmpty,
      singleton,
      foldl1,
      fromNonEmpty,
      oneOf,
      head,
      tail,
      showNonEmpty,
      eqNonEmpty,
      eq1NonEmpty,
      ordNonEmpty,
      ord1NonEmpty,
      functorNonEmpty,
      functorWithIndex,
      foldableNonEmpty,
      foldableWithIndexNonEmpty,
      traversableNonEmpty,
      traversableWithIndexNonEmpty,
      foldable1NonEmpty,
      unfoldable1NonEmpty
    };
  }
});

// output/Data.List.Types/index.js
var require_Data_List = __commonJS({
  "output/Data.List.Types/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_FoldableWithIndex = require_Data28();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_FunctorWithIndex = require_Data27();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_NonEmpty = require_Data33();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Semigroup_Traversable = require_Data_Semigroup2();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_TraversableWithIndex = require_Data30();
    var Data_Tuple = require_Data22();
    var Nil = function() {
      function Nil2() {
      }
      ;
      Nil2.value = new Nil2();
      return Nil2;
    }();
    var Cons = function() {
      function Cons2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Cons2.create = function(value0) {
        return function(value1) {
          return new Cons2(value0, value1);
        };
      };
      return Cons2;
    }();
    var NonEmptyList = function(x) {
      return x;
    };
    var toList = function(v) {
      return new Cons(v.value0, v.value1);
    };
    var newtypeNonEmptyList = {
      Coercible0: function() {
        return void 0;
      }
    };
    var nelCons = function(a) {
      return function(v) {
        return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
      };
    };
    var listMap = function(f) {
      var chunkedRevMap = function($copy_chunksAcc) {
        return function($copy_v) {
          var $tco_var_chunksAcc = $copy_chunksAcc;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(chunksAcc, v) {
            if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
              $tco_var_chunksAcc = new Cons(v, chunksAcc);
              $copy_v = v.value1.value1.value1;
              return;
            }
            ;
            var unrolledMap = function(v1) {
              if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
              }
              ;
              if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                return new Cons(f(v1.value0), Nil.value);
              }
              ;
              return Nil.value;
            };
            var reverseUnrolledMap = function($copy_v1) {
              return function($copy_acc) {
                var $tco_var_v1 = $copy_v1;
                var $tco_done1 = false;
                var $tco_result2;
                function $tco_loop2(v1, acc) {
                  if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                    $tco_var_v1 = v1.value1;
                    $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                    return;
                  }
                  ;
                  $tco_done1 = true;
                  return acc;
                }
                ;
                while (!$tco_done1) {
                  $tco_result2 = $tco_loop2($tco_var_v1, $copy_acc);
                }
                ;
                return $tco_result2;
              };
            };
            $tco_done = true;
            return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return chunkedRevMap(Nil.value);
    };
    var functorList = {
      map: listMap
    };
    var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
    var foldableList = {
      foldr: function(f) {
        return function(b) {
          var rev = function() {
            var go = function($copy_acc) {
              return function($copy_v) {
                var $tco_var_acc = $copy_acc;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(acc, v) {
                  if (v instanceof Nil) {
                    $tco_done = true;
                    return acc;
                  }
                  ;
                  if (v instanceof Cons) {
                    $tco_var_acc = new Cons(v.value0, acc);
                    $copy_v = v.value1;
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [acc.constructor.name, v.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
                }
                ;
                return $tco_result;
              };
            };
            return go(Nil.value);
          }();
          var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function($206) {
            return $205(rev($206));
          };
        };
      },
      foldl: function(f) {
        var go = function($copy_b) {
          return function($copy_v) {
            var $tco_var_b = $copy_b;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(b, v) {
              if (v instanceof Nil) {
                $tco_done1 = true;
                return b;
              }
              ;
              if (v instanceof Cons) {
                $tco_var_b = f(b)(v.value0);
                $copy_v = v.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_b, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go;
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldl(foldableList)(function(acc) {
            var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
            return function($208) {
              return $207(f($208));
            };
          })(Data_Monoid.mempty(dictMonoid));
        };
      }
    };
    var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
    var foldableWithIndexList = {
      foldrWithIndex: function(f) {
        return function(b) {
          return function(xs) {
            var v = function() {
              var rev = Data_Foldable.foldl(foldableList)(function(v1) {
                return function(a) {
                  return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                };
              });
              return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
            }();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function(v1) {
              return function(a) {
                return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
              };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
          };
        };
      },
      foldlWithIndex: function(f) {
        return function(acc) {
          var $209 = Data_Foldable.foldl(foldableList)(function(v) {
            return function(a) {
              return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
            };
          })(new Data_Tuple.Tuple(0, acc));
          return function($210) {
            return Data_Tuple.snd($209($210));
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function(i) {
            return function(acc) {
              var $211 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              var $212 = f(i);
              return function($213) {
                return $211($212($213));
              };
            };
          })(Data_Monoid.mempty(dictMonoid));
        };
      },
      Foldable0: function() {
        return foldableList;
      }
    };
    var foldableWithIndexNonEmptyList = {
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function() {
              var $214 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($215) {
                return f($214($215));
              };
            }())(v);
          };
        };
      },
      foldlWithIndex: function(f) {
        return function(b) {
          return function(v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
              var $216 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($217) {
                return f($216($217));
              };
            }())(b)(v);
          };
        };
      },
      foldrWithIndex: function(f) {
        return function(b) {
          return function(v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
              var $218 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($219) {
                return f($218($219));
              };
            }())(b)(v);
          };
        };
      },
      Foldable0: function() {
        return foldableNonEmptyList;
      }
    };
    var functorWithIndexList = {
      mapWithIndex: function(f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function(i) {
          return function(x) {
            return function(acc) {
              return new Cons(f(i)(x), acc);
            };
          };
        })(Nil.value);
      },
      Functor0: function() {
        return functorList;
      }
    };
    var functorWithIndexNonEmptyList = {
      mapWithIndex: function(fn) {
        return function(v) {
          return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function() {
            var $220 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
            return function($221) {
              return fn($220($221));
            };
          }())(v));
        };
      },
      Functor0: function() {
        return functorNonEmptyList;
      }
    };
    var semigroupList = {
      append: function(xs) {
        return function(ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
        };
      }
    };
    var monoidList = {
      mempty: Nil.value,
      Semigroup0: function() {
        return semigroupList;
      }
    };
    var semigroupNonEmptyList = {
      append: function(v) {
        return function(as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
        };
      }
    };
    var showList = function(dictShow) {
      return {
        show: function(v) {
          if (v instanceof Nil) {
            return "Nil";
          }
          ;
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
        }
      };
    };
    var showNonEmptyList = function(dictShow) {
      return {
        show: function(v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
        }
      };
    };
    var traversableList = {
      traverse: function(dictApplicative) {
        return function(f) {
          var $222 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
          var $223 = Data_Foldable.foldl(foldableList)(function(acc) {
            var $225 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
            return function($226) {
              return $225(f($226));
            };
          })(Control_Applicative.pure(dictApplicative)(Nil.value));
          return function($224) {
            return $222($223($224));
          };
        };
      },
      sequence: function(dictApplicative) {
        return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function() {
        return functorList;
      },
      Foldable1: function() {
        return foldableList;
      }
    };
    var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
    var traversableWithIndexList = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $227 = Data_Functor.map(dictApplicative.Apply0().Functor0())(rev);
          var $228 = Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function(i) {
            return function(acc) {
              var $230 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
              var $231 = f(i);
              return function($232) {
                return $230($231($232));
              };
            };
          })(Control_Applicative.pure(dictApplicative)(Nil.value));
          return function($229) {
            return $227($228($229));
          };
        };
      },
      FunctorWithIndex0: function() {
        return functorWithIndexList;
      },
      FoldableWithIndex1: function() {
        return foldableWithIndexList;
      },
      Traversable2: function() {
        return traversableList;
      }
    };
    var traversableWithIndexNonEmptyList = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function() {
              var $233 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($234) {
                return f($233($234));
              };
            }())(v));
          };
        };
      },
      FunctorWithIndex0: function() {
        return functorWithIndexNonEmptyList;
      },
      FoldableWithIndex1: function() {
        return foldableWithIndexNonEmptyList;
      },
      Traversable2: function() {
        return traversableNonEmptyList;
      }
    };
    var unfoldable1List = {
      unfoldr1: function(f) {
        return function(b) {
          var go = function($copy_source) {
            return function($copy_memo) {
              var $tco_var_source = $copy_source;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(source, memo) {
                var v = f(source);
                if (v.value1 instanceof Data_Maybe.Just) {
                  $tco_var_source = v.value1.value0;
                  $copy_memo = new Cons(v.value0, memo);
                  return;
                }
                ;
                if (v.value1 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_source, $copy_memo);
              }
              ;
              return $tco_result;
            };
          };
          return go(b)(Nil.value);
        };
      }
    };
    var unfoldableList = {
      unfoldr: function(f) {
        return function(b) {
          var go = function($copy_source) {
            return function($copy_memo) {
              var $tco_var_source = $copy_source;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(source, memo) {
                var v = f(source);
                if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                }
                ;
                if (v instanceof Data_Maybe.Just) {
                  $tco_var_source = v.value0.value1;
                  $copy_memo = new Cons(v.value0.value0, memo);
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_source, $copy_memo);
              }
              ;
              return $tco_result;
            };
          };
          return go(b)(Nil.value);
        };
      },
      Unfoldable10: function() {
        return unfoldable1List;
      }
    };
    var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
    var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
    var extendNonEmptyList = {
      extend: function(f) {
        return function(v) {
          var go = function(a) {
            return function(v1) {
              return {
                val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
                acc: new Cons(a, v1.acc)
              };
            };
          };
          return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
            val: Nil.value,
            acc: Nil.value
          })(v.value1).val);
        };
      },
      Functor0: function() {
        return functorNonEmptyList;
      }
    };
    var extendList = {
      extend: function(v) {
        return function(v1) {
          if (v1 instanceof Nil) {
            return Nil.value;
          }
          ;
          if (v1 instanceof Cons) {
            var go = function(a$prime) {
              return function(v2) {
                var acc$prime = new Cons(a$prime, v2.acc);
                return {
                  val: new Cons(v(acc$prime), v2.val),
                  acc: acc$prime
                };
              };
            };
            return new Cons(v(v1), Data_Foldable.foldr(foldableList)(go)({
              val: Nil.value,
              acc: Nil.value
            })(v1.value1).val);
          }
          ;
          throw new Error("Failed pattern match at Data.List.Types (line 183, column 1 - line 190, column 42): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Functor0: function() {
        return functorList;
      }
    };
    var eq1List = {
      eq1: function(dictEq) {
        return function(xs) {
          return function(ys) {
            var go = function($copy_v) {
              return function($copy_v1) {
                return function($copy_v2) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1, v2) {
                    if (!v2) {
                      $tco_done = true;
                      return false;
                    }
                    ;
                    if (v instanceof Nil && v1 instanceof Nil) {
                      $tco_done = true;
                      return v2;
                    }
                    ;
                    if (v instanceof Cons && v1 instanceof Cons) {
                      $tco_var_v = v.value1;
                      $tco_var_v1 = v1.value1;
                      $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                      return;
                    }
                    ;
                    $tco_done = true;
                    return false;
                  }
                  ;
                  while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                  }
                  ;
                  return $tco_result;
                };
              };
            };
            return go(xs)(ys)(true);
          };
        };
      }
    };
    var eq1NonEmptyList = Data_NonEmpty.eq1NonEmpty(eq1List);
    var eqList = function(dictEq) {
      return {
        eq: Data_Eq.eq1(eq1List)(dictEq)
      };
    };
    var eqNonEmptyList = function(dictEq) {
      return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
    };
    var ord1List = {
      compare1: function(dictOrd) {
        return function(xs) {
          return function(ys) {
            var go = function($copy_v) {
              return function($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                  if (v instanceof Nil && v1 instanceof Nil) {
                    $tco_done = true;
                    return Data_Ordering.EQ.value;
                  }
                  ;
                  if (v instanceof Nil) {
                    $tco_done = true;
                    return Data_Ordering.LT.value;
                  }
                  ;
                  if (v1 instanceof Nil) {
                    $tco_done = true;
                    return Data_Ordering.GT.value;
                  }
                  ;
                  if (v instanceof Cons && v1 instanceof Cons) {
                    var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                    if (v2 instanceof Data_Ordering.EQ) {
                      $tco_var_v = v.value1;
                      $copy_v1 = v1.value1;
                      return;
                    }
                    ;
                    $tco_done = true;
                    return v2;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [v.constructor.name, v1.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
                }
                ;
                return $tco_result;
              };
            };
            return go(xs)(ys);
          };
        };
      },
      Eq10: function() {
        return eq1List;
      }
    };
    var ord1NonEmptyList = Data_NonEmpty.ord1NonEmpty(ord1List);
    var ordList = function(dictOrd) {
      return {
        compare: Data_Ord.compare1(ord1List)(dictOrd),
        Eq0: function() {
          return eqList(dictOrd.Eq0());
        }
      };
    };
    var ordNonEmptyList = function(dictOrd) {
      return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
    };
    var comonadNonEmptyList = {
      extract: function(v) {
        return v.value0;
      },
      Extend0: function() {
        return extendNonEmptyList;
      }
    };
    var applyList = {
      apply: function(v) {
        return function(v1) {
          if (v instanceof Nil) {
            return Nil.value;
          }
          ;
          if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Functor0: function() {
        return functorList;
      }
    };
    var applyNonEmptyList = {
      apply: function(v) {
        return function(v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
        };
      },
      Functor0: function() {
        return functorNonEmptyList;
      }
    };
    var bindList = {
      bind: function(v) {
        return function(v1) {
          if (v instanceof Nil) {
            return Nil.value;
          }
          ;
          if (v instanceof Cons) {
            return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.Types (line 165, column 1 - line 167, column 37): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Apply0: function() {
        return applyList;
      }
    };
    var bindNonEmptyList = {
      bind: function(v) {
        return function(f) {
          var v1 = f(v.value0);
          return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function($235) {
            return toList(f($235));
          })));
        };
      },
      Apply0: function() {
        return applyNonEmptyList;
      }
    };
    var applicativeList = {
      pure: function(a) {
        return new Cons(a, Nil.value);
      },
      Apply0: function() {
        return applyList;
      }
    };
    var monadList = {
      Applicative0: function() {
        return applicativeList;
      },
      Bind1: function() {
        return bindList;
      }
    };
    var altNonEmptyList = {
      alt: Data_Semigroup.append(semigroupNonEmptyList),
      Functor0: function() {
        return functorNonEmptyList;
      }
    };
    var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function() {
        return functorList;
      }
    };
    var plusList = {
      empty: Nil.value,
      Alt0: function() {
        return altList;
      }
    };
    var alternativeList = {
      Applicative0: function() {
        return applicativeList;
      },
      Plus1: function() {
        return plusList;
      }
    };
    var monadPlusList = {
      Monad0: function() {
        return monadList;
      },
      Alternative1: function() {
        return alternativeList;
      }
    };
    var monadZeroList = {
      Monad0: function() {
        return monadList;
      },
      Alternative1: function() {
        return alternativeList;
      },
      MonadZeroIsDeprecated2: function() {
        return void 0;
      }
    };
    var applicativeNonEmptyList = {
      pure: function() {
        var $236 = Data_NonEmpty.singleton(plusList);
        return function($237) {
          return NonEmptyList($236($237));
        };
      }(),
      Apply0: function() {
        return applyNonEmptyList;
      }
    };
    var monadNonEmptyList = {
      Applicative0: function() {
        return applicativeNonEmptyList;
      },
      Bind1: function() {
        return bindNonEmptyList;
      }
    };
    var traversable1NonEmptyList = {
      traverse1: function(dictApply) {
        return function(f) {
          return function(v) {
            return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function(acc) {
              var $238 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
              return function($239) {
                return $238(f($239));
              };
            })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function(v1) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
            });
          };
        };
      },
      sequence1: function(dictApply) {
        return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
      },
      Foldable10: function() {
        return foldable1NonEmptyList;
      },
      Traversable1: function() {
        return traversableNonEmptyList;
      }
    };
    module2.exports = {
      Nil,
      Cons,
      NonEmptyList,
      toList,
      nelCons,
      showList,
      eqList,
      eq1List,
      ordList,
      ord1List,
      semigroupList,
      monoidList,
      functorList,
      functorWithIndexList,
      foldableList,
      foldableWithIndexList,
      unfoldable1List,
      unfoldableList,
      traversableList,
      traversableWithIndexList,
      applyList,
      applicativeList,
      bindList,
      monadList,
      altList,
      plusList,
      alternativeList,
      monadZeroList,
      monadPlusList,
      extendList,
      newtypeNonEmptyList,
      eqNonEmptyList,
      ordNonEmptyList,
      eq1NonEmptyList,
      ord1NonEmptyList,
      showNonEmptyList,
      functorNonEmptyList,
      applyNonEmptyList,
      applicativeNonEmptyList,
      bindNonEmptyList,
      monadNonEmptyList,
      altNonEmptyList,
      extendNonEmptyList,
      comonadNonEmptyList,
      semigroupNonEmptyList,
      foldableNonEmptyList,
      traversableNonEmptyList,
      foldable1NonEmptyList,
      unfoldable1NonEmptyList,
      functorWithIndexNonEmptyList,
      foldableWithIndexNonEmptyList,
      traversableWithIndexNonEmptyList,
      traversable1NonEmptyList
    };
  }
});

// output/Effect.Aff/foreign.js
var require_foreign28 = __commonJS({
  "output/Effect.Aff/foreign.js"(exports2) {
    "use strict";
    var Aff = function() {
      var EMPTY = {};
      var PURE = "Pure";
      var THROW = "Throw";
      var CATCH = "Catch";
      var SYNC = "Sync";
      var ASYNC = "Async";
      var BIND = "Bind";
      var BRACKET = "Bracket";
      var FORK = "Fork";
      var SEQ = "Sequential";
      var MAP = "Map";
      var APPLY = "Apply";
      var ALT = "Alt";
      var CONS = "Cons";
      var RESUME = "Resume";
      var RELEASE = "Release";
      var FINALIZER = "Finalizer";
      var FINALIZED = "Finalized";
      var FORKED = "Forked";
      var FIBER = "Fiber";
      var THUNK = "Thunk";
      function Aff2(tag, _1, _2, _3) {
        this.tag = tag;
        this._1 = _1;
        this._2 = _2;
        this._3 = _3;
      }
      function AffCtr(tag) {
        var fn = function(_1, _2, _3) {
          return new Aff2(tag, _1, _2, _3);
        };
        fn.tag = tag;
        return fn;
      }
      function nonCanceler(error) {
        return new Aff2(PURE, void 0);
      }
      function runEff(eff) {
        try {
          eff();
        } catch (error) {
          setTimeout(function() {
            throw error;
          }, 0);
        }
      }
      function runSync(left, right, eff) {
        try {
          return right(eff());
        } catch (error) {
          return left(error);
        }
      }
      function runAsync(left, eff, k) {
        try {
          return eff(k)();
        } catch (error) {
          k(left(error))();
          return nonCanceler;
        }
      }
      var Scheduler = function() {
        var limit = 1024;
        var size = 0;
        var ix = 0;
        var queue = new Array(limit);
        var draining = false;
        function drain() {
          var thunk;
          draining = true;
          while (size !== 0) {
            size--;
            thunk = queue[ix];
            queue[ix] = void 0;
            ix = (ix + 1) % limit;
            thunk();
          }
          draining = false;
        }
        return {
          isDraining: function() {
            return draining;
          },
          enqueue: function(cb) {
            var i, tmp;
            if (size === limit) {
              tmp = draining;
              drain();
              draining = tmp;
            }
            queue[(ix + size) % limit] = cb;
            size++;
            if (!draining) {
              drain();
            }
          }
        };
      }();
      function Supervisor(util) {
        var fibers = {};
        var fiberId = 0;
        var count = 0;
        return {
          register: function(fiber) {
            var fid = fiberId++;
            fiber.onComplete({
              rethrow: true,
              handler: function(result) {
                return function() {
                  count--;
                  delete fibers[fid];
                };
              }
            })();
            fibers[fid] = fiber;
            count++;
          },
          isEmpty: function() {
            return count === 0;
          },
          killAll: function(killError, cb) {
            return function() {
              if (count === 0) {
                return cb();
              }
              var killCount = 0;
              var kills = {};
              function kill(fid) {
                kills[fid] = fibers[fid].kill(killError, function(result) {
                  return function() {
                    delete kills[fid];
                    killCount--;
                    if (util.isLeft(result) && util.fromLeft(result)) {
                      setTimeout(function() {
                        throw util.fromLeft(result);
                      }, 0);
                    }
                    if (killCount === 0) {
                      cb();
                    }
                  };
                })();
              }
              for (var k in fibers) {
                if (fibers.hasOwnProperty(k)) {
                  killCount++;
                  kill(k);
                }
              }
              fibers = {};
              fiberId = 0;
              count = 0;
              return function(error) {
                return new Aff2(SYNC, function() {
                  for (var k2 in kills) {
                    if (kills.hasOwnProperty(k2)) {
                      kills[k2]();
                    }
                  }
                });
              };
            };
          }
        };
      }
      var SUSPENDED = 0;
      var CONTINUE = 1;
      var STEP_BIND = 2;
      var STEP_RESULT = 3;
      var PENDING = 4;
      var RETURN = 5;
      var COMPLETED = 6;
      function Fiber(util, supervisor, aff) {
        var runTick = 0;
        var status = SUSPENDED;
        var step = aff;
        var fail = null;
        var interrupt = null;
        var bhead = null;
        var btail = null;
        var attempts = null;
        var bracketCount = 0;
        var joinId = 0;
        var joins = null;
        var rethrow = true;
        function run(localRunTick) {
          var tmp, result, attempt;
          while (true) {
            tmp = null;
            result = null;
            attempt = null;
            switch (status) {
              case STEP_BIND:
                status = CONTINUE;
                try {
                  step = bhead(step);
                  if (btail === null) {
                    bhead = null;
                  } else {
                    bhead = btail._1;
                    btail = btail._2;
                  }
                } catch (e) {
                  status = RETURN;
                  fail = util.left(e);
                  step = null;
                }
                break;
              case STEP_RESULT:
                if (util.isLeft(step)) {
                  status = RETURN;
                  fail = step;
                  step = null;
                } else if (bhead === null) {
                  status = RETURN;
                } else {
                  status = STEP_BIND;
                  step = util.fromRight(step);
                }
                break;
              case CONTINUE:
                switch (step.tag) {
                  case BIND:
                    if (bhead) {
                      btail = new Aff2(CONS, bhead, btail);
                    }
                    bhead = step._2;
                    status = CONTINUE;
                    step = step._1;
                    break;
                  case PURE:
                    if (bhead === null) {
                      status = RETURN;
                      step = util.right(step._1);
                    } else {
                      status = STEP_BIND;
                      step = step._1;
                    }
                    break;
                  case SYNC:
                    status = STEP_RESULT;
                    step = runSync(util.left, util.right, step._1);
                    break;
                  case ASYNC:
                    status = PENDING;
                    step = runAsync(util.left, step._1, function(result2) {
                      return function() {
                        if (runTick !== localRunTick) {
                          return;
                        }
                        runTick++;
                        Scheduler.enqueue(function() {
                          if (runTick !== localRunTick + 1) {
                            return;
                          }
                          status = STEP_RESULT;
                          step = result2;
                          run(runTick);
                        });
                      };
                    });
                    return;
                  case THROW:
                    status = RETURN;
                    fail = util.left(step._1);
                    step = null;
                    break;
                  case CATCH:
                    if (bhead === null) {
                      attempts = new Aff2(CONS, step, attempts, interrupt);
                    } else {
                      attempts = new Aff2(CONS, step, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                    }
                    bhead = null;
                    btail = null;
                    status = CONTINUE;
                    step = step._1;
                    break;
                  case BRACKET:
                    bracketCount++;
                    if (bhead === null) {
                      attempts = new Aff2(CONS, step, attempts, interrupt);
                    } else {
                      attempts = new Aff2(CONS, step, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                    }
                    bhead = null;
                    btail = null;
                    status = CONTINUE;
                    step = step._1;
                    break;
                  case FORK:
                    status = STEP_RESULT;
                    tmp = Fiber(util, supervisor, step._2);
                    if (supervisor) {
                      supervisor.register(tmp);
                    }
                    if (step._1) {
                      tmp.run();
                    }
                    step = util.right(tmp);
                    break;
                  case SEQ:
                    status = CONTINUE;
                    step = sequential(util, supervisor, step._1);
                    break;
                }
                break;
              case RETURN:
                bhead = null;
                btail = null;
                if (attempts === null) {
                  status = COMPLETED;
                  step = interrupt || fail || step;
                } else {
                  tmp = attempts._3;
                  attempt = attempts._1;
                  attempts = attempts._2;
                  switch (attempt.tag) {
                    case CATCH:
                      if (interrupt && interrupt !== tmp && bracketCount === 0) {
                        status = RETURN;
                      } else if (fail) {
                        status = CONTINUE;
                        step = attempt._2(util.fromLeft(fail));
                        fail = null;
                      }
                      break;
                    case RESUME:
                      if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                        status = RETURN;
                      } else {
                        bhead = attempt._1;
                        btail = attempt._2;
                        status = STEP_BIND;
                        step = util.fromRight(step);
                      }
                      break;
                    case BRACKET:
                      bracketCount--;
                      if (fail === null) {
                        result = util.fromRight(step);
                        attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                        if (interrupt === tmp || bracketCount > 0) {
                          status = CONTINUE;
                          step = attempt._3(result);
                        }
                      }
                      break;
                    case RELEASE:
                      attempts = new Aff2(CONS, new Aff2(FINALIZED, step, fail), attempts, interrupt);
                      status = CONTINUE;
                      if (interrupt && interrupt !== tmp && bracketCount === 0) {
                        step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                      } else if (fail) {
                        step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                      } else {
                        step = attempt._1.completed(util.fromRight(step))(attempt._2);
                      }
                      fail = null;
                      bracketCount++;
                      break;
                    case FINALIZER:
                      bracketCount++;
                      attempts = new Aff2(CONS, new Aff2(FINALIZED, step, fail), attempts, interrupt);
                      status = CONTINUE;
                      step = attempt._1;
                      break;
                    case FINALIZED:
                      bracketCount--;
                      status = RETURN;
                      step = attempt._1;
                      fail = attempt._2;
                      break;
                  }
                }
                break;
              case COMPLETED:
                for (var k in joins) {
                  if (joins.hasOwnProperty(k)) {
                    rethrow = rethrow && joins[k].rethrow;
                    runEff(joins[k].handler(step));
                  }
                }
                joins = null;
                if (interrupt && fail) {
                  setTimeout(function() {
                    throw util.fromLeft(fail);
                  }, 0);
                } else if (util.isLeft(step) && rethrow) {
                  setTimeout(function() {
                    if (rethrow) {
                      throw util.fromLeft(step);
                    }
                  }, 0);
                }
                return;
              case SUSPENDED:
                status = CONTINUE;
                break;
              case PENDING:
                return;
            }
          }
        }
        function onComplete(join2) {
          return function() {
            if (status === COMPLETED) {
              rethrow = rethrow && join2.rethrow;
              join2.handler(step)();
              return function() {
              };
            }
            var jid = joinId++;
            joins = joins || {};
            joins[jid] = join2;
            return function() {
              if (joins !== null) {
                delete joins[jid];
              }
            };
          };
        }
        function kill(error, cb) {
          return function() {
            if (status === COMPLETED) {
              cb(util.right(void 0))();
              return function() {
              };
            }
            var canceler = onComplete({
              rethrow: false,
              handler: function() {
                return cb(util.right(void 0));
              }
            })();
            switch (status) {
              case SUSPENDED:
                interrupt = util.left(error);
                status = COMPLETED;
                step = interrupt;
                run(runTick);
                break;
              case PENDING:
                if (interrupt === null) {
                  interrupt = util.left(error);
                }
                if (bracketCount === 0) {
                  if (status === PENDING) {
                    attempts = new Aff2(CONS, new Aff2(FINALIZER, step(error)), attempts, interrupt);
                  }
                  status = RETURN;
                  step = null;
                  fail = null;
                  run(++runTick);
                }
                break;
              default:
                if (interrupt === null) {
                  interrupt = util.left(error);
                }
                if (bracketCount === 0) {
                  status = RETURN;
                  step = null;
                  fail = null;
                }
            }
            return canceler;
          };
        }
        function join(cb) {
          return function() {
            var canceler = onComplete({
              rethrow: false,
              handler: cb
            })();
            if (status === SUSPENDED) {
              run(runTick);
            }
            return canceler;
          };
        }
        return {
          kill,
          join,
          onComplete,
          isSuspended: function() {
            return status === SUSPENDED;
          },
          run: function() {
            if (status === SUSPENDED) {
              if (!Scheduler.isDraining()) {
                Scheduler.enqueue(function() {
                  run(runTick);
                });
              } else {
                run(runTick);
              }
            }
          }
        };
      }
      function runPar(util, supervisor, par, cb) {
        var fiberId = 0;
        var fibers = {};
        var killId = 0;
        var kills = {};
        var early = new Error("[ParAff] Early exit");
        var interrupt = null;
        var root = EMPTY;
        function kill(error, par2, cb2) {
          var step = par2;
          var head = null;
          var tail = null;
          var count = 0;
          var kills2 = {};
          var tmp, kid;
          loop:
            while (true) {
              tmp = null;
              switch (step.tag) {
                case FORKED:
                  if (step._3 === EMPTY) {
                    tmp = fibers[step._1];
                    kills2[count++] = tmp.kill(error, function(result) {
                      return function() {
                        count--;
                        if (count === 0) {
                          cb2(result)();
                        }
                      };
                    });
                  }
                  if (head === null) {
                    break loop;
                  }
                  step = head._2;
                  if (tail === null) {
                    head = null;
                  } else {
                    head = tail._1;
                    tail = tail._2;
                  }
                  break;
                case MAP:
                  step = step._2;
                  break;
                case APPLY:
                case ALT:
                  if (head) {
                    tail = new Aff2(CONS, head, tail);
                  }
                  head = step;
                  step = step._1;
                  break;
              }
            }
          if (count === 0) {
            cb2(util.right(void 0))();
          } else {
            kid = 0;
            tmp = count;
            for (; kid < tmp; kid++) {
              kills2[kid] = kills2[kid]();
            }
          }
          return kills2;
        }
        function join(result, head, tail) {
          var fail, step, lhs, rhs, tmp, kid;
          if (util.isLeft(result)) {
            fail = result;
            step = null;
          } else {
            step = result;
            fail = null;
          }
          loop:
            while (true) {
              lhs = null;
              rhs = null;
              tmp = null;
              kid = null;
              if (interrupt !== null) {
                return;
              }
              if (head === null) {
                cb(fail || step)();
                return;
              }
              if (head._3 !== EMPTY) {
                return;
              }
              switch (head.tag) {
                case MAP:
                  if (fail === null) {
                    head._3 = util.right(head._1(util.fromRight(step)));
                    step = head._3;
                  } else {
                    head._3 = fail;
                  }
                  break;
                case APPLY:
                  lhs = head._1._3;
                  rhs = head._2._3;
                  if (fail) {
                    head._3 = fail;
                    tmp = true;
                    kid = killId++;
                    kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function() {
                      return function() {
                        delete kills[kid];
                        if (tmp) {
                          tmp = false;
                        } else if (tail === null) {
                          join(fail, null, null);
                        } else {
                          join(fail, tail._1, tail._2);
                        }
                      };
                    });
                    if (tmp) {
                      tmp = false;
                      return;
                    }
                  } else if (lhs === EMPTY || rhs === EMPTY) {
                    return;
                  } else {
                    step = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                    head._3 = step;
                  }
                  break;
                case ALT:
                  lhs = head._1._3;
                  rhs = head._2._3;
                  if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                    return;
                  }
                  if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                    fail = step === lhs ? rhs : lhs;
                    step = null;
                    head._3 = fail;
                  } else {
                    head._3 = step;
                    tmp = true;
                    kid = killId++;
                    kills[kid] = kill(early, step === lhs ? head._2 : head._1, function() {
                      return function() {
                        delete kills[kid];
                        if (tmp) {
                          tmp = false;
                        } else if (tail === null) {
                          join(step, null, null);
                        } else {
                          join(step, tail._1, tail._2);
                        }
                      };
                    });
                    if (tmp) {
                      tmp = false;
                      return;
                    }
                  }
                  break;
              }
              if (tail === null) {
                head = null;
              } else {
                head = tail._1;
                tail = tail._2;
              }
            }
        }
        function resolve(fiber) {
          return function(result) {
            return function() {
              delete fibers[fiber._1];
              fiber._3 = result;
              join(result, fiber._2._1, fiber._2._2);
            };
          };
        }
        function run() {
          var status = CONTINUE;
          var step = par;
          var head = null;
          var tail = null;
          var tmp, fid;
          loop:
            while (true) {
              tmp = null;
              fid = null;
              switch (status) {
                case CONTINUE:
                  switch (step.tag) {
                    case MAP:
                      if (head) {
                        tail = new Aff2(CONS, head, tail);
                      }
                      head = new Aff2(MAP, step._1, EMPTY, EMPTY);
                      step = step._2;
                      break;
                    case APPLY:
                      if (head) {
                        tail = new Aff2(CONS, head, tail);
                      }
                      head = new Aff2(APPLY, EMPTY, step._2, EMPTY);
                      step = step._1;
                      break;
                    case ALT:
                      if (head) {
                        tail = new Aff2(CONS, head, tail);
                      }
                      head = new Aff2(ALT, EMPTY, step._2, EMPTY);
                      step = step._1;
                      break;
                    default:
                      fid = fiberId++;
                      status = RETURN;
                      tmp = step;
                      step = new Aff2(FORKED, fid, new Aff2(CONS, head, tail), EMPTY);
                      tmp = Fiber(util, supervisor, tmp);
                      tmp.onComplete({
                        rethrow: false,
                        handler: resolve(step)
                      })();
                      fibers[fid] = tmp;
                      if (supervisor) {
                        supervisor.register(tmp);
                      }
                  }
                  break;
                case RETURN:
                  if (head === null) {
                    break loop;
                  }
                  if (head._1 === EMPTY) {
                    head._1 = step;
                    status = CONTINUE;
                    step = head._2;
                    head._2 = EMPTY;
                  } else {
                    head._2 = step;
                    step = head;
                    if (tail === null) {
                      head = null;
                    } else {
                      head = tail._1;
                      tail = tail._2;
                    }
                  }
              }
            }
          root = step;
          for (fid = 0; fid < fiberId; fid++) {
            fibers[fid].run();
          }
        }
        function cancel(error, cb2) {
          interrupt = util.left(error);
          var innerKills;
          for (var kid in kills) {
            if (kills.hasOwnProperty(kid)) {
              innerKills = kills[kid];
              for (kid in innerKills) {
                if (innerKills.hasOwnProperty(kid)) {
                  innerKills[kid]();
                }
              }
            }
          }
          kills = null;
          var newKills = kill(error, root, cb2);
          return function(killError) {
            return new Aff2(ASYNC, function(killCb) {
              return function() {
                for (var kid2 in newKills) {
                  if (newKills.hasOwnProperty(kid2)) {
                    newKills[kid2]();
                  }
                }
                return nonCanceler;
              };
            });
          };
        }
        run();
        return function(killError) {
          return new Aff2(ASYNC, function(killCb) {
            return function() {
              return cancel(killError, killCb);
            };
          });
        };
      }
      function sequential(util, supervisor, par) {
        return new Aff2(ASYNC, function(cb) {
          return function() {
            return runPar(util, supervisor, par, cb);
          };
        });
      }
      Aff2.EMPTY = EMPTY;
      Aff2.Pure = AffCtr(PURE);
      Aff2.Throw = AffCtr(THROW);
      Aff2.Catch = AffCtr(CATCH);
      Aff2.Sync = AffCtr(SYNC);
      Aff2.Async = AffCtr(ASYNC);
      Aff2.Bind = AffCtr(BIND);
      Aff2.Bracket = AffCtr(BRACKET);
      Aff2.Fork = AffCtr(FORK);
      Aff2.Seq = AffCtr(SEQ);
      Aff2.ParMap = AffCtr(MAP);
      Aff2.ParApply = AffCtr(APPLY);
      Aff2.ParAlt = AffCtr(ALT);
      Aff2.Fiber = Fiber;
      Aff2.Supervisor = Supervisor;
      Aff2.Scheduler = Scheduler;
      Aff2.nonCanceler = nonCanceler;
      return Aff2;
    }();
    exports2._pure = Aff.Pure;
    exports2._throwError = Aff.Throw;
    exports2._catchError = function(aff) {
      return function(k) {
        return Aff.Catch(aff, k);
      };
    };
    exports2._map = function(f) {
      return function(aff) {
        if (aff.tag === Aff.Pure.tag) {
          return Aff.Pure(f(aff._1));
        } else {
          return Aff.Bind(aff, function(value) {
            return Aff.Pure(f(value));
          });
        }
      };
    };
    exports2._bind = function(aff) {
      return function(k) {
        return Aff.Bind(aff, k);
      };
    };
    exports2._fork = function(immediate) {
      return function(aff) {
        return Aff.Fork(immediate, aff);
      };
    };
    exports2._liftEffect = Aff.Sync;
    exports2._parAffMap = function(f) {
      return function(aff) {
        return Aff.ParMap(f, aff);
      };
    };
    exports2._parAffApply = function(aff1) {
      return function(aff2) {
        return Aff.ParApply(aff1, aff2);
      };
    };
    exports2._parAffAlt = function(aff1) {
      return function(aff2) {
        return Aff.ParAlt(aff1, aff2);
      };
    };
    exports2.makeAff = Aff.Async;
    exports2.generalBracket = function(acquire) {
      return function(options) {
        return function(k) {
          return Aff.Bracket(acquire, options, k);
        };
      };
    };
    exports2._makeFiber = function(util, aff) {
      return function() {
        return Aff.Fiber(util, null, aff);
      };
    };
    exports2._makeSupervisedFiber = function(util, aff) {
      return function() {
        var supervisor = Aff.Supervisor(util);
        return {
          fiber: Aff.Fiber(util, supervisor, aff),
          supervisor
        };
      };
    };
    exports2._killAll = function(error, supervisor, cb) {
      return supervisor.killAll(error, cb);
    };
    exports2._delay = function() {
      function setDelay(n, k) {
        if (n === 0 && typeof setImmediate !== "undefined") {
          return setImmediate(k);
        } else {
          return setTimeout(k, n);
        }
      }
      function clearDelay(n, t) {
        if (n === 0 && typeof clearImmediate !== "undefined") {
          return clearImmediate(t);
        } else {
          return clearTimeout(t);
        }
      }
      return function(right, ms) {
        return Aff.Async(function(cb) {
          return function() {
            var timer = setDelay(ms, cb(right()));
            return function() {
              return Aff.Sync(function() {
                return right(clearDelay(ms, timer));
              });
            };
          };
        });
      };
    }();
    exports2._sequential = Aff.Seq;
  }
});

// output/Control.Monad.Cont.Trans/index.js
var require_Control_Monad_Cont2 = __commonJS({
  "output/Control.Monad.Cont.Trans/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Monad_Cont_Class = require_Control_Monad_Cont();
    var Control_Monad_Reader_Class = require_Control_Monad_Reader();
    var Control_Monad_State_Class = require_Control_Monad_State();
    var Control_Monad_Trans_Class = require_Control_Monad_Trans();
    var Data_Function = require_Data2();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Effect_Class = require_Effect4();
    var ContT = function(x) {
      return x;
    };
    var withContT = function(f) {
      return function(v) {
        return function(k) {
          return v(f(k));
        };
      };
    };
    var runContT = function(v) {
      return function(k) {
        return v(k);
      };
    };
    var newtypeContT = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monadTransContT = {
      lift: function(dictMonad) {
        return function(m) {
          return function(k) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(k);
          };
        };
      }
    };
    var mapContT = function(f) {
      return function(v) {
        return function(k) {
          return f(v(k));
        };
      };
    };
    var functorContT = function(dictFunctor) {
      return {
        map: function(f) {
          return function(v) {
            return function(k) {
              return v(function(a) {
                return k(f(a));
              });
            };
          };
        }
      };
    };
    var applyContT = function(dictApply) {
      return {
        apply: function(v) {
          return function(v1) {
            return function(k) {
              return v(function(g) {
                return v1(function(a) {
                  return k(g(a));
                });
              });
            };
          };
        },
        Functor0: function() {
          return functorContT(dictApply.Functor0());
        }
      };
    };
    var bindContT = function(dictBind) {
      return {
        bind: function(v) {
          return function(k) {
            return function(k$prime) {
              return v(function(a) {
                var v1 = k(a);
                return v1(k$prime);
              });
            };
          };
        },
        Apply0: function() {
          return applyContT(dictBind.Apply0());
        }
      };
    };
    var semigroupContT = function(dictApply) {
      return function(dictSemigroup) {
        return {
          append: Control_Apply.lift2(applyContT(dictApply))(Data_Semigroup.append(dictSemigroup))
        };
      };
    };
    var applicativeContT = function(dictApplicative) {
      return {
        pure: function(a) {
          return function(k) {
            return k(a);
          };
        },
        Apply0: function() {
          return applyContT(dictApplicative.Apply0());
        }
      };
    };
    var monadContT = function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeContT(dictMonad.Applicative0());
        },
        Bind1: function() {
          return bindContT(dictMonad.Bind1());
        }
      };
    };
    var monadAskContT = function(dictMonadAsk) {
      return {
        ask: Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),
        Monad0: function() {
          return monadContT(dictMonadAsk.Monad0());
        }
      };
    };
    var monadReaderContT = function(dictMonadReader) {
      return {
        local: function(f) {
          return function(v) {
            return function(k) {
              return Control_Bind.bind(dictMonadReader.MonadAsk0().Monad0().Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function(r) {
                return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v(function() {
                  var $44 = Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](r));
                  return function($45) {
                    return $44(k($45));
                  };
                }()));
              });
            };
          };
        },
        MonadAsk0: function() {
          return monadAskContT(dictMonadReader.MonadAsk0());
        }
      };
    };
    var monadContContT = function(dictMonad) {
      return {
        callCC: function(f) {
          return function(k) {
            var v = f(function(a) {
              return function(v1) {
                return k(a);
              };
            });
            return v(k);
          };
        },
        Monad0: function() {
          return monadContT(dictMonad);
        }
      };
    };
    var monadEffectContT = function(dictMonadEffect) {
      return {
        liftEffect: function() {
          var $46 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEffect.Monad0());
          var $47 = Effect_Class.liftEffect(dictMonadEffect);
          return function($48) {
            return $46($47($48));
          };
        }(),
        Monad0: function() {
          return monadContT(dictMonadEffect.Monad0());
        }
      };
    };
    var monadStateContT = function(dictMonadState) {
      return {
        state: function() {
          var $49 = Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0());
          var $50 = Control_Monad_State_Class.state(dictMonadState);
          return function($51) {
            return $49($50($51));
          };
        }(),
        Monad0: function() {
          return monadContT(dictMonadState.Monad0());
        }
      };
    };
    var monoidContT = function(dictApplicative) {
      return function(dictMonoid) {
        return {
          mempty: Control_Applicative.pure(applicativeContT(dictApplicative))(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function() {
            return semigroupContT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }
        };
      };
    };
    module2.exports = {
      ContT,
      runContT,
      mapContT,
      withContT,
      newtypeContT,
      monadContContT,
      functorContT,
      applyContT,
      applicativeContT,
      bindContT,
      monadContT,
      monadTransContT,
      monadEffectContT,
      monadAskContT,
      monadReaderContT,
      monadStateContT,
      semigroupContT,
      monoidContT,
      callCC: Control_Monad_Cont_Class.callCC,
      lift: Control_Monad_Trans_Class.lift
    };
  }
});

// output/Control.Monad.Maybe.Trans/index.js
var require_Control_Monad_Maybe = __commonJS({
  "output/Control.Monad.Maybe.Trans/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad = require_Control7();
    var Control_Monad_Cont_Class = require_Control_Monad_Cont();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Monad_Reader_Class = require_Control_Monad_Reader();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Control_Monad_State_Class = require_Control_Monad_State();
    var Control_Monad_Trans_Class = require_Control_Monad_Trans();
    var Control_Monad_Writer_Class = require_Control_Monad_Writer();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Tuple = require_Data22();
    var Effect_Class = require_Effect4();
    var MaybeT = function(x) {
      return x;
    };
    var runMaybeT = function(v) {
      return v;
    };
    var newtypeMaybeT = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monadTransMaybeT = {
      lift: function(dictMonad) {
        var $72 = Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create);
        return function($73) {
          return MaybeT($72($73));
        };
      }
    };
    var mapMaybeT = function(f) {
      return function(v) {
        return f(v);
      };
    };
    var functorMaybeT = function(dictFunctor) {
      return {
        map: function(f) {
          return function(v) {
            return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
          };
        }
      };
    };
    var monadMaybeT = function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeMaybeT(dictMonad);
        },
        Bind1: function() {
          return bindMaybeT(dictMonad);
        }
      };
    };
    var bindMaybeT = function(dictMonad) {
      return {
        bind: function(v) {
          return function(f) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function(v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                var v2 = f(v1.value0);
                return v2;
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 55, column 11 - line 57, column 42): " + [v1.constructor.name]);
            });
          };
        },
        Apply0: function() {
          return applyMaybeT(dictMonad);
        }
      };
    };
    var applyMaybeT = function(dictMonad) {
      return {
        apply: Control_Monad.ap(monadMaybeT(dictMonad)),
        Functor0: function() {
          return functorMaybeT(dictMonad.Bind1().Apply0().Functor0());
        }
      };
    };
    var applicativeMaybeT = function(dictMonad) {
      return {
        pure: function() {
          var $74 = Control_Applicative.pure(dictMonad.Applicative0());
          return function($75) {
            return MaybeT($74(Data_Maybe.Just.create($75)));
          };
        }(),
        Apply0: function() {
          return applyMaybeT(dictMonad);
        }
      };
    };
    var semigroupMaybeT = function(dictMonad) {
      return function(dictSemigroup) {
        return {
          append: Control_Apply.lift2(applyMaybeT(dictMonad))(Data_Semigroup.append(dictSemigroup))
        };
      };
    };
    var monadAskMaybeT = function(dictMonadAsk) {
      return {
        ask: Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),
        Monad0: function() {
          return monadMaybeT(dictMonadAsk.Monad0());
        }
      };
    };
    var monadReaderMaybeT = function(dictMonadReader) {
      return {
        local: function(f) {
          return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
        },
        MonadAsk0: function() {
          return monadAskMaybeT(dictMonadReader.MonadAsk0());
        }
      };
    };
    var monadContMaybeT = function(dictMonadCont) {
      return {
        callCC: function(f) {
          return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function(c) {
            var v = f(function(a) {
              return MaybeT(c(new Data_Maybe.Just(a)));
            });
            return v;
          }));
        },
        Monad0: function() {
          return monadMaybeT(dictMonadCont.Monad0());
        }
      };
    };
    var monadEffectMaybe = function(dictMonadEffect) {
      return {
        liftEffect: function() {
          var $76 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEffect.Monad0());
          var $77 = Effect_Class.liftEffect(dictMonadEffect);
          return function($78) {
            return $76($77($78));
          };
        }(),
        Monad0: function() {
          return monadMaybeT(dictMonadEffect.Monad0());
        }
      };
    };
    var monadRecMaybeT = function(dictMonadRec) {
      return {
        tailRecM: function(f) {
          var $79 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function(a) {
            var v = f(a);
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v)(function(m$prime) {
              return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function() {
                if (m$prime instanceof Data_Maybe.Nothing) {
                  return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
                }
                ;
                if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                }
                ;
                if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 85, column 16 - line 88, column 43): " + [m$prime.constructor.name]);
              }());
            });
          });
          return function($80) {
            return MaybeT($79($80));
          };
        },
        Monad0: function() {
          return monadMaybeT(dictMonadRec.Monad0());
        }
      };
    };
    var monadStateMaybeT = function(dictMonadState) {
      return {
        state: function(f) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
        },
        Monad0: function() {
          return monadMaybeT(dictMonadState.Monad0());
        }
      };
    };
    var monadTellMaybeT = function(dictMonadTell) {
      return {
        tell: function() {
          var $81 = Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad1());
          var $82 = Control_Monad_Writer_Class.tell(dictMonadTell);
          return function($83) {
            return $81($82($83));
          };
        }(),
        Semigroup0: dictMonadTell.Semigroup0,
        Monad1: function() {
          return monadMaybeT(dictMonadTell.Monad1());
        }
      };
    };
    var monadWriterMaybeT = function(dictMonadWriter) {
      return {
        listen: mapMaybeT(function(m) {
          return Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function(v) {
            return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function(r) {
              return new Data_Tuple.Tuple(r, v.value1);
            })(v.value0));
          });
        }),
        pass: mapMaybeT(function(m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(m)(function(a) {
            return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(function() {
              if (a instanceof Data_Maybe.Nothing) {
                return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.identity(Control_Category.categoryFn));
              }
              ;
              if (a instanceof Data_Maybe.Just) {
                return new Data_Tuple.Tuple(new Data_Maybe.Just(a.value0.value0), a.value0.value1);
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 122, column 10 - line 124, column 43): " + [a.constructor.name]);
            }());
          }));
        }),
        Monoid0: dictMonadWriter.Monoid0,
        MonadTell1: function() {
          return monadTellMaybeT(dictMonadWriter.MonadTell1());
        }
      };
    };
    var monadThrowMaybeT = function(dictMonadThrow) {
      return {
        throwError: function(e) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
        },
        Monad0: function() {
          return monadMaybeT(dictMonadThrow.Monad0());
        }
      };
    };
    var monadErrorMaybeT = function(dictMonadError) {
      return {
        catchError: function(v) {
          return function(h) {
            return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function(a) {
              var v1 = h(a);
              return v1;
            }));
          };
        },
        MonadThrow0: function() {
          return monadThrowMaybeT(dictMonadError.MonadThrow0());
        }
      };
    };
    var monoidMaybeT = function(dictMonad) {
      return function(dictMonoid) {
        return {
          mempty: Control_Applicative.pure(applicativeMaybeT(dictMonad))(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function() {
            return semigroupMaybeT(dictMonad)(dictMonoid.Semigroup0());
          }
        };
      };
    };
    var altMaybeT = function(dictMonad) {
      return {
        alt: function(v) {
          return function(v1) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function(m) {
              if (m instanceof Data_Maybe.Nothing) {
                return v1;
              }
              ;
              return Control_Applicative.pure(dictMonad.Applicative0())(m);
            });
          };
        },
        Functor0: function() {
          return functorMaybeT(dictMonad.Bind1().Apply0().Functor0());
        }
      };
    };
    var plusMaybeT = function(dictMonad) {
      return {
        empty: Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value),
        Alt0: function() {
          return altMaybeT(dictMonad);
        }
      };
    };
    var alternativeMaybeT = function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeMaybeT(dictMonad);
        },
        Plus1: function() {
          return plusMaybeT(dictMonad);
        }
      };
    };
    var monadPlusMaybeT = function(dictMonad) {
      return {
        Monad0: function() {
          return monadMaybeT(dictMonad);
        },
        Alternative1: function() {
          return alternativeMaybeT(dictMonad);
        }
      };
    };
    var monadZeroMaybeT = function(dictMonad) {
      return {
        Monad0: function() {
          return monadMaybeT(dictMonad);
        },
        Alternative1: function() {
          return alternativeMaybeT(dictMonad);
        },
        MonadZeroIsDeprecated2: function() {
          return void 0;
        }
      };
    };
    module2.exports = {
      MaybeT,
      runMaybeT,
      mapMaybeT,
      newtypeMaybeT,
      functorMaybeT,
      applyMaybeT,
      applicativeMaybeT,
      bindMaybeT,
      monadMaybeT,
      monadTransMaybeT,
      altMaybeT,
      plusMaybeT,
      alternativeMaybeT,
      monadPlusMaybeT,
      monadZeroMaybeT,
      monadRecMaybeT,
      monadEffectMaybe,
      monadContMaybeT,
      monadThrowMaybeT,
      monadErrorMaybeT,
      monadAskMaybeT,
      monadReaderMaybeT,
      monadStateMaybeT,
      monadTellMaybeT,
      monadWriterMaybeT,
      semigroupMaybeT,
      monoidMaybeT,
      lift: Control_Monad_Trans_Class.lift
    };
  }
});

// output/Type.Equality/index.js
var require_Type2 = __commonJS({
  "output/Type.Equality/index.js"(exports2, module2) {
    "use strict";
    var refl = {
      proof: function(a) {
        return a;
      },
      Coercible0: function() {
        return void 0;
      }
    };
    var proof = function(dict) {
      return dict.proof;
    };
    var to = function(dictTypeEquals) {
      var v = proof(dictTypeEquals)(function(a) {
        return a;
      });
      return v;
    };
    var from = function(dictTypeEquals) {
      var v = proof(dictTypeEquals)(function(a) {
        return a;
      });
      return v;
    };
    module2.exports = {
      proof,
      to,
      from,
      refl
    };
  }
});

// output/Data.Distributive/index.js
var require_Data34 = __commonJS({
  "output/Data.Distributive/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Newtype = require_Data23();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var Type_Equality = require_Type2();
    var distributiveIdentity = {
      distribute: function(dictFunctor) {
        var $16 = Data_Functor.map(dictFunctor)(Data_Newtype.unwrap());
        return function($17) {
          return Data_Identity.Identity($16($17));
        };
      },
      collect: function(dictFunctor) {
        return function(f) {
          var $18 = Data_Functor.map(dictFunctor)(function() {
            var $20 = Data_Newtype.unwrap();
            return function($21) {
              return $20(f($21));
            };
          }());
          return function($19) {
            return Data_Identity.Identity($18($19));
          };
        };
      },
      Functor0: function() {
        return Data_Identity.functorIdentity;
      }
    };
    var distribute = function(dict) {
      return dict.distribute;
    };
    var distributiveFunction = {
      distribute: function(dictFunctor) {
        return function(a) {
          return function(e) {
            return Data_Functor.map(dictFunctor)(function(v) {
              return v(e);
            })(a);
          };
        };
      },
      collect: function(dictFunctor) {
        return function(f) {
          var $22 = distribute(distributiveFunction)(dictFunctor);
          var $23 = Data_Functor.map(dictFunctor)(f);
          return function($24) {
            return $22($23($24));
          };
        };
      },
      Functor0: function() {
        return Data_Functor.functorFn;
      }
    };
    var cotraverse = function(dictDistributive) {
      return function(dictFunctor) {
        return function(f) {
          var $25 = Data_Functor.map(dictDistributive.Functor0())(f);
          var $26 = distribute(dictDistributive)(dictFunctor);
          return function($27) {
            return $25($26($27));
          };
        };
      };
    };
    var collectDefault = function(dictDistributive) {
      return function(dictFunctor) {
        return function(f) {
          var $28 = distribute(dictDistributive)(dictFunctor);
          var $29 = Data_Functor.map(dictFunctor)(f);
          return function($30) {
            return $28($29($30));
          };
        };
      };
    };
    var distributiveTuple = function(dictTypeEquals) {
      return {
        collect: function(dictFunctor) {
          return collectDefault(distributiveTuple(dictTypeEquals))(dictFunctor);
        },
        distribute: function(dictFunctor) {
          var $31 = Data_Tuple.Tuple.create(Type_Equality.from(dictTypeEquals)(Data_Unit.unit));
          var $32 = Data_Functor.map(dictFunctor)(Data_Tuple.snd);
          return function($33) {
            return $31($32($33));
          };
        },
        Functor0: function() {
          return Data_Tuple.functorTuple;
        }
      };
    };
    var collect = function(dict) {
      return dict.collect;
    };
    var distributeDefault = function(dictDistributive) {
      return function(dictFunctor) {
        return collect(dictDistributive)(dictFunctor)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    module2.exports = {
      collect,
      distribute,
      distributeDefault,
      collectDefault,
      cotraverse,
      distributiveIdentity,
      distributiveFunction,
      distributiveTuple
    };
  }
});

// output/Control.Monad.Reader.Trans/index.js
var require_Control_Monad_Reader2 = __commonJS({
  "output/Control.Monad.Reader.Trans/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Monad_Cont_Class = require_Control_Monad_Cont();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Monad_Reader_Class = require_Control_Monad_Reader();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Control_Monad_State_Class = require_Control_Monad_State();
    var Control_Monad_Trans_Class = require_Control_Monad_Trans();
    var Control_Monad_Writer_Class = require_Control_Monad_Writer();
    var Control_Plus = require_Control9();
    var Data_Distributive = require_Data34();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Effect_Class = require_Effect4();
    var ReaderT = function(x) {
      return x;
    };
    var withReaderT = function(f) {
      return function(v) {
        return function($63) {
          return v(f($63));
        };
      };
    };
    var runReaderT = function(v) {
      return v;
    };
    var newtypeReaderT = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monadTransReaderT = {
      lift: function(dictMonad) {
        return function($64) {
          return ReaderT(Data_Function["const"]($64));
        };
      }
    };
    var mapReaderT = function(f) {
      return function(v) {
        return function($65) {
          return f(v($65));
        };
      };
    };
    var functorReaderT = function(dictFunctor) {
      return {
        map: function() {
          var $66 = Data_Functor.map(dictFunctor);
          return function($67) {
            return mapReaderT($66($67));
          };
        }()
      };
    };
    var distributiveReaderT = function(dictDistributive) {
      return {
        distribute: function(dictFunctor) {
          return function(a) {
            return function(e) {
              return Data_Distributive.collect(dictDistributive)(dictFunctor)(function(r) {
                return r(e);
              })(a);
            };
          };
        },
        collect: function(dictFunctor) {
          return function(f) {
            var $68 = Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor);
            var $69 = Data_Functor.map(dictFunctor)(f);
            return function($70) {
              return $68($69($70));
            };
          };
        },
        Functor0: function() {
          return functorReaderT(dictDistributive.Functor0());
        }
      };
    };
    var applyReaderT = function(dictApply) {
      return {
        apply: function(v) {
          return function(v1) {
            return function(r) {
              return Control_Apply.apply(dictApply)(v(r))(v1(r));
            };
          };
        },
        Functor0: function() {
          return functorReaderT(dictApply.Functor0());
        }
      };
    };
    var bindReaderT = function(dictBind) {
      return {
        bind: function(v) {
          return function(k) {
            return function(r) {
              return Control_Bind.bind(dictBind)(v(r))(function(a) {
                var v1 = k(a);
                return v1(r);
              });
            };
          };
        },
        Apply0: function() {
          return applyReaderT(dictBind.Apply0());
        }
      };
    };
    var semigroupReaderT = function(dictApply) {
      return function(dictSemigroup) {
        return {
          append: Control_Apply.lift2(applyReaderT(dictApply))(Data_Semigroup.append(dictSemigroup))
        };
      };
    };
    var applicativeReaderT = function(dictApplicative) {
      return {
        pure: function() {
          var $71 = Control_Applicative.pure(dictApplicative);
          return function($72) {
            return ReaderT(Data_Function["const"]($71($72)));
          };
        }(),
        Apply0: function() {
          return applyReaderT(dictApplicative.Apply0());
        }
      };
    };
    var monadReaderT = function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeReaderT(dictMonad.Applicative0());
        },
        Bind1: function() {
          return bindReaderT(dictMonad.Bind1());
        }
      };
    };
    var monadAskReaderT = function(dictMonad) {
      return {
        ask: Control_Applicative.pure(dictMonad.Applicative0()),
        Monad0: function() {
          return monadReaderT(dictMonad);
        }
      };
    };
    var monadReaderReaderT = function(dictMonad) {
      return {
        local: withReaderT,
        MonadAsk0: function() {
          return monadAskReaderT(dictMonad);
        }
      };
    };
    var monadContReaderT = function(dictMonadCont) {
      return {
        callCC: function(f) {
          return function(r) {
            return Control_Monad_Cont_Class.callCC(dictMonadCont)(function(c) {
              var v = f(function($73) {
                return ReaderT(Data_Function["const"](c($73)));
              });
              return v(r);
            });
          };
        },
        Monad0: function() {
          return monadReaderT(dictMonadCont.Monad0());
        }
      };
    };
    var monadEffectReader = function(dictMonadEffect) {
      return {
        liftEffect: function() {
          var $74 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
          var $75 = Effect_Class.liftEffect(dictMonadEffect);
          return function($76) {
            return $74($75($76));
          };
        }(),
        Monad0: function() {
          return monadReaderT(dictMonadEffect.Monad0());
        }
      };
    };
    var monadRecReaderT = function(dictMonadRec) {
      return {
        tailRecM: function(k) {
          return function(a) {
            var k$prime = function(r) {
              return function(a$prime) {
                var v = k(a$prime);
                return Control_Bind.bindFlipped(dictMonadRec.Monad0().Bind1())(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0()))(v(r));
              };
            };
            return function(r) {
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
            };
          };
        },
        Monad0: function() {
          return monadReaderT(dictMonadRec.Monad0());
        }
      };
    };
    var monadStateReaderT = function(dictMonadState) {
      return {
        state: function() {
          var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0());
          var $78 = Control_Monad_State_Class.state(dictMonadState);
          return function($79) {
            return $77($78($79));
          };
        }(),
        Monad0: function() {
          return monadReaderT(dictMonadState.Monad0());
        }
      };
    };
    var monadTellReaderT = function(dictMonadTell) {
      return {
        tell: function() {
          var $80 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad1());
          var $81 = Control_Monad_Writer_Class.tell(dictMonadTell);
          return function($82) {
            return $80($81($82));
          };
        }(),
        Semigroup0: dictMonadTell.Semigroup0,
        Monad1: function() {
          return monadReaderT(dictMonadTell.Monad1());
        }
      };
    };
    var monadWriterReaderT = function(dictMonadWriter) {
      return {
        listen: mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)),
        pass: mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)),
        Monoid0: dictMonadWriter.Monoid0,
        MonadTell1: function() {
          return monadTellReaderT(dictMonadWriter.MonadTell1());
        }
      };
    };
    var monadThrowReaderT = function(dictMonadThrow) {
      return {
        throwError: function() {
          var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
          var $84 = Control_Monad_Error_Class.throwError(dictMonadThrow);
          return function($85) {
            return $83($84($85));
          };
        }(),
        Monad0: function() {
          return monadReaderT(dictMonadThrow.Monad0());
        }
      };
    };
    var monadErrorReaderT = function(dictMonadError) {
      return {
        catchError: function(v) {
          return function(h) {
            return function(r) {
              return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function(e) {
                var v1 = h(e);
                return v1(r);
              });
            };
          };
        },
        MonadThrow0: function() {
          return monadThrowReaderT(dictMonadError.MonadThrow0());
        }
      };
    };
    var monoidReaderT = function(dictApplicative) {
      return function(dictMonoid) {
        return {
          mempty: Control_Applicative.pure(applicativeReaderT(dictApplicative))(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function() {
            return semigroupReaderT(dictApplicative.Apply0())(dictMonoid.Semigroup0());
          }
        };
      };
    };
    var altReaderT = function(dictAlt) {
      return {
        alt: function(v) {
          return function(v1) {
            return function(r) {
              return Control_Alt.alt(dictAlt)(v(r))(v1(r));
            };
          };
        },
        Functor0: function() {
          return functorReaderT(dictAlt.Functor0());
        }
      };
    };
    var plusReaderT = function(dictPlus) {
      return {
        empty: Data_Function["const"](Control_Plus.empty(dictPlus)),
        Alt0: function() {
          return altReaderT(dictPlus.Alt0());
        }
      };
    };
    var alternativeReaderT = function(dictAlternative) {
      return {
        Applicative0: function() {
          return applicativeReaderT(dictAlternative.Applicative0());
        },
        Plus1: function() {
          return plusReaderT(dictAlternative.Plus1());
        }
      };
    };
    var monadPlusReaderT = function(dictMonadPlus) {
      return {
        Monad0: function() {
          return monadReaderT(dictMonadPlus.Monad0());
        },
        Alternative1: function() {
          return alternativeReaderT(dictMonadPlus.Alternative1());
        }
      };
    };
    var monadZeroReaderT = function(dictMonadZero) {
      return {
        Monad0: function() {
          return monadReaderT(dictMonadZero.Monad0());
        },
        Alternative1: function() {
          return alternativeReaderT(dictMonadZero.Alternative1());
        },
        MonadZeroIsDeprecated2: function() {
          return void 0;
        }
      };
    };
    module2.exports = {
      ReaderT,
      runReaderT,
      withReaderT,
      mapReaderT,
      newtypeReaderT,
      functorReaderT,
      applyReaderT,
      applicativeReaderT,
      altReaderT,
      plusReaderT,
      alternativeReaderT,
      bindReaderT,
      monadReaderT,
      monadZeroReaderT,
      semigroupReaderT,
      monoidReaderT,
      monadPlusReaderT,
      monadTransReaderT,
      monadEffectReader,
      monadContReaderT,
      monadThrowReaderT,
      monadErrorReaderT,
      monadAskReaderT,
      monadReaderReaderT,
      monadStateReaderT,
      monadTellReaderT,
      monadWriterReaderT,
      distributiveReaderT,
      monadRecReaderT,
      ask: Control_Monad_Reader_Class.ask,
      asks: Control_Monad_Reader_Class.asks,
      local: Control_Monad_Reader_Class.local,
      lift: Control_Monad_Trans_Class.lift
    };
  }
});

// output/Control.Monad.Writer.Trans/index.js
var require_Control_Monad_Writer2 = __commonJS({
  "output/Control.Monad.Writer.Trans/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Monad_Cont_Class = require_Control_Monad_Cont();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Monad_Reader_Class = require_Control_Monad_Reader();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Control_Monad_State_Class = require_Control_Monad_State();
    var Control_Monad_Trans_Class = require_Control_Monad_Trans();
    var Control_Monad_Writer_Class = require_Control_Monad_Writer();
    var Control_Plus = require_Control9();
    var Data_Functor = require_Data4();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var Effect_Class = require_Effect4();
    var WriterT = function(x) {
      return x;
    };
    var runWriterT = function(v) {
      return v;
    };
    var newtypeWriterT = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monadTransWriterT = function(dictMonoid) {
      return {
        lift: function(dictMonad) {
          return function(m) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function(a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid)));
            });
          };
        }
      };
    };
    var mapWriterT = function(f) {
      return function(v) {
        return f(v);
      };
    };
    var functorWriterT = function(dictFunctor) {
      return {
        map: function(f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function(v) {
            return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
        }
      };
    };
    var execWriterT = function(dictFunctor) {
      return function(v) {
        return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
      };
    };
    var applyWriterT = function(dictSemigroup) {
      return function(dictApply) {
        return {
          apply: function(v) {
            return function(v1) {
              var k = function(v3) {
                return function(v4) {
                  return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                };
              };
              return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
            };
          },
          Functor0: function() {
            return functorWriterT(dictApply.Functor0());
          }
        };
      };
    };
    var bindWriterT = function(dictSemigroup) {
      return function(dictBind) {
        return {
          bind: function(v) {
            return function(k) {
              return WriterT(Control_Bind.bind(dictBind)(v)(function(v1) {
                var v2 = k(v1.value0);
                return Data_Functor.map(dictBind.Apply0().Functor0())(function(v3) {
                  return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                })(v2);
              }));
            };
          },
          Apply0: function() {
            return applyWriterT(dictSemigroup)(dictBind.Apply0());
          }
        };
      };
    };
    var semigroupWriterT = function(dictApply) {
      return function(dictSemigroup) {
        return function(dictSemigroup1) {
          return {
            append: Control_Apply.lift2(applyWriterT(dictSemigroup)(dictApply))(Data_Semigroup.append(dictSemigroup1))
          };
        };
      };
    };
    var applicativeWriterT = function(dictMonoid) {
      return function(dictApplicative) {
        return {
          pure: function(a) {
            return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          },
          Apply0: function() {
            return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
          }
        };
      };
    };
    var monadWriterT = function(dictMonoid) {
      return function(dictMonad) {
        return {
          Applicative0: function() {
            return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
          },
          Bind1: function() {
            return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
          }
        };
      };
    };
    var monadAskWriterT = function(dictMonoid) {
      return function(dictMonadAsk) {
        return {
          ask: Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),
          Monad0: function() {
            return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
          }
        };
      };
    };
    var monadReaderWriterT = function(dictMonoid) {
      return function(dictMonadReader) {
        return {
          local: function(f) {
            return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
          },
          MonadAsk0: function() {
            return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
          }
        };
      };
    };
    var monadContWriterT = function(dictMonoid) {
      return function(dictMonadCont) {
        return {
          callCC: function(f) {
            return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function(c) {
              var v = f(function(a) {
                return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
              });
              return v;
            }));
          },
          Monad0: function() {
            return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
          }
        };
      };
    };
    var monadEffectWriter = function(dictMonoid) {
      return function(dictMonadEffect) {
        return {
          liftEffect: function() {
            var $124 = Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEffect.Monad0());
            var $125 = Effect_Class.liftEffect(dictMonadEffect);
            return function($126) {
              return $124($125($126));
            };
          }(),
          Monad0: function() {
            return monadWriterT(dictMonoid)(dictMonadEffect.Monad0());
          }
        };
      };
    };
    var monadRecWriterT = function(dictMonoid) {
      return function(dictMonadRec) {
        return {
          tailRecM: function(f) {
            return function(a) {
              var f$prime = function(v) {
                var v1 = f(v.value0);
                return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v1)(function(v2) {
                  return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function() {
                    if (v2.value0 instanceof Control_Monad_Rec_Class.Loop) {
                      return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
                    }
                    ;
                    if (v2.value0 instanceof Control_Monad_Rec_Class.Done) {
                      return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v2.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v2.value1)));
                    }
                    ;
                    throw new Error("Failed pattern match at Control.Monad.Writer.Trans (line 84, column 16 - line 86, column 47): " + [v2.value0.constructor.name]);
                  }());
                });
              };
              return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
            };
          },
          Monad0: function() {
            return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
          }
        };
      };
    };
    var monadStateWriterT = function(dictMonoid) {
      return function(dictMonadState) {
        return {
          state: function(f) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          },
          Monad0: function() {
            return monadWriterT(dictMonoid)(dictMonadState.Monad0());
          }
        };
      };
    };
    var monadTellWriterT = function(dictMonoid) {
      return function(dictMonad) {
        return {
          tell: function() {
            var $127 = Control_Applicative.pure(dictMonad.Applicative0());
            var $128 = Data_Tuple.Tuple.create(Data_Unit.unit);
            return function($129) {
              return WriterT($127($128($129)));
            };
          }(),
          Semigroup0: dictMonoid.Semigroup0,
          Monad1: function() {
            return monadWriterT(dictMonoid)(dictMonad);
          }
        };
      };
    };
    var monadWriterWriterT = function(dictMonoid) {
      return function(dictMonad) {
        return {
          listen: function(v) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function(v1) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
            });
          },
          pass: function(v) {
            return Control_Bind.bind(dictMonad.Bind1())(v)(function(v1) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
            });
          },
          Monoid0: function() {
            return dictMonoid;
          },
          MonadTell1: function() {
            return monadTellWriterT(dictMonoid)(dictMonad);
          }
        };
      };
    };
    var monadThrowWriterT = function(dictMonoid) {
      return function(dictMonadThrow) {
        return {
          throwError: function(e) {
            return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          },
          Monad0: function() {
            return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
          }
        };
      };
    };
    var monadErrorWriterT = function(dictMonoid) {
      return function(dictMonadError) {
        return {
          catchError: function(v) {
            return function(h) {
              return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function(e) {
                var v1 = h(e);
                return v1;
              }));
            };
          },
          MonadThrow0: function() {
            return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
          }
        };
      };
    };
    var monoidWriterT = function(dictApplicative) {
      return function(dictMonoid) {
        return function(dictMonoid1) {
          return {
            mempty: Control_Applicative.pure(applicativeWriterT(dictMonoid)(dictApplicative))(Data_Monoid.mempty(dictMonoid1)),
            Semigroup0: function() {
              return semigroupWriterT(dictApplicative.Apply0())(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
            }
          };
        };
      };
    };
    var altWriterT = function(dictAlt) {
      return {
        alt: function(v) {
          return function(v1) {
            return Control_Alt.alt(dictAlt)(v)(v1);
          };
        },
        Functor0: function() {
          return functorWriterT(dictAlt.Functor0());
        }
      };
    };
    var plusWriterT = function(dictPlus) {
      return {
        empty: Control_Plus.empty(dictPlus),
        Alt0: function() {
          return altWriterT(dictPlus.Alt0());
        }
      };
    };
    var alternativeWriterT = function(dictMonoid) {
      return function(dictAlternative) {
        return {
          Applicative0: function() {
            return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
          },
          Plus1: function() {
            return plusWriterT(dictAlternative.Plus1());
          }
        };
      };
    };
    var monadPlusWriterT = function(dictMonoid) {
      return function(dictMonadPlus) {
        return {
          Monad0: function() {
            return monadWriterT(dictMonoid)(dictMonadPlus.Monad0());
          },
          Alternative1: function() {
            return alternativeWriterT(dictMonoid)(dictMonadPlus.Alternative1());
          }
        };
      };
    };
    var monadZeroWriterT = function(dictMonoid) {
      return function(dictMonadZero) {
        return {
          Monad0: function() {
            return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
          },
          Alternative1: function() {
            return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
          },
          MonadZeroIsDeprecated2: function() {
            return void 0;
          }
        };
      };
    };
    module2.exports = {
      WriterT,
      runWriterT,
      execWriterT,
      mapWriterT,
      newtypeWriterT,
      functorWriterT,
      applyWriterT,
      applicativeWriterT,
      altWriterT,
      plusWriterT,
      alternativeWriterT,
      bindWriterT,
      monadWriterT,
      monadRecWriterT,
      monadZeroWriterT,
      monadPlusWriterT,
      monadTransWriterT,
      monadEffectWriter,
      monadContWriterT,
      monadThrowWriterT,
      monadErrorWriterT,
      monadAskWriterT,
      monadReaderWriterT,
      monadStateWriterT,
      monadTellWriterT,
      monadWriterWriterT,
      semigroupWriterT,
      monoidWriterT,
      lift: Control_Monad_Trans_Class.lift,
      censor: Control_Monad_Writer_Class.censor,
      listen: Control_Monad_Writer_Class.listen,
      listens: Control_Monad_Writer_Class.listens,
      pass: Control_Monad_Writer_Class.pass,
      tell: Control_Monad_Writer_Class.tell
    };
  }
});

// output/Data.Functor.Contravariant/index.js
var require_Data_Functor6 = __commonJS({
  "output/Data.Functor.Contravariant/index.js"(exports2, module2) {
    "use strict";
    var Data_Functor = require_Data4();
    var Data_Void = require_Data6();
    var contravariantConst = {
      cmap: function(v) {
        return function(v1) {
          return v1;
        };
      }
    };
    var cmap = function(dict) {
      return dict.cmap;
    };
    var cmapFlipped = function(dictContravariant) {
      return function(x) {
        return function(f) {
          return cmap(dictContravariant)(f)(x);
        };
      };
    };
    var coerce = function(dictContravariant) {
      return function(dictFunctor) {
        return function(a) {
          return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
        };
      };
    };
    var imapC = function(dictContravariant) {
      return function(v) {
        return function(f) {
          return cmap(dictContravariant)(f);
        };
      };
    };
    module2.exports = {
      cmap,
      cmapFlipped,
      coerce,
      imapC,
      contravariantConst
    };
  }
});

// output/Data.Profunctor/index.js
var require_Data35 = __commonJS({
  "output/Data.Profunctor/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Newtype = require_Data23();
    var profunctorFn = {
      dimap: function(a2b) {
        return function(c2d) {
          return function(b2c) {
            return function($10) {
              return c2d(b2c(a2b($10)));
            };
          };
        };
      }
    };
    var dimap = function(dict) {
      return dict.dimap;
    };
    var lcmap = function(dictProfunctor) {
      return function(a2b) {
        return dimap(dictProfunctor)(a2b)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var rmap = function(dictProfunctor) {
      return function(b2c) {
        return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
    };
    var unwrapIso = function(dictProfunctor) {
      return function(dictNewtype) {
        return dimap(dictProfunctor)(Data_Newtype.wrap())(Data_Newtype.unwrap());
      };
    };
    var wrapIso = function(dictProfunctor) {
      return function(dictNewtype) {
        return function(v) {
          return dimap(dictProfunctor)(Data_Newtype.unwrap())(Data_Newtype.wrap());
        };
      };
    };
    var arr = function(dictCategory) {
      return function(dictProfunctor) {
        return function(f) {
          return rmap(dictProfunctor)(f)(Control_Category.identity(dictCategory));
        };
      };
    };
    module2.exports = {
      dimap,
      lcmap,
      rmap,
      arr,
      unwrapIso,
      wrapIso,
      profunctorFn
    };
  }
});

// output/Data.Functor.Costar/index.js
var require_Data_Functor7 = __commonJS({
  "output/Data.Functor.Costar/index.js"(exports2, module2) {
    "use strict";
    var Control_Comonad = require_Control11();
    var Control_Extend = require_Control10();
    var Data_Distributive = require_Data34();
    var Data_Functor = require_Data4();
    var Data_Functor_Contravariant = require_Data_Functor6();
    var Data_Functor_Invariant = require_Data_Functor();
    var Data_Profunctor = require_Data35();
    var Data_Tuple = require_Data22();
    var Costar = function(x) {
      return x;
    };
    var semigroupoidCostar = function(dictExtend) {
      return {
        compose: function(v) {
          return function(v1) {
            return Control_Extend.composeCoKleisliFlipped(dictExtend)(v)(v1);
          };
        }
      };
    };
    var profunctorCostar = function(dictFunctor) {
      return {
        dimap: function(f) {
          return function(g) {
            return function(v) {
              var $46 = Data_Functor.map(dictFunctor)(f);
              return function($47) {
                return g(v($46($47)));
              };
            };
          };
        }
      };
    };
    var strongCostar = function(dictComonad) {
      return {
        first: function(v) {
          return function(x) {
            return new Data_Tuple.Tuple(v(Data_Functor.map(dictComonad.Extend0().Functor0())(Data_Tuple.fst)(x)), Data_Tuple.snd(Control_Comonad.extract(dictComonad)(x)));
          };
        },
        second: function(v) {
          return function(x) {
            return new Data_Tuple.Tuple(Data_Tuple.fst(Control_Comonad.extract(dictComonad)(x)), v(Data_Functor.map(dictComonad.Extend0().Functor0())(Data_Tuple.snd)(x)));
          };
        },
        Profunctor0: function() {
          return profunctorCostar(dictComonad.Extend0().Functor0());
        }
      };
    };
    var newtypeCostar = {
      Coercible0: function() {
        return void 0;
      }
    };
    var hoistCostar = function(f) {
      return function(v) {
        return Data_Profunctor.lcmap(Data_Profunctor.profunctorFn)(f)(v);
      };
    };
    var functorCostar = {
      map: function(f) {
        return function(v) {
          return function($48) {
            return f(v($48));
          };
        };
      }
    };
    var invariantCostar = {
      imap: Data_Functor_Invariant.imapF(functorCostar)
    };
    var distributiveCostar = {
      distribute: function(dictFunctor) {
        return function(f) {
          return function(a) {
            return Data_Functor.map(dictFunctor)(function(v) {
              return v(a);
            })(f);
          };
        };
      },
      collect: function(dictFunctor) {
        return function(f) {
          var $49 = Data_Distributive.distribute(distributiveCostar)(dictFunctor);
          var $50 = Data_Functor.map(dictFunctor)(f);
          return function($51) {
            return $49($50($51));
          };
        };
      },
      Functor0: function() {
        return functorCostar;
      }
    };
    var closedCostar = function(dictFunctor) {
      return {
        closed: function(v) {
          return function(g) {
            return function(x) {
              return v(Data_Functor.map(dictFunctor)(function(v1) {
                return v1(x);
              })(g));
            };
          };
        },
        Profunctor0: function() {
          return profunctorCostar(dictFunctor);
        }
      };
    };
    var categoryCostar = function(dictComonad) {
      return {
        identity: Control_Comonad.extract(dictComonad),
        Semigroupoid0: function() {
          return semigroupoidCostar(dictComonad.Extend0());
        }
      };
    };
    var bifunctorCostar = function(dictContravariant) {
      return {
        bimap: function(f) {
          return function(g) {
            return function(v) {
              var $52 = Data_Functor_Contravariant.cmap(dictContravariant)(f);
              return function($53) {
                return g(v($52($53)));
              };
            };
          };
        }
      };
    };
    var applyCostar = {
      apply: function(v) {
        return function(v1) {
          return function(a) {
            return v(a)(v1(a));
          };
        };
      },
      Functor0: function() {
        return functorCostar;
      }
    };
    var bindCostar = {
      bind: function(v) {
        return function(f) {
          return function(x) {
            var v1 = f(v(x));
            return v1(x);
          };
        };
      },
      Apply0: function() {
        return applyCostar;
      }
    };
    var applicativeCostar = {
      pure: function(a) {
        return function(v) {
          return a;
        };
      },
      Apply0: function() {
        return applyCostar;
      }
    };
    var monadCostar = {
      Applicative0: function() {
        return applicativeCostar;
      },
      Bind1: function() {
        return bindCostar;
      }
    };
    module2.exports = {
      Costar,
      hoistCostar,
      newtypeCostar,
      semigroupoidCostar,
      categoryCostar,
      functorCostar,
      invariantCostar,
      applyCostar,
      applicativeCostar,
      bindCostar,
      monadCostar,
      distributiveCostar,
      bifunctorCostar,
      profunctorCostar,
      strongCostar,
      closedCostar
    };
  }
});

// output/Data.Profunctor.Star/index.js
var require_Data_Profunctor = __commonJS({
  "output/Data.Profunctor.Star/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Plus = require_Control9();
    var Data_Distributive = require_Data34();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Functor_Invariant = require_Data_Functor();
    var Data_Tuple = require_Data22();
    var Star = function(x) {
      return x;
    };
    var semigroupoidStar = function(dictBind) {
      return {
        compose: function(v) {
          return function(v1) {
            return function(x) {
              return Control_Bind.bind(dictBind)(v1(x))(v);
            };
          };
        }
      };
    };
    var profunctorStar = function(dictFunctor) {
      return {
        dimap: function(f) {
          return function(g) {
            return function(v) {
              var $75 = Data_Functor.map(dictFunctor)(g);
              return function($76) {
                return $75(v(f($76)));
              };
            };
          };
        }
      };
    };
    var strongStar = function(dictFunctor) {
      return {
        first: function(v) {
          return function(v1) {
            return Data_Functor.map(dictFunctor)(function(v2) {
              return new Data_Tuple.Tuple(v2, v1.value1);
            })(v(v1.value0));
          };
        },
        second: function(v) {
          return function(v1) {
            return Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create(v1.value0))(v(v1.value1));
          };
        },
        Profunctor0: function() {
          return profunctorStar(dictFunctor);
        }
      };
    };
    var newtypeStar = {
      Coercible0: function() {
        return void 0;
      }
    };
    var invariantStar = function(dictInvariant) {
      return {
        imap: function(f) {
          return function(g) {
            return function(v) {
              var $77 = Data_Functor_Invariant.imap(dictInvariant)(f)(g);
              return function($78) {
                return $77(v($78));
              };
            };
          };
        }
      };
    };
    var hoistStar = function(f) {
      return function(v) {
        return function($79) {
          return f(v($79));
        };
      };
    };
    var functorStar = function(dictFunctor) {
      return {
        map: function(f) {
          return function(v) {
            var $80 = Data_Functor.map(dictFunctor)(f);
            return function($81) {
              return $80(v($81));
            };
          };
        }
      };
    };
    var distributiveStar = function(dictDistributive) {
      return {
        distribute: function(dictFunctor) {
          return function(f) {
            return function(a) {
              return Data_Distributive.collect(dictDistributive)(dictFunctor)(function(v) {
                return v(a);
              })(f);
            };
          };
        },
        collect: function(dictFunctor) {
          return function(f) {
            var $82 = Data_Distributive.distribute(distributiveStar(dictDistributive))(dictFunctor);
            var $83 = Data_Functor.map(dictFunctor)(f);
            return function($84) {
              return $82($83($84));
            };
          };
        },
        Functor0: function() {
          return functorStar(dictDistributive.Functor0());
        }
      };
    };
    var closedStar = function(dictDistributive) {
      return {
        closed: function(v) {
          return function(g) {
            return Data_Distributive.distribute(dictDistributive)(Data_Functor.functorFn)(function($85) {
              return v(g($85));
            });
          };
        },
        Profunctor0: function() {
          return profunctorStar(dictDistributive.Functor0());
        }
      };
    };
    var choiceStar = function(dictApplicative) {
      return {
        left: function(v) {
          return Star(Data_Either.either(function() {
            var $86 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Left.create);
            return function($87) {
              return $86(v($87));
            };
          }())(function() {
            var $88 = Control_Applicative.pure(dictApplicative);
            return function($89) {
              return $88(Data_Either.Right.create($89));
            };
          }()));
        },
        right: function(v) {
          return Star(Data_Either.either(function() {
            var $90 = Control_Applicative.pure(dictApplicative);
            return function($91) {
              return $90(Data_Either.Left.create($91));
            };
          }())(function() {
            var $92 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create);
            return function($93) {
              return $92(v($93));
            };
          }()));
        },
        Profunctor0: function() {
          return profunctorStar(dictApplicative.Apply0().Functor0());
        }
      };
    };
    var categoryStar = function(dictMonad) {
      return {
        identity: Control_Applicative.pure(dictMonad.Applicative0()),
        Semigroupoid0: function() {
          return semigroupoidStar(dictMonad.Bind1());
        }
      };
    };
    var applyStar = function(dictApply) {
      return {
        apply: function(v) {
          return function(v1) {
            return function(a) {
              return Control_Apply.apply(dictApply)(v(a))(v1(a));
            };
          };
        },
        Functor0: function() {
          return functorStar(dictApply.Functor0());
        }
      };
    };
    var bindStar = function(dictBind) {
      return {
        bind: function(v) {
          return function(f) {
            return function(x) {
              return Control_Bind.bind(dictBind)(v(x))(function(a) {
                var v1 = f(a);
                return v1(x);
              });
            };
          };
        },
        Apply0: function() {
          return applyStar(dictBind.Apply0());
        }
      };
    };
    var applicativeStar = function(dictApplicative) {
      return {
        pure: function(a) {
          return function(v) {
            return Control_Applicative.pure(dictApplicative)(a);
          };
        },
        Apply0: function() {
          return applyStar(dictApplicative.Apply0());
        }
      };
    };
    var monadStar = function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeStar(dictMonad.Applicative0());
        },
        Bind1: function() {
          return bindStar(dictMonad.Bind1());
        }
      };
    };
    var altStar = function(dictAlt) {
      return {
        alt: function(v) {
          return function(v1) {
            return function(a) {
              return Control_Alt.alt(dictAlt)(v(a))(v1(a));
            };
          };
        },
        Functor0: function() {
          return functorStar(dictAlt.Functor0());
        }
      };
    };
    var plusStar = function(dictPlus) {
      return {
        empty: function(v) {
          return Control_Plus.empty(dictPlus);
        },
        Alt0: function() {
          return altStar(dictPlus.Alt0());
        }
      };
    };
    var alternativeStar = function(dictAlternative) {
      return {
        Applicative0: function() {
          return applicativeStar(dictAlternative.Applicative0());
        },
        Plus1: function() {
          return plusStar(dictAlternative.Plus1());
        }
      };
    };
    var monadPlusStar = function(dictMonadPlus) {
      return {
        Monad0: function() {
          return monadStar(dictMonadPlus.Monad0());
        },
        Alternative1: function() {
          return alternativeStar(dictMonadPlus.Alternative1());
        }
      };
    };
    var monadZeroStar = function(dictMonadZero) {
      return {
        Monad0: function() {
          return monadStar(dictMonadZero.Monad0());
        },
        Alternative1: function() {
          return alternativeStar(dictMonadZero.Alternative1());
        },
        MonadZeroIsDeprecated2: function() {
          return void 0;
        }
      };
    };
    module2.exports = {
      Star,
      hoistStar,
      newtypeStar,
      semigroupoidStar,
      categoryStar,
      functorStar,
      invariantStar,
      applyStar,
      applicativeStar,
      bindStar,
      monadStar,
      altStar,
      plusStar,
      alternativeStar,
      monadZeroStar,
      monadPlusStar,
      distributiveStar,
      profunctorStar,
      strongStar,
      choiceStar,
      closedStar
    };
  }
});

// output/Control.Parallel.Class/index.js
var require_Control_Parallel = __commonJS({
  "output/Control.Parallel.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Cont_Trans = require_Control_Monad_Cont2();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Control_Monad_Maybe_Trans = require_Control_Monad_Maybe();
    var Control_Monad_Reader_Trans = require_Control_Monad_Reader2();
    var Control_Monad_Writer_Trans = require_Control_Monad_Writer2();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Functor_Compose = require_Data_Functor4();
    var Data_Functor_Costar = require_Data_Functor7();
    var Data_Maybe = require_Data15();
    var Data_Profunctor_Star = require_Data_Profunctor();
    var Data_Unit = require_Data3();
    var Effect_Class = require_Effect4();
    var Effect_Ref = require_Effect3();
    var ParCont = function(x) {
      return x;
    };
    var sequential = function(dict) {
      return dict.sequential;
    };
    var parallel = function(dict) {
      return dict.parallel;
    };
    var newtypeParCont = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monadParWriterT = function(dictMonoid) {
      return function(dictParallel) {
        return {
          parallel: Control_Monad_Writer_Trans.mapWriterT(parallel(dictParallel)),
          sequential: Control_Monad_Writer_Trans.mapWriterT(sequential(dictParallel)),
          Monad0: function() {
            return Control_Monad_Writer_Trans.monadWriterT(dictMonoid)(dictParallel.Monad0());
          },
          Applicative1: function() {
            return Control_Monad_Writer_Trans.applicativeWriterT(dictMonoid)(dictParallel.Applicative1());
          }
        };
      };
    };
    var monadParStar = function(dictParallel) {
      return {
        parallel: function(v) {
          return Data_Profunctor_Star.Star(function() {
            var $49 = parallel(dictParallel);
            return function($50) {
              return $49(v($50));
            };
          }());
        },
        sequential: function(v) {
          return Data_Profunctor_Star.Star(function() {
            var $51 = sequential(dictParallel);
            return function($52) {
              return $51(v($52));
            };
          }());
        },
        Monad0: function() {
          return Data_Profunctor_Star.monadStar(dictParallel.Monad0());
        },
        Applicative1: function() {
          return Data_Profunctor_Star.applicativeStar(dictParallel.Applicative1());
        }
      };
    };
    var monadParReaderT = function(dictParallel) {
      return {
        parallel: Control_Monad_Reader_Trans.mapReaderT(parallel(dictParallel)),
        sequential: Control_Monad_Reader_Trans.mapReaderT(sequential(dictParallel)),
        Monad0: function() {
          return Control_Monad_Reader_Trans.monadReaderT(dictParallel.Monad0());
        },
        Applicative1: function() {
          return Control_Monad_Reader_Trans.applicativeReaderT(dictParallel.Applicative1());
        }
      };
    };
    var monadParMaybeT = function(dictParallel) {
      return {
        parallel: function(v) {
          return parallel(dictParallel)(v);
        },
        sequential: function(v) {
          return sequential(dictParallel)(v);
        },
        Monad0: function() {
          return Control_Monad_Maybe_Trans.monadMaybeT(dictParallel.Monad0());
        },
        Applicative1: function() {
          return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Maybe.applicativeMaybe);
        }
      };
    };
    var monadParExceptT = function(dictParallel) {
      return {
        parallel: function(v) {
          return parallel(dictParallel)(v);
        },
        sequential: function(v) {
          return sequential(dictParallel)(v);
        },
        Monad0: function() {
          return Control_Monad_Except_Trans.monadExceptT(dictParallel.Monad0());
        },
        Applicative1: function() {
          return Data_Functor_Compose.applicativeCompose(dictParallel.Applicative1())(Data_Either.applicativeEither);
        }
      };
    };
    var monadParCostar = function(dictParallel) {
      return {
        parallel: function(v) {
          return Data_Functor_Costar.Costar(function() {
            var $53 = sequential(dictParallel);
            return function($54) {
              return v($53($54));
            };
          }());
        },
        sequential: function(v) {
          return Data_Functor_Costar.Costar(function() {
            var $55 = parallel(dictParallel);
            return function($56) {
              return v($55($56));
            };
          }());
        },
        Monad0: function() {
          return Data_Functor_Costar.monadCostar;
        },
        Applicative1: function() {
          return Data_Functor_Costar.applicativeCostar;
        }
      };
    };
    var monadParParCont = function(dictMonadEffect) {
      return {
        parallel: ParCont,
        sequential: function(v) {
          return v;
        },
        Monad0: function() {
          return Control_Monad_Cont_Trans.monadContT(dictMonadEffect.Monad0());
        },
        Applicative1: function() {
          return applicativeParCont(dictMonadEffect);
        }
      };
    };
    var functorParCont = function(dictMonadEffect) {
      return {
        map: function(f) {
          var $57 = parallel(monadParParCont(dictMonadEffect));
          var $58 = Data_Functor.map(Control_Monad_Cont_Trans.functorContT(dictMonadEffect.Monad0().Bind1().Apply0().Functor0()))(f);
          var $59 = sequential(monadParParCont(dictMonadEffect));
          return function($60) {
            return $57($58($59($60)));
          };
        }
      };
    };
    var applyParCont = function(dictMonadEffect) {
      return {
        apply: function(v) {
          return function(v1) {
            return ParCont(function(k) {
              return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function(ra) {
                return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Maybe.Nothing.value)))(function(rb) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Control_Monad_Cont_Trans.runContT(v)(function(a) {
                    return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(rb)))(function(mb) {
                      if (mb instanceof Data_Maybe.Nothing) {
                        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(a))(ra));
                      }
                      ;
                      if (mb instanceof Data_Maybe.Just) {
                        return k(a(mb.value0));
                      }
                      ;
                      throw new Error("Failed pattern match at Control.Parallel.Class (line 82, column 7 - line 84, column 26): " + [mb.constructor.name]);
                    });
                  }))(function() {
                    return Control_Monad_Cont_Trans.runContT(v1)(function(b) {
                      return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(ra)))(function(ma) {
                        if (ma instanceof Data_Maybe.Nothing) {
                          return Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(new Data_Maybe.Just(b))(rb));
                        }
                        ;
                        if (ma instanceof Data_Maybe.Just) {
                          return k(ma.value0(b));
                        }
                        ;
                        throw new Error("Failed pattern match at Control.Parallel.Class (line 88, column 7 - line 90, column 26): " + [ma.constructor.name]);
                      });
                    });
                  });
                });
              });
            });
          };
        },
        Functor0: function() {
          return functorParCont(dictMonadEffect);
        }
      };
    };
    var applicativeParCont = function(dictMonadEffect) {
      return {
        pure: function() {
          var $61 = parallel(monadParParCont(dictMonadEffect));
          var $62 = Control_Applicative.pure(Control_Monad_Cont_Trans.applicativeContT(dictMonadEffect.Monad0().Applicative0()));
          return function($63) {
            return $61($62($63));
          };
        }(),
        Apply0: function() {
          return applyParCont(dictMonadEffect);
        }
      };
    };
    var altParCont = function(dictMonadEffect) {
      return {
        alt: function(v) {
          return function(v1) {
            return ParCont(function(k) {
              return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](false)))(function(done) {
                return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Control_Monad_Cont_Trans.runContT(v)(function(a) {
                  return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function(b) {
                    if (b) {
                      return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
                    }
                    ;
                    return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function() {
                      return k(a);
                    });
                  });
                }))(function() {
                  return Control_Monad_Cont_Trans.runContT(v1)(function(a) {
                    return Control_Bind.bind(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.read(done)))(function(b) {
                      if (b) {
                        return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
                      }
                      ;
                      return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadEffect.Monad0().Bind1())(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref.write(true)(done)))(function() {
                        return k(a);
                      });
                    });
                  });
                });
              });
            });
          };
        },
        Functor0: function() {
          return functorParCont(dictMonadEffect);
        }
      };
    };
    var plusParCont = function(dictMonadEffect) {
      return {
        empty: ParCont(function(v) {
          return Control_Applicative.pure(dictMonadEffect.Monad0().Applicative0())(Data_Unit.unit);
        }),
        Alt0: function() {
          return altParCont(dictMonadEffect);
        }
      };
    };
    var alternativeParCont = function(dictMonadEffect) {
      return {
        Applicative0: function() {
          return applicativeParCont(dictMonadEffect);
        },
        Plus1: function() {
          return plusParCont(dictMonadEffect);
        }
      };
    };
    module2.exports = {
      parallel,
      sequential,
      ParCont,
      monadParExceptT,
      monadParReaderT,
      monadParWriterT,
      monadParMaybeT,
      monadParStar,
      monadParCostar,
      newtypeParCont,
      functorParCont,
      applyParCont,
      applicativeParCont,
      altParCont,
      plusParCont,
      alternativeParCont,
      monadParParCont
    };
  }
});

// output/Control.Parallel/index.js
var require_Control12 = __commonJS({
  "output/Control.Parallel/index.js"(exports2, module2) {
    "use strict";
    var Control_Apply = require_Control3();
    var Control_Category = require_Control2();
    var Control_Parallel_Class = require_Control_Parallel();
    var Data_Foldable = require_Data25();
    var Data_Traversable = require_Data29();
    var parTraverse_ = function(dictParallel) {
      return function(dictFoldable) {
        return function(f) {
          var $17 = Control_Parallel_Class.sequential(dictParallel);
          var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function() {
            var $20 = Control_Parallel_Class.parallel(dictParallel);
            return function($21) {
              return $20(f($21));
            };
          }());
          return function($19) {
            return $17($18($19));
          };
        };
      };
    };
    var parTraverse = function(dictParallel) {
      return function(dictTraversable) {
        return function(f) {
          var $22 = Control_Parallel_Class.sequential(dictParallel);
          var $23 = Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())(function() {
            var $25 = Control_Parallel_Class.parallel(dictParallel);
            return function($26) {
              return $25(f($26));
            };
          }());
          return function($24) {
            return $22($23($24));
          };
        };
      };
    };
    var parSequence_ = function(dictParallel) {
      return function(dictFoldable) {
        return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var parSequence = function(dictParallel) {
      return function(dictTraversable) {
        return parTraverse(dictParallel)(dictTraversable)(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var parOneOfMap = function(dictParallel) {
      return function(dictAlternative) {
        return function(dictFoldable) {
          return function(dictFunctor) {
            return function(f) {
              var $27 = Control_Parallel_Class.sequential(dictParallel);
              var $28 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(function() {
                var $30 = Control_Parallel_Class.parallel(dictParallel);
                return function($31) {
                  return $30(f($31));
                };
              }());
              return function($29) {
                return $27($28($29));
              };
            };
          };
        };
      };
    };
    var parOneOf = function(dictParallel) {
      return function(dictAlternative) {
        return function(dictFoldable) {
          return function(dictFunctor) {
            var $32 = Control_Parallel_Class.sequential(dictParallel);
            var $33 = Data_Foldable.oneOfMap(dictFoldable)(dictAlternative.Plus1())(Control_Parallel_Class.parallel(dictParallel));
            return function($34) {
              return $32($33($34));
            };
          };
        };
      };
    };
    var parApply = function(dictParallel) {
      return function(mf) {
        return function(ma) {
          return Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply(dictParallel.Applicative1().Apply0())(Control_Parallel_Class.parallel(dictParallel)(mf))(Control_Parallel_Class.parallel(dictParallel)(ma)));
        };
      };
    };
    module2.exports = {
      parApply,
      parTraverse,
      parTraverse_,
      parSequence,
      parSequence_,
      parOneOf,
      parOneOfMap,
      ParCont: Control_Parallel_Class.ParCont,
      parallel: Control_Parallel_Class.parallel,
      sequential: Control_Parallel_Class.sequential
    };
  }
});

// output/Data.Time.Duration/index.js
var require_Data_Time = __commonJS({
  "output/Data.Time.Duration/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Eq = require_Data8();
    var Data_Newtype = require_Data23();
    var Data_Ord = require_Data12();
    var Data_Ring = require_Data11();
    var Data_Show = require_Data14();
    var Seconds = function(x) {
      return x;
    };
    var Minutes = function(x) {
      return x;
    };
    var Milliseconds = function(x) {
      return x;
    };
    var Hours = function(x) {
      return x;
    };
    var Days = function(x) {
      return x;
    };
    var toDuration = function(dict) {
      return dict.toDuration;
    };
    var showSeconds = {
      show: function(v) {
        return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
      }
    };
    var showMinutes = {
      show: function(v) {
        return "(Minutes " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
      }
    };
    var showMilliseconds = {
      show: function(v) {
        return "(Milliseconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
      }
    };
    var showHours = {
      show: function(v) {
        return "(Hours " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
      }
    };
    var showDays = {
      show: function(v) {
        return "(Days " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
      }
    };
    var semigroupSeconds = {
      append: function(v) {
        return function(v1) {
          return v + v1;
        };
      }
    };
    var semigroupMinutes = {
      append: function(v) {
        return function(v1) {
          return v + v1;
        };
      }
    };
    var semigroupMilliseconds = {
      append: function(v) {
        return function(v1) {
          return v + v1;
        };
      }
    };
    var semigroupHours = {
      append: function(v) {
        return function(v1) {
          return v + v1;
        };
      }
    };
    var semigroupDays = {
      append: function(v) {
        return function(v1) {
          return v + v1;
        };
      }
    };
    var ordSeconds = Data_Ord.ordNumber;
    var ordMinutes = Data_Ord.ordNumber;
    var ordMilliseconds = Data_Ord.ordNumber;
    var ordHours = Data_Ord.ordNumber;
    var ordDays = Data_Ord.ordNumber;
    var newtypeSeconds = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeMinutes = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeMilliseconds = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeHours = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeDays = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidSeconds = {
      mempty: 0,
      Semigroup0: function() {
        return semigroupSeconds;
      }
    };
    var monoidMinutes = {
      mempty: 0,
      Semigroup0: function() {
        return semigroupMinutes;
      }
    };
    var monoidMilliseconds = {
      mempty: 0,
      Semigroup0: function() {
        return semigroupMilliseconds;
      }
    };
    var monoidHours = {
      mempty: 0,
      Semigroup0: function() {
        return semigroupHours;
      }
    };
    var monoidDays = {
      mempty: 0,
      Semigroup0: function() {
        return semigroupDays;
      }
    };
    var fromDuration = function(dict) {
      return dict.fromDuration;
    };
    var negateDuration = function(dictDuration) {
      var $43 = toDuration(dictDuration);
      var $44 = Data_Newtype.over()()(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber));
      var $45 = fromDuration(dictDuration);
      return function($46) {
        return $43($44($45($46)));
      };
    };
    var eqSeconds = Data_Eq.eqNumber;
    var eqMinutes = Data_Eq.eqNumber;
    var eqMilliseconds = Data_Eq.eqNumber;
    var eqHours = Data_Eq.eqNumber;
    var eqDays = Data_Eq.eqNumber;
    var durationSeconds = {
      fromDuration: Data_Newtype.over()()(Seconds)(function(v) {
        return v * 1e3;
      }),
      toDuration: Data_Newtype.over()()(Milliseconds)(function(v) {
        return v / 1e3;
      })
    };
    var durationMinutes = {
      fromDuration: Data_Newtype.over()()(Minutes)(function(v) {
        return v * 6e4;
      }),
      toDuration: Data_Newtype.over()()(Milliseconds)(function(v) {
        return v / 6e4;
      })
    };
    var durationMilliseconds = {
      fromDuration: Control_Category.identity(Control_Category.categoryFn),
      toDuration: Control_Category.identity(Control_Category.categoryFn)
    };
    var durationHours = {
      fromDuration: Data_Newtype.over()()(Hours)(function(v) {
        return v * 36e5;
      }),
      toDuration: Data_Newtype.over()()(Milliseconds)(function(v) {
        return v / 36e5;
      })
    };
    var durationDays = {
      fromDuration: Data_Newtype.over()()(Days)(function(v) {
        return v * 864e5;
      }),
      toDuration: Data_Newtype.over()()(Milliseconds)(function(v) {
        return v / 864e5;
      })
    };
    var convertDuration = function(dictDuration) {
      return function(dictDuration1) {
        var $47 = toDuration(dictDuration1);
        var $48 = fromDuration(dictDuration);
        return function($49) {
          return $47($48($49));
        };
      };
    };
    module2.exports = {
      fromDuration,
      toDuration,
      Milliseconds,
      Seconds,
      Minutes,
      Hours,
      Days,
      convertDuration,
      negateDuration,
      newtypeMilliseconds,
      eqMilliseconds,
      ordMilliseconds,
      semigroupMilliseconds,
      monoidMilliseconds,
      showMilliseconds,
      newtypeSeconds,
      eqSeconds,
      ordSeconds,
      semigroupSeconds,
      monoidSeconds,
      showSeconds,
      newtypeMinutes,
      eqMinutes,
      ordMinutes,
      semigroupMinutes,
      monoidMinutes,
      showMinutes,
      newtypeHours,
      eqHours,
      ordHours,
      semigroupHours,
      monoidHours,
      showHours,
      newtypeDays,
      eqDays,
      ordDays,
      semigroupDays,
      monoidDays,
      showDays,
      durationMilliseconds,
      durationSeconds,
      durationMinutes,
      durationHours,
      durationDays
    };
  }
});

// output/Effect.Unsafe/foreign.js
var require_foreign29 = __commonJS({
  "output/Effect.Unsafe/foreign.js"(exports2) {
    "use strict";
    exports2.unsafePerformEffect = function(f) {
      return f();
    };
  }
});

// output/Effect.Unsafe/index.js
var require_Effect5 = __commonJS({
  "output/Effect.Unsafe/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign29();
    module2.exports = {
      unsafePerformEffect: $foreign.unsafePerformEffect
    };
  }
});

// output/Partial.Unsafe/foreign.js
var require_foreign30 = __commonJS({
  "output/Partial.Unsafe/foreign.js"(exports2) {
    "use strict";
    exports2._unsafePartial = function(f) {
      return f();
    };
  }
});

// output/Partial/foreign.js
var require_foreign31 = __commonJS({
  "output/Partial/foreign.js"(exports2) {
    "use strict";
    exports2._crashWith = function(msg) {
      throw new Error(msg);
    };
  }
});

// output/Partial/index.js
var require_Partial = __commonJS({
  "output/Partial/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign31();
    var crashWith = function(dictPartial) {
      return $foreign["_crashWith"];
    };
    var crash = function(dictPartial) {
      return crashWith()("Partial.crash: partial function");
    };
    module2.exports = {
      crash,
      crashWith
    };
  }
});

// output/Partial.Unsafe/index.js
var require_Partial2 = __commonJS({
  "output/Partial.Unsafe/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign30();
    var Partial = require_Partial();
    var unsafePartial = $foreign["_unsafePartial"];
    var unsafeCrashWith = function(msg) {
      return unsafePartial(function(dictPartial) {
        return Partial.crashWith()(msg);
      });
    };
    module2.exports = {
      unsafePartial,
      unsafeCrashWith
    };
  }
});

// output/Effect.Aff/index.js
var require_Effect6 = __commonJS({
  "output/Effect.Aff/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign28();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Monad = require_Control7();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Control_Parallel = require_Control12();
    var Control_Parallel_Class = require_Control_Parallel();
    var Control_Plus = require_Control9();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Time_Duration = require_Data_Time();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Class = require_Effect4();
    var Effect_Exception = require_Effect2();
    var Effect_Unsafe = require_Effect5();
    var Partial_Unsafe = require_Partial2();
    var Unsafe_Coerce = require_Unsafe();
    var Canceler = function(x) {
      return x;
    };
    var suspendAff = $foreign["_fork"](false);
    var newtypeCanceler = {
      Coercible0: function() {
        return void 0;
      }
    };
    var functorParAff = {
      map: $foreign["_parAffMap"]
    };
    var functorAff = {
      map: $foreign["_map"]
    };
    var forkAff = $foreign["_fork"](true);
    var ffiUtil = function() {
      var unsafeFromRight = function(v) {
        if (v instanceof Data_Either.Right) {
          return v.value0;
        }
        ;
        if (v instanceof Data_Either.Left) {
          return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
        }
        ;
        throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [v.constructor.name]);
      };
      var unsafeFromLeft = function(v) {
        if (v instanceof Data_Either.Left) {
          return v.value0;
        }
        ;
        if (v instanceof Data_Either.Right) {
          return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
        }
        ;
        throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [v.constructor.name]);
      };
      var isLeft = function(v) {
        if (v instanceof Data_Either.Left) {
          return true;
        }
        ;
        if (v instanceof Data_Either.Right) {
          return false;
        }
        ;
        throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [v.constructor.name]);
      };
      return {
        isLeft,
        fromLeft: unsafeFromLeft,
        fromRight: unsafeFromRight,
        left: Data_Either.Left.create,
        right: Data_Either.Right.create
      };
    }();
    var makeFiber = function(aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
    };
    var launchAff = function(aff) {
      return function __do() {
        var fiber = makeFiber(aff)();
        fiber.run();
        return fiber;
      };
    };
    var launchAff_ = function() {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function($41) {
        return $40(launchAff($41));
      };
    }();
    var launchSuspendedAff = makeFiber;
    var delay = function(v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
    };
    var bracket = function(acquire) {
      return function(completed) {
        return $foreign.generalBracket(acquire)({
          killed: Data_Function["const"](completed),
          failed: Data_Function["const"](completed),
          completed: Data_Function["const"](completed)
        });
      };
    };
    var applyParAff = {
      apply: $foreign["_parAffApply"],
      Functor0: function() {
        return functorParAff;
      }
    };
    var semigroupParAff = function(dictSemigroup) {
      return {
        append: Control_Apply.lift2(applyParAff)(Data_Semigroup.append(dictSemigroup))
      };
    };
    var monadAff = {
      Applicative0: function() {
        return applicativeAff;
      },
      Bind1: function() {
        return bindAff;
      }
    };
    var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function() {
        return applyAff;
      }
    };
    var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function() {
        return functorAff;
      }
    };
    var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function() {
        return applyAff;
      }
    };
    var cancelWith = function(aff) {
      return function(v) {
        return $foreign.generalBracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))({
          killed: function(e) {
            return function(v1) {
              return v(e);
            };
          },
          failed: Data_Function["const"](Control_Applicative.pure(applicativeAff)),
          completed: Data_Function["const"](Control_Applicative.pure(applicativeAff))
        })(Data_Function["const"](aff));
      };
    };
    var $$finally = function(fin) {
      return function(a) {
        return bracket(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(Data_Function["const"](fin))(Data_Function["const"](a));
      };
    };
    var invincible = function(a) {
      return bracket(a)(Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit)))(Control_Applicative.pure(applicativeAff));
    };
    var lazyAff = {
      defer: function(f) {
        return Control_Bind.bind(bindAff)(Control_Applicative.pure(applicativeAff)(Data_Unit.unit))(f);
      }
    };
    var semigroupAff = function(dictSemigroup) {
      return {
        append: Control_Apply.lift2(applyAff)(Data_Semigroup.append(dictSemigroup))
      };
    };
    var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function() {
        return monadAff;
      }
    };
    var effectCanceler = function() {
      var $42 = Effect_Class.liftEffect(monadEffectAff);
      return function($43) {
        return Canceler(Data_Function["const"]($42($43)));
      };
    }();
    var joinFiber = function(v) {
      return $foreign.makeAff(function(k) {
        return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
    };
    var functorFiber = {
      map: function(f) {
        return function(t) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Data_Functor.map(functorAff)(f)(joinFiber(t))));
        };
      }
    };
    var applyFiber = {
      apply: function(t1) {
        return function(t2) {
          return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Apply.apply(applyAff)(joinFiber(t1))(joinFiber(t2))));
        };
      },
      Functor0: function() {
        return functorFiber;
      }
    };
    var applicativeFiber = {
      pure: function(a) {
        return Effect_Unsafe.unsafePerformEffect(makeFiber(Control_Applicative.pure(applicativeAff)(a)));
      },
      Apply0: function() {
        return applyFiber;
      }
    };
    var killFiber = function(e) {
      return function(v) {
        return Control_Bind.bind(bindAff)(Effect_Class.liftEffect(monadEffectAff)(v.isSuspended))(function(v1) {
          if (v1) {
            return Effect_Class.liftEffect(monadEffectAff)(Data_Functor["void"](Effect.functorEffect)(v.kill(e, Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))));
          }
          ;
          return $foreign.makeAff(function(k) {
            return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.kill(e, k));
          });
        });
      };
    };
    var fiberCanceler = function() {
      var $44 = Data_Function.flip(killFiber);
      return function($45) {
        return Canceler($44($45));
      };
    }();
    var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function() {
        return monadAff;
      }
    };
    var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function() {
        return monadThrowAff;
      }
    };
    var attempt = Control_Monad_Error_Class["try"](monadErrorAff);
    var runAff = function(k) {
      return function(aff) {
        return launchAff(Control_Bind.bindFlipped(bindAff)(function() {
          var $46 = Effect_Class.liftEffect(monadEffectAff);
          return function($47) {
            return $46(k($47));
          };
        }())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
    };
    var runAff_ = function(k) {
      return function(aff) {
        return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
    };
    var runSuspendedAff = function(k) {
      return function(aff) {
        return launchSuspendedAff(Control_Bind.bindFlipped(bindAff)(function() {
          var $48 = Effect_Class.liftEffect(monadEffectAff);
          return function($49) {
            return $48(k($49));
          };
        }())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
    };
    var parallelAff = {
      parallel: Unsafe_Coerce.unsafeCoerce,
      sequential: $foreign["_sequential"],
      Monad0: function() {
        return monadAff;
      },
      Applicative1: function() {
        return applicativeParAff;
      }
    };
    var applicativeParAff = {
      pure: function() {
        var $50 = Control_Parallel_Class.parallel(parallelAff);
        var $51 = Control_Applicative.pure(applicativeAff);
        return function($52) {
          return $50($51($52));
        };
      }(),
      Apply0: function() {
        return applyParAff;
      }
    };
    var monoidParAff = function(dictMonoid) {
      return {
        mempty: Control_Applicative.pure(applicativeParAff)(Data_Monoid.mempty(dictMonoid)),
        Semigroup0: function() {
          return semigroupParAff(dictMonoid.Semigroup0());
        }
      };
    };
    var semigroupCanceler = {
      append: function(v) {
        return function(v1) {
          return function(err) {
            return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([v(err), v1(err)]);
          };
        };
      }
    };
    var supervise = function(aff) {
      var killError = Effect_Exception.error("[Aff] Child fiber outlived parent");
      var killAll = function(err) {
        return function(sup) {
          return $foreign.makeAff(function(k) {
            return $foreign["_killAll"](err, sup.supervisor, k(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Unit.unit)));
          });
        };
      };
      var acquire = function __do() {
        var sup = $foreign["_makeSupervisedFiber"](ffiUtil, aff)();
        sup.fiber.run();
        return sup;
      };
      return $foreign.generalBracket(Effect_Class.liftEffect(monadEffectAff)(acquire))({
        killed: function(err) {
          return function(sup) {
            return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([killFiber(err)(sup.fiber), killAll(err)(sup)]);
          };
        },
        failed: Data_Function["const"](killAll(killError)),
        completed: Data_Function["const"](killAll(killError))
      })(function($53) {
        return joinFiber(function(v) {
          return v.fiber;
        }($53));
      });
    };
    var monadRecAff = {
      tailRecM: function(k) {
        var go = function(a) {
          return Control_Bind.bind(bindAff)(k(a))(function(res) {
            if (res instanceof Control_Monad_Rec_Class.Done) {
              return Control_Applicative.pure(applicativeAff)(res.value0);
            }
            ;
            if (res instanceof Control_Monad_Rec_Class.Loop) {
              return go(res.value0);
            }
            ;
            throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 22): " + [res.constructor.name]);
          });
        };
        return go;
      },
      Monad0: function() {
        return monadAff;
      }
    };
    var monoidAff = function(dictMonoid) {
      return {
        mempty: Control_Applicative.pure(applicativeAff)(Data_Monoid.mempty(dictMonoid)),
        Semigroup0: function() {
          return semigroupAff(dictMonoid.Semigroup0());
        }
      };
    };
    var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
    var monoidCanceler = {
      mempty: nonCanceler,
      Semigroup0: function() {
        return semigroupCanceler;
      }
    };
    var never = $foreign.makeAff(function(v) {
      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(monoidCanceler));
    });
    var apathize = function() {
      var $54 = Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit));
      return function($55) {
        return $54(attempt($55));
      };
    }();
    var altParAff = {
      alt: $foreign["_parAffAlt"],
      Functor0: function() {
        return functorParAff;
      }
    };
    var altAff = {
      alt: function(a1) {
        return function(a2) {
          return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
        };
      },
      Functor0: function() {
        return functorAff;
      }
    };
    var plusAff = {
      empty: Control_Monad_Error_Class.throwError(monadThrowAff)(Effect_Exception.error("Always fails")),
      Alt0: function() {
        return altAff;
      }
    };
    var plusParAff = {
      empty: Control_Parallel_Class.parallel(parallelAff)(Control_Plus.empty(plusAff)),
      Alt0: function() {
        return altParAff;
      }
    };
    var alternativeParAff = {
      Applicative0: function() {
        return applicativeParAff;
      },
      Plus1: function() {
        return plusParAff;
      }
    };
    module2.exports = {
      Canceler,
      launchAff,
      launchAff_,
      launchSuspendedAff,
      runAff,
      runAff_,
      runSuspendedAff,
      forkAff,
      suspendAff,
      supervise,
      attempt,
      apathize,
      delay,
      never,
      "finally": $$finally,
      invincible,
      killFiber,
      joinFiber,
      cancelWith,
      bracket,
      nonCanceler,
      effectCanceler,
      fiberCanceler,
      functorAff,
      applyAff,
      applicativeAff,
      bindAff,
      monadAff,
      semigroupAff,
      monoidAff,
      altAff,
      plusAff,
      monadRecAff,
      monadThrowAff,
      monadErrorAff,
      monadEffectAff,
      lazyAff,
      functorParAff,
      applyParAff,
      applicativeParAff,
      semigroupParAff,
      monoidParAff,
      altParAff,
      plusParAff,
      alternativeParAff,
      parallelAff,
      functorFiber,
      applyFiber,
      applicativeFiber,
      newtypeCanceler,
      semigroupCanceler,
      monoidCanceler,
      makeAff: $foreign.makeAff,
      generalBracket: $foreign.generalBracket,
      catchError: Control_Monad_Error_Class.catchError,
      throwError: Control_Monad_Error_Class.throwError,
      "try": Control_Monad_Error_Class["try"],
      parallel: Control_Parallel_Class.parallel,
      sequential: Control_Parallel_Class.sequential,
      Milliseconds: Data_Time_Duration.Milliseconds,
      error: Effect_Exception.error,
      message: Effect_Exception.message
    };
  }
});

// output/Foreign/foreign.js
var require_foreign32 = __commonJS({
  "output/Foreign/foreign.js"(exports2) {
    "use strict";
    exports2.typeOf = function(value) {
      return typeof value;
    };
    exports2.tagOf = function(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
    };
    exports2.isNull = function(value) {
      return value === null;
    };
    exports2.isUndefined = function(value) {
      return value === void 0;
    };
    exports2.isArray = Array.isArray || function(value) {
      return Object.prototype.toString.call(value) === "[object Array]";
    };
  }
});

// output/Data.Int/foreign.js
var require_foreign33 = __commonJS({
  "output/Data.Int/foreign.js"(exports2) {
    "use strict";
    exports2.fromNumberImpl = function(just) {
      return function(nothing) {
        return function(n) {
          return (n | 0) === n ? just(n) : nothing;
        };
      };
    };
    exports2.toNumber = function(n) {
      return n;
    };
    exports2.fromStringAsImpl = function(just) {
      return function(nothing) {
        return function(radix) {
          var digits;
          if (radix < 11) {
            digits = "[0-" + (radix - 1).toString() + "]";
          } else if (radix === 11) {
            digits = "[0-9a]";
          } else {
            digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
          }
          var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
          return function(s) {
            if (pattern.test(s)) {
              var i = parseInt(s, radix);
              return (i | 0) === i ? just(i) : nothing;
            } else {
              return nothing;
            }
          };
        };
      };
    };
    exports2.toStringAs = function(radix) {
      return function(i) {
        return i.toString(radix);
      };
    };
    exports2.quot = function(x) {
      return function(y) {
        return x / y | 0;
      };
    };
    exports2.rem = function(x) {
      return function(y) {
        return x % y;
      };
    };
    exports2.pow = function(x) {
      return function(y) {
        return Math.pow(x, y) | 0;
      };
    };
  }
});

// output/Data.Number/foreign.js
var require_foreign34 = __commonJS({
  "output/Data.Number/foreign.js"(exports2) {
    "use strict";
    exports2.nan = NaN;
    exports2.isNaN = isNaN;
    exports2.infinity = Infinity;
    exports2.isFinite = isFinite;
    exports2.fromStringImpl = function(str, isFinite2, just, nothing) {
      var num = parseFloat(str);
      if (isFinite2(num)) {
        return just(num);
      } else {
        return nothing;
      }
    };
  }
});

// output/Data.Number/index.js
var require_Data36 = __commonJS({
  "output/Data.Number/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign34();
    var Data_Maybe = require_Data15();
    var fromString = function(str) {
      return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
    module2.exports = {
      fromString,
      nan: $foreign.nan,
      "isNaN": $foreign["isNaN"],
      infinity: $foreign.infinity,
      "isFinite": $foreign["isFinite"]
    };
  }
});

// output/Math/foreign.js
var require_foreign35 = __commonJS({
  "output/Math/foreign.js"(exports2) {
    "use strict";
    exports2.abs = Math.abs;
    exports2.acos = Math.acos;
    exports2.asin = Math.asin;
    exports2.atan = Math.atan;
    exports2.atan2 = function(y) {
      return function(x) {
        return Math.atan2(y, x);
      };
    };
    exports2.ceil = Math.ceil;
    exports2.cos = Math.cos;
    exports2.exp = Math.exp;
    exports2.floor = Math.floor;
    function nativeImul(a) {
      return function(b) {
        return Math.imul(a, b);
      };
    }
    function emulatedImul(a) {
      return function(b) {
        var ah = a >>> 16 & 65535;
        var al = a & 65535;
        var bh = b >>> 16 & 65535;
        var bl = b & 65535;
        return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
      };
    }
    exports2.imul = Math.imul ? nativeImul : emulatedImul;
    exports2.trunc = Math.trunc || function(n) {
      return n < 0 ? Math.ceil(n) : Math.floor(n);
    };
    exports2.log = Math.log;
    exports2.max = function(n1) {
      return function(n2) {
        return Math.max(n1, n2);
      };
    };
    exports2.min = function(n1) {
      return function(n2) {
        return Math.min(n1, n2);
      };
    };
    exports2.pow = function(n) {
      return function(p) {
        return Math.pow(n, p);
      };
    };
    exports2.remainder = function(n) {
      return function(m) {
        return n % m;
      };
    };
    exports2.round = Math.round;
    exports2.sin = Math.sin;
    exports2.sqrt = Math.sqrt;
    exports2.tan = Math.tan;
    exports2.e = Math.E;
    exports2.ln2 = Math.LN2;
    exports2.ln10 = Math.LN10;
    exports2.log2e = Math.LOG2E;
    exports2.log10e = Math.LOG10E;
    exports2.pi = Math.PI;
    exports2.tau = 2 * Math.PI;
    exports2.sqrt1_2 = Math.SQRT1_2;
    exports2.sqrt2 = Math.SQRT2;
  }
});

// output/Math/index.js
var require_Math = __commonJS({
  "output/Math/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign35();
    module2.exports = {
      abs: $foreign.abs,
      acos: $foreign.acos,
      asin: $foreign.asin,
      atan: $foreign.atan,
      atan2: $foreign.atan2,
      ceil: $foreign.ceil,
      cos: $foreign.cos,
      exp: $foreign.exp,
      floor: $foreign.floor,
      imul: $foreign.imul,
      log: $foreign.log,
      max: $foreign.max,
      min: $foreign.min,
      pow: $foreign.pow,
      round: $foreign.round,
      sin: $foreign.sin,
      sqrt: $foreign.sqrt,
      tan: $foreign.tan,
      trunc: $foreign.trunc,
      remainder: $foreign.remainder,
      e: $foreign.e,
      ln2: $foreign.ln2,
      ln10: $foreign.ln10,
      log2e: $foreign.log2e,
      log10e: $foreign.log10e,
      pi: $foreign.pi,
      tau: $foreign.tau,
      sqrt1_2: $foreign.sqrt1_2,
      sqrt2: $foreign.sqrt2
    };
  }
});

// output/Data.Int/index.js
var require_Data37 = __commonJS({
  "output/Data.Int/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign33();
    var Control_Category = require_Control2();
    var Data_Boolean = require_Data();
    var Data_Bounded = require_Data13();
    var Data_Eq = require_Data8();
    var Data_Maybe = require_Data15();
    var Data_Number = require_Data36();
    var Data_Ordering = require_Data9();
    var Data_Semiring = require_Data10();
    var $$Math = require_Math();
    var Even = function() {
      function Even2() {
      }
      ;
      Even2.value = new Even2();
      return Even2;
    }();
    var Odd = function() {
      function Odd2() {
      }
      ;
      Odd2.value = new Odd2();
      return Odd2;
    }();
    var showParity = {
      show: function(v) {
        if (v instanceof Even) {
          return "Even";
        }
        ;
        if (v instanceof Odd) {
          return "Odd";
        }
        ;
        throw new Error("Failed pattern match at Data.Int (line 111, column 1 - line 113, column 19): " + [v.constructor.name]);
      }
    };
    var radix = function(n) {
      if (n >= 2 && n <= 36) {
        return new Data_Maybe.Just(n);
      }
      ;
      if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Int (line 192, column 1 - line 192, column 28): " + [n.constructor.name]);
    };
    var odd = function(x) {
      return (x & 1) !== 0;
    };
    var octal = 8;
    var hexadecimal = 16;
    var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var fromString = fromStringAs(10);
    var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var unsafeClamp = function(x) {
      if (!Data_Number["isFinite"](x)) {
        return 0;
      }
      ;
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
        return Data_Bounded.top(Data_Bounded.boundedInt);
      }
      ;
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
        return Data_Bounded.bottom(Data_Bounded.boundedInt);
      }
      ;
      if (Data_Boolean.otherwise) {
        return Data_Maybe.fromMaybe(0)(fromNumber(x));
      }
      ;
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [x.constructor.name]);
    };
    var round = function($23) {
      return unsafeClamp($$Math.round($23));
    };
    var floor = function($24) {
      return unsafeClamp($$Math.floor($24));
    };
    var even = function(x) {
      return (x & 1) === 0;
    };
    var parity = function(n) {
      var $14 = even(n);
      if ($14) {
        return Even.value;
      }
      ;
      return Odd.value;
    };
    var eqParity = {
      eq: function(x) {
        return function(y) {
          if (x instanceof Even && y instanceof Even) {
            return true;
          }
          ;
          if (x instanceof Odd && y instanceof Odd) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var ordParity = {
      compare: function(x) {
        return function(y) {
          if (x instanceof Even && y instanceof Even) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Even) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Even) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Odd && y instanceof Odd) {
            return Data_Ordering.EQ.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Int (line 109, column 1 - line 109, column 40): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqParity;
      }
    };
    var semiringParity = {
      zero: Even.value,
      add: function(x) {
        return function(y) {
          var $19 = Data_Eq.eq(eqParity)(x)(y);
          if ($19) {
            return Even.value;
          }
          ;
          return Odd.value;
        };
      },
      one: Odd.value,
      mul: function(v) {
        return function(v1) {
          if (v instanceof Odd && v1 instanceof Odd) {
            return Odd.value;
          }
          ;
          return Even.value;
        };
      }
    };
    var ringParity = {
      sub: Data_Semiring.add(semiringParity),
      Semiring0: function() {
        return semiringParity;
      }
    };
    var divisionRingParity = {
      recip: Control_Category.identity(Control_Category.categoryFn),
      Ring0: function() {
        return ringParity;
      }
    };
    var decimal = 10;
    var commutativeRingParity = {
      Ring0: function() {
        return ringParity;
      }
    };
    var euclideanRingParity = {
      degree: function(v) {
        if (v instanceof Even) {
          return 0;
        }
        ;
        if (v instanceof Odd) {
          return 1;
        }
        ;
        throw new Error("Failed pattern match at Data.Int (line 131, column 1 - line 135, column 17): " + [v.constructor.name]);
      },
      div: function(x) {
        return function(v) {
          return x;
        };
      },
      mod: function(v) {
        return function(v1) {
          return Even.value;
        };
      },
      CommutativeRing0: function() {
        return commutativeRingParity;
      }
    };
    var ceil = function($25) {
      return unsafeClamp($$Math.ceil($25));
    };
    var boundedParity = {
      bottom: Even.value,
      top: Odd.value,
      Ord0: function() {
        return ordParity;
      }
    };
    var binary = 2;
    var base36 = 36;
    module2.exports = {
      fromNumber,
      ceil,
      floor,
      round,
      fromString,
      radix,
      binary,
      octal,
      decimal,
      hexadecimal,
      base36,
      fromStringAs,
      Even,
      Odd,
      parity,
      even,
      odd,
      eqParity,
      ordParity,
      showParity,
      boundedParity,
      semiringParity,
      ringParity,
      commutativeRingParity,
      euclideanRingParity,
      divisionRingParity,
      toNumber: $foreign.toNumber,
      toStringAs: $foreign.toStringAs,
      quot: $foreign.quot,
      rem: $foreign.rem,
      pow: $foreign.pow
    };
  }
});

// output/Data.List.Internal/index.js
var require_Data_List2 = __commonJS({
  "output/Data.List.Internal/index.js"(exports2, module2) {
    "use strict";
    var Data_List_Types = require_Data_List();
    var Data_Ordering = require_Data9();
    var Leaf = function() {
      function Leaf2() {
      }
      ;
      Leaf2.value = new Leaf2();
      return Leaf2;
    }();
    var Two = function() {
      function Two2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      Two2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new Two2(value0, value1, value2);
          };
        };
      };
      return Two2;
    }();
    var Three = function() {
      function Three2(value0, value1, value2, value3, value4) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
      }
      ;
      Three2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return function(value4) {
                return new Three2(value0, value1, value2, value3, value4);
              };
            };
          };
        };
      };
      return Three2;
    }();
    var TwoLeft = function() {
      function TwoLeft2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TwoLeft2.create = function(value0) {
        return function(value1) {
          return new TwoLeft2(value0, value1);
        };
      };
      return TwoLeft2;
    }();
    var TwoRight = function() {
      function TwoRight2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TwoRight2.create = function(value0) {
        return function(value1) {
          return new TwoRight2(value0, value1);
        };
      };
      return TwoRight2;
    }();
    var ThreeLeft = function() {
      function ThreeLeft2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      ThreeLeft2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new ThreeLeft2(value0, value1, value2, value3);
            };
          };
        };
      };
      return ThreeLeft2;
    }();
    var ThreeMiddle = function() {
      function ThreeMiddle2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      ThreeMiddle2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new ThreeMiddle2(value0, value1, value2, value3);
            };
          };
        };
      };
      return ThreeMiddle2;
    }();
    var ThreeRight = function() {
      function ThreeRight2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      ThreeRight2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new ThreeRight2(value0, value1, value2, value3);
            };
          };
        };
      };
      return ThreeRight2;
    }();
    var KickUp = function() {
      function KickUp2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      KickUp2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new KickUp2(value0, value1, value2);
          };
        };
      };
      return KickUp2;
    }();
    var fromZipper = function($copy_v) {
      return function($copy_tree) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, tree) {
          if (v instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return tree;
          }
          ;
          if (v instanceof Data_List_Types.Cons) {
            if (v.value0 instanceof TwoLeft) {
              $tco_var_v = v.value1;
              $copy_tree = new Two(tree, v.value0.value0, v.value0.value1);
              return;
            }
            ;
            if (v.value0 instanceof TwoRight) {
              $tco_var_v = v.value1;
              $copy_tree = new Two(v.value0.value0, v.value0.value1, tree);
              return;
            }
            ;
            if (v.value0 instanceof ThreeLeft) {
              $tco_var_v = v.value1;
              $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3);
              return;
            }
            ;
            if (v.value0 instanceof ThreeMiddle) {
              $tco_var_v = v.value1;
              $copy_tree = new Three(v.value0.value0, v.value0.value1, tree, v.value0.value2, v.value0.value3);
              return;
            }
            ;
            if (v.value0 instanceof ThreeRight) {
              $tco_var_v = v.value1;
              $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, tree);
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Internal (line 25, column 3 - line 30, column 76): " + [v.value0.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.List.Internal (line 22, column 1 - line 22, column 63): " + [v.constructor.name, tree.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_tree);
        }
        ;
        return $tco_result;
      };
    };
    var insertAndLookupBy = function(comp) {
      return function(k) {
        return function(orig) {
          var up = function($copy_v) {
            return function($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return new Two(v1.value0, v1.value1, v1.value2);
                }
                ;
                if (v instanceof Data_List_Types.Cons) {
                  if (v.value0 instanceof TwoLeft) {
                    $tco_done = true;
                    return fromZipper(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v.value0.value0, v.value0.value1));
                  }
                  ;
                  if (v.value0 instanceof TwoRight) {
                    $tco_done = true;
                    return fromZipper(v.value1)(new Three(v.value0.value0, v.value0.value1, v1.value0, v1.value1, v1.value2));
                  }
                  ;
                  if (v.value0 instanceof ThreeLeft) {
                    $tco_var_v = v.value1;
                    $copy_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2), v.value0.value0, new Two(v.value0.value1, v.value0.value2, v.value0.value3));
                    return;
                  }
                  ;
                  if (v.value0 instanceof ThreeMiddle) {
                    $tco_var_v = v.value1;
                    $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v1.value0), v1.value1, new Two(v1.value2, v.value0.value2, v.value0.value3));
                    return;
                  }
                  ;
                  if (v.value0 instanceof ThreeRight) {
                    $tco_var_v = v.value1;
                    $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2), v.value0.value3, new Two(v1.value0, v1.value1, v1.value2));
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Internal (line 58, column 5 - line 63, column 90): " + [v.value0.constructor.name, v1.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at Data.List.Internal (line 55, column 3 - line 55, column 50): " + [v.constructor.name, v1.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
          var down = function($copy_ctx) {
            return function($copy_v) {
              var $tco_var_ctx = $copy_ctx;
              var $tco_done1 = false;
              var $tco_result;
              function $tco_loop(ctx, v) {
                if (v instanceof Leaf) {
                  $tco_done1 = true;
                  return {
                    found: false,
                    result: up(ctx)(new KickUp(Leaf.value, k, Leaf.value))
                  };
                }
                ;
                if (v instanceof Two) {
                  var v1 = comp(k)(v.value1);
                  if (v1 instanceof Data_Ordering.EQ) {
                    $tco_done1 = true;
                    return {
                      found: true,
                      result: orig
                    };
                  }
                  ;
                  if (v1 instanceof Data_Ordering.LT) {
                    $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v.value1, v.value2), ctx);
                    $copy_v = v.value0;
                    return;
                  }
                  ;
                  $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v.value0, v.value1), ctx);
                  $copy_v = v.value2;
                  return;
                }
                ;
                if (v instanceof Three) {
                  var v1 = comp(k)(v.value1);
                  if (v1 instanceof Data_Ordering.EQ) {
                    $tco_done1 = true;
                    return {
                      found: true,
                      result: orig
                    };
                  }
                  ;
                  var v2 = comp(k)(v.value3);
                  if (v2 instanceof Data_Ordering.EQ) {
                    $tco_done1 = true;
                    return {
                      found: true,
                      result: orig
                    };
                  }
                  ;
                  if (v1 instanceof Data_Ordering.LT) {
                    $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v.value1, v.value2, v.value3, v.value4), ctx);
                    $copy_v = v.value0;
                    return;
                  }
                  ;
                  if (v1 instanceof Data_Ordering.GT && v2 instanceof Data_Ordering.LT) {
                    $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v.value0, v.value1, v.value3, v.value4), ctx);
                    $copy_v = v.value2;
                    return;
                  }
                  ;
                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3), ctx);
                  $copy_v = v.value4;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Internal (line 38, column 3 - line 38, column 81): " + [ctx.constructor.name, v.constructor.name]);
              }
              ;
              while (!$tco_done1) {
                $tco_result = $tco_loop($tco_var_ctx, $copy_v);
              }
              ;
              return $tco_result;
            };
          };
          return down(Data_List_Types.Nil.value)(orig);
        };
      };
    };
    var emptySet = Leaf.value;
    module2.exports = {
      emptySet,
      insertAndLookupBy
    };
  }
});

// output/Data.List/index.js
var require_Data38 = __commonJS({
  "output/Data.List/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Lazy = require_Control8();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Data_Bifunctor = require_Data24();
    var Data_Boolean = require_Data();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_FunctorWithIndex = require_Data27();
    var Data_HeytingAlgebra = require_Data21();
    var Data_List_Internal = require_Data_List2();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_NonEmpty = require_Data33();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Data_Unit = require_Data3();
    var Pattern = function(x) {
      return x;
    };
    var updateAt = function(v) {
      return function(v1) {
        return function(v2) {
          if (v === 0 && v2 instanceof Data_List_Types.Cons) {
            return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
          }
          ;
          if (v2 instanceof Data_List_Types.Cons) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
              return new Data_List_Types.Cons(v2.value0, v3);
            })(updateAt(v - 1 | 0)(v1)(v2.value1));
          }
          ;
          return Data_Maybe.Nothing.value;
        };
      };
    };
    var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function(v) {
      return function(v1) {
        return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
      };
    })(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
    var uncons = function(v) {
      if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
      }
      ;
      if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just({
          head: v.value0,
          tail: v.value1
        });
      }
      ;
      throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [v.constructor.name]);
    };
    var toUnfoldable = function(dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(rec) {
          return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
      });
    };
    var tail = function(v) {
      if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
      }
      ;
      if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value1);
      }
      ;
      throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [v.constructor.name]);
    };
    var stripPrefix = function(dictEq) {
      return function(v) {
        return function(s) {
          var go = function(prefix) {
            return function(input) {
              if (prefix instanceof Data_List_Types.Cons && (input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0))) {
                return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                  a: prefix.value1,
                  b: input.value1
                }));
              }
              ;
              if (prefix instanceof Data_List_Types.Nil) {
                return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
              }
              ;
              return Data_Maybe.Nothing.value;
            };
          };
          return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
      };
    };
    var span = function(v) {
      return function(v1) {
        if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
          var v2 = span(v)(v1.value1);
          return {
            init: new Data_List_Types.Cons(v1.value0, v2.init),
            rest: v2.rest
          };
        }
        ;
        return {
          init: Data_List_Types.Nil.value,
          rest: v1
        };
      };
    };
    var snoc = function(xs) {
      return function(x) {
        return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
      };
    };
    var singleton = function(a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
    };
    var sortBy = function(cmp) {
      var merge = function(v) {
        return function(v1) {
          if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
            if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
              return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
            }
            ;
            if (Data_Boolean.otherwise) {
              return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
            }
            ;
          }
          ;
          if (v instanceof Data_List_Types.Nil) {
            return v1;
          }
          ;
          if (v1 instanceof Data_List_Types.Nil) {
            return v;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 477, column 3 - line 477, column 38): " + [v.constructor.name, v1.constructor.name]);
        };
      };
      var mergePairs = function(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
          return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
        }
        ;
        return v;
      };
      var mergeAll = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return v.value0;
          }
          ;
          $copy_v = mergePairs(v);
          return;
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      var sequences = function(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
          if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
            return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
          }
          ;
          if (Data_Boolean.otherwise) {
            return ascending(v.value1.value0)(function(v1) {
              return new Data_List_Types.Cons(v.value0, v1);
            })(v.value1.value1);
          }
          ;
        }
        ;
        return singleton(v);
      };
      var descending = function($copy_a) {
        return function($copy_as) {
          return function($copy_v) {
            var $tco_var_a = $copy_a;
            var $tco_var_as = $copy_as;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(a, as, v) {
              if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                $tco_var_a = v.value0;
                $tco_var_as = new Data_List_Types.Cons(a, as);
                $copy_v = v.value1;
                return;
              }
              ;
              $tco_done1 = true;
              return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
      };
      var ascending = function($copy_a) {
        return function($copy_as) {
          return function($copy_v) {
            var $tco_var_a = $copy_a;
            var $tco_var_as = $copy_as;
            var $tco_done2 = false;
            var $tco_result;
            function $tco_loop(a, as, v) {
              if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                $tco_var_a = v.value0;
                $tco_var_as = function(ys) {
                  return as(new Data_List_Types.Cons(a, ys));
                };
                $copy_v = v.value1;
                return;
              }
              ;
              $tco_done2 = true;
              return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
            }
            ;
            while (!$tco_done2) {
              $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
      };
      return function($345) {
        return mergeAll(sequences($345));
      };
    };
    var sort = function(dictOrd) {
      return function(xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
    };
    var showPattern = function(dictShow) {
      return {
        show: function(v) {
          return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
        }
      };
    };
    var reverse = function() {
      var go = function($copy_acc) {
        return function($copy_v) {
          var $tco_var_acc = $copy_acc;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(acc, v) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return acc;
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
              $copy_v = v.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [acc.constructor.name, v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_acc, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go(Data_List_Types.Nil.value);
    }();
    var take = function() {
      var go = function($copy_acc) {
        return function($copy_v) {
          return function($copy_v1) {
            var $tco_var_acc = $copy_acc;
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v, v1) {
              if (v < 1) {
                $tco_done = true;
                return reverse(acc);
              }
              ;
              if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return reverse(acc);
              }
              ;
              if (v1 instanceof Data_List_Types.Cons) {
                $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                $tco_var_v = v - 1 | 0;
                $copy_v1 = v1.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 524, column 3 - line 524, column 35): " + [acc.constructor.name, v.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
      };
      return go(Data_List_Types.Nil.value);
    }();
    var takeWhile = function(p) {
      var go = function($copy_acc) {
        return function($copy_v) {
          var $tco_var_acc = $copy_acc;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(acc, v) {
            if (v instanceof Data_List_Types.Cons && p(v.value0)) {
              $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
              $copy_v = v.value1;
              return;
            }
            ;
            $tco_done = true;
            return reverse(acc);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_acc, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go(Data_List_Types.Nil.value);
    };
    var unsnoc = function(lst) {
      var go = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just({
                revInit: v1,
                last: v.value0
              });
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              $tco_var_v = v.value1;
              $copy_v1 = new Data_List_Types.Cons(v.value0, v1);
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 274, column 3 - line 274, column 21): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(h) {
        return {
          init: reverse(h.revInit),
          last: h.last
        };
      })(go(lst)(Data_List_Types.Nil.value));
    };
    var zipWith = function(f) {
      return function(xs) {
        return function(ys) {
          var go = function($copy_v) {
            return function($copy_v1) {
              return function($copy_acc) {
                var $tco_var_v = $copy_v;
                var $tco_var_v1 = $copy_v1;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1, acc) {
                  if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                  }
                  ;
                  if (v1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return acc;
                  }
                  ;
                  if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                    $tco_var_v = v.value1;
                    $tco_var_v1 = v1.value1;
                    $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List (line 795, column 3 - line 795, column 21): " + [v.constructor.name, v1.constructor.name, acc.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                }
                ;
                return $tco_result;
              };
            };
          };
          return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
        };
      };
    };
    var zip = zipWith(Data_Tuple.Tuple.create);
    var zipWithA = function(dictApplicative) {
      return function(f) {
        return function(xs) {
          return function(ys) {
            return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
          };
        };
      };
    };
    var range = function(start) {
      return function(end) {
        if (start === end) {
          return singleton(start);
        }
        ;
        if (Data_Boolean.otherwise) {
          var go = function($copy_s) {
            return function($copy_e) {
              return function($copy_step) {
                return function($copy_rest) {
                  var $tco_var_s = $copy_s;
                  var $tco_var_e = $copy_e;
                  var $tco_var_step = $copy_step;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(s, e, step, rest) {
                    if (s === e) {
                      $tco_done = true;
                      return new Data_List_Types.Cons(s, rest);
                    }
                    ;
                    if (Data_Boolean.otherwise) {
                      $tco_var_s = s + step | 0;
                      $tco_var_e = e;
                      $tco_var_step = step;
                      $copy_rest = new Data_List_Types.Cons(s, rest);
                      return;
                    }
                    ;
                    throw new Error("Failed pattern match at Data.List (line 152, column 3 - line 153, column 65): " + [s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name]);
                  }
                  ;
                  while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                  }
                  ;
                  return $tco_result;
                };
              };
            };
          };
          return go(end)(start)(function() {
            var $226 = start > end;
            if ($226) {
              return 1;
            }
            ;
            return -1 | 0;
          }())(Data_List_Types.Nil.value);
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 148, column 1 - line 148, column 32): " + [start.constructor.name, end.constructor.name]);
      };
    };
    var partition = function(p) {
      return function(xs) {
        var select = function(x) {
          return function(v) {
            var $229 = p(x);
            if ($229) {
              return {
                no: v.no,
                yes: new Data_List_Types.Cons(x, v.yes)
              };
            }
            ;
            return {
              no: new Data_List_Types.Cons(x, v.no),
              yes: v.yes
            };
          };
        };
        return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
          no: Data_List_Types.Nil.value,
          yes: Data_List_Types.Nil.value
        })(xs);
      };
    };
    var $$null = function(v) {
      if (v instanceof Data_List_Types.Nil) {
        return true;
      }
      ;
      return false;
    };
    var nubBy = function(p) {
      var go = function($copy_v) {
        return function($copy_acc) {
          return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, acc, v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return acc;
              }
              ;
              if (v1 instanceof Data_List_Types.Cons) {
                var v2 = Data_List_Internal.insertAndLookupBy(p)(v1.value0)(v);
                if (v2.found) {
                  $tco_var_v = v2.result;
                  $tco_var_acc = acc;
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                $tco_var_v = v2.result;
                $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                $copy_v1 = v1.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 689, column 5 - line 689, column 23): " + [v.constructor.name, acc.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $tco_var_acc, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
      };
      var $346 = go(Data_List_Internal.emptySet)(Data_List_Types.Nil.value);
      return function($347) {
        return reverse($346($347));
      };
    };
    var nub = function(dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
    };
    var newtypePattern = {
      Coercible0: function() {
        return void 0;
      }
    };
    var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
    var mapMaybe = function(f) {
      var go = function($copy_acc) {
        return function($copy_v) {
          var $tco_var_acc = $copy_acc;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(acc, v) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return reverse(acc);
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              var v1 = f(v.value0);
              if (v1 instanceof Data_Maybe.Nothing) {
                $tco_var_acc = acc;
                $copy_v = v.value1;
                return;
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                $copy_v = v.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 423, column 5 - line 425, column 32): " + [v1.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 421, column 3 - line 421, column 27): " + [acc.constructor.name, v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_acc, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go(Data_List_Types.Nil.value);
    };
    var manyRec = function(dictMonadRec) {
      return function(dictAlternative) {
        return function(p) {
          var go = function(acc) {
            return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(Control_Alt.alt(dictAlternative.Plus1().Alt0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function(aa) {
              return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function(v) {
                return new Data_List_Types.Cons(v, acc);
              })(function(v) {
                return reverse(acc);
              })(aa));
            });
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
        };
      };
    };
    var someRec = function(dictMonadRec) {
      return function(dictAlternative) {
        return function(v) {
          return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
        };
      };
    };
    var some = function(dictAlternative) {
      return function(dictLazy) {
        return function(v) {
          return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function(v1) {
            return many(dictAlternative)(dictLazy)(v);
          }));
        };
      };
    };
    var many = function(dictAlternative) {
      return function(dictLazy) {
        return function(v) {
          return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
        };
      };
    };
    var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function(acc) {
      return function(v) {
        return acc + 1 | 0;
      };
    })(0);
    var last = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0);
        }
        ;
        if (v instanceof Data_List_Types.Cons) {
          $copy_v = v.value1;
          return;
        }
        ;
        $tco_done = true;
        return Data_Maybe.Nothing.value;
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    var insertBy = function(v) {
      return function(x) {
        return function(v1) {
          if (v1 instanceof Data_List_Types.Nil) {
            return singleton(x);
          }
          ;
          if (v1 instanceof Data_List_Types.Cons) {
            var v2 = v(x)(v1.value0);
            if (v2 instanceof Data_Ordering.GT) {
              return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
            }
            ;
            return new Data_List_Types.Cons(x, v1);
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 220, column 1 - line 220, column 68): " + [v.constructor.name, x.constructor.name, v1.constructor.name]);
        };
      };
    };
    var insertAt = function(v) {
      return function(v1) {
        return function(v2) {
          if (v === 0) {
            return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
          }
          ;
          if (v2 instanceof Data_List_Types.Cons) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
              return new Data_List_Types.Cons(v2.value0, v3);
            })(insertAt(v - 1 | 0)(v1)(v2.value1));
          }
          ;
          return Data_Maybe.Nothing.value;
        };
      };
    };
    var insert = function(dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
    };
    var init = function(lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return v.init;
      })(unsnoc(lst));
    };
    var index = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
          }
          ;
          if (v instanceof Data_List_Types.Cons && v1 === 0) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value0);
          }
          ;
          if (v instanceof Data_List_Types.Cons) {
            $tco_var_v = v.value1;
            $copy_v1 = v1 - 1 | 0;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 285, column 1 - line 285, column 44): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    var head = function(v) {
      if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
      }
      ;
      if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(v.value0);
      }
      ;
      throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [v.constructor.name]);
    };
    var transpose = function(v) {
      if (v instanceof Data_List_Types.Nil) {
        return Data_List_Types.Nil.value;
      }
      ;
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
        return transpose(v.value1);
      }
      ;
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
        return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
      }
      ;
      throw new Error("Failed pattern match at Data.List (line 829, column 1 - line 829, column 54): " + [v.constructor.name]);
    };
    var groupBy = function(v) {
      return function(v1) {
        if (v1 instanceof Data_List_Types.Nil) {
          return Data_List_Types.Nil.value;
        }
        ;
        if (v1 instanceof Data_List_Types.Cons) {
          var v2 = span(v(v1.value0))(v1.value1);
          return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 624, column 1 - line 624, column 80): " + [v.constructor.name, v1.constructor.name]);
      };
    };
    var groupAllBy = function(dictOrd) {
      return function(p) {
        var $348 = groupBy(p);
        var $349 = sort(dictOrd);
        return function($350) {
          return $348($349($350));
        };
      };
    };
    var group = function(dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
    };
    var groupAll = function(dictOrd) {
      var $351 = group(dictOrd.Eq0());
      var $352 = sort(dictOrd);
      return function($353) {
        return $351($352($353));
      };
    };
    var group$prime = function(dictWarn) {
      return function(dictOrd) {
        return groupAll(dictOrd);
      };
    };
    var fromFoldable = function(dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
    };
    var foldM = function(dictMonad) {
      return function(v) {
        return function(b) {
          return function(v1) {
            if (v1 instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(dictMonad.Applicative0())(b);
            }
            ;
            if (v1 instanceof Data_List_Types.Cons) {
              return Control_Bind.bind(dictMonad.Bind1())(v(b)(v1.value0))(function(b$prime) {
                return foldM(dictMonad)(v)(b$prime)(v1.value1);
              });
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 840, column 1 - line 840, column 72): " + [v.constructor.name, b.constructor.name, v1.constructor.name]);
          };
        };
      };
    };
    var findIndex = function(fn) {
      var go = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v1 instanceof Data_List_Types.Cons) {
              if (fn(v1.value0)) {
                $tco_done = true;
                return new Data_Maybe.Just(v);
              }
              ;
              if (Data_Boolean.otherwise) {
                $tco_var_v = v + 1 | 0;
                $copy_v1 = v1.value1;
                return;
              }
              ;
            }
            ;
            if (v1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 305, column 3 - line 305, column 35): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return go(0);
    };
    var findLastIndex = function(fn) {
      return function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
          return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
      };
    };
    var filterM = function(dictMonad) {
      return function(v) {
        return function(v1) {
          if (v1 instanceof Data_List_Types.Nil) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
          }
          ;
          if (v1 instanceof Data_List_Types.Cons) {
            return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function(b) {
              return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function(xs$prime) {
                return Control_Applicative.pure(dictMonad.Applicative0())(function() {
                  if (b) {
                    return new Data_List_Types.Cons(v1.value0, xs$prime);
                  }
                  ;
                  return xs$prime;
                }());
              });
            });
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 407, column 1 - line 407, column 75): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    };
    var filter = function(p) {
      var go = function($copy_acc) {
        return function($copy_v) {
          var $tco_var_acc = $copy_acc;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(acc, v) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return reverse(acc);
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              if (p(v.value0)) {
                $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                $copy_v = v.value1;
                return;
              }
              ;
              if (Data_Boolean.otherwise) {
                $tco_var_acc = acc;
                $copy_v = v.value1;
                return;
              }
              ;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 394, column 3 - line 394, column 27): " + [acc.constructor.name, v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_acc, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go(Data_List_Types.Nil.value);
    };
    var intersectBy = function(v) {
      return function(v1) {
        return function(v2) {
          if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
          }
          ;
          if (v2 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
          }
          ;
          return filter(function(x) {
            return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
          })(v1);
        };
      };
    };
    var intersect = function(dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
    };
    var nubByEq = function(v) {
      return function(v1) {
        if (v1 instanceof Data_List_Types.Nil) {
          return Data_List_Types.Nil.value;
        }
        ;
        if (v1 instanceof Data_List_Types.Cons) {
          return new Data_List_Types.Cons(v1.value0, nubByEq(v)(filter(function(y) {
            return !v(v1.value0)(y);
          })(v1.value1)));
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 721, column 1 - line 721, column 61): " + [v.constructor.name, v1.constructor.name]);
      };
    };
    var nubEq = function(dictEq) {
      return nubByEq(Data_Eq.eq(dictEq));
    };
    var eqPattern = function(dictEq) {
      return {
        eq: function(x) {
          return function(y) {
            return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
          };
        }
      };
    };
    var ordPattern = function(dictOrd) {
      return {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
          };
        },
        Eq0: function() {
          return eqPattern(dictOrd.Eq0());
        }
      };
    };
    var elemLastIndex = function(dictEq) {
      return function(x) {
        return findLastIndex(function(v) {
          return Data_Eq.eq(dictEq)(v)(x);
        });
      };
    };
    var elemIndex = function(dictEq) {
      return function(x) {
        return findIndex(function(v) {
          return Data_Eq.eq(dictEq)(v)(x);
        });
      };
    };
    var dropWhile = function(p) {
      var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && p(v.value0)) {
            $copy_v = v.value1;
            return;
          }
          ;
          $tco_done = true;
          return v;
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return go;
    };
    var dropEnd = function(n) {
      return function(xs) {
        return take(length(xs) - n | 0)(xs);
      };
    };
    var drop = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v < 1) {
            $tco_done = true;
            return v1;
          }
          ;
          if (v1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return Data_List_Types.Nil.value;
          }
          ;
          if (v1 instanceof Data_List_Types.Cons) {
            $tco_var_v = v - 1 | 0;
            $copy_v1 = v1.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 547, column 1 - line 547, column 42): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    var slice = function(start) {
      return function(end) {
        return function(xs) {
          return take(end - start | 0)(drop(start)(xs));
        };
      };
    };
    var takeEnd = function(n) {
      return function(xs) {
        return drop(length(xs) - n | 0)(xs);
      };
    };
    var deleteBy = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
          }
          ;
          if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
            return v2.value1;
          }
          ;
          if (v2 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 748, column 1 - line 748, column 67): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    };
    var unionBy = function(eq) {
      return function(xs) {
        return function(ys) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
        };
      };
    };
    var union = function(dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
    };
    var deleteAt = function(v) {
      return function(v1) {
        if (v === 0 && v1 instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v1.value1);
        }
        ;
        if (v1 instanceof Data_List_Types.Cons) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function(v2) {
            return new Data_List_Types.Cons(v1.value0, v2);
          })(deleteAt(v - 1 | 0)(v1.value1));
        }
        ;
        return Data_Maybe.Nothing.value;
      };
    };
    var $$delete = function(dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
    };
    var difference = function(dictEq) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
    };
    var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
    var concat = function(v) {
      return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
    };
    var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
    var alterAt = function(v) {
      return function(v1) {
        return function(v2) {
          if (v === 0 && v2 instanceof Data_List_Types.Cons) {
            return Data_Maybe.Just.create(function() {
              var v3 = v1(v2.value0);
              if (v3 instanceof Data_Maybe.Nothing) {
                return v2.value1;
              }
              ;
              if (v3 instanceof Data_Maybe.Just) {
                return new Data_List_Types.Cons(v3.value0, v2.value1);
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 356, column 3 - line 358, column 23): " + [v3.constructor.name]);
            }());
          }
          ;
          if (v2 instanceof Data_List_Types.Cons) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
              return new Data_List_Types.Cons(v2.value0, v3);
            })(alterAt(v - 1 | 0)(v1)(v2.value1));
          }
          ;
          return Data_Maybe.Nothing.value;
        };
      };
    };
    var modifyAt = function(n) {
      return function(f) {
        return alterAt(n)(function($354) {
          return Data_Maybe.Just.create(f($354));
        });
      };
    };
    module2.exports = {
      toUnfoldable,
      fromFoldable,
      singleton,
      range,
      some,
      someRec,
      many,
      manyRec,
      "null": $$null,
      length,
      snoc,
      insert,
      insertBy,
      head,
      last,
      tail,
      init,
      uncons,
      unsnoc,
      index,
      elemIndex,
      elemLastIndex,
      findIndex,
      findLastIndex,
      insertAt,
      deleteAt,
      updateAt,
      modifyAt,
      alterAt,
      reverse,
      concat,
      concatMap,
      filter,
      filterM,
      mapMaybe,
      catMaybes,
      mapWithIndex,
      sort,
      sortBy,
      Pattern,
      stripPrefix,
      slice,
      take,
      takeEnd,
      takeWhile,
      drop,
      dropEnd,
      dropWhile,
      span,
      group,
      groupAll,
      "group'": group$prime,
      groupBy,
      groupAllBy,
      partition,
      nub,
      nubBy,
      nubEq,
      nubByEq,
      union,
      unionBy,
      "delete": $$delete,
      deleteBy,
      difference,
      intersect,
      intersectBy,
      zipWith,
      zipWithA,
      zip,
      unzip,
      transpose,
      foldM,
      eqPattern,
      ordPattern,
      newtypePattern,
      showPattern,
      all: Data_Foldable.all,
      any: Data_Foldable.any,
      elem: Data_Foldable.elem,
      find: Data_Foldable.find,
      findMap: Data_Foldable.findMap,
      fold: Data_Foldable.fold,
      foldMap: Data_Foldable.foldMap,
      foldl: Data_Foldable.foldl,
      foldr: Data_Foldable.foldr,
      intercalate: Data_Foldable.intercalate,
      notElem: Data_Foldable.notElem,
      Cons: Data_List_Types.Cons,
      Nil: Data_List_Types.Nil,
      scanl: Data_Traversable.scanl,
      scanr: Data_Traversable.scanr
    };
  }
});

// output/Data.List.NonEmpty/index.js
var require_Data_List3 = __commonJS({
  "output/Data.List.NonEmpty/index.js"(exports2, module2) {
    "use strict";
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Data_Boolean = require_Data();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_FunctorWithIndex = require_Data27();
    var Data_List = require_Data38();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_NonEmpty = require_Data33();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Semigroup_Foldable = require_Data_Semigroup();
    var Data_Semigroup_Traversable = require_Data_Semigroup2();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Partial_Unsafe = require_Partial2();
    var zipWith = function(f) {
      return function(v) {
        return function(v1) {
          return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), Data_List.zipWith(f)(v.value1)(v1.value1));
        };
      };
    };
    var zipWithA = function(dictApplicative) {
      return function(f) {
        return function(xs) {
          return function(ys) {
            return Data_Semigroup_Traversable.sequence1(Data_List_Types.traversable1NonEmptyList)(dictApplicative.Apply0())(zipWith(f)(xs)(ys));
          };
        };
      };
    };
    var zip = zipWith(Data_Tuple.Tuple.create);
    var wrappedOperation2 = function(name) {
      return function(f) {
        return function(v) {
          return function(v1) {
            var v2 = f(new Data_List_Types.Cons(v.value0, v.value1))(new Data_List_Types.Cons(v1.value0, v1.value1));
            if (v2 instanceof Data_List_Types.Cons) {
              return new Data_NonEmpty.NonEmpty(v2.value0, v2.value1);
            }
            ;
            if (v2 instanceof Data_List_Types.Nil) {
              return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
            }
            ;
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 110, column 3 - line 112, column 81): " + [v2.constructor.name]);
          };
        };
      };
    };
    var wrappedOperation = function(name) {
      return function(f) {
        return function(v) {
          var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
          if (v1 instanceof Data_List_Types.Cons) {
            return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
          }
          ;
          if (v1 instanceof Data_List_Types.Nil) {
            return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
          }
          ;
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 97, column 3 - line 99, column 81): " + [v1.constructor.name]);
        };
      };
    };
    var updateAt = function(i) {
      return function(a) {
        return function(v) {
          if (i === 0) {
            return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, v.value1));
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function($165) {
              return Data_List_Types.NonEmptyList(function(v1) {
                return new Data_NonEmpty.NonEmpty(v.value0, v1);
              }($165));
            })(Data_List.updateAt(i - 1 | 0)(a)(v.value1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 203, column 1 - line 203, column 75): " + [i.constructor.name, a.constructor.name, v.constructor.name]);
        };
      };
    };
    var unzip = function(ts) {
      return new Data_Tuple.Tuple(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst)(ts), Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.snd)(ts));
    };
    var unsnoc = function(v) {
      var v1 = Data_List.unsnoc(v.value1);
      if (v1 instanceof Data_Maybe.Nothing) {
        return {
          init: Data_List_Types.Nil.value,
          last: v.value0
        };
      }
      ;
      if (v1 instanceof Data_Maybe.Just) {
        return {
          init: new Data_List_Types.Cons(v.value0, v1.value0.init),
          last: v1.value0.last
        };
      }
      ;
      throw new Error("Failed pattern match at Data.List.NonEmpty (line 165, column 35 - line 167, column 50): " + [v1.constructor.name]);
    };
    var unionBy = function() {
      var $166 = wrappedOperation2("unionBy");
      return function($167) {
        return $166(Data_List.unionBy($167));
      };
    }();
    var union = function(dictEq) {
      return wrappedOperation2("union")(Data_List.union(dictEq));
    };
    var uncons = function(v) {
      return {
        head: v.value0,
        tail: v.value1
      };
    };
    var toList = function(v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
    };
    var toUnfoldable = function(dictUnfoldable) {
      var $168 = Data_Unfoldable.unfoldr(dictUnfoldable)(function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(rec) {
          return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(Data_List.uncons(xs));
      });
      return function($169) {
        return $168(toList($169));
      };
    };
    var tail = function(v) {
      return v.value1;
    };
    var sortBy = function() {
      var $170 = wrappedOperation("sortBy");
      return function($171) {
        return $170(Data_List.sortBy($171));
      };
    }();
    var sort = function(dictOrd) {
      return function(xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
    };
    var snoc = function(v) {
      return function(y) {
        return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
      };
    };
    var singleton = function() {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function($173) {
        return Data_List_Types.NonEmptyList($172($173));
      };
    }();
    var snoc$prime = function(v) {
      return function(y) {
        if (v instanceof Data_List_Types.Cons) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
        }
        ;
        if (v instanceof Data_List_Types.Nil) {
          return singleton(y);
        }
        ;
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 145, column 1 - line 145, column 51): " + [v.constructor.name, y.constructor.name]);
      };
    };
    var reverse = wrappedOperation("reverse")(Data_List.reverse);
    var nubEq = function(dictEq) {
      return wrappedOperation("nubEq")(Data_List.nubEq(dictEq));
    };
    var nubByEq = function() {
      var $174 = wrappedOperation("nubByEq");
      return function($175) {
        return $174(Data_List.nubByEq($175));
      };
    }();
    var nubBy = function() {
      var $176 = wrappedOperation("nubBy");
      return function($177) {
        return $176(Data_List.nubBy($177));
      };
    }();
    var nub = function(dictOrd) {
      return wrappedOperation("nub")(Data_List.nub(dictOrd));
    };
    var modifyAt = function(i) {
      return function(f) {
        return function(v) {
          if (i === 0) {
            return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(f(v.value0), v.value1));
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function($178) {
              return Data_List_Types.NonEmptyList(function(v1) {
                return new Data_NonEmpty.NonEmpty(v.value0, v1);
              }($178));
            })(Data_List.modifyAt(i - 1 | 0)(f)(v.value1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 208, column 1 - line 208, column 82): " + [i.constructor.name, f.constructor.name, v.constructor.name]);
        };
      };
    };
    var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexNonEmptyList);
    var lift = function(f) {
      return function(v) {
        return f(new Data_List_Types.Cons(v.value0, v.value1));
      };
    };
    var mapMaybe = function($179) {
      return lift(Data_List.mapMaybe($179));
    };
    var partition = function($180) {
      return lift(Data_List.partition($180));
    };
    var span = function($181) {
      return lift(Data_List.span($181));
    };
    var take = function($182) {
      return lift(Data_List.take($182));
    };
    var takeWhile = function($183) {
      return lift(Data_List.takeWhile($183));
    };
    var length = function(v) {
      return 1 + Data_List.length(v.value1) | 0;
    };
    var last = function(v) {
      return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
    };
    var intersectBy = function() {
      var $184 = wrappedOperation2("intersectBy");
      return function($185) {
        return $184(Data_List.intersectBy($185));
      };
    }();
    var intersect = function(dictEq) {
      return wrappedOperation2("intersect")(Data_List.intersect(dictEq));
    };
    var insertAt = function(i) {
      return function(a) {
        return function(v) {
          if (i === 0) {
            return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(v.value0, v.value1)));
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function($186) {
              return Data_List_Types.NonEmptyList(function(v1) {
                return new Data_NonEmpty.NonEmpty(v.value0, v1);
              }($186));
            })(Data_List.insertAt(i - 1 | 0)(a)(v.value1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 198, column 1 - line 198, column 75): " + [i.constructor.name, a.constructor.name, v.constructor.name]);
        };
      };
    };
    var init = function(v) {
      return Data_Maybe.maybe(Data_List_Types.Nil.value)(function(v1) {
        return new Data_List_Types.Cons(v.value0, v1);
      })(Data_List.init(v.value1));
    };
    var index = function(v) {
      return function(i) {
        if (i === 0) {
          return new Data_Maybe.Just(v.value0);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_List.index(v.value1)(i - 1 | 0);
        }
        ;
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 172, column 1 - line 172, column 52): " + [v.constructor.name, i.constructor.name]);
      };
    };
    var head = function(v) {
      return v.value0;
    };
    var groupBy = function() {
      var $187 = wrappedOperation("groupBy");
      return function($188) {
        return $187(Data_List.groupBy($188));
      };
    }();
    var groupAllBy = function(dictOrd) {
      var $189 = wrappedOperation("groupAllBy");
      var $190 = Data_List.groupAllBy(dictOrd);
      return function($191) {
        return $189($190($191));
      };
    };
    var groupAll = function(dictOrd) {
      return wrappedOperation("groupAll")(Data_List.groupAll(dictOrd));
    };
    var group$prime = function(dictWarn) {
      return function(dictOrd) {
        return groupAll(dictOrd);
      };
    };
    var group = function(dictEq) {
      return wrappedOperation("group")(Data_List.group(dictEq));
    };
    var fromList = function(v) {
      if (v instanceof Data_List_Types.Nil) {
        return Data_Maybe.Nothing.value;
      }
      ;
      if (v instanceof Data_List_Types.Cons) {
        return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
      }
      ;
      throw new Error("Failed pattern match at Data.List.NonEmpty (line 126, column 1 - line 126, column 57): " + [v.constructor.name]);
    };
    var fromFoldable = function(dictFoldable) {
      var $192 = Data_List.fromFoldable(dictFoldable);
      return function($193) {
        return fromList($192($193));
      };
    };
    var foldM = function(dictMonad) {
      return function(f) {
        return function(b) {
          return function(v) {
            return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0))(function(b$prime) {
              return Data_List.foldM(dictMonad)(f)(b$prime)(v.value1);
            });
          };
        };
      };
    };
    var findLastIndex = function(f) {
      return function(v) {
        var v1 = Data_List.findLastIndex(f)(v.value1);
        if (v1 instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(v1.value0 + 1 | 0);
        }
        ;
        if (v1 instanceof Data_Maybe.Nothing) {
          if (f(v.value0)) {
            return new Data_Maybe.Just(0);
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
          }
          ;
        }
        ;
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 192, column 3 - line 196, column 29): " + [v1.constructor.name]);
      };
    };
    var findIndex = function(f) {
      return function(v) {
        if (f(v.value0)) {
          return new Data_Maybe.Just(0);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function(v1) {
            return v1 + 1 | 0;
          })(Data_List.findIndex(f)(v.value1));
        }
        ;
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 185, column 1 - line 185, column 69): " + [f.constructor.name, v.constructor.name]);
      };
    };
    var filterM = function(dictMonad) {
      var $194 = Data_List.filterM(dictMonad);
      return function($195) {
        return lift($194($195));
      };
    };
    var filter = function($196) {
      return lift(Data_List.filter($196));
    };
    var elemLastIndex = function(dictEq) {
      return function(x) {
        return findLastIndex(function(v) {
          return Data_Eq.eq(dictEq)(v)(x);
        });
      };
    };
    var elemIndex = function(dictEq) {
      return function(x) {
        return findIndex(function(v) {
          return Data_Eq.eq(dictEq)(v)(x);
        });
      };
    };
    var dropWhile = function($197) {
      return lift(Data_List.dropWhile($197));
    };
    var drop = function($198) {
      return lift(Data_List.drop($198));
    };
    var cons$prime = function(x) {
      return function(xs) {
        return new Data_NonEmpty.NonEmpty(x, xs);
      };
    };
    var cons = function(y) {
      return function(v) {
        return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
    };
    var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));
    var concat = function(v) {
      return Control_Bind.bind(Data_List_Types.bindNonEmptyList)(v)(Control_Category.identity(Control_Category.categoryFn));
    };
    var catMaybes = lift(Data_List.catMaybes);
    var appendFoldable = function(dictFoldable) {
      return function(v) {
        return function(ys) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
        };
      };
    };
    module2.exports = {
      toUnfoldable,
      fromFoldable,
      fromList,
      toList,
      singleton,
      length,
      cons,
      "cons'": cons$prime,
      snoc,
      "snoc'": snoc$prime,
      head,
      last,
      tail,
      init,
      uncons,
      unsnoc,
      index,
      elemIndex,
      elemLastIndex,
      findIndex,
      findLastIndex,
      insertAt,
      updateAt,
      modifyAt,
      reverse,
      concat,
      concatMap,
      filter,
      filterM,
      mapMaybe,
      catMaybes,
      appendFoldable,
      mapWithIndex,
      sort,
      sortBy,
      take,
      takeWhile,
      drop,
      dropWhile,
      span,
      group,
      groupAll,
      "group'": group$prime,
      groupBy,
      groupAllBy,
      partition,
      nub,
      nubBy,
      nubEq,
      nubByEq,
      union,
      unionBy,
      intersect,
      intersectBy,
      zipWith,
      zipWithA,
      zip,
      unzip,
      foldM,
      all: Data_Foldable.all,
      any: Data_Foldable.any,
      elem: Data_Foldable.elem,
      find: Data_Foldable.find,
      findMap: Data_Foldable.findMap,
      fold: Data_Foldable.fold,
      foldMap: Data_Foldable.foldMap,
      foldl: Data_Foldable.foldl,
      foldr: Data_Foldable.foldr,
      intercalate: Data_Foldable.intercalate,
      notElem: Data_Foldable.notElem,
      NonEmptyList: Data_List_Types.NonEmptyList,
      fold1: Data_Semigroup_Foldable.fold1,
      foldMap1: Data_Semigroup_Foldable.foldMap1,
      for1_: Data_Semigroup_Foldable.for1_,
      sequence1_: Data_Semigroup_Foldable.sequence1_,
      traverse1_: Data_Semigroup_Foldable.traverse1_,
      sequence1: Data_Semigroup_Traversable.sequence1,
      traverse1: Data_Semigroup_Traversable.traverse1,
      traverse1Default: Data_Semigroup_Traversable.traverse1Default,
      scanl: Data_Traversable.scanl,
      scanr: Data_Traversable.scanr
    };
  }
});

// output/Data.String.CodeUnits/foreign.js
var require_foreign36 = __commonJS({
  "output/Data.String.CodeUnits/foreign.js"(exports2) {
    "use strict";
    exports2.fromCharArray = function(a) {
      return a.join("");
    };
    exports2.toCharArray = function(s) {
      return s.split("");
    };
    exports2.singleton = function(c) {
      return c;
    };
    exports2._charAt = function(just) {
      return function(nothing) {
        return function(i) {
          return function(s) {
            return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
          };
        };
      };
    };
    exports2._toChar = function(just) {
      return function(nothing) {
        return function(s) {
          return s.length === 1 ? just(s) : nothing;
        };
      };
    };
    exports2.length = function(s) {
      return s.length;
    };
    exports2.countPrefix = function(p) {
      return function(s) {
        var i = 0;
        while (i < s.length && p(s.charAt(i)))
          i++;
        return i;
      };
    };
    exports2._indexOf = function(just) {
      return function(nothing) {
        return function(x) {
          return function(s) {
            var i = s.indexOf(x);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
    exports2._indexOfStartingAt = function(just) {
      return function(nothing) {
        return function(x) {
          return function(startAt) {
            return function(s) {
              if (startAt < 0 || startAt > s.length)
                return nothing;
              var i = s.indexOf(x, startAt);
              return i === -1 ? nothing : just(i);
            };
          };
        };
      };
    };
    exports2._lastIndexOf = function(just) {
      return function(nothing) {
        return function(x) {
          return function(s) {
            var i = s.lastIndexOf(x);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
    exports2._lastIndexOfStartingAt = function(just) {
      return function(nothing) {
        return function(x) {
          return function(startAt) {
            return function(s) {
              var i = s.lastIndexOf(x, startAt);
              return i === -1 ? nothing : just(i);
            };
          };
        };
      };
    };
    exports2.take = function(n) {
      return function(s) {
        return s.substr(0, n);
      };
    };
    exports2.drop = function(n) {
      return function(s) {
        return s.substring(n);
      };
    };
    exports2._slice = function(b) {
      return function(e) {
        return function(s) {
          return s.slice(b, e);
        };
      };
    };
    exports2.splitAt = function(i) {
      return function(s) {
        return { before: s.substring(0, i), after: s.substring(i) };
      };
    };
  }
});

// output/Data.String.Unsafe/foreign.js
var require_foreign37 = __commonJS({
  "output/Data.String.Unsafe/foreign.js"(exports2) {
    "use strict";
    exports2.charAt = function(i) {
      return function(s) {
        if (i >= 0 && i < s.length)
          return s.charAt(i);
        throw new Error("Data.String.Unsafe.charAt: Invalid index.");
      };
    };
    exports2.char = function(s) {
      if (s.length === 1)
        return s.charAt(0);
      throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
    };
  }
});

// output/Data.String.Unsafe/index.js
var require_Data_String = __commonJS({
  "output/Data.String.Unsafe/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign37();
    module2.exports = {
      "char": $foreign["char"],
      charAt: $foreign.charAt
    };
  }
});

// output/Data.String.CodeUnits/index.js
var require_Data_String2 = __commonJS({
  "output/Data.String.CodeUnits/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign36();
    var Data_Boolean = require_Data();
    var Data_Maybe = require_Data15();
    var Data_String_Unsafe = require_Data_String();
    var uncons = function(v) {
      if (v === "") {
        return Data_Maybe.Nothing.value;
      }
      ;
      return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(v),
        tail: $foreign.drop(1)(v)
      });
    };
    var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var takeWhile = function(p) {
      return function(s) {
        return $foreign.take($foreign.countPrefix(p)(s))(s);
      };
    };
    var takeRight = function(i) {
      return function(s) {
        return $foreign.drop($foreign.length(s) - i | 0)(s);
      };
    };
    var stripSuffix = function(v) {
      return function(str) {
        var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
        var $9 = v1.after === v;
        if ($9) {
          return new Data_Maybe.Just(v1.before);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
    };
    var stripPrefix = function(v) {
      return function(str) {
        var v1 = $foreign.splitAt($foreign.length(v))(str);
        var $15 = v1.before === v;
        if ($15) {
          return new Data_Maybe.Just(v1.after);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
    };
    var slice = function(b) {
      return function(e) {
        return function(s) {
          var l = $foreign.length(s);
          var norm = function(x) {
            if (x < 0) {
              return l + x | 0;
            }
            ;
            if (Data_Boolean.otherwise) {
              return x;
            }
            ;
            throw new Error("Failed pattern match at Data.String.CodeUnits (line 319, column 5 - line 320, column 27): " + [x.constructor.name]);
          };
          var e$prime = norm(e);
          var b$prime = norm(b);
          var $19 = b$prime < 0 || (b$prime >= l || (e$prime < 0 || (e$prime > l || b$prime > e$prime)));
          if ($19) {
            return Data_Maybe.Nothing.value;
          }
          ;
          return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
        };
      };
    };
    var lastIndexOf$prime = $foreign["_lastIndexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var dropWhile = function(p) {
      return function(s) {
        return $foreign.drop($foreign.countPrefix(p)(s))(s);
      };
    };
    var dropRight = function(i) {
      return function(s) {
        return $foreign.take($foreign.length(s) - i | 0)(s);
      };
    };
    var contains = function(pat) {
      var $20 = indexOf(pat);
      return function($21) {
        return Data_Maybe.isJust($20($21));
      };
    };
    var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    module2.exports = {
      stripPrefix,
      stripSuffix,
      contains,
      charAt,
      toChar,
      uncons,
      indexOf,
      "indexOf'": indexOf$prime,
      lastIndexOf,
      "lastIndexOf'": lastIndexOf$prime,
      takeRight,
      takeWhile,
      dropRight,
      dropWhile,
      slice,
      singleton: $foreign.singleton,
      fromCharArray: $foreign.fromCharArray,
      toCharArray: $foreign.toCharArray,
      length: $foreign.length,
      countPrefix: $foreign.countPrefix,
      take: $foreign.take,
      drop: $foreign.drop,
      splitAt: $foreign.splitAt
    };
  }
});

// output/Foreign/index.js
var require_Foreign = __commonJS({
  "output/Foreign/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign32();
    var Control_Applicative = require_Control4();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Boolean = require_Data();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_List_NonEmpty = require_Data_List3();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Data_String_CodeUnits = require_Data_String2();
    var Unsafe_Coerce = require_Unsafe();
    var ForeignError = function() {
      function ForeignError2(value0) {
        this.value0 = value0;
      }
      ;
      ForeignError2.create = function(value0) {
        return new ForeignError2(value0);
      };
      return ForeignError2;
    }();
    var TypeMismatch = function() {
      function TypeMismatch2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TypeMismatch2.create = function(value0) {
        return function(value1) {
          return new TypeMismatch2(value0, value1);
        };
      };
      return TypeMismatch2;
    }();
    var ErrorAtIndex = function() {
      function ErrorAtIndex2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ErrorAtIndex2.create = function(value0) {
        return function(value1) {
          return new ErrorAtIndex2(value0, value1);
        };
      };
      return ErrorAtIndex2;
    }();
    var ErrorAtProperty = function() {
      function ErrorAtProperty2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ErrorAtProperty2.create = function(value0) {
        return function(value1) {
          return new ErrorAtProperty2(value0, value1);
        };
      };
      return ErrorAtProperty2;
    }();
    var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
    var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
    var showForeignError = {
      show: function(v) {
        if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
        }
        ;
        if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
        }
        ;
        if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
        }
        ;
        if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 64, column 1 - line 68, column 89): " + [v.constructor.name]);
      }
    };
    var renderForeignError = function(v) {
      if (v instanceof ForeignError) {
        return v.value0;
      }
      ;
      if (v instanceof ErrorAtIndex) {
        return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      }
      ;
      if (v instanceof ErrorAtProperty) {
        return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      }
      ;
      if (v instanceof TypeMismatch) {
        return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      }
      ;
      throw new Error("Failed pattern match at Foreign (line 73, column 1 - line 73, column 45): " + [v.constructor.name]);
    };
    var readUndefined = function(dictMonad) {
      return function(value) {
        if ($foreign.isUndefined(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 161, column 1 - line 161, column 70): " + [value.constructor.name]);
      };
    };
    var readNullOrUndefined = function(dictMonad) {
      return function(value) {
        if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 166, column 1 - line 166, column 76): " + [value.constructor.name]);
      };
    };
    var readNull = function(dictMonad) {
      return function(value) {
        if ($foreign.isNull(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 156, column 1 - line 156, column 65): " + [value.constructor.name]);
      };
    };
    var fail = function(dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function($119) {
        return $118(Data_List_NonEmpty.singleton($119));
      };
    };
    var readArray = function(dictMonad) {
      return function(value) {
        if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
        }
        ;
        if (Data_Boolean.otherwise) {
          return fail(dictMonad)(new TypeMismatch("array", $foreign.tagOf(value)));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 151, column 1 - line 151, column 66): " + [value.constructor.name]);
      };
    };
    var unsafeReadTagged = function(dictMonad) {
      return function(tag) {
        return function(value) {
          if ($foreign.tagOf(value) === tag) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
          }
          ;
          if (Data_Boolean.otherwise) {
            return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
          }
          ;
          throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [tag.constructor.name, value.constructor.name]);
        };
      };
    };
    var readBoolean = function(dictMonad) {
      return unsafeReadTagged(dictMonad)("Boolean");
    };
    var readNumber = function(dictMonad) {
      return unsafeReadTagged(dictMonad)("Number");
    };
    var readInt = function(dictMonad) {
      return function(value) {
        var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
        var fromNumber = function() {
          var $120 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
          return function($121) {
            return $120(Data_Int.fromNumber($121));
          };
        }();
        return Control_Monad_Except_Trans.mapExceptT(Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Either.either(Data_Function["const"](error))(fromNumber)))(readNumber(dictMonad)(value));
      };
    };
    var readString = function(dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
    };
    var readChar = function(dictMonad) {
      return function(value) {
        var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
        var fromString = function() {
          var $122 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
          return function($123) {
            return $122(Data_String_CodeUnits.toChar($123));
          };
        }();
        return Control_Monad_Except_Trans.mapExceptT(Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Either.either(Data_Function["const"](error))(fromString)))(readString(dictMonad)(value));
      };
    };
    var eqForeignError = {
      eq: function(x) {
        return function(y) {
          if (x instanceof ForeignError && y instanceof ForeignError) {
            return x.value0 === y.value0;
          }
          ;
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            return x.value0 === y.value0 && x.value1 === y.value1;
          }
          ;
          if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
            return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
          }
          ;
          if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
            return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
          }
          ;
          return false;
        };
      }
    };
    var ordForeignError = {
      compare: function(x) {
        return function(y) {
          if (x instanceof ForeignError && y instanceof ForeignError) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          }
          ;
          if (x instanceof ForeignError) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof ForeignError) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
            }
            ;
            return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          }
          ;
          if (x instanceof TypeMismatch) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof TypeMismatch) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
            var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
            }
            ;
            return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
          }
          ;
          if (x instanceof ErrorAtIndex) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof ErrorAtIndex) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
            }
            ;
            return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
          }
          ;
          throw new Error("Failed pattern match at Foreign (line 62, column 1 - line 62, column 52): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqForeignError;
      }
    };
    module2.exports = {
      ForeignError,
      TypeMismatch,
      ErrorAtIndex,
      ErrorAtProperty,
      renderForeignError,
      unsafeToForeign,
      unsafeFromForeign,
      unsafeReadTagged,
      readString,
      readChar,
      readBoolean,
      readNumber,
      readInt,
      readArray,
      readNull,
      readUndefined,
      readNullOrUndefined,
      fail,
      eqForeignError,
      ordForeignError,
      showForeignError,
      typeOf: $foreign.typeOf,
      tagOf: $foreign.tagOf,
      isNull: $foreign.isNull,
      isUndefined: $foreign.isUndefined,
      isArray: $foreign.isArray
    };
  }
});

// output/Control.Promise/index.js
var require_Control13 = __commonJS({
  "output/Control.Promise/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign21();
    var Control_Alt = require_Control6();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad_Except = require_Control_Monad();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_List_Types = require_Data_List();
    var Data_Monoid = require_Data19();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Effect_Exception = require_Effect2();
    var Foreign = require_Foreign();
    var toAff$prime = function(customCoerce) {
      return function(p) {
        return Effect_Aff.makeAff(function(cb) {
          return Data_Functor.voidRight(Effect.functorEffect)(Data_Monoid.mempty(Effect_Aff.monoidCanceler))($foreign.thenImpl(p)(function($1) {
            return cb(Data_Either.Left.create(customCoerce($1)))();
          })(function($2) {
            return cb(Data_Either.Right.create($2))();
          }));
        });
      };
    };
    var fromAff = function(aff) {
      return $foreign.promise(function(succ) {
        return function(err) {
          return Effect_Aff.runAff_(Data_Either.either(err)(succ))(aff);
        };
      });
    };
    var coerce = function(fn) {
      return Data_Either.either(function(v) {
        return Effect_Exception.error("Promise failed, couldn't extract JS Error or String");
      })(Control_Category.identity(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Effect_Exception.error)(Foreign.readString(Data_Identity.monadIdentity)(fn)))));
    };
    var toAff = toAff$prime(coerce);
    var toAffE = function(f) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(toAff);
    };
    module2.exports = {
      fromAff,
      toAff,
      "toAff'": toAff$prime,
      toAffE
    };
  }
});

// output/Data.Array/foreign.js
var require_foreign38 = __commonJS({
  "output/Data.Array/foreign.js"(exports2) {
    "use strict";
    exports2.range = function(start) {
      return function(end) {
        var step = start > end ? -1 : 1;
        var result = new Array(step * (end - start) + 1);
        var i = start, n = 0;
        while (i !== end) {
          result[n++] = i;
          i += step;
        }
        result[n] = i;
        return result;
      };
    };
    var replicateFill = function(count) {
      return function(value) {
        if (count < 1) {
          return [];
        }
        var result = new Array(count);
        return result.fill(value);
      };
    };
    var replicatePolyfill = function(count) {
      return function(value) {
        var result = [];
        var n = 0;
        for (var i = 0; i < count; i++) {
          result[n++] = value;
        }
        return result;
      };
    };
    exports2.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
    exports2.fromFoldableImpl = function() {
      function Cons(head, tail) {
        this.head = head;
        this.tail = tail;
      }
      var emptyList = {};
      function curryCons(head) {
        return function(tail) {
          return new Cons(head, tail);
        };
      }
      function listToArray(list) {
        var result = [];
        var count = 0;
        var xs = list;
        while (xs !== emptyList) {
          result[count++] = xs.head;
          xs = xs.tail;
        }
        return result;
      }
      return function(foldr) {
        return function(xs) {
          return listToArray(foldr(curryCons)(emptyList)(xs));
        };
      };
    }();
    exports2.length = function(xs) {
      return xs.length;
    };
    exports2.unconsImpl = function(empty) {
      return function(next) {
        return function(xs) {
          return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
        };
      };
    };
    exports2.indexImpl = function(just) {
      return function(nothing) {
        return function(xs) {
          return function(i) {
            return i < 0 || i >= xs.length ? nothing : just(xs[i]);
          };
        };
      };
    };
    exports2.findMapImpl = function(nothing) {
      return function(isJust) {
        return function(f) {
          return function(xs) {
            for (var i = 0; i < xs.length; i++) {
              var result = f(xs[i]);
              if (isJust(result))
                return result;
            }
            return nothing;
          };
        };
      };
    };
    exports2.findIndexImpl = function(just) {
      return function(nothing) {
        return function(f) {
          return function(xs) {
            for (var i = 0, l = xs.length; i < l; i++) {
              if (f(xs[i]))
                return just(i);
            }
            return nothing;
          };
        };
      };
    };
    exports2.findLastIndexImpl = function(just) {
      return function(nothing) {
        return function(f) {
          return function(xs) {
            for (var i = xs.length - 1; i >= 0; i--) {
              if (f(xs[i]))
                return just(i);
            }
            return nothing;
          };
        };
      };
    };
    exports2._insertAt = function(just) {
      return function(nothing) {
        return function(i) {
          return function(a) {
            return function(l) {
              if (i < 0 || i > l.length)
                return nothing;
              var l1 = l.slice();
              l1.splice(i, 0, a);
              return just(l1);
            };
          };
        };
      };
    };
    exports2._deleteAt = function(just) {
      return function(nothing) {
        return function(i) {
          return function(l) {
            if (i < 0 || i >= l.length)
              return nothing;
            var l1 = l.slice();
            l1.splice(i, 1);
            return just(l1);
          };
        };
      };
    };
    exports2._updateAt = function(just) {
      return function(nothing) {
        return function(i) {
          return function(a) {
            return function(l) {
              if (i < 0 || i >= l.length)
                return nothing;
              var l1 = l.slice();
              l1[i] = a;
              return just(l1);
            };
          };
        };
      };
    };
    exports2.reverse = function(l) {
      return l.slice().reverse();
    };
    exports2.concat = function(xss) {
      if (xss.length <= 1e4) {
        return Array.prototype.concat.apply([], xss);
      }
      var result = [];
      for (var i = 0, l = xss.length; i < l; i++) {
        var xs = xss[i];
        for (var j = 0, m = xs.length; j < m; j++) {
          result.push(xs[j]);
        }
      }
      return result;
    };
    exports2.filter = function(f) {
      return function(xs) {
        return xs.filter(f);
      };
    };
    exports2.partition = function(f) {
      return function(xs) {
        var yes = [];
        var no = [];
        for (var i = 0; i < xs.length; i++) {
          var x = xs[i];
          if (f(x))
            yes.push(x);
          else
            no.push(x);
        }
        return { yes, no };
      };
    };
    exports2.scanl = function(f) {
      return function(b) {
        return function(xs) {
          var len = xs.length;
          var acc = b;
          var out = new Array(len);
          for (var i = 0; i < len; i++) {
            acc = f(acc)(xs[i]);
            out[i] = acc;
          }
          return out;
        };
      };
    };
    exports2.scanr = function(f) {
      return function(b) {
        return function(xs) {
          var len = xs.length;
          var acc = b;
          var out = new Array(len);
          for (var i = len - 1; i >= 0; i--) {
            acc = f(xs[i])(acc);
            out[i] = acc;
          }
          return out;
        };
      };
    };
    exports2.sortByImpl = function() {
      function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
        var mid;
        var i;
        var j;
        var k;
        var x;
        var y;
        var c;
        mid = from + (to - from >> 1);
        if (mid - from > 1)
          mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
        if (to - mid > 1)
          mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);
        i = from;
        j = mid;
        k = from;
        while (i < mid && j < to) {
          x = xs2[i];
          y = xs2[j];
          c = fromOrdering(compare(x)(y));
          if (c > 0) {
            xs1[k++] = y;
            ++j;
          } else {
            xs1[k++] = x;
            ++i;
          }
        }
        while (i < mid) {
          xs1[k++] = xs2[i++];
        }
        while (j < to) {
          xs1[k++] = xs2[j++];
        }
      }
      return function(compare) {
        return function(fromOrdering) {
          return function(xs) {
            var out;
            if (xs.length < 2)
              return xs;
            out = xs.slice(0);
            mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);
            return out;
          };
        };
      };
    }();
    exports2.slice = function(s) {
      return function(e) {
        return function(l) {
          return l.slice(s, e);
        };
      };
    };
    exports2.zipWith = function(f) {
      return function(xs) {
        return function(ys) {
          var l = xs.length < ys.length ? xs.length : ys.length;
          var result = new Array(l);
          for (var i = 0; i < l; i++) {
            result[i] = f(xs[i])(ys[i]);
          }
          return result;
        };
      };
    };
    exports2.any = function(p) {
      return function(xs) {
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          if (p(xs[i]))
            return true;
        }
        return false;
      };
    };
    exports2.all = function(p) {
      return function(xs) {
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          if (!p(xs[i]))
            return false;
        }
        return true;
      };
    };
    exports2.unsafeIndexImpl = function(xs) {
      return function(n) {
        return xs[n];
      };
    };
  }
});

// output/Control.Monad.ST.Internal/foreign.js
var require_foreign39 = __commonJS({
  "output/Control.Monad.ST.Internal/foreign.js"(exports2) {
    "use strict";
    exports2.map_ = function(f) {
      return function(a) {
        return function() {
          return f(a());
        };
      };
    };
    exports2.pure_ = function(a) {
      return function() {
        return a;
      };
    };
    exports2.bind_ = function(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    };
    exports2.run = function(f) {
      return f();
    };
    exports2["while"] = function(f) {
      return function(a) {
        return function() {
          while (f()) {
            a();
          }
        };
      };
    };
    exports2["for"] = function(lo) {
      return function(hi) {
        return function(f) {
          return function() {
            for (var i = lo; i < hi; i++) {
              f(i)();
            }
          };
        };
      };
    };
    exports2.foreach = function(as) {
      return function(f) {
        return function() {
          for (var i = 0, l = as.length; i < l; i++) {
            f(as[i])();
          }
        };
      };
    };
    exports2.new = function(val) {
      return function() {
        return { value: val };
      };
    };
    exports2.read = function(ref) {
      return function() {
        return ref.value;
      };
    };
    exports2.modifyImpl = function(f) {
      return function(ref) {
        return function() {
          var t = f(ref.value);
          ref.value = t.state;
          return t.value;
        };
      };
    };
    exports2.write = function(a) {
      return function(ref) {
        return function() {
          return ref.value = a;
        };
      };
    };
  }
});

// output/Control.Monad.ST.Internal/index.js
var require_Control_Monad_ST = __commonJS({
  "output/Control.Monad.ST.Internal/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign39();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad = require_Control7();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Data_Functor = require_Data4();
    var Data_Unit = require_Data3();
    var modify$prime = $foreign.modifyImpl;
    var modify = function(f) {
      return modify$prime(function(s) {
        var s$prime = f(s);
        return {
          state: s$prime,
          value: s$prime
        };
      });
    };
    var functorST = {
      map: $foreign.map_
    };
    var monadST = {
      Applicative0: function() {
        return applicativeST;
      },
      Bind1: function() {
        return bindST;
      }
    };
    var bindST = {
      bind: $foreign.bind_,
      Apply0: function() {
        return applyST;
      }
    };
    var applyST = {
      apply: Control_Monad.ap(monadST),
      Functor0: function() {
        return functorST;
      }
    };
    var applicativeST = {
      pure: $foreign.pure_,
      Apply0: function() {
        return applyST;
      }
    };
    var monadRecST = {
      tailRecM: function(f) {
        return function(a) {
          var isLooping = function(v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
              return true;
            }
            ;
            return false;
          };
          var fromDone = function(v) {
            if (v instanceof Control_Monad_Rec_Class.Done) {
              return v.value0;
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 69, column 32 - line 69, column 46): " + [v.constructor.name]);
          };
          return Control_Bind.bind(bindST)(Control_Bind.bindFlipped(bindST)($foreign["new"])(f(a)))(function(r) {
            return Control_Bind.discard(Control_Bind.discardUnit)(bindST)($foreign["while"](Data_Functor.map(functorST)(isLooping)($foreign.read(r)))(Control_Bind.bind(bindST)($foreign.read(r))(function(v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                return Control_Bind.bind(bindST)(f(v.value0))(function(e) {
                  return Data_Functor["void"](functorST)($foreign.write(e)(r));
                });
              }
              ;
              if (v instanceof Control_Monad_Rec_Class.Done) {
                return Control_Applicative.pure(applicativeST)(Data_Unit.unit);
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.ST.Internal (line 61, column 18 - line 65, column 28): " + [v.constructor.name]);
            })))(function() {
              return Data_Functor.map(functorST)(fromDone)($foreign.read(r));
            });
          });
        };
      },
      Monad0: function() {
        return monadST;
      }
    };
    module2.exports = {
      "modify'": modify$prime,
      modify,
      functorST,
      applyST,
      applicativeST,
      bindST,
      monadST,
      monadRecST,
      run: $foreign.run,
      "while": $foreign["while"],
      "for": $foreign["for"],
      foreach: $foreign.foreach,
      "new": $foreign["new"],
      read: $foreign.read,
      write: $foreign.write
    };
  }
});

// output/Data.Array.ST/foreign.js
var require_foreign40 = __commonJS({
  "output/Data.Array.ST/foreign.js"(exports2) {
    "use strict";
    exports2["new"] = function() {
      return [];
    };
    exports2.peekImpl = function(just) {
      return function(nothing) {
        return function(i) {
          return function(xs) {
            return function() {
              return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
            };
          };
        };
      };
    };
    exports2.poke = function(i) {
      return function(a) {
        return function(xs) {
          return function() {
            var ret = i >= 0 && i < xs.length;
            if (ret)
              xs[i] = a;
            return ret;
          };
        };
      };
    };
    exports2.popImpl = function(just) {
      return function(nothing) {
        return function(xs) {
          return function() {
            return xs.length > 0 ? just(xs.pop()) : nothing;
          };
        };
      };
    };
    exports2.pushAll = function(as) {
      return function(xs) {
        return function() {
          return xs.push.apply(xs, as);
        };
      };
    };
    exports2.shiftImpl = function(just) {
      return function(nothing) {
        return function(xs) {
          return function() {
            return xs.length > 0 ? just(xs.shift()) : nothing;
          };
        };
      };
    };
    exports2.unshiftAll = function(as) {
      return function(xs) {
        return function() {
          return xs.unshift.apply(xs, as);
        };
      };
    };
    exports2.splice = function(i) {
      return function(howMany) {
        return function(bs) {
          return function(xs) {
            return function() {
              return xs.splice.apply(xs, [i, howMany].concat(bs));
            };
          };
        };
      };
    };
    exports2.unsafeFreeze = function(xs) {
      return function() {
        return xs;
      };
    };
    exports2.unsafeThaw = function(xs) {
      return function() {
        return xs;
      };
    };
    function copyImpl(xs) {
      return function() {
        return xs.slice();
      };
    }
    exports2.freeze = copyImpl;
    exports2.thaw = copyImpl;
    exports2.sortByImpl = function() {
      function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
        var mid;
        var i;
        var j;
        var k;
        var x;
        var y;
        var c;
        mid = from + (to - from >> 1);
        if (mid - from > 1)
          mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
        if (to - mid > 1)
          mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);
        i = from;
        j = mid;
        k = from;
        while (i < mid && j < to) {
          x = xs2[i];
          y = xs2[j];
          c = fromOrdering(compare(x)(y));
          if (c > 0) {
            xs1[k++] = y;
            ++j;
          } else {
            xs1[k++] = x;
            ++i;
          }
        }
        while (i < mid) {
          xs1[k++] = xs2[i++];
        }
        while (j < to) {
          xs1[k++] = xs2[j++];
        }
      }
      return function(compare) {
        return function(fromOrdering) {
          return function(xs) {
            return function() {
              if (xs.length < 2)
                return xs;
              mergeFromTo(compare, fromOrdering, xs, xs.slice(0), 0, xs.length);
              return xs;
            };
          };
        };
      };
    }();
    exports2.toAssocArray = function(xs) {
      return function() {
        var n = xs.length;
        var as = new Array(n);
        for (var i = 0; i < n; i++)
          as[i] = { value: xs[i], index: i };
        return as;
      };
    };
  }
});

// output/Data.Array.ST/index.js
var require_Data_Array = __commonJS({
  "output/Data.Array.ST/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign40();
    var Control_Bind = require_Control5();
    var Control_Monad_ST_Internal = require_Control_Monad_ST();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var withArray = function(f) {
      return function(xs) {
        return function __do() {
          var result = $foreign.thaw(xs)();
          f(result)();
          return $foreign.unsafeFreeze(result)();
        };
      };
    };
    var unshift = function(a) {
      return $foreign.unshiftAll([a]);
    };
    var sortBy = function(comp) {
      return $foreign.sortByImpl(comp)(function(v) {
        if (v instanceof Data_Ordering.GT) {
          return 1;
        }
        ;
        if (v instanceof Data_Ordering.EQ) {
          return 0;
        }
        ;
        if (v instanceof Data_Ordering.LT) {
          return -1 | 0;
        }
        ;
        throw new Error("Failed pattern match at Data.Array.ST (line 113, column 31 - line 116, column 11): " + [v.constructor.name]);
      });
    };
    var sortWith = function(dictOrd) {
      return function(f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
    };
    var sort = function(dictOrd) {
      return sortBy(Data_Ord.compare(dictOrd));
    };
    var shift = $foreign.shiftImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var run = function(st) {
      return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(st)($foreign.unsafeFreeze)();
    };
    var push = function(a) {
      return $foreign.pushAll([a]);
    };
    var pop = $foreign.popImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var modify = function(i) {
      return function(f) {
        return function(xs) {
          return function __do() {
            var entry = peek(i)(xs)();
            if (entry instanceof Data_Maybe.Just) {
              return $foreign.poke(i)(f(entry.value0))(xs)();
            }
            ;
            if (entry instanceof Data_Maybe.Nothing) {
              return false;
            }
            ;
            throw new Error("Failed pattern match at Data.Array.ST (line 198, column 3 - line 200, column 26): " + [entry.constructor.name]);
          };
        };
      };
    };
    var empty = function(dictWarn) {
      return $foreign["new"];
    };
    module2.exports = {
      run,
      withArray,
      empty,
      peek,
      modify,
      pop,
      push,
      shift,
      unshift,
      sort,
      sortBy,
      sortWith,
      "new": $foreign["new"],
      poke: $foreign.poke,
      pushAll: $foreign.pushAll,
      unshiftAll: $foreign.unshiftAll,
      splice: $foreign.splice,
      freeze: $foreign.freeze,
      thaw: $foreign.thaw,
      unsafeFreeze: $foreign.unsafeFreeze,
      unsafeThaw: $foreign.unsafeThaw,
      toAssocArray: $foreign.toAssocArray
    };
  }
});

// output/Data.Array.ST.Iterator/index.js
var require_Data_Array_ST = __commonJS({
  "output/Data.Array.ST.Iterator/index.js"(exports2, module2) {
    "use strict";
    var Control_Monad_ST_Internal = require_Control_Monad_ST();
    var Data_Array_ST = require_Data_Array();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Maybe = require_Data15();
    var Iterator = function() {
      function Iterator2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Iterator2.create = function(value0) {
        return function(value1) {
          return new Iterator2(value0, value1);
        };
      };
      return Iterator2;
    }();
    var peek = function(v) {
      return function __do() {
        var i = Control_Monad_ST_Internal.read(v.value1)();
        return v.value0(i);
      };
    };
    var next = function(v) {
      return function __do() {
        var i = Control_Monad_ST_Internal.read(v.value1)();
        Control_Monad_ST_Internal.modify(function(v1) {
          return v1 + 1 | 0;
        })(v.value1)();
        return v.value0(i);
      };
    };
    var pushWhile = function(p) {
      return function(iter) {
        return function(array) {
          return function __do() {
            var $$break = Control_Monad_ST_Internal["new"](false)();
            while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
              (function __do2() {
                var mx = peek(iter)();
                if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                  Data_Array_ST.push(mx.value0)(array)();
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                }
                ;
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
              })();
            }
            ;
            return {};
          };
        };
      };
    };
    var pushAll = pushWhile(Data_Function["const"](true));
    var iterator = function(f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
    };
    var iterate = function(iter) {
      return function(f) {
        return function __do() {
          var $$break = Control_Monad_ST_Internal["new"](false)();
          while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
            (function __do2() {
              var mx = next(iter)();
              if (mx instanceof Data_Maybe.Just) {
                return f(mx.value0)();
              }
              ;
              if (mx instanceof Data_Maybe.Nothing) {
                return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
              }
              ;
              throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [mx.constructor.name]);
            })();
          }
          ;
          return {};
        };
      };
    };
    var exhausted = function() {
      var $13 = Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_Maybe.isNothing);
      return function($14) {
        return $13(peek($14));
      };
    }();
    module2.exports = {
      iterator,
      iterate,
      next,
      peek,
      exhausted,
      pushWhile,
      pushAll
    };
  }
});

// output/Data.Array/index.js
var require_Data39 = __commonJS({
  "output/Data.Array/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign38();
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Lazy = require_Control8();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Control_Monad_ST_Internal = require_Control_Monad_ST();
    var Data_Array_ST = require_Data_Array();
    var Data_Array_ST_Iterator = require_Data_Array_ST();
    var Data_Boolean = require_Data();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var zipWithA = function(dictApplicative) {
      return function(f) {
        return function(xs) {
          return function(ys) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
          };
        };
      };
    };
    var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
    var updateAtIndices = function(dictFoldable) {
      return function(us) {
        return function(xs) {
          return Data_Array_ST.withArray(function(res) {
            return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function(v) {
              return Data_Array_ST.poke(v.value0)(v.value1)(res);
            })(us);
          })(xs)();
        };
      };
    };
    var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var unsafeIndex = function(dictPartial) {
      return $foreign.unsafeIndexImpl;
    };
    var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function(x) {
      return function(xs) {
        return new Data_Maybe.Just({
          head: x,
          tail: xs
        });
      };
    });
    var toUnfoldable = function(dictUnfoldable) {
      return function(xs) {
        var len = $foreign.length(xs);
        var f = function(i) {
          if (i < len) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_Maybe.Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Array (line 158, column 3 - line 160, column 26): " + [i.constructor.name]);
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
    };
    var take = function(n) {
      return function(xs) {
        var $67 = n < 1;
        if ($67) {
          return [];
        }
        ;
        return $foreign.slice(0)(n)(xs);
      };
    };
    var tail = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function(v) {
      return function(xs) {
        return new Data_Maybe.Just(xs);
      };
    });
    var splitAt = function(i) {
      return function(xs) {
        if (i <= 0) {
          return {
            before: [],
            after: xs
          };
        }
        ;
        return {
          before: $foreign.slice(0)(i)(xs),
          after: $foreign.slice(i)($foreign.length(xs))(xs)
        };
      };
    };
    var sortBy = function(comp) {
      return $foreign.sortByImpl(comp)(function(v) {
        if (v instanceof Data_Ordering.GT) {
          return 1;
        }
        ;
        if (v instanceof Data_Ordering.EQ) {
          return 0;
        }
        ;
        if (v instanceof Data_Ordering.LT) {
          return -1 | 0;
        }
        ;
        throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [v.constructor.name]);
      });
    };
    var sortWith = function(dictOrd) {
      return function(f) {
        return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
    };
    var sort = function(dictOrd) {
      return function(xs) {
        return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
    };
    var snoc = function(xs) {
      return function(x) {
        return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
    };
    var singleton = function(a) {
      return [a];
    };
    var $$null = function(xs) {
      return $foreign.length(xs) === 0;
    };
    var nubByEq = function(eq) {
      return function(xs) {
        return function __do() {
          var arr = Data_Array_ST["new"]();
          Control_Monad_ST_Internal.foreach(xs)(function(x) {
            return function __do2() {
              var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function() {
                var $99 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                var $100 = $foreign.any(function(v) {
                  return eq(v)(x);
                });
                return function($101) {
                  return $99($100($101));
                };
              }())(Data_Array_ST.unsafeFreeze(arr))();
              return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
            };
          })();
          return Data_Array_ST.unsafeFreeze(arr)();
        }();
      };
    };
    var nubEq = function(dictEq) {
      return nubByEq(Data_Eq.eq(dictEq));
    };
    var modifyAtIndices = function(dictFoldable) {
      return function(is) {
        return function(f) {
          return function(xs) {
            return Data_Array_ST.withArray(function(res) {
              return Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(function(i) {
                return Data_Array_ST.modify(i)(f)(res);
              })(is);
            })(xs)();
          };
        };
      };
    };
    var mapWithIndex = function(f) {
      return function(xs) {
        return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
    };
    var intersperse = function(a) {
      return function(arr) {
        var v = $foreign.length(arr);
        if (v < 2) {
          return arr;
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Array_ST.run(function() {
            var unsafeGetElem = function(idx) {
              return unsafeIndex()(arr)(idx);
            };
            return function __do() {
              var out = Data_Array_ST["new"]();
              Data_Array_ST.push(unsafeGetElem(0))(out)();
              Control_Monad_ST_Internal["for"](1)(v)(function(idx) {
                return function __do2() {
                  Data_Array_ST.push(a)(out)();
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(unsafeGetElem(idx))(out))();
                };
              })();
              return out;
            };
          }());
        }
        ;
        throw new Error("Failed pattern match at Data.Array (line 613, column 21 - line 622, column 19): " + [v.constructor.name]);
      };
    };
    var intercalate = function(dictMonoid) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(dictMonoid);
    };
    var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var init = function(xs) {
      if ($$null(xs)) {
        return Data_Maybe.Nothing.value;
      }
      ;
      if (Data_Boolean.otherwise) {
        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      }
      ;
      throw new Error("Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): " + [xs.constructor.name]);
    };
    var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var last = function(xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
    };
    var unsnoc = function(xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return function(v1) {
          return {
            init: v,
            last: v1
          };
        };
      })(init(xs)))(last(xs));
    };
    var modifyAt = function(i) {
      return function(f) {
        return function(xs) {
          var go = function(x) {
            return updateAt(i)(f(x))(xs);
          };
          return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
      };
    };
    var span = function(p) {
      return function(arr) {
        var go = function($copy_i) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(i) {
            var v = index(arr)(i);
            if (v instanceof Data_Maybe.Just) {
              var $74 = p(v.value0);
              if ($74) {
                $copy_i = i + 1 | 0;
                return;
              }
              ;
              $tco_done = true;
              return new Data_Maybe.Just(i);
            }
            ;
            if (v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Data.Array (line 966, column 5 - line 968, column 25): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_i);
          }
          ;
          return $tco_result;
        };
        var breakIndex = go(0);
        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
          return {
            init: [],
            rest: arr
          };
        }
        ;
        if (breakIndex instanceof Data_Maybe.Just) {
          return {
            init: $foreign.slice(0)(breakIndex.value0)(arr),
            rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
          };
        }
        ;
        if (breakIndex instanceof Data_Maybe.Nothing) {
          return {
            init: arr,
            rest: []
          };
        }
        ;
        throw new Error("Failed pattern match at Data.Array (line 953, column 3 - line 959, column 30): " + [breakIndex.constructor.name]);
      };
    };
    var takeWhile = function(p) {
      return function(xs) {
        return span(p)(xs).init;
      };
    };
    var unzip = function(xs) {
      return function __do() {
        var fsts = Data_Array_ST["new"]();
        var snds = Data_Array_ST["new"]();
        var iter = Data_Array_ST_Iterator.iterator(function(v) {
          return index(xs)(v);
        })();
        Data_Array_ST_Iterator.iterate(iter)(function(v) {
          return function __do2() {
            Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
          };
        })();
        var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
        var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
        return new Data_Tuple.Tuple(fsts$prime, snds$prime);
      }();
    };
    var head = function(xs) {
      return index(xs)(0);
    };
    var nubBy = function(comp) {
      return function(xs) {
        var indexedAndSorted = sortBy(function(x) {
          return function(y) {
            return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
          };
        })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
        var v = head(indexedAndSorted);
        if (v instanceof Data_Maybe.Nothing) {
          return [];
        }
        ;
        if (v instanceof Data_Maybe.Just) {
          return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)(function __do() {
            var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
            Control_Monad_ST_Internal.foreach(indexedAndSorted)(function(v1) {
              return function __do2() {
                var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)(function() {
                  var $102 = function(dictPartial) {
                    var $104 = Data_Maybe.fromJust();
                    return function($105) {
                      return $104(last($105));
                    };
                  }();
                  return function($103) {
                    return Data_Tuple.snd($102($103));
                  };
                }())(Data_Array_ST.unsafeFreeze(result))();
                return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
              };
            })();
            return Data_Array_ST.unsafeFreeze(result)();
          }()));
        }
        ;
        throw new Error("Failed pattern match at Data.Array (line 1050, column 17 - line 1058, column 29): " + [v.constructor.name]);
      };
    };
    var nub = function(dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
    };
    var groupBy = function(op) {
      return function(xs) {
        return function __do() {
          var result = Data_Array_ST["new"]();
          var iter = Data_Array_ST_Iterator.iterator(function(v) {
            return index(xs)(v);
          })();
          Data_Array_ST_Iterator.iterate(iter)(function(x) {
            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do2() {
              var sub = Data_Array_ST["new"]();
              Data_Array_ST.push(x)(sub)();
              Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
              var grp = Data_Array_ST.unsafeFreeze(sub)();
              return Data_Array_ST.push(grp)(result)();
            });
          })();
          return Data_Array_ST.unsafeFreeze(result)();
        }();
      };
    };
    var groupAllBy = function(cmp) {
      var $106 = groupBy(function(x) {
        return function(y) {
          return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.EQ.value);
        };
      });
      var $107 = sortBy(cmp);
      return function($108) {
        return $106($107($108));
      };
    };
    var groupAll = function(dictOrd) {
      return groupAllBy(Data_Ord.compare(dictOrd));
    };
    var group$prime = function(dictWarn) {
      return function(dictOrd) {
        return groupAll(dictOrd);
      };
    };
    var group = function(dictEq) {
      return function(xs) {
        return groupBy(Data_Eq.eq(dictEq))(xs);
      };
    };
    var fromFoldable = function(dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
    };
    var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
    var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
    var foldRecM = function(dictMonadRec) {
      return function(f) {
        return function(b) {
          return function(array) {
            var go = function(res) {
              return function(i) {
                if (i >= $foreign.length(array)) {
                  return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Done(res));
                }
                ;
                if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(f(res)(unsafeIndex()(array)(i)))(function(res$prime) {
                    return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(new Control_Monad_Rec_Class.Loop({
                      a: res$prime,
                      b: i + 1 | 0
                    }));
                  });
                }
                ;
                throw new Error("Failed pattern match at Data.Array (line 1269, column 3 - line 1273, column 42): " + [res.constructor.name, i.constructor.name]);
              };
            };
            return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(b)(0);
          };
        };
      };
    };
    var foldMap = function(dictMonoid) {
      return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid);
    };
    var foldM = function(dictMonad) {
      return function(f) {
        return function(b) {
          return $foreign.unconsImpl(function(v) {
            return Control_Applicative.pure(dictMonad.Applicative0())(b);
          })(function(a) {
            return function(as) {
              return Control_Bind.bind(dictMonad.Bind1())(f(b)(a))(function(b$prime) {
                return foldM(dictMonad)(f)(b$prime)(as);
              });
            };
          });
        };
      };
    };
    var fold = function(dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
    };
    var findMap = $foreign.findMapImpl(Data_Maybe.Nothing.value)(Data_Maybe.isJust);
    var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var insertBy = function(cmp) {
      return function(x) {
        return function(ys) {
          var i = Data_Maybe.maybe(0)(function(v) {
            return v + 1 | 0;
          })(findLastIndex(function(y) {
            return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
          })(ys));
          return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
        };
      };
    };
    var insert = function(dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
    };
    var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var intersectBy = function(eq) {
      return function(xs) {
        return function(ys) {
          return $foreign.filter(function(x) {
            return Data_Maybe.isJust(findIndex(eq(x))(ys));
          })(xs);
        };
      };
    };
    var intersect = function(dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
    };
    var find = function(f) {
      return function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeIndex()(xs))(findIndex(f)(xs));
      };
    };
    var elemLastIndex = function(dictEq) {
      return function(x) {
        return findLastIndex(function(v) {
          return Data_Eq.eq(dictEq)(v)(x);
        });
      };
    };
    var elemIndex = function(dictEq) {
      return function(x) {
        return findIndex(function(v) {
          return Data_Eq.eq(dictEq)(v)(x);
        });
      };
    };
    var notElem = function(dictEq) {
      return function(a) {
        return function(arr) {
          return Data_Maybe.isNothing(elemIndex(dictEq)(a)(arr));
        };
      };
    };
    var elem = function(dictEq) {
      return function(a) {
        return function(arr) {
          return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
        };
      };
    };
    var dropWhile = function(p) {
      return function(xs) {
        return span(p)(xs).rest;
      };
    };
    var dropEnd = function(n) {
      return function(xs) {
        return take($foreign.length(xs) - n | 0)(xs);
      };
    };
    var drop = function(n) {
      return function(xs) {
        var $89 = n < 1;
        if ($89) {
          return xs;
        }
        ;
        return $foreign.slice(n)($foreign.length(xs))(xs);
      };
    };
    var takeEnd = function(n) {
      return function(xs) {
        return drop($foreign.length(xs) - n | 0)(xs);
      };
    };
    var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var deleteBy = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2.length === 0) {
            return [];
          }
          ;
          return Data_Maybe.maybe(v2)(function(i) {
            return Data_Maybe.fromJust()(deleteAt(i)(v2));
          })(findIndex(v(v1))(v2));
        };
      };
    };
    var unionBy = function(eq) {
      return function(xs) {
        return function(ys) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(foldl(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
        };
      };
    };
    var union = function(dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
    };
    var $$delete = function(dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
    };
    var difference = function(dictEq) {
      return foldr($$delete(dictEq));
    };
    var cons = function(x) {
      return function(xs) {
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)([x])(xs);
      };
    };
    var some = function(dictAlternative) {
      return function(dictLazy) {
        return function(v) {
          return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(cons)(v))(Control_Lazy.defer(dictLazy)(function(v1) {
            return many(dictAlternative)(dictLazy)(v);
          }));
        };
      };
    };
    var many = function(dictAlternative) {
      return function(dictLazy) {
        return function(v) {
          return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([]));
        };
      };
    };
    var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
    var mapMaybe = function(f) {
      return concatMap(function() {
        var $109 = Data_Maybe.maybe([])(singleton);
        return function($110) {
          return $109(f($110));
        };
      }());
    };
    var filterA = function(dictApplicative) {
      return function(p) {
        var $111 = Data_Functor.map(dictApplicative.Apply0().Functor0())(mapMaybe(function(v) {
          if (v.value1) {
            return new Data_Maybe.Just(v.value0);
          }
          ;
          return Data_Maybe.Nothing.value;
        }));
        var $112 = Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function(x) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(x))(p(x));
        });
        return function($113) {
          return $111($112($113));
        };
      };
    };
    var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
    var alterAt = function(i) {
      return function(f) {
        return function(xs) {
          var go = function(x) {
            var v = f(x);
            if (v instanceof Data_Maybe.Nothing) {
              return deleteAt(i)(xs);
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return updateAt(i)(v.value0)(xs);
            }
            ;
            throw new Error("Failed pattern match at Data.Array (line 591, column 10 - line 593, column 32): " + [v.constructor.name]);
          };
          return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
        };
      };
    };
    module2.exports = {
      fromFoldable,
      toUnfoldable,
      singleton,
      some,
      many,
      "null": $$null,
      cons,
      snoc,
      insert,
      insertBy,
      head,
      last,
      tail,
      init,
      uncons,
      unsnoc,
      index,
      elem,
      notElem,
      elemIndex,
      elemLastIndex,
      find,
      findMap,
      findIndex,
      findLastIndex,
      insertAt,
      deleteAt,
      updateAt,
      updateAtIndices,
      modifyAt,
      modifyAtIndices,
      alterAt,
      intersperse,
      concatMap,
      splitAt,
      filterA,
      mapMaybe,
      catMaybes,
      mapWithIndex,
      foldl,
      foldr,
      foldMap,
      fold,
      intercalate,
      sort,
      sortBy,
      sortWith,
      take,
      takeEnd,
      takeWhile,
      drop,
      dropEnd,
      dropWhile,
      span,
      group,
      groupAll,
      "group'": group$prime,
      groupBy,
      groupAllBy,
      nub,
      nubEq,
      nubBy,
      nubByEq,
      union,
      unionBy,
      "delete": $$delete,
      deleteBy,
      difference,
      intersect,
      intersectBy,
      zipWithA,
      zip,
      unzip,
      foldM,
      foldRecM,
      unsafeIndex,
      range: $foreign.range,
      replicate: $foreign.replicate,
      length: $foreign.length,
      reverse: $foreign.reverse,
      concat: $foreign.concat,
      filter: $foreign.filter,
      partition: $foreign.partition,
      scanl: $foreign.scanl,
      scanr: $foreign.scanr,
      slice: $foreign.slice,
      zipWith: $foreign.zipWith,
      any: $foreign.any,
      all: $foreign.all
    };
  }
});

// output/Data.Lazy/foreign.js
var require_foreign41 = __commonJS({
  "output/Data.Lazy/foreign.js"(exports2) {
    "use strict";
    exports2.defer = function(thunk) {
      var v = null;
      return function() {
        if (thunk === void 0)
          return v;
        v = thunk();
        thunk = void 0;
        return v;
      };
    };
    exports2.force = function(l) {
      return l();
    };
  }
});

// output/Data.Lazy/index.js
var require_Data40 = __commonJS({
  "output/Data.Lazy/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign41();
    var Control_Apply = require_Control3();
    var Data_Bounded = require_Data13();
    var Data_Eq = require_Data8();
    var Data_EuclideanRing = require_Data18();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Functor_Invariant = require_Data_Functor();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Ring = require_Data11();
    var Data_Semigroup = require_Data7();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_Unit = require_Data3();
    var showLazy = function(dictShow) {
      return {
        show: function(x) {
          return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
        }
      };
    };
    var semiringLazy = function(dictSemiring) {
      return {
        add: function(a) {
          return function(b) {
            return $foreign.defer(function(v) {
              return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
          };
        },
        zero: $foreign.defer(function(v) {
          return Data_Semiring.zero(dictSemiring);
        }),
        mul: function(a) {
          return function(b) {
            return $foreign.defer(function(v) {
              return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
            });
          };
        },
        one: $foreign.defer(function(v) {
          return Data_Semiring.one(dictSemiring);
        })
      };
    };
    var semigroupLazy = function(dictSemigroup) {
      return {
        append: function(a) {
          return function(b) {
            return $foreign.defer(function(v) {
              return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
            });
          };
        }
      };
    };
    var ringLazy = function(dictRing) {
      return {
        sub: function(a) {
          return function(b) {
            return $foreign.defer(function(v) {
              return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
            });
          };
        },
        Semiring0: function() {
          return semiringLazy(dictRing.Semiring0());
        }
      };
    };
    var monoidLazy = function(dictMonoid) {
      return {
        mempty: $foreign.defer(function(v) {
          return Data_Monoid.mempty(dictMonoid);
        }),
        Semigroup0: function() {
          return semigroupLazy(dictMonoid.Semigroup0());
        }
      };
    };
    var lazyLazy = {
      defer: function(f) {
        return $foreign.defer(function(v) {
          return $foreign.force(f(Data_Unit.unit));
        });
      }
    };
    var functorLazy = {
      map: function(f) {
        return function(l) {
          return $foreign.defer(function(v) {
            return f($foreign.force(l));
          });
        };
      }
    };
    var functorWithIndexLazy = {
      mapWithIndex: function(f) {
        return Data_Functor.map(functorLazy)(f(Data_Unit.unit));
      },
      Functor0: function() {
        return functorLazy;
      }
    };
    var invariantLazy = {
      imap: Data_Functor_Invariant.imapF(functorLazy)
    };
    var foldableLazy = {
      foldr: function(f) {
        return function(z) {
          return function(l) {
            return f($foreign.force(l))(z);
          };
        };
      },
      foldl: function(f) {
        return function(z) {
          return function(l) {
            return f(z)($foreign.force(l));
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(l) {
            return f($foreign.force(l));
          };
        };
      }
    };
    var foldableWithIndexLazy = {
      foldrWithIndex: function(f) {
        return Data_Foldable.foldr(foldableLazy)(f(Data_Unit.unit));
      },
      foldlWithIndex: function(f) {
        return Data_Foldable.foldl(foldableLazy)(f(Data_Unit.unit));
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldMap(foldableLazy)(dictMonoid)(f(Data_Unit.unit));
        };
      },
      Foldable0: function() {
        return foldableLazy;
      }
    };
    var traversableLazy = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(l) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(function($43) {
              return $foreign.defer(Data_Function["const"]($43));
            })(f($foreign.force(l)));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(l) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function($44) {
            return $foreign.defer(Data_Function["const"]($44));
          })($foreign.force(l));
        };
      },
      Functor0: function() {
        return functorLazy;
      },
      Foldable1: function() {
        return foldableLazy;
      }
    };
    var traversableWithIndexLazy = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_Traversable.traverse(traversableLazy)(dictApplicative)(f(Data_Unit.unit));
        };
      },
      FunctorWithIndex0: function() {
        return functorWithIndexLazy;
      },
      FoldableWithIndex1: function() {
        return foldableWithIndexLazy;
      },
      Traversable2: function() {
        return traversableLazy;
      }
    };
    var foldable1Lazy = {
      foldMap1: function(dictSemigroup) {
        return function(f) {
          return function(l) {
            return f($foreign.force(l));
          };
        };
      },
      foldr1: function(v) {
        return function(l) {
          return $foreign.force(l);
        };
      },
      foldl1: function(v) {
        return function(l) {
          return $foreign.force(l);
        };
      },
      Foldable0: function() {
        return foldableLazy;
      }
    };
    var traversable1Lazy = {
      traverse1: function(dictApply) {
        return function(f) {
          return function(l) {
            return Data_Functor.map(dictApply.Functor0())(function($45) {
              return $foreign.defer(Data_Function["const"]($45));
            })(f($foreign.force(l)));
          };
        };
      },
      sequence1: function(dictApply) {
        return function(l) {
          return Data_Functor.map(dictApply.Functor0())(function($46) {
            return $foreign.defer(Data_Function["const"]($46));
          })($foreign.force(l));
        };
      },
      Foldable10: function() {
        return foldable1Lazy;
      },
      Traversable1: function() {
        return traversableLazy;
      }
    };
    var extendLazy = {
      extend: function(f) {
        return function(x) {
          return $foreign.defer(function(v) {
            return f(x);
          });
        };
      },
      Functor0: function() {
        return functorLazy;
      }
    };
    var eqLazy = function(dictEq) {
      return {
        eq: function(x) {
          return function(y) {
            return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
          };
        }
      };
    };
    var ordLazy = function(dictOrd) {
      return {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
          };
        },
        Eq0: function() {
          return eqLazy(dictOrd.Eq0());
        }
      };
    };
    var eq1Lazy = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqLazy(dictEq));
      }
    };
    var ord1Lazy = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordLazy(dictOrd));
      },
      Eq10: function() {
        return eq1Lazy;
      }
    };
    var comonadLazy = {
      extract: $foreign.force,
      Extend0: function() {
        return extendLazy;
      }
    };
    var commutativeRingLazy = function(dictCommutativeRing) {
      return {
        Ring0: function() {
          return ringLazy(dictCommutativeRing.Ring0());
        }
      };
    };
    var euclideanRingLazy = function(dictEuclideanRing) {
      return {
        degree: function() {
          var $47 = Data_EuclideanRing.degree(dictEuclideanRing);
          return function($48) {
            return $47($foreign.force($48));
          };
        }(),
        div: function(a) {
          return function(b) {
            return $foreign.defer(function(v) {
              return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
          };
        },
        mod: function(a) {
          return function(b) {
            return $foreign.defer(function(v) {
              return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
            });
          };
        },
        CommutativeRing0: function() {
          return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
        }
      };
    };
    var boundedLazy = function(dictBounded) {
      return {
        top: $foreign.defer(function(v) {
          return Data_Bounded.top(dictBounded);
        }),
        bottom: $foreign.defer(function(v) {
          return Data_Bounded.bottom(dictBounded);
        }),
        Ord0: function() {
          return ordLazy(dictBounded.Ord0());
        }
      };
    };
    var applyLazy = {
      apply: function(f) {
        return function(x) {
          return $foreign.defer(function(v) {
            return $foreign.force(f)($foreign.force(x));
          });
        };
      },
      Functor0: function() {
        return functorLazy;
      }
    };
    var bindLazy = {
      bind: function(l) {
        return function(f) {
          return $foreign.defer(function(v) {
            return $foreign.force(f($foreign.force(l)));
          });
        };
      },
      Apply0: function() {
        return applyLazy;
      }
    };
    var heytingAlgebraLazy = function(dictHeytingAlgebra) {
      return {
        ff: $foreign.defer(function(v) {
          return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
        }),
        tt: $foreign.defer(function(v) {
          return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
        }),
        implies: function(a) {
          return function(b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
          };
        },
        conj: function(a) {
          return function(b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
          };
        },
        disj: function(a) {
          return function(b) {
            return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
          };
        },
        not: function(a) {
          return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
        }
      };
    };
    var booleanAlgebraLazy = function(dictBooleanAlgebra) {
      return {
        HeytingAlgebra0: function() {
          return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
        }
      };
    };
    var applicativeLazy = {
      pure: function(a) {
        return $foreign.defer(function(v) {
          return a;
        });
      },
      Apply0: function() {
        return applyLazy;
      }
    };
    var monadLazy = {
      Applicative0: function() {
        return applicativeLazy;
      },
      Bind1: function() {
        return bindLazy;
      }
    };
    module2.exports = {
      semiringLazy,
      ringLazy,
      commutativeRingLazy,
      euclideanRingLazy,
      eqLazy,
      eq1Lazy,
      ordLazy,
      ord1Lazy,
      boundedLazy,
      semigroupLazy,
      monoidLazy,
      heytingAlgebraLazy,
      booleanAlgebraLazy,
      functorLazy,
      functorWithIndexLazy,
      foldableLazy,
      foldableWithIndexLazy,
      foldable1Lazy,
      traversableLazy,
      traversableWithIndexLazy,
      traversable1Lazy,
      invariantLazy,
      applyLazy,
      applicativeLazy,
      bindLazy,
      monadLazy,
      extendLazy,
      comonadLazy,
      showLazy,
      lazyLazy,
      defer: $foreign.defer,
      force: $foreign.force
    };
  }
});

// output/Data.List.Lazy.Types/index.js
var require_Data_List_Lazy = __commonJS({
  "output/Data.List.Lazy.Types/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Lazy = require_Control8();
    var Control_Monad = require_Control7();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_FoldableWithIndex = require_Data28();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_FunctorWithIndex = require_Data27();
    var Data_Lazy = require_Data40();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_NonEmpty = require_Data33();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_TraversableWithIndex = require_Data30();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable1 = require_Data31();
    var List = function(x) {
      return x;
    };
    var Nil = function() {
      function Nil2() {
      }
      ;
      Nil2.value = new Nil2();
      return Nil2;
    }();
    var Cons = function() {
      function Cons2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Cons2.create = function(value0) {
        return function(value1) {
          return new Cons2(value0, value1);
        };
      };
      return Cons2;
    }();
    var NonEmptyList = function(x) {
      return x;
    };
    var nil = List(Data_Lazy.defer(function(v) {
      return Nil.value;
    }));
    var newtypeNonEmptyList = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeList = {
      Coercible0: function() {
        return void 0;
      }
    };
    var step = function() {
      var $225 = Data_Newtype.unwrap();
      return function($226) {
        return Data_Lazy.force($225($226));
      };
    }();
    var semigroupList = {
      append: function(xs) {
        return function(ys) {
          var go = function(v) {
            if (v instanceof Nil) {
              return step(ys);
            }
            ;
            if (v instanceof Cons) {
              return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 104, column 5 - line 104, column 21): " + [v.constructor.name]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
        };
      }
    };
    var monoidList = {
      mempty: nil,
      Semigroup0: function() {
        return semigroupList;
      }
    };
    var lazyList = {
      defer: function(f) {
        return List(Data_Lazy.defer(function($227) {
          return step(f($227));
        }));
      }
    };
    var functorList = {
      map: function(f) {
        return function(xs) {
          var go = function(v) {
            if (v instanceof Nil) {
              return Nil.value;
            }
            ;
            if (v instanceof Cons) {
              return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 113, column 5 - line 113, column 17): " + [v.constructor.name]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
        };
      }
    };
    var functorNonEmptyList = {
      map: function(f) {
        return function(v) {
          return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
        };
      }
    };
    var eq1List = {
      eq1: function(dictEq) {
        return function(xs) {
          return function(ys) {
            var go = function($copy_v) {
              return function($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                  if (v instanceof Nil && v1 instanceof Nil) {
                    $tco_done = true;
                    return true;
                  }
                  ;
                  if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                    $tco_var_v = step(v.value1);
                    $copy_v1 = step(v1.value1);
                    return;
                  }
                  ;
                  $tco_done = true;
                  return false;
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
                }
                ;
                return $tco_result;
              };
            };
            return go(step(xs))(step(ys));
          };
        };
      }
    };
    var eq1NonEmptyList = {
      eq1: function(dictEq) {
        return function(v) {
          return function(v1) {
            return Data_Eq.eq1(Data_Lazy.eq1Lazy)(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq))(v)(v1);
          };
        };
      }
    };
    var eqList = function(dictEq) {
      return {
        eq: Data_Eq.eq1(eq1List)(dictEq)
      };
    };
    var eqNonEmptyList = function(dictEq) {
      return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
    };
    var ord1List = {
      compare1: function(dictOrd) {
        return function(xs) {
          return function(ys) {
            var go = function($copy_v) {
              return function($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                  if (v instanceof Nil && v1 instanceof Nil) {
                    $tco_done = true;
                    return Data_Ordering.EQ.value;
                  }
                  ;
                  if (v instanceof Nil) {
                    $tco_done = true;
                    return Data_Ordering.LT.value;
                  }
                  ;
                  if (v1 instanceof Nil) {
                    $tco_done = true;
                    return Data_Ordering.GT.value;
                  }
                  ;
                  if (v instanceof Cons && v1 instanceof Cons) {
                    var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                    if (v2 instanceof Data_Ordering.EQ) {
                      $tco_var_v = step(v.value1);
                      $copy_v1 = step(v1.value1);
                      return;
                    }
                    ;
                    $tco_done = true;
                    return v2;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 90, column 5 - line 90, column 20): " + [v.constructor.name, v1.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
                }
                ;
                return $tco_result;
              };
            };
            return go(step(xs))(step(ys));
          };
        };
      },
      Eq10: function() {
        return eq1List;
      }
    };
    var ord1NonEmptyList = {
      compare1: function(dictOrd) {
        return function(v) {
          return function(v1) {
            return Data_Ord.compare1(Data_Lazy.ord1Lazy)(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd))(v)(v1);
          };
        };
      },
      Eq10: function() {
        return eq1NonEmptyList;
      }
    };
    var ordList = function(dictOrd) {
      return {
        compare: Data_Ord.compare1(ord1List)(dictOrd),
        Eq0: function() {
          return eqList(dictOrd.Eq0());
        }
      };
    };
    var ordNonEmptyList = function(dictOrd) {
      return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
    };
    var cons = function(x) {
      return function(xs) {
        return List(Data_Lazy.defer(function(v) {
          return new Cons(x, xs);
        }));
      };
    };
    var foldableList = {
      foldr: function(op) {
        return function(z) {
          return function(xs) {
            var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
            return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
        };
      },
      foldl: function(op) {
        var go = function($copy_b) {
          return function($copy_xs) {
            var $tco_var_b = $copy_b;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(b, xs) {
              var v = step(xs);
              if (v instanceof Nil) {
                $tco_done = true;
                return b;
              }
              ;
              if (v instanceof Cons) {
                $tco_var_b = op(b)(v.value0);
                $copy_xs = v.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Lazy.Types (line 128, column 7 - line 130, column 40): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_b, $copy_xs);
            }
            ;
            return $tco_result;
          };
        };
        return go;
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return Data_Foldable.foldl(foldableList)(function(b) {
            return function(a) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
            };
          })(Data_Monoid.mempty(dictMonoid));
        };
      }
    };
    var extendList = {
      extend: function(f) {
        return function(l) {
          var go = function(a) {
            return function(v2) {
              var acc$prime = cons(a)(v2.acc);
              return {
                val: cons(f(acc$prime))(v2.val),
                acc: acc$prime
              };
            };
          };
          var v = step(l);
          if (v instanceof Nil) {
            return nil;
          }
          ;
          if (v instanceof Cons) {
            return cons(f(l))(Data_Foldable.foldr(foldableList)(go)({
              val: nil,
              acc: nil
            })(v.value1).val);
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy.Types (line 200, column 5 - line 203, column 55): " + [v.constructor.name]);
        };
      },
      Functor0: function() {
        return functorList;
      }
    };
    var extendNonEmptyList = {
      extend: function(f) {
        return function(v) {
          var go = function(a) {
            return function(v12) {
              return {
                val: cons(f(Data_Lazy.defer(function(v2) {
                  return new Data_NonEmpty.NonEmpty(a, v12.acc);
                })))(v12.val),
                acc: cons(a)(v12.acc)
              };
            };
          };
          var v1 = Data_Lazy.force(v);
          return NonEmptyList(Data_Lazy.defer(function(v2) {
            return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
              val: nil,
              acc: nil
            })(v1.value1).val);
          }));
        };
      },
      Functor0: function() {
        return functorNonEmptyList;
      }
    };
    var foldableNonEmptyList = {
      foldr: function(f) {
        return function(b) {
          return function(v) {
            return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
          };
        };
      },
      foldl: function(f) {
        return function(b) {
          return function(v) {
            return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
          };
        };
      }
    };
    var showList = function(dictShow) {
      return {
        show: function(xs) {
          return "(fromFoldable [" + (function() {
            var v = step(xs);
            if (v instanceof Nil) {
              return "";
            }
            ;
            if (v instanceof Cons) {
              return Data_Show.show(dictShow)(v.value0) + Data_Foldable.foldl(foldableList)(function(shown) {
                return function(x$prime) {
                  return shown + ("," + Data_Show.show(dictShow)(x$prime));
                };
              })("")(v.value1);
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 67, column 13 - line 70, column 78): " + [v.constructor.name]);
          }() + "])");
        }
      };
    };
    var showNonEmptyList = function(dictShow) {
      return {
        show: function(v) {
          return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
        }
      };
    };
    var showStep = function(dictShow) {
      return {
        show: function(v) {
          if (v instanceof Nil) {
            return "Nil";
          }
          ;
          if (v instanceof Cons) {
            return "(" + (Data_Show.show(dictShow)(v.value0) + (" : " + (Data_Show.show(showList(dictShow))(v.value1) + ")")));
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy.Types (line 37, column 1 - line 39, column 62): " + [v.constructor.name]);
        }
      };
    };
    var foldableWithIndexList = {
      foldrWithIndex: function(f) {
        return function(b) {
          return function(xs) {
            var v = function() {
              var rev = Data_Foldable.foldl(foldableList)(function(v1) {
                return function(a) {
                  return new Data_Tuple.Tuple(v1.value0 + 1 | 0, cons(a)(v1.value1));
                };
              });
              return rev(new Data_Tuple.Tuple(0, nil))(xs);
            }();
            return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function(v1) {
              return function(a) {
                return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
              };
            })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
          };
        };
      },
      foldlWithIndex: function(f) {
        return function(acc) {
          var $228 = Data_Foldable.foldl(foldableList)(function(v) {
            return function(a) {
              return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
            };
          })(new Data_Tuple.Tuple(0, acc));
          return function($229) {
            return Data_Tuple.snd($228($229));
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function(i) {
            return function(acc) {
              var $230 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              var $231 = f(i);
              return function($232) {
                return $230($231($232));
              };
            };
          })(Data_Monoid.mempty(dictMonoid));
        };
      },
      Foldable0: function() {
        return foldableList;
      }
    };
    var foldableWithIndexNonEmptyList = {
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function() {
              var $233 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($234) {
                return f($233($234));
              };
            }())(Data_Lazy.force(v));
          };
        };
      },
      foldlWithIndex: function(f) {
        return function(b) {
          return function(v) {
            return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
              var $235 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($236) {
                return f($235($236));
              };
            }())(b)(Data_Lazy.force(v));
          };
        };
      },
      foldrWithIndex: function(f) {
        return function(b) {
          return function(v) {
            return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
              var $237 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($238) {
                return f($237($238));
              };
            }())(b)(Data_Lazy.force(v));
          };
        };
      },
      Foldable0: function() {
        return foldableNonEmptyList;
      }
    };
    var functorWithIndexList = {
      mapWithIndex: function(f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function(i) {
          return function(x) {
            return function(acc) {
              return cons(f(i)(x))(acc);
            };
          };
        })(nil);
      },
      Functor0: function() {
        return functorList;
      }
    };
    var functorWithIndexNonEmptyList = {
      mapWithIndex: function(f) {
        return function(v) {
          return NonEmptyList(Data_Lazy.defer(function(v1) {
            return Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function() {
              var $239 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($240) {
                return f($239($240));
              };
            }())(Data_Lazy.force(v));
          }));
        };
      },
      Functor0: function() {
        return functorNonEmptyList;
      }
    };
    var toList = function(v) {
      return Control_Lazy.defer(lazyList)(function(v1) {
        var v2 = Data_Lazy.force(v);
        return cons(v2.value0)(v2.value1);
      });
    };
    var semigroupNonEmptyList = {
      append: function(v) {
        return function(as$prime) {
          var v1 = Data_Lazy.force(v);
          return Data_Lazy.defer(function(v2) {
            return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
          });
        };
      }
    };
    var traversableList = {
      traverse: function(dictApplicative) {
        return function(f) {
          return Data_Foldable.foldr(foldableList)(function(a) {
            return function(b) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(f(a)))(b);
            };
          })(Control_Applicative.pure(dictApplicative)(nil));
        };
      },
      sequence: function(dictApplicative) {
        return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function() {
        return functorList;
      },
      Foldable1: function() {
        return foldableList;
      }
    };
    var traversableNonEmptyList = {
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(xxs) {
              return NonEmptyList(Data_Lazy.defer(function(v1) {
                return xxs;
              }));
            })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(xxs) {
            return NonEmptyList(Data_Lazy.defer(function(v1) {
              return xxs;
            }));
          })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
        };
      },
      Functor0: function() {
        return functorNonEmptyList;
      },
      Foldable1: function() {
        return foldableNonEmptyList;
      }
    };
    var traversableWithIndexList = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function(i) {
            return function(a) {
              return function(b) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(f(i)(a)))(b);
              };
            };
          })(Control_Applicative.pure(dictApplicative)(nil));
        };
      },
      FunctorWithIndex0: function() {
        return functorWithIndexList;
      },
      FoldableWithIndex1: function() {
        return foldableWithIndexList;
      },
      Traversable2: function() {
        return traversableList;
      }
    };
    var traversableWithIndexNonEmptyList = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(xxs) {
              return NonEmptyList(Data_Lazy.defer(function(v1) {
                return xxs;
              }));
            })(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function() {
              var $241 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($242) {
                return f($241($242));
              };
            }())(Data_Lazy.force(v)));
          };
        };
      },
      FunctorWithIndex0: function() {
        return functorWithIndexNonEmptyList;
      },
      FoldableWithIndex1: function() {
        return foldableWithIndexNonEmptyList;
      },
      Traversable2: function() {
        return traversableNonEmptyList;
      }
    };
    var unfoldable1List = {
      unfoldr1: function() {
        var go = function(f) {
          return function(b) {
            return Control_Lazy.defer(lazyList)(function(v) {
              var v1 = f(b);
              if (v1.value1 instanceof Data_Maybe.Just) {
                return cons(v1.value0)(go(f)(v1.value1.value0));
              }
              ;
              if (v1.value1 instanceof Data_Maybe.Nothing) {
                return cons(v1.value0)(nil);
              }
              ;
              throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 33): " + [v1.constructor.name]);
            });
          };
        };
        return go;
      }()
    };
    var unfoldableList = {
      unfoldr: function() {
        var go = function(f) {
          return function(b) {
            return Control_Lazy.defer(lazyList)(function(v) {
              var v1 = f(b);
              if (v1 instanceof Data_Maybe.Nothing) {
                return nil;
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                return cons(v1.value0.value0)(go(f)(v1.value0.value1));
              }
              ;
              throw new Error("Failed pattern match at Data.List.Lazy.Types (line 158, column 28 - line 160, column 39): " + [v1.constructor.name]);
            });
          };
        };
        return go;
      }(),
      Unfoldable10: function() {
        return unfoldable1List;
      }
    };
    var unfoldable1NonEmptyList = {
      unfoldr1: function(f) {
        return function(b) {
          return NonEmptyList(Data_Lazy.defer(function(v) {
            return Data_Unfoldable1.unfoldr1(Data_NonEmpty.unfoldable1NonEmpty(unfoldableList))(f)(b);
          }));
        };
      }
    };
    var comonadNonEmptyList = {
      extract: function(v) {
        return Data_NonEmpty.head(Data_Lazy.force(v));
      },
      Extend0: function() {
        return extendNonEmptyList;
      }
    };
    var monadList = {
      Applicative0: function() {
        return applicativeList;
      },
      Bind1: function() {
        return bindList;
      }
    };
    var bindList = {
      bind: function(xs) {
        return function(f) {
          var go = function(v) {
            if (v instanceof Nil) {
              return Nil.value;
            }
            ;
            if (v instanceof Cons) {
              return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 181, column 5 - line 181, column 17): " + [v.constructor.name]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
        };
      },
      Apply0: function() {
        return applyList;
      }
    };
    var applyList = {
      apply: Control_Monad.ap(monadList),
      Functor0: function() {
        return functorList;
      }
    };
    var applicativeList = {
      pure: function(a) {
        return cons(a)(nil);
      },
      Apply0: function() {
        return applyList;
      }
    };
    var applyNonEmptyList = {
      apply: function(v) {
        return function(v1) {
          var v2 = Data_Lazy.force(v1);
          var v3 = Data_Lazy.force(v);
          return Data_Lazy.defer(function(v4) {
            return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
          });
        };
      },
      Functor0: function() {
        return functorNonEmptyList;
      }
    };
    var bindNonEmptyList = {
      bind: function(v) {
        return function(f) {
          var v1 = Data_Lazy.force(v);
          var v2 = Data_Lazy.force(Data_Newtype.unwrap()(f(v1.value0)));
          return Data_Lazy.defer(function(v3) {
            return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function($243) {
              return toList(f($243));
            })));
          });
        };
      },
      Apply0: function() {
        return applyNonEmptyList;
      }
    };
    var altNonEmptyList = {
      alt: Data_Semigroup.append(semigroupNonEmptyList),
      Functor0: function() {
        return functorNonEmptyList;
      }
    };
    var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function() {
        return functorList;
      }
    };
    var plusList = {
      empty: nil,
      Alt0: function() {
        return altList;
      }
    };
    var alternativeList = {
      Applicative0: function() {
        return applicativeList;
      },
      Plus1: function() {
        return plusList;
      }
    };
    var monadPlusList = {
      Monad0: function() {
        return monadList;
      },
      Alternative1: function() {
        return alternativeList;
      }
    };
    var monadZeroList = {
      Monad0: function() {
        return monadList;
      },
      Alternative1: function() {
        return alternativeList;
      },
      MonadZeroIsDeprecated2: function() {
        return void 0;
      }
    };
    var applicativeNonEmptyList = {
      pure: function(a) {
        return Data_Lazy.defer(function(v) {
          return Data_NonEmpty.singleton(plusList)(a);
        });
      },
      Apply0: function() {
        return applyNonEmptyList;
      }
    };
    var monadNonEmptyList = {
      Applicative0: function() {
        return applicativeNonEmptyList;
      },
      Bind1: function() {
        return bindNonEmptyList;
      }
    };
    module2.exports = {
      List,
      Nil,
      Cons,
      step,
      nil,
      cons,
      NonEmptyList,
      toList,
      showStep,
      newtypeList,
      showList,
      eqList,
      eq1List,
      ordList,
      ord1List,
      lazyList,
      semigroupList,
      monoidList,
      functorList,
      functorWithIndexList,
      foldableList,
      foldableWithIndexList,
      unfoldable1List,
      unfoldableList,
      traversableList,
      traversableWithIndexList,
      applyList,
      applicativeList,
      bindList,
      monadList,
      altList,
      plusList,
      alternativeList,
      monadZeroList,
      monadPlusList,
      extendList,
      newtypeNonEmptyList,
      eqNonEmptyList,
      ordNonEmptyList,
      eq1NonEmptyList,
      ord1NonEmptyList,
      showNonEmptyList,
      functorNonEmptyList,
      applyNonEmptyList,
      applicativeNonEmptyList,
      bindNonEmptyList,
      monadNonEmptyList,
      altNonEmptyList,
      extendNonEmptyList,
      comonadNonEmptyList,
      semigroupNonEmptyList,
      foldableNonEmptyList,
      traversableNonEmptyList,
      unfoldable1NonEmptyList,
      functorWithIndexNonEmptyList,
      foldableWithIndexNonEmptyList,
      traversableWithIndexNonEmptyList
    };
  }
});

// output/Data.List.Lazy/index.js
var require_Data_List4 = __commonJS({
  "output/Data.List.Lazy/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Lazy = require_Control8();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Data_Boolean = require_Data();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Lazy = require_Data40();
    var Data_List_Internal = require_Data_List2();
    var Data_List_Lazy_Types = require_Data_List_Lazy();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_NonEmpty = require_Data33();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Pattern = function(x) {
      return x;
    };
    var zipWith = function(f) {
      return function(xs) {
        return function(ys) {
          var go = function(v) {
            return function(v1) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                return Data_List_Lazy_Types.Nil.value;
              }
              ;
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                return Data_List_Lazy_Types.Nil.value;
              }
              ;
              if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
                return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
              }
              ;
              throw new Error("Failed pattern match at Data.List.Lazy (line 705, column 3 - line 705, column 35): " + [v.constructor.name, v1.constructor.name]);
            };
          };
          return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs)))(Data_Newtype.unwrap()(ys));
        };
      };
    };
    var zipWithA = function(dictApplicative) {
      return function(f) {
        return function(xs) {
          return function(ys) {
            return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
          };
        };
      };
    };
    var zip = zipWith(Data_Tuple.Tuple.create);
    var updateAt = function(n) {
      return function(x) {
        return function(xs) {
          var go = function(v) {
            return function(v1) {
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                return Data_List_Lazy_Types.Nil.value;
              }
              ;
              if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                return new Data_List_Lazy_Types.Cons(x, v1.value1);
              }
              ;
              if (v1 instanceof Data_List_Lazy_Types.Cons) {
                return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
              }
              ;
              throw new Error("Failed pattern match at Data.List.Lazy (line 361, column 3 - line 361, column 17): " + [v.constructor.name, v1.constructor.name]);
            };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap()(xs));
        };
      };
    };
    var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function(v) {
      return function(v1) {
        return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
      };
    })(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));
    var uncons = function(xs) {
      var v = Data_List_Lazy_Types.step(xs);
      if (v instanceof Data_List_Lazy_Types.Nil) {
        return Data_Maybe.Nothing.value;
      }
      ;
      if (v instanceof Data_List_Lazy_Types.Cons) {
        return new Data_Maybe.Just({
          head: v.value0,
          tail: v.value1
        });
      }
      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 288, column 13 - line 290, column 44): " + [v.constructor.name]);
    };
    var toUnfoldable = function(dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(rec) {
          return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
      });
    };
    var takeWhile = function(p) {
      var go = function(v) {
        if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
          return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
        }
        ;
        return Data_List_Lazy_Types.Nil.value;
      };
      var $251 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $252 = Data_Newtype.unwrap();
      return function($253) {
        return Data_List_Lazy_Types.List($251($252($253)));
      };
    };
    var take = function(n) {
      var go = function(v) {
        return function(v1) {
          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }
          ;
          if (v1 instanceof Data_List_Lazy_Types.Cons) {
            return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 505, column 3 - line 505, column 32): " + [v.constructor.name, v1.constructor.name]);
        };
      };
      var $122 = n <= 0;
      if ($122) {
        return Data_Function["const"](Data_List_Lazy_Types.nil);
      }
      ;
      var $254 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
      var $255 = Data_Newtype.unwrap();
      return function($256) {
        return Data_List_Lazy_Types.List($254($255($256)));
      };
    };
    var tail = function(xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return v.tail;
      })(uncons(xs));
    };
    var stripPrefix = function(dictEq) {
      return function(v) {
        return function(s) {
          var go = function(prefix) {
            return function(input) {
              var v1 = Data_List_Lazy_Types.step(prefix);
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
              }
              ;
              if (v1 instanceof Data_List_Lazy_Types.Cons) {
                var v2 = Data_List_Lazy_Types.step(input);
                if (v2 instanceof Data_List_Lazy_Types.Cons && Data_Eq.eq(dictEq)(v1.value0)(v2.value0)) {
                  return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                    a: v1.value1,
                    b: v2.value1
                  }));
                }
                ;
                return Data_Maybe.Nothing.value;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Lazy (line 487, column 21 - line 491, column 19): " + [v1.constructor.name]);
            };
          };
          return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
        };
      };
    };
    var span = function(p) {
      return function(xs) {
        var v = uncons(xs);
        if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
          var v1 = span(p)(v.value0.tail);
          return {
            init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init),
            rest: v1.rest
          };
        }
        ;
        return {
          init: Data_List_Lazy_Types.nil,
          rest: xs
        };
      };
    };
    var snoc = function(xs) {
      return function(x) {
        return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
      };
    };
    var singleton = function(a) {
      return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
    };
    var showPattern = function(dictShow) {
      return {
        show: function(v) {
          return "(Pattern " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
        }
      };
    };
    var scanlLazy = function(f) {
      return function(acc) {
        return function(xs) {
          var go = function(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
            }
            ;
            if (v instanceof Data_List_Lazy_Types.Cons) {
              var acc$prime = f(acc)(v.value0);
              return Data_List_Lazy_Types.Cons.create(acc$prime)(scanlLazy(f)(acc$prime)(v.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 776, column 5 - line 776, column 27): " + [v.constructor.name]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
        };
      };
    };
    var reverse = function(xs) {
      return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function(v) {
        return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
      });
    };
    var replicateM = function(dictMonad) {
      return function(n) {
        return function(m) {
          if (n < 1) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
          }
          ;
          if (Data_Boolean.otherwise) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function(a) {
              return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function(as) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(a)(as));
              });
            });
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 164, column 1 - line 164, column 62): " + [n.constructor.name, m.constructor.name]);
        };
      };
    };
    var repeat = function(x) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function(xs) {
        return Data_List_Lazy_Types.cons(x)(xs);
      });
    };
    var replicate = function(i) {
      return function(xs) {
        return take(i)(repeat(xs));
      };
    };
    var range = function(start) {
      return function(end) {
        if (start > end) {
          var g = function(x) {
            if (x >= end) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
            }
            ;
            if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 151, column 13 - line 152, column 38): " + [x.constructor.name]);
          };
          return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
        }
        ;
        if (Data_Boolean.otherwise) {
          var f = function(x) {
            if (x <= end) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
            }
            ;
            if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 156, column 5 - line 157, column 30): " + [x.constructor.name]);
          };
          return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
        }
        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 148, column 1 - line 148, column 32): " + [start.constructor.name, end.constructor.name]);
      };
    };
    var partition = function(f) {
      var go = function(x) {
        return function(v) {
          var $150 = f(x);
          if ($150) {
            return {
              yes: Data_List_Lazy_Types.cons(x)(v.yes),
              no: v.no
            };
          }
          ;
          return {
            yes: v.yes,
            no: Data_List_Lazy_Types.cons(x)(v.no)
          };
        };
      };
      return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(go)({
        yes: Data_List_Lazy_Types.nil,
        no: Data_List_Lazy_Types.nil
      });
    };
    var $$null = function($257) {
      return Data_Maybe.isNothing(uncons($257));
    };
    var nubBy = function(p) {
      var goStep = function(v) {
        return function(v1) {
          if (v1 instanceof Data_List_Lazy_Types.Nil) {
            return Data_List_Lazy_Types.Nil.value;
          }
          ;
          if (v1 instanceof Data_List_Lazy_Types.Cons) {
            var v2 = Data_List_Internal.insertAndLookupBy(p)(v1.value0)(v);
            if (v2.found) {
              return Data_List_Lazy_Types.step(go(v2.result)(v1.value1));
            }
            ;
            return new Data_List_Lazy_Types.Cons(v1.value0, go(v2.result)(v1.value1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 613, column 5 - line 613, column 23): " + [v.constructor.name, v1.constructor.name]);
        };
      };
      var go = function(s) {
        return function(v) {
          return Data_Functor.map(Data_Lazy.functorLazy)(goStep(s))(v);
        };
      };
      return go(Data_List_Internal.emptySet);
    };
    var nub = function(dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
    };
    var newtypePattern = {
      Coercible0: function() {
        return void 0;
      }
    };
    var mapMaybe = function(f) {
      var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
            $tco_done = true;
            return Data_List_Lazy_Types.Nil.value;
          }
          ;
          if (v instanceof Data_List_Lazy_Types.Cons) {
            var v1 = f(v.value0);
            if (v1 instanceof Data_Maybe.Nothing) {
              $copy_v = Data_List_Lazy_Types.step(v.value1);
              return;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              $tco_done = true;
              return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 448, column 5 - line 450, column 39): " + [v1.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 446, column 3 - line 446, column 15): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      var $258 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $259 = Data_Newtype.unwrap();
      return function($260) {
        return Data_List_Lazy_Types.List($258($259($260)));
      };
    };
    var some = function(dictAlternative) {
      return function(dictLazy) {
        return function(v) {
          return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Lazy_Types.cons)(v))(Control_Lazy.defer(dictLazy)(function(v1) {
            return many(dictAlternative)(dictLazy)(v);
          }));
        };
      };
    };
    var many = function(dictAlternative) {
      return function(dictLazy) {
        return function(v) {
          return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Lazy_Types.nil));
        };
      };
    };
    var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function(l) {
      return function(v) {
        return l + 1 | 0;
      };
    })(0);
    var last = function() {
      var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Data_List_Lazy_Types.Cons) {
            if ($$null(v.value1)) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
            }
            ;
            if (Data_Boolean.otherwise) {
              $copy_v = Data_List_Lazy_Types.step(v.value1);
              return;
            }
            ;
          }
          ;
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return function($261) {
        return go(Data_List_Lazy_Types.step($261));
      };
    }();
    var iterate = function(f) {
      return function(x) {
        return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function(xs) {
          return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
        });
      };
    };
    var insertAt = function(v) {
      return function(x) {
        return function(xs) {
          if (v === 0) {
            return Data_List_Lazy_Types.cons(x)(xs);
          }
          ;
          var go = function(v1) {
            if (v1 instanceof Data_List_Lazy_Types.Nil) {
              return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
            }
            ;
            if (v1 instanceof Data_List_Lazy_Types.Cons) {
              return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 340, column 3 - line 340, column 22): " + [v1.constructor.name]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
        };
      };
    };
    var init = function() {
      var go = function(v) {
        if (v instanceof Data_List_Lazy_Types.Cons) {
          if ($$null(v.value1)) {
            return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
          }
          ;
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      return function($262) {
        return go(Data_List_Lazy_Types.step($262));
      };
    }();
    var index = function(xs) {
      var go = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
            }
            ;
            if (v instanceof Data_List_Lazy_Types.Cons) {
              $tco_var_v = Data_List_Lazy_Types.step(v.value1);
              $copy_v1 = v1 - 1 | 0;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 302, column 3 - line 302, column 21): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return go(Data_List_Lazy_Types.step(xs));
    };
    var head = function(xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return v.head;
      })(uncons(xs));
    };
    var transpose = function(xs) {
      var v = uncons(xs);
      if (v instanceof Data_Maybe.Nothing) {
        return xs;
      }
      ;
      if (v instanceof Data_Maybe.Just) {
        var v1 = uncons(v.value0.head);
        if (v1 instanceof Data_Maybe.Nothing) {
          return transpose(v.value0.tail);
        }
        ;
        if (v1 instanceof Data_Maybe.Just) {
          return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
        }
        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 746, column 7 - line 750, column 72): " + [v1.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 742, column 3 - line 750, column 72): " + [v.constructor.name]);
    };
    var groupBy = function(eq) {
      var go = function(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_List_Lazy_Types.Nil.value;
        }
        ;
        if (v instanceof Data_List_Lazy_Types.Cons) {
          var v1 = span(eq(v.value0))(v.value1);
          return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function(v2) {
            return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
          }), groupBy(eq)(v1.rest));
        }
        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 576, column 3 - line 576, column 15): " + [v.constructor.name]);
      };
      var $263 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $264 = Data_Newtype.unwrap();
      return function($265) {
        return Data_List_Lazy_Types.List($263($264($265)));
      };
    };
    var group = function(dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
    };
    var fromStep = function() {
      var $266 = Control_Applicative.pure(Data_Lazy.applicativeLazy);
      return function($267) {
        return Data_List_Lazy_Types.List($266($267));
      };
    }();
    var insertBy = function(cmp) {
      return function(x) {
        return function(xs) {
          var go = function(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
              return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
            }
            ;
            if (v instanceof Data_List_Lazy_Types.Cons) {
              var v1 = cmp(x)(v.value0);
              if (v1 instanceof Data_Ordering.GT) {
                return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
              }
              ;
              return new Data_List_Lazy_Types.Cons(x, fromStep(v));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 238, column 3 - line 238, column 22): " + [v.constructor.name]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
        };
      };
    };
    var insert = function(dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
    };
    var fromFoldable = function(dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
    };
    var foldrLazy = function(dictLazy) {
      return function(op) {
        return function(z) {
          var go = function(xs) {
            var v = Data_List_Lazy_Types.step(xs);
            if (v instanceof Data_List_Lazy_Types.Cons) {
              return Control_Lazy.defer(dictLazy)(function(v1) {
                return op(v.value0)(go(v.value1));
              });
            }
            ;
            if (v instanceof Data_List_Lazy_Types.Nil) {
              return z;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 768, column 13 - line 770, column 15): " + [v.constructor.name]);
          };
          return go;
        };
      };
    };
    var foldM = function(dictMonad) {
      return function(f) {
        return function(b) {
          return function(xs) {
            var v = uncons(xs);
            if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictMonad.Applicative0())(b);
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.head))(function(b$prime) {
                return foldM(dictMonad)(f)(b$prime)(v.value0.tail);
              });
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 759, column 5 - line 762, column 54): " + [v.constructor.name]);
          };
        };
      };
    };
    var findIndex = function(fn) {
      var go = function(n) {
        return function(list) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function(o) {
            var $211 = fn(o.head);
            if ($211) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
            }
            ;
            return go(n + 1 | 0)(o.tail);
          });
        };
      };
      return go(0);
    };
    var findLastIndex = function(fn) {
      return function(xs) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
          return (length(xs) - 1 | 0) - v | 0;
        })(findIndex(fn)(reverse(xs)));
      };
    };
    var filterM = function(dictMonad) {
      return function(p) {
        return function(list) {
          var v = uncons(list);
          if (v instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
          }
          ;
          if (v instanceof Data_Maybe.Just) {
            return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function(b) {
              return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function(xs$prime) {
                return Control_Applicative.pure(dictMonad.Applicative0())(function() {
                  if (b) {
                    return Data_List_Lazy_Types.cons(v.value0.head)(xs$prime);
                  }
                  ;
                  return xs$prime;
                }());
              });
            });
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 431, column 5 - line 436, column 48): " + [v.constructor.name]);
        };
      };
    };
    var filter = function(p) {
      var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
            $tco_done = true;
            return Data_List_Lazy_Types.Nil.value;
          }
          ;
          if (v instanceof Data_List_Lazy_Types.Cons) {
            if (p(v.value0)) {
              $tco_done = true;
              return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
            }
            ;
            if (Data_Boolean.otherwise) {
              $copy_v = Data_List_Lazy_Types.step(v.value1);
              return;
            }
            ;
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy (line 416, column 3 - line 416, column 15): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      var $268 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $269 = Data_Newtype.unwrap();
      return function($270) {
        return Data_List_Lazy_Types.List($268($269($270)));
      };
    };
    var intersectBy = function(eq) {
      return function(xs) {
        return function(ys) {
          return filter(function(x) {
            return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
          })(xs);
        };
      };
    };
    var intersect = function(dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
    };
    var nubByEq = function(eq) {
      var go = function(v) {
        if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_List_Lazy_Types.Nil.value;
        }
        ;
        if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_List_Lazy_Types.Cons(v.value0, nubByEq(eq)(filter(function(y) {
            return !eq(v.value0)(y);
          })(v.value1)));
        }
        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 633, column 3 - line 633, column 15): " + [v.constructor.name]);
      };
      var $271 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $272 = Data_Newtype.unwrap();
      return function($273) {
        return Data_List_Lazy_Types.List($271($272($273)));
      };
    };
    var nubEq = function(dictEq) {
      return nubByEq(Data_Eq.eq(dictEq));
    };
    var eqPattern = function(dictEq) {
      return {
        eq: function(x) {
          return function(y) {
            return Data_Eq.eq(Data_List_Lazy_Types.eqList(dictEq))(x)(y);
          };
        }
      };
    };
    var ordPattern = function(dictOrd) {
      return {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(Data_List_Lazy_Types.ordList(dictOrd))(x)(y);
          };
        },
        Eq0: function() {
          return eqPattern(dictOrd.Eq0());
        }
      };
    };
    var elemLastIndex = function(dictEq) {
      return function(x) {
        return findLastIndex(function(v) {
          return Data_Eq.eq(dictEq)(v)(x);
        });
      };
    };
    var elemIndex = function(dictEq) {
      return function(x) {
        return findIndex(function(v) {
          return Data_Eq.eq(dictEq)(v)(x);
        });
      };
    };
    var dropWhile = function(p) {
      var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
            $copy_v = Data_List_Lazy_Types.step(v.value1);
            return;
          }
          ;
          $tco_done = true;
          return fromStep(v);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return function($274) {
        return go(Data_List_Lazy_Types.step($274));
      };
    };
    var drop = function(n) {
      var go = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v === 0) {
              $tco_done = true;
              return v1;
            }
            ;
            if (v1 instanceof Data_List_Lazy_Types.Nil) {
              $tco_done = true;
              return Data_List_Lazy_Types.Nil.value;
            }
            ;
            if (v1 instanceof Data_List_Lazy_Types.Cons) {
              $tco_var_v = v - 1 | 0;
              $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 524, column 3 - line 524, column 15): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      var $275 = Data_Functor.map(Data_Lazy.functorLazy)(go(n));
      var $276 = Data_Newtype.unwrap();
      return function($277) {
        return Data_List_Lazy_Types.List($275($276($277)));
      };
    };
    var slice = function(start) {
      return function(end) {
        return function(xs) {
          return take(end - start | 0)(drop(start)(xs));
        };
      };
    };
    var deleteBy = function(eq) {
      return function(x) {
        return function(xs) {
          var go = function(v) {
            if (v instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
            }
            ;
            if (v instanceof Data_List_Lazy_Types.Cons) {
              if (eq(x)(v.value0)) {
                return Data_List_Lazy_Types.step(v.value1);
              }
              ;
              if (Data_Boolean.otherwise) {
                return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
              }
              ;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 662, column 3 - line 662, column 15): " + [v.constructor.name]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap()(xs));
        };
      };
    };
    var unionBy = function(eq) {
      return function(xs) {
        return function(ys) {
          return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
        };
      };
    };
    var union = function(dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
    };
    var deleteAt = function(n) {
      return function(xs) {
        var go = function(v) {
          return function(v1) {
            if (v1 instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
            }
            ;
            if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
              return Data_List_Lazy_Types.step(v1.value1);
            }
            ;
            if (v1 instanceof Data_List_Lazy_Types.Cons) {
              return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy (line 350, column 3 - line 350, column 17): " + [v.constructor.name, v1.constructor.name]);
          };
        };
        return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap()(xs));
      };
    };
    var $$delete = function(dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
    };
    var difference = function(dictEq) {
      return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
    };
    var cycle = function(xs) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function(ys) {
        return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
      });
    };
    var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));
    var concat = function(v) {
      return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
    };
    var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
    var alterAt = function(n) {
      return function(f) {
        return function(xs) {
          var go = function(v) {
            return function(v1) {
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                return Data_List_Lazy_Types.Nil.value;
              }
              ;
              if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                var v2 = f(v1.value0);
                if (v2 instanceof Data_Maybe.Nothing) {
                  return Data_List_Lazy_Types.step(v1.value1);
                }
                ;
                if (v2 instanceof Data_Maybe.Just) {
                  return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
                }
                ;
                throw new Error("Failed pattern match at Data.List.Lazy (line 382, column 22 - line 384, column 26): " + [v2.constructor.name]);
              }
              ;
              if (v1 instanceof Data_List_Lazy_Types.Cons) {
                return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
              }
              ;
              throw new Error("Failed pattern match at Data.List.Lazy (line 381, column 3 - line 381, column 17): " + [v.constructor.name, v1.constructor.name]);
            };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap()(xs));
        };
      };
    };
    var modifyAt = function(n) {
      return function(f) {
        return alterAt(n)(function($278) {
          return Data_Maybe.Just.create(f($278));
        });
      };
    };
    module2.exports = {
      toUnfoldable,
      fromFoldable,
      singleton,
      range,
      replicate,
      replicateM,
      some,
      many,
      repeat,
      iterate,
      cycle,
      "null": $$null,
      length,
      snoc,
      insert,
      insertBy,
      head,
      last,
      tail,
      init,
      uncons,
      index,
      elemIndex,
      elemLastIndex,
      findIndex,
      findLastIndex,
      insertAt,
      deleteAt,
      updateAt,
      modifyAt,
      alterAt,
      reverse,
      concat,
      concatMap,
      filter,
      filterM,
      mapMaybe,
      catMaybes,
      Pattern,
      stripPrefix,
      slice,
      take,
      takeWhile,
      drop,
      dropWhile,
      span,
      group,
      groupBy,
      partition,
      nub,
      nubBy,
      nubEq,
      nubByEq,
      union,
      unionBy,
      "delete": $$delete,
      deleteBy,
      difference,
      intersect,
      intersectBy,
      zipWith,
      zipWithA,
      zip,
      unzip,
      transpose,
      foldM,
      foldrLazy,
      scanlLazy,
      eqPattern,
      ordPattern,
      newtypePattern,
      showPattern,
      all: Data_Foldable.all,
      any: Data_Foldable.any,
      elem: Data_Foldable.elem,
      find: Data_Foldable.find,
      findMap: Data_Foldable.findMap,
      fold: Data_Foldable.fold,
      foldMap: Data_Foldable.foldMap,
      foldl: Data_Foldable.foldl,
      foldr: Data_Foldable.foldr,
      intercalate: Data_Foldable.intercalate,
      notElem: Data_Foldable.notElem,
      List: Data_List_Lazy_Types.List,
      Cons: Data_List_Lazy_Types.Cons,
      Nil: Data_List_Lazy_Types.Nil,
      cons: Data_List_Lazy_Types.cons,
      nil: Data_List_Lazy_Types.nil,
      step: Data_List_Lazy_Types.step,
      scanl: Data_Traversable.scanl,
      scanr: Data_Traversable.scanr
    };
  }
});

// output/Data.Map.Internal/index.js
var require_Data_Map = __commonJS({
  "output/Data.Map.Internal/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Category = require_Control2();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_FoldableWithIndex = require_Data28();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_FunctorWithIndex = require_Data27();
    var Data_HeytingAlgebra = require_Data21();
    var Data_List = require_Data38();
    var Data_List_Lazy = require_Data_List4();
    var Data_List_Lazy_Types = require_Data_List_Lazy();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_TraversableWithIndex = require_Data30();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Leaf = function() {
      function Leaf2() {
      }
      ;
      Leaf2.value = new Leaf2();
      return Leaf2;
    }();
    var Two = function() {
      function Two2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      Two2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new Two2(value0, value1, value2, value3);
            };
          };
        };
      };
      return Two2;
    }();
    var Three = function() {
      function Three2(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
      }
      ;
      Three2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return function(value4) {
                return function(value5) {
                  return function(value6) {
                    return new Three2(value0, value1, value2, value3, value4, value5, value6);
                  };
                };
              };
            };
          };
        };
      };
      return Three2;
    }();
    var TwoLeft = function() {
      function TwoLeft2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TwoLeft2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TwoLeft2(value0, value1, value2);
          };
        };
      };
      return TwoLeft2;
    }();
    var TwoRight = function() {
      function TwoRight2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TwoRight2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TwoRight2(value0, value1, value2);
          };
        };
      };
      return TwoRight2;
    }();
    var ThreeLeft = function() {
      function ThreeLeft2(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
      }
      ;
      ThreeLeft2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return function(value4) {
                return function(value5) {
                  return new ThreeLeft2(value0, value1, value2, value3, value4, value5);
                };
              };
            };
          };
        };
      };
      return ThreeLeft2;
    }();
    var ThreeMiddle = function() {
      function ThreeMiddle2(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
      }
      ;
      ThreeMiddle2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return function(value4) {
                return function(value5) {
                  return new ThreeMiddle2(value0, value1, value2, value3, value4, value5);
                };
              };
            };
          };
        };
      };
      return ThreeMiddle2;
    }();
    var ThreeRight = function() {
      function ThreeRight2(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
      }
      ;
      ThreeRight2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return function(value4) {
                return function(value5) {
                  return new ThreeRight2(value0, value1, value2, value3, value4, value5);
                };
              };
            };
          };
        };
      };
      return ThreeRight2;
    }();
    var KickUp = function() {
      function KickUp2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      KickUp2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new KickUp2(value0, value1, value2, value3);
            };
          };
        };
      };
      return KickUp2;
    }();
    var values = function(v) {
      if (v instanceof Leaf) {
        return Data_List_Types.Nil.value;
      }
      ;
      if (v instanceof Two) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      }
      ;
      if (v instanceof Three) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [v.constructor.name]);
    };
    var size = function(v) {
      if (v instanceof Leaf) {
        return 0;
      }
      ;
      if (v instanceof Two) {
        return (1 + size(v.value0) | 0) + size(v.value3) | 0;
      }
      ;
      if (v instanceof Three) {
        return ((2 + size(v.value0) | 0) + size(v.value3) | 0) + size(v.value6) | 0;
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 676, column 1 - line 676, column 35): " + [v.constructor.name]);
    };
    var singleton = function(k) {
      return function(v) {
        return new Two(Leaf.value, k, v, Leaf.value);
      };
    };
    var toUnfoldable = function(dictUnfoldable) {
      return function(m) {
        var go = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              if (v.value0 instanceof Leaf) {
                $copy_v = v.value1;
                return;
              }
              ;
              if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                $tco_done = true;
                return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
              }
              ;
              if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                $tco_done = true;
                return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
              }
              ;
              if (v.value0 instanceof Two) {
                $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                return;
              }
              ;
              if (v.value0 instanceof Three) {
                $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [v.value0.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
    };
    var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
    var toUnfoldableUnordered = function(dictUnfoldable) {
      return function(m) {
        var go = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              if (v.value0 instanceof Leaf) {
                $copy_v = v.value1;
                return;
              }
              ;
              if (v.value0 instanceof Two) {
                $tco_done = true;
                return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, v.value1))));
              }
              ;
              if (v.value0 instanceof Three) {
                $tco_done = true;
                return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(v.value0.value6, v.value1))))));
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 18 - line 617, column 77): " + [v.value0.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 611, column 3 - line 611, column 19): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
    };
    var showTree = function(dictShow) {
      return function(dictShow1) {
        return function(v) {
          if (v instanceof Leaf) {
            return "Leaf";
          }
          ;
          if (v instanceof Two) {
            return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
          }
          ;
          if (v instanceof Three) {
            return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 164, column 1 - line 164, column 62): " + [v.constructor.name]);
        };
      };
    };
    var showMap = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(m) {
            return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
          }
        };
      };
    };
    var lookupLE = function(dictOrd) {
      return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function(v) {
          if (v instanceof Leaf) {
            return Data_Maybe.Nothing.value;
          }
          ;
          if (v instanceof Two) {
            var v2 = comp(k)(v.value1);
            if (v2 instanceof Data_Ordering.EQ) {
              return new Data_Maybe.Just({
                key: v.value1,
                value: v.value2
              });
            }
            ;
            if (v2 instanceof Data_Ordering.GT) {
              return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                key: v.value1,
                value: v.value2
              })(go(v.value3)));
            }
            ;
            if (v2 instanceof Data_Ordering.LT) {
              return go(v.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 236, column 33 - line 239, column 20): " + [v2.constructor.name]);
          }
          ;
          if (v instanceof Three) {
            var v3 = comp(k)(v.value4);
            if (v3 instanceof Data_Ordering.EQ) {
              return new Data_Maybe.Just({
                key: v.value4,
                value: v.value5
              });
            }
            ;
            if (v3 instanceof Data_Ordering.GT) {
              return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                key: v.value4,
                value: v.value5
              })(go(v.value6)));
            }
            ;
            if (v3 instanceof Data_Ordering.LT) {
              return go(new Two(v.value0, v.value1, v.value2, v.value3));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 240, column 45 - line 243, column 36): " + [v3.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 235, column 5 - line 235, column 22): " + [v.constructor.name]);
        };
        return go;
      };
    };
    var lookupGE = function(dictOrd) {
      return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function(v) {
          if (v instanceof Leaf) {
            return Data_Maybe.Nothing.value;
          }
          ;
          if (v instanceof Two) {
            var v2 = comp(k)(v.value1);
            if (v2 instanceof Data_Ordering.EQ) {
              return new Data_Maybe.Just({
                key: v.value1,
                value: v.value2
              });
            }
            ;
            if (v2 instanceof Data_Ordering.LT) {
              return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                key: v.value1,
                value: v.value2
              })(go(v.value0)));
            }
            ;
            if (v2 instanceof Data_Ordering.GT) {
              return go(v.value3);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 270, column 33 - line 273, column 21): " + [v2.constructor.name]);
          }
          ;
          if (v instanceof Three) {
            var v3 = comp(k)(v.value1);
            if (v3 instanceof Data_Ordering.EQ) {
              return new Data_Maybe.Just({
                key: v.value1,
                value: v.value2
              });
            }
            ;
            if (v3 instanceof Data_Ordering.LT) {
              return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                key: v.value1,
                value: v.value2
              })(go(v.value0)));
            }
            ;
            if (v3 instanceof Data_Ordering.GT) {
              return go(new Two(v.value3, v.value4, v.value5, v.value6));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 274, column 45 - line 277, column 37): " + [v3.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 269, column 5 - line 269, column 22): " + [v.constructor.name]);
        };
        return go;
      };
    };
    var lookup = function(dictOrd) {
      return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof Leaf) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            if (v instanceof Two) {
              var v2 = comp(k)(v.value1);
              if (v2 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return new Data_Maybe.Just(v.value2);
              }
              ;
              if (v2 instanceof Data_Ordering.LT) {
                $copy_v = v.value0;
                return;
              }
              ;
              $copy_v = v.value3;
              return;
            }
            ;
            if (v instanceof Three) {
              var v3 = comp(k)(v.value1);
              if (v3 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return new Data_Maybe.Just(v.value2);
              }
              ;
              var v4 = comp(k)(v.value4);
              if (v4 instanceof Data_Ordering.EQ) {
                $tco_done = true;
                return new Data_Maybe.Just(v.value5);
              }
              ;
              if (v3 instanceof Data_Ordering.LT) {
                $copy_v = v.value0;
                return;
              }
              ;
              if (v4 instanceof Data_Ordering.GT) {
                $copy_v = v.value6;
                return;
              }
              ;
              $copy_v = v.value3;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return go;
      };
    };
    var member = function(dictOrd) {
      return function(k) {
        return function(m) {
          return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
        };
      };
    };
    var keys = function(v) {
      if (v instanceof Leaf) {
        return Data_List_Types.Nil.value;
      }
      ;
      if (v instanceof Two) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      }
      ;
      if (v instanceof Three) {
        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [v.constructor.name]);
    };
    var isSubmap = function(dictOrd) {
      return function(dictEq) {
        return function(m1) {
          return function(m2) {
            var f = function(v) {
              return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(lookup(dictOrd)(v.value0)(m2))(new Data_Maybe.Just(v.value1));
            };
            return Data_Foldable.all(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f)(toUnfoldable(Data_List_Lazy_Types.unfoldableList)(m1));
          };
        };
      };
    };
    var isEmpty = function(v) {
      if (v instanceof Leaf) {
        return true;
      }
      ;
      return false;
    };
    var functorMap = {
      map: function(v) {
        return function(v1) {
          if (v1 instanceof Leaf) {
            return Leaf.value;
          }
          ;
          if (v1 instanceof Two) {
            return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          }
          ;
          if (v1 instanceof Three) {
            return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [v.constructor.name, v1.constructor.name]);
        };
      }
    };
    var functorWithIndexMap = {
      mapWithIndex: function(v) {
        return function(v1) {
          if (v1 instanceof Leaf) {
            return Leaf.value;
          }
          ;
          if (v1 instanceof Two) {
            return new Two(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3));
          }
          ;
          if (v1 instanceof Three) {
            return new Three(Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value0), v1.value1, v(v1.value1)(v1.value2), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value3), v1.value4, v(v1.value4)(v1.value5), Data_FunctorWithIndex.mapWithIndex(functorWithIndexMap)(v)(v1.value6));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 106, column 1 - line 109, column 152): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Functor0: function() {
        return functorMap;
      }
    };
    var fromZipper = function($copy_dictOrd) {
      return function($copy_v) {
        return function($copy_tree) {
          var $tco_var_dictOrd = $copy_dictOrd;
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(dictOrd, v, tree) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return tree;
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              if (v.value0 instanceof TwoLeft) {
                $tco_var_dictOrd = dictOrd;
                $tco_var_v = v.value1;
                $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                return;
              }
              ;
              if (v.value0 instanceof TwoRight) {
                $tco_var_dictOrd = dictOrd;
                $tco_var_v = v.value1;
                $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                return;
              }
              ;
              if (v.value0 instanceof ThreeLeft) {
                $tco_var_dictOrd = dictOrd;
                $tco_var_v = v.value1;
                $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                return;
              }
              ;
              if (v.value0 instanceof ThreeMiddle) {
                $tco_var_dictOrd = dictOrd;
                $tco_var_v = v.value1;
                $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                return;
              }
              ;
              if (v.value0 instanceof ThreeRight) {
                $tco_var_dictOrd = dictOrd;
                $tco_var_v = v.value1;
                $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [v.value0.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [v.constructor.name, tree.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
          }
          ;
          return $tco_result;
        };
      };
    };
    var insert = function(dictOrd) {
      return function(k) {
        return function(v) {
          var up = function($copy_v1) {
            return function($copy_v2) {
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v1, v2) {
                if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                }
                ;
                if (v1 instanceof Data_List_Types.Cons) {
                  if (v1.value0 instanceof TwoLeft) {
                    $tco_done = true;
                    return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                  }
                  ;
                  if (v1.value0 instanceof TwoRight) {
                    $tco_done = true;
                    return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                  }
                  ;
                  if (v1.value0 instanceof ThreeLeft) {
                    $tco_var_v1 = v1.value1;
                    $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                    return;
                  }
                  ;
                  if (v1.value0 instanceof ThreeMiddle) {
                    $tco_var_v1 = v1.value1;
                    $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                    return;
                  }
                  ;
                  if (v1.value0 instanceof ThreeRight) {
                    $tco_var_v1 = v1.value1;
                    $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [v1.value0.constructor.name, v2.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [v1.constructor.name, v2.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v1, $copy_v2);
              }
              ;
              return $tco_result;
            };
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function($copy_ctx) {
            return function($copy_v1) {
              var $tco_var_ctx = $copy_ctx;
              var $tco_done1 = false;
              var $tco_result;
              function $tco_loop(ctx, v1) {
                if (v1 instanceof Leaf) {
                  $tco_done1 = true;
                  return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                }
                ;
                if (v1 instanceof Two) {
                  var v2 = comp(k)(v1.value1);
                  if (v2 instanceof Data_Ordering.EQ) {
                    $tco_done1 = true;
                    return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                  }
                  ;
                  if (v2 instanceof Data_Ordering.LT) {
                    $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                    $copy_v1 = v1.value0;
                    return;
                  }
                  ;
                  $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                  $copy_v1 = v1.value3;
                  return;
                }
                ;
                if (v1 instanceof Three) {
                  var v3 = comp(k)(v1.value1);
                  if (v3 instanceof Data_Ordering.EQ) {
                    $tco_done1 = true;
                    return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                  }
                  ;
                  var v4 = comp(k)(v1.value4);
                  if (v4 instanceof Data_Ordering.EQ) {
                    $tco_done1 = true;
                    return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                  }
                  ;
                  if (v3 instanceof Data_Ordering.LT) {
                    $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                    $copy_v1 = v1.value0;
                    return;
                  }
                  ;
                  if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                    $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                    $copy_v1 = v1.value3;
                    return;
                  }
                  ;
                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                  $copy_v1 = v1.value6;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ctx.constructor.name, v1.constructor.name]);
              }
              ;
              while (!$tco_done1) {
                $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
          return down(Data_List_Types.Nil.value);
        };
      };
    };
    var pop = function(dictOrd) {
      return function(k) {
        var up = function($copy_ctxs) {
          return function($copy_tree) {
            var $tco_var_ctxs = $copy_ctxs;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(ctxs, tree) {
              if (ctxs instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return tree;
              }
              ;
              if (ctxs instanceof Data_List_Types.Cons) {
                if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                }
                ;
                if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                }
                ;
                if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                  $tco_var_ctxs = ctxs.value1;
                  $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                  return;
                }
                ;
                if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                  $tco_var_ctxs = ctxs.value1;
                  $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                  return;
                }
                ;
                if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                }
                ;
                if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                }
                ;
                if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                }
                ;
                if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                }
                ;
                if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                }
                ;
                if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                }
                ;
                if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                }
                ;
                if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                }
                ;
                if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                }
                ;
                if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                }
                ;
                if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                }
                ;
                if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                }
                ;
                if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                  $tco_done = true;
                  return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                }
                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ctxs.value0.constructor.name, tree.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ctxs.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
            }
            ;
            return $tco_result;
          };
        };
        var removeMaxNode = function($copy_ctx) {
          return function($copy_m) {
            var $tco_var_ctx = $copy_ctx;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(ctx, m) {
              if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                $tco_done1 = true;
                return up(ctx)(Leaf.value);
              }
              ;
              if (m instanceof Two) {
                $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                $copy_m = m.value3;
                return;
              }
              ;
              if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                $tco_done1 = true;
                return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
              }
              ;
              if (m instanceof Three) {
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                $copy_m = m.value6;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [m.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_ctx, $copy_m);
            }
            ;
            return $tco_result;
          };
        };
        var maxNode = function($copy_m) {
          var $tco_done2 = false;
          var $tco_result;
          function $tco_loop(m) {
            if (m instanceof Two && m.value3 instanceof Leaf) {
              $tco_done2 = true;
              return {
                key: m.value1,
                value: m.value2
              };
            }
            ;
            if (m instanceof Two) {
              $copy_m = m.value3;
              return;
            }
            ;
            if (m instanceof Three && m.value6 instanceof Leaf) {
              $tco_done2 = true;
              return {
                key: m.value4,
                value: m.value5
              };
            }
            ;
            if (m instanceof Three) {
              $copy_m = m.value6;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [m.constructor.name]);
          }
          ;
          while (!$tco_done2) {
            $tco_result = $tco_loop($copy_m);
          }
          ;
          return $tco_result;
        };
        var comp = Data_Ord.compare(dictOrd);
        var down = function($copy_ctx) {
          return function($copy_m) {
            var $tco_var_ctx = $copy_ctx;
            var $tco_done3 = false;
            var $tco_result;
            function $tco_loop(ctx, m) {
              if (m instanceof Leaf) {
                $tco_done3 = true;
                return Data_Maybe.Nothing.value;
              }
              ;
              if (m instanceof Two) {
                var v = comp(k)(m.value1);
                if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                  $tco_done3 = true;
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                }
                ;
                if (v instanceof Data_Ordering.EQ) {
                  var max = maxNode(m.value0);
                  $tco_done3 = true;
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                }
                ;
                if (v instanceof Data_Ordering.LT) {
                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                  $copy_m = m.value0;
                  return;
                }
                ;
                $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                $copy_m = m.value3;
                return;
              }
              ;
              if (m instanceof Three) {
                var leaves = function() {
                  if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                    return true;
                  }
                  ;
                  return false;
                }();
                var v = comp(k)(m.value4);
                var v3 = comp(k)(m.value1);
                if (leaves && v3 instanceof Data_Ordering.EQ) {
                  $tco_done3 = true;
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                }
                ;
                if (leaves && v instanceof Data_Ordering.EQ) {
                  $tco_done3 = true;
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                }
                ;
                if (v3 instanceof Data_Ordering.EQ) {
                  var max = maxNode(m.value0);
                  $tco_done3 = true;
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                }
                ;
                if (v instanceof Data_Ordering.EQ) {
                  var max = maxNode(m.value3);
                  $tco_done3 = true;
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                }
                ;
                if (v3 instanceof Data_Ordering.LT) {
                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                  $copy_m = m.value0;
                  return;
                }
                ;
                if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                  $copy_m = m.value3;
                  return;
                }
                ;
                $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                $copy_m = m.value6;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [m.constructor.name]);
            }
            ;
            while (!$tco_done3) {
              $tco_result = $tco_loop($tco_var_ctx, $copy_m);
            }
            ;
            return $tco_result;
          };
        };
        return down(Data_List_Types.Nil.value);
      };
    };
    var foldableMap = {
      foldl: function(f) {
        return function(z) {
          return function(m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
        };
      },
      foldr: function(f) {
        return function(z) {
          return function(m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
        };
      }
    };
    var traversableMap = {
      traverse: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Leaf) {
              return Control_Applicative.pure(dictApplicative)(Leaf.value);
            }
            ;
            if (v1 instanceof Two) {
              return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value0)))(Control_Applicative.pure(dictApplicative)(v1.value1)))(v(v1.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value3));
            }
            ;
            if (v1 instanceof Three) {
              return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value0)))(Control_Applicative.pure(dictApplicative)(v1.value1)))(v(v1.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value3)))(Control_Applicative.pure(dictApplicative)(v1.value4)))(v(v1.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value6));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 127, column 1 - line 142, column 31): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      },
      sequence: function(dictApplicative) {
        return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function() {
        return functorMap;
      },
      Foldable1: function() {
        return foldableMap;
      }
    };
    var foldSubmapBy = function(dictOrd) {
      return function(appendFn) {
        return function(memptyValue) {
          return function(kmin) {
            return function(kmax) {
              return function(f) {
                var tooSmall = function() {
                  if (kmin instanceof Data_Maybe.Just) {
                    return function(k) {
                      return Data_Ord.lessThan(dictOrd)(k)(kmin.value0);
                    };
                  }
                  ;
                  if (kmin instanceof Data_Maybe.Nothing) {
                    return Data_Function["const"](false);
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Map.Internal (line 333, column 7 - line 337, column 22): " + [kmin.constructor.name]);
                }();
                var tooLarge = function() {
                  if (kmax instanceof Data_Maybe.Just) {
                    return function(k) {
                      return Data_Ord.greaterThan(dictOrd)(k)(kmax.value0);
                    };
                  }
                  ;
                  if (kmax instanceof Data_Maybe.Nothing) {
                    return Data_Function["const"](false);
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Map.Internal (line 340, column 7 - line 344, column 22): " + [kmax.constructor.name]);
                }();
                var inBounds = function() {
                  if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Just) {
                    return function(k) {
                      return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k) && Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                    };
                  }
                  ;
                  if (kmin instanceof Data_Maybe.Just && kmax instanceof Data_Maybe.Nothing) {
                    return function(k) {
                      return Data_Ord.lessThanOrEq(dictOrd)(kmin.value0)(k);
                    };
                  }
                  ;
                  if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Just) {
                    return function(k) {
                      return Data_Ord.lessThanOrEq(dictOrd)(k)(kmax.value0);
                    };
                  }
                  ;
                  if (kmin instanceof Data_Maybe.Nothing && kmax instanceof Data_Maybe.Nothing) {
                    return Data_Function["const"](true);
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Map.Internal (line 347, column 7 - line 355, column 21): " + [kmin.constructor.name, kmax.constructor.name]);
                }();
                var go = function(v) {
                  if (v instanceof Leaf) {
                    return memptyValue;
                  }
                  ;
                  if (v instanceof Two) {
                    return appendFn(appendFn(function() {
                      var $639 = tooSmall(v.value1);
                      if ($639) {
                        return memptyValue;
                      }
                      ;
                      return go(v.value0);
                    }())(function() {
                      var $640 = inBounds(v.value1);
                      if ($640) {
                        return f(v.value1)(v.value2);
                      }
                      ;
                      return memptyValue;
                    }()))(function() {
                      var $641 = tooLarge(v.value1);
                      if ($641) {
                        return memptyValue;
                      }
                      ;
                      return go(v.value3);
                    }());
                  }
                  ;
                  if (v instanceof Three) {
                    return appendFn(appendFn(appendFn(appendFn(function() {
                      var $646 = tooSmall(v.value1);
                      if ($646) {
                        return memptyValue;
                      }
                      ;
                      return go(v.value0);
                    }())(function() {
                      var $647 = inBounds(v.value1);
                      if ($647) {
                        return f(v.value1)(v.value2);
                      }
                      ;
                      return memptyValue;
                    }()))(function() {
                      var $648 = tooSmall(v.value4) || tooLarge(v.value1);
                      if ($648) {
                        return memptyValue;
                      }
                      ;
                      return go(v.value3);
                    }()))(function() {
                      var $649 = inBounds(v.value4);
                      if ($649) {
                        return f(v.value4)(v.value5);
                      }
                      ;
                      return memptyValue;
                    }()))(function() {
                      var $650 = tooLarge(v.value4);
                      if ($650) {
                        return memptyValue;
                      }
                      ;
                      return go(v.value6);
                    }());
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Map.Internal (line 373, column 10 - line 385, column 67): " + [v.constructor.name]);
                };
                return go;
              };
            };
          };
        };
      };
    };
    var foldSubmap = function(dictOrd) {
      return function(dictMonoid) {
        return foldSubmapBy(dictOrd)(Data_Semigroup.append(dictMonoid.Semigroup0()))(Data_Monoid.mempty(dictMonoid));
      };
    };
    var findMin = function() {
      var go = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v1 instanceof Leaf) {
              $tco_done = true;
              return v;
            }
            ;
            if (v1 instanceof Two) {
              $tco_var_v = new Data_Maybe.Just({
                key: v1.value1,
                value: v1.value2
              });
              $copy_v1 = v1.value0;
              return;
            }
            ;
            if (v1 instanceof Three) {
              $tco_var_v = new Data_Maybe.Just({
                key: v1.value1,
                value: v1.value2
              });
              $copy_v1 = v1.value0;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 308, column 5 - line 308, column 22): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return go(Data_Maybe.Nothing.value);
    }();
    var lookupGT = function(dictOrd) {
      return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function(v) {
          if (v instanceof Leaf) {
            return Data_Maybe.Nothing.value;
          }
          ;
          if (v instanceof Two) {
            var v2 = comp(k)(v.value1);
            if (v2 instanceof Data_Ordering.EQ) {
              return findMin(v.value3);
            }
            ;
            if (v2 instanceof Data_Ordering.LT) {
              return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                key: v.value1,
                value: v.value2
              })(go(v.value0)));
            }
            ;
            if (v2 instanceof Data_Ordering.GT) {
              return go(v.value3);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 287, column 33 - line 290, column 21): " + [v2.constructor.name]);
          }
          ;
          if (v instanceof Three) {
            var v3 = comp(k)(v.value1);
            if (v3 instanceof Data_Ordering.EQ) {
              return findMin(new Two(v.value3, v.value4, v.value5, v.value6));
            }
            ;
            if (v3 instanceof Data_Ordering.LT) {
              return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                key: v.value1,
                value: v.value2
              })(go(v.value0)));
            }
            ;
            if (v3 instanceof Data_Ordering.GT) {
              return go(new Two(v.value3, v.value4, v.value5, v.value6));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 291, column 45 - line 294, column 37): " + [v3.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 286, column 5 - line 286, column 22): " + [v.constructor.name]);
        };
        return go;
      };
    };
    var findMax = function() {
      var go = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v1 instanceof Leaf) {
              $tco_done = true;
              return v;
            }
            ;
            if (v1 instanceof Two) {
              $tco_var_v = new Data_Maybe.Just({
                key: v1.value1,
                value: v1.value2
              });
              $copy_v1 = v1.value3;
              return;
            }
            ;
            if (v1 instanceof Three) {
              $tco_var_v = new Data_Maybe.Just({
                key: v1.value4,
                value: v1.value5
              });
              $copy_v1 = v1.value6;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 300, column 5 - line 300, column 22): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return go(Data_Maybe.Nothing.value);
    }();
    var lookupLT = function(dictOrd) {
      return function(k) {
        var comp = Data_Ord.compare(dictOrd);
        var go = function(v) {
          if (v instanceof Leaf) {
            return Data_Maybe.Nothing.value;
          }
          ;
          if (v instanceof Two) {
            var v2 = comp(k)(v.value1);
            if (v2 instanceof Data_Ordering.EQ) {
              return findMax(v.value0);
            }
            ;
            if (v2 instanceof Data_Ordering.GT) {
              return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                key: v.value1,
                value: v.value2
              })(go(v.value3)));
            }
            ;
            if (v2 instanceof Data_Ordering.LT) {
              return go(v.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 253, column 33 - line 256, column 20): " + [v2.constructor.name]);
          }
          ;
          if (v instanceof Three) {
            var v3 = comp(k)(v.value4);
            if (v3 instanceof Data_Ordering.EQ) {
              return findMax(new Two(v.value0, v.value1, v.value2, v.value3));
            }
            ;
            if (v3 instanceof Data_Ordering.GT) {
              return Data_Maybe.Just.create(Data_Maybe.fromMaybe({
                key: v.value4,
                value: v.value5
              })(go(v.value6)));
            }
            ;
            if (v3 instanceof Data_Ordering.LT) {
              return go(new Two(v.value0, v.value1, v.value2, v.value3));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 257, column 45 - line 260, column 36): " + [v3.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 252, column 5 - line 252, column 22): " + [v.constructor.name]);
        };
        return go;
      };
    };
    var eqMap = function(dictEq) {
      return function(dictEq1) {
        return {
          eq: function(m1) {
            return function(m2) {
              return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
            };
          }
        };
      };
    };
    var ordMap = function(dictOrd) {
      return function(dictOrd1) {
        return {
          compare: function(m1) {
            return function(m2) {
              return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
            };
          },
          Eq0: function() {
            return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
          }
        };
      };
    };
    var eq1Map = function(dictEq) {
      return {
        eq1: function(dictEq1) {
          return Data_Eq.eq(eqMap(dictEq)(dictEq1));
        }
      };
    };
    var ord1Map = function(dictOrd) {
      return {
        compare1: function(dictOrd1) {
          return Data_Ord.compare(ordMap(dictOrd)(dictOrd1));
        },
        Eq10: function() {
          return eq1Map(dictOrd.Eq0());
        }
      };
    };
    var empty = Leaf.value;
    var fromFoldable = function(dictOrd) {
      return function(dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(function(m) {
          return function(v) {
            return insert(dictOrd)(v.value0)(v.value1)(m);
          };
        })(empty);
      };
    };
    var filterWithKey = function(dictOrd) {
      return function(predicate) {
        var $764 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
        var $765 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
        var $766 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
        return function($767) {
          return $764($765($766($767)));
        };
      };
    };
    var filter = function(dictOrd) {
      return function(predicate) {
        return filterWithKey(dictOrd)(Data_Function["const"](predicate));
      };
    };
    var filterKeys = function(dictOrd) {
      return function(predicate) {
        return filterWithKey(dictOrd)(function($768) {
          return Data_Function["const"](predicate($768));
        });
      };
    };
    var fromFoldableWithIndex = function(dictOrd) {
      return function(dictFoldableWithIndex) {
        return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function(k) {
          return function(m) {
            return function(v) {
              return insert(dictOrd)(k)(v)(m);
            };
          };
        })(empty);
      };
    };
    var intersectionWith = function(dictOrd) {
      return function(f) {
        return function(m1) {
          return function(m2) {
            var go = function($copy_v) {
              return function($copy_v1) {
                return function($copy_m) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1, m) {
                    if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return m;
                    }
                    ;
                    if (v1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return m;
                    }
                    ;
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                      var v2 = Data_Ord.compare(dictOrd)(v.value0.value0)(v1.value0.value0);
                      if (v2 instanceof Data_Ordering.LT) {
                        $tco_var_v = v.value1;
                        $tco_var_v1 = v1;
                        $copy_m = m;
                        return;
                      }
                      ;
                      if (v2 instanceof Data_Ordering.EQ) {
                        $tco_var_v = v.value1;
                        $tco_var_v1 = v1.value1;
                        $copy_m = insert(dictOrd)(v.value0.value0)(f(v.value0.value1)(v1.value0.value1))(m);
                        return;
                      }
                      ;
                      if (v2 instanceof Data_Ordering.GT) {
                        $tco_var_v = v;
                        $tco_var_v1 = v1.value1;
                        $copy_m = m;
                        return;
                      }
                      ;
                      throw new Error("Failed pattern match at Data.Map.Internal (line 655, column 5 - line 658, column 27): " + [v2.constructor.name]);
                    }
                    ;
                    throw new Error("Failed pattern match at Data.Map.Internal (line 652, column 3 - line 652, column 17): " + [v.constructor.name, v1.constructor.name, m.constructor.name]);
                  }
                  ;
                  while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_m);
                  }
                  ;
                  return $tco_result;
                };
              };
            };
            return go(toUnfoldable(Data_List_Types.unfoldableList)(m1))(toUnfoldable(Data_List_Types.unfoldableList)(m2))(empty);
          };
        };
      };
    };
    var intersection = function(dictOrd) {
      return intersectionWith(dictOrd)(Data_Function["const"]);
    };
    var $$delete = function(dictOrd) {
      return function(k) {
        return function(m) {
          return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
        };
      };
    };
    var difference = function(dictOrd) {
      return function(m1) {
        return function(m2) {
          return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(m1)(keys(m2));
        };
      };
    };
    var checkValid = function(tree) {
      var allHeights = function(v) {
        if (v instanceof Leaf) {
          return Control_Applicative.pure(Data_List_Types.applicativeList)(0);
        }
        ;
        if (v instanceof Two) {
          return Data_Functor.map(Data_List_Types.functorList)(function(n) {
            return n + 1 | 0;
          })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
        }
        ;
        if (v instanceof Three) {
          return Data_Functor.map(Data_List_Types.functorList)(function(n) {
            return n + 1 | 0;
          })(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 199, column 3 - line 199, column 36): " + [v.constructor.name]);
      };
      return Data_List.length(Data_List.nub(Data_Ord.ordInt)(allHeights(tree))) === 1;
    };
    var asList = Control_Category.identity(Control_Category.categoryFn);
    var foldableWithIndexMap = {
      foldlWithIndex: function(f) {
        return function(z) {
          return function(m) {
            return Data_Foldable.foldl(Data_List_Types.foldableList)(function() {
              var $769 = Data_Function.flip(f);
              return function($770) {
                return Data_Tuple.uncurry($769($770));
              };
            }())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
        };
      },
      foldrWithIndex: function(f) {
        return function(z) {
          return function(m) {
            return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return function(f) {
          return function(m) {
            return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
        };
      },
      Foldable0: function() {
        return foldableMap;
      }
    };
    var mapMaybeWithKey = function(dictOrd) {
      return function(f) {
        return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function(k) {
          return function(a) {
            return function(acc) {
              return Data_Maybe.maybe(acc)(function(b) {
                return insert(dictOrd)(k)(b)(acc);
              })(f(k)(a));
            };
          };
        })(empty);
      };
    };
    var mapMaybe = function(dictOrd) {
      var $771 = mapMaybeWithKey(dictOrd);
      return function($772) {
        return $771(Data_Function["const"]($772));
      };
    };
    var catMaybes = function(dictOrd) {
      return mapMaybe(dictOrd)(Control_Category.identity(Control_Category.categoryFn));
    };
    var traversableWithIndexMap = {
      traverseWithIndex: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Leaf) {
              return Control_Applicative.pure(dictApplicative)(Leaf.value);
            }
            ;
            if (v1 instanceof Two) {
              return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Two.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(v)(v1.value0)))(Control_Applicative.pure(dictApplicative)(v1.value1)))(v(v1.value1)(v1.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(v)(v1.value3));
            }
            ;
            if (v1 instanceof Three) {
              return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Three.create)(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(v)(v1.value0)))(Control_Applicative.pure(dictApplicative)(v1.value1)))(v(v1.value1)(v1.value2)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(v)(v1.value3)))(Control_Applicative.pure(dictApplicative)(v1.value4)))(v(v1.value4)(v1.value5)))(Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexMap)(dictApplicative)(v)(v1.value6));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 144, column 1 - line 158, column 40): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      },
      FunctorWithIndex0: function() {
        return functorWithIndexMap;
      },
      FoldableWithIndex1: function() {
        return foldableWithIndexMap;
      },
      Traversable2: function() {
        return traversableMap;
      }
    };
    var applyMap = function(dictOrd) {
      return {
        apply: intersectionWith(dictOrd)(Control_Category.identity(Control_Category.categoryFn)),
        Functor0: function() {
          return functorMap;
        }
      };
    };
    var bindMap = function(dictOrd) {
      return {
        bind: function(m) {
          return function(f) {
            return mapMaybeWithKey(dictOrd)(function(k) {
              var $773 = lookup(dictOrd)(k);
              return function($774) {
                return $773(f($774));
              };
            })(m);
          };
        },
        Apply0: function() {
          return applyMap(dictOrd);
        }
      };
    };
    var alter = function(dictOrd) {
      return function(f) {
        return function(k) {
          return function(m) {
            var v = f(lookup(dictOrd)(k)(m));
            if (v instanceof Data_Maybe.Nothing) {
              return $$delete(dictOrd)(k)(m);
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return insert(dictOrd)(k)(v.value0)(m);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [v.constructor.name]);
          };
        };
      };
    };
    var fromFoldableWith = function(dictOrd) {
      return function(dictFoldable) {
        return function(f) {
          var combine = function(v) {
            return function(v1) {
              if (v1 instanceof Data_Maybe.Just) {
                return Data_Maybe.Just.create(f(v)(v1.value0));
              }
              ;
              if (v1 instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(v);
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 580, column 3 - line 580, column 38): " + [v.constructor.name, v1.constructor.name]);
            };
          };
          return Data_Foldable.foldl(dictFoldable)(function(m) {
            return function(v) {
              return alter(dictOrd)(combine(v.value1))(v.value0)(m);
            };
          })(empty);
        };
      };
    };
    var insertWith = function(dictOrd) {
      return function(f) {
        return function(k) {
          return function(v) {
            return alter(dictOrd)(function() {
              var $775 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
              return function($776) {
                return Data_Maybe.Just.create($775($776));
              };
            }())(k);
          };
        };
      };
    };
    var unionWith = function(dictOrd) {
      return function(f) {
        return function(m1) {
          return function(m2) {
            var go = function(m) {
              return function(v) {
                return alter(dictOrd)(function() {
                  var $777 = Data_Maybe.maybe(v.value1)(f(v.value1));
                  return function($778) {
                    return Data_Maybe.Just.create($777($778));
                  };
                }())(v.value0)(m);
              };
            };
            return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
          };
        };
      };
    };
    var union = function(dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
    };
    var submap = function(dictOrd) {
      return function(kmin) {
        return function(kmax) {
          return foldSubmapBy(dictOrd)(union(dictOrd))(empty)(kmin)(kmax)(singleton);
        };
      };
    };
    var unions = function(dictOrd) {
      return function(dictFoldable) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
    };
    var update = function(dictOrd) {
      return function(f) {
        return function(k) {
          return function(m) {
            return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
          };
        };
      };
    };
    var altMap = function(dictOrd) {
      return {
        alt: union(dictOrd),
        Functor0: function() {
          return functorMap;
        }
      };
    };
    var plusMap = function(dictOrd) {
      return {
        empty,
        Alt0: function() {
          return altMap(dictOrd);
        }
      };
    };
    module2.exports = {
      showTree,
      empty,
      isEmpty,
      singleton,
      checkValid,
      insert,
      insertWith,
      lookup,
      lookupLE,
      lookupLT,
      lookupGE,
      lookupGT,
      findMin,
      findMax,
      foldSubmap,
      submap,
      fromFoldable,
      fromFoldableWith,
      fromFoldableWithIndex,
      toUnfoldable,
      toUnfoldableUnordered,
      "delete": $$delete,
      pop,
      member,
      alter,
      update,
      keys,
      values,
      union,
      unionWith,
      unions,
      intersection,
      intersectionWith,
      difference,
      isSubmap,
      size,
      filterWithKey,
      filterKeys,
      filter,
      mapMaybeWithKey,
      mapMaybe,
      catMaybes,
      eq1Map,
      eqMap,
      ord1Map,
      ordMap,
      showMap,
      altMap,
      plusMap,
      functorMap,
      functorWithIndexMap,
      applyMap,
      bindMap,
      foldableMap,
      foldableWithIndexMap,
      traversableMap,
      traversableWithIndexMap
    };
  }
});

// output/Data.Nullable/foreign.js
var require_foreign42 = __commonJS({
  "output/Data.Nullable/foreign.js"(exports2) {
    "use strict";
    exports2["null"] = null;
    exports2.nullable = function(a, r, f) {
      return a == null ? r : f(a);
    };
    exports2.notNull = function(x) {
      return x;
    };
  }
});

// output/Data.Nullable/index.js
var require_Data41 = __commonJS({
  "output/Data.Nullable/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign42();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
    var toMaybe = function(n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
    };
    var showNullable = function(dictShow) {
      return {
        show: function() {
          var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
          return function($6) {
            return $5(toMaybe($6));
          };
        }()
      };
    };
    var eqNullable = function(dictEq) {
      return {
        eq: Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe)
      };
    };
    var ordNullable = function(dictOrd) {
      return {
        compare: Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe),
        Eq0: function() {
          return eqNullable(dictOrd.Eq0());
        }
      };
    };
    var eq1Nullable = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqNullable(dictEq));
      }
    };
    var ord1Nullable = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordNullable(dictOrd));
      },
      Eq10: function() {
        return eq1Nullable;
      }
    };
    module2.exports = {
      toMaybe,
      toNullable,
      showNullable,
      eqNullable,
      eq1Nullable,
      ordNullable,
      ord1Nullable,
      "null": $foreign["null"],
      notNull: $foreign.notNull
    };
  }
});

// output/Data.Profunctor.Strong/index.js
var require_Data_Profunctor2 = __commonJS({
  "output/Data.Profunctor.Strong/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Control_Semigroupoid = require_Control();
    var Data_Functor = require_Data4();
    var Data_Profunctor = require_Data35();
    var Data_Tuple = require_Data22();
    var strongFn = {
      first: function(a2b) {
        return function(v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
        };
      },
      second: Data_Functor.map(Data_Tuple.functorTuple),
      Profunctor0: function() {
        return Data_Profunctor.profunctorFn;
      }
    };
    var second = function(dict) {
      return dict.second;
    };
    var first = function(dict) {
      return dict.first;
    };
    var splitStrong = function(dictCategory) {
      return function(dictStrong) {
        return function(l) {
          return function(r) {
            return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
          };
        };
      };
    };
    var fanout = function(dictCategory) {
      return function(dictStrong) {
        return function(l) {
          return function(r) {
            var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function(a) {
              return new Data_Tuple.Tuple(a, a);
            })(Control_Category.identity(dictCategory));
            return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
          };
        };
      };
    };
    module2.exports = {
      first,
      second,
      splitStrong,
      fanout,
      strongFn
    };
  }
});

// output/Data.String.Pattern/index.js
var require_Data_String3 = __commonJS({
  "output/Data.String.Pattern/index.js"(exports2, module2) {
    "use strict";
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Replacement = function(x) {
      return x;
    };
    var Pattern = function(x) {
      return x;
    };
    var showReplacement = {
      show: function(v) {
        return "(Replacement " + (Data_Show.show(Data_Show.showString)(v) + ")");
      }
    };
    var showPattern = {
      show: function(v) {
        return "(Pattern " + (Data_Show.show(Data_Show.showString)(v) + ")");
      }
    };
    var newtypeReplacement = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypePattern = {
      Coercible0: function() {
        return void 0;
      }
    };
    var eqReplacement = {
      eq: function(x) {
        return function(y) {
          return x === y;
        };
      }
    };
    var ordReplacement = {
      compare: function(x) {
        return function(y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
        };
      },
      Eq0: function() {
        return eqReplacement;
      }
    };
    var eqPattern = {
      eq: function(x) {
        return function(y) {
          return x === y;
        };
      }
    };
    var ordPattern = {
      compare: function(x) {
        return function(y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
        };
      },
      Eq0: function() {
        return eqPattern;
      }
    };
    module2.exports = {
      Pattern,
      Replacement,
      eqPattern,
      ordPattern,
      newtypePattern,
      showPattern,
      eqReplacement,
      ordReplacement,
      newtypeReplacement,
      showReplacement
    };
  }
});

// output/Effect.AVar/foreign.js
var require_foreign43 = __commonJS({
  "output/Effect.AVar/foreign.js"(exports2) {
    "use strict";
    var AVar = function() {
      function MutableQueue() {
        this.head = null;
        this.last = null;
        this.size = 0;
      }
      function MutableCell(queue, value) {
        this.queue = queue;
        this.value = value;
        this.next = null;
        this.prev = null;
      }
      function AVar2(value) {
        this.draining = false;
        this.error = null;
        this.value = value;
        this.takes = new MutableQueue();
        this.reads = new MutableQueue();
        this.puts = new MutableQueue();
      }
      var EMPTY = {};
      function runEff(eff) {
        try {
          eff();
        } catch (error) {
          setTimeout(function() {
            throw error;
          }, 0);
        }
      }
      function putLast(queue, value) {
        var cell = new MutableCell(queue, value);
        switch (queue.size) {
          case 0:
            queue.head = cell;
            break;
          case 1:
            cell.prev = queue.head;
            queue.head.next = cell;
            queue.last = cell;
            break;
          default:
            cell.prev = queue.last;
            queue.last.next = cell;
            queue.last = cell;
        }
        queue.size++;
        return cell;
      }
      function takeLast(queue) {
        var cell;
        switch (queue.size) {
          case 0:
            return null;
          case 1:
            cell = queue.head;
            queue.head = null;
            break;
          case 2:
            cell = queue.last;
            queue.head.next = null;
            queue.last = null;
            break;
          default:
            cell = queue.last;
            queue.last = cell.prev;
            queue.last.next = null;
        }
        cell.prev = null;
        cell.queue = null;
        queue.size--;
        return cell.value;
      }
      function takeHead(queue) {
        var cell;
        switch (queue.size) {
          case 0:
            return null;
          case 1:
            cell = queue.head;
            queue.head = null;
            break;
          case 2:
            cell = queue.head;
            queue.last.prev = null;
            queue.head = queue.last;
            queue.last = null;
            break;
          default:
            cell = queue.head;
            queue.head = cell.next;
            queue.head.prev = null;
        }
        cell.next = null;
        cell.queue = null;
        queue.size--;
        return cell.value;
      }
      function deleteCell(cell) {
        if (cell.queue === null) {
          return;
        }
        if (cell.queue.last === cell) {
          takeLast(cell.queue);
          return;
        }
        if (cell.queue.head === cell) {
          takeHead(cell.queue);
          return;
        }
        if (cell.prev) {
          cell.prev.next = cell.next;
        }
        if (cell.next) {
          cell.next.prev = cell.prev;
        }
        cell.queue.size--;
        cell.queue = null;
        cell.value = null;
        cell.next = null;
        cell.prev = null;
      }
      function drainVar(util, avar) {
        if (avar.draining) {
          return;
        }
        var ps = avar.puts;
        var ts = avar.takes;
        var rs = avar.reads;
        var p, r, t, value, rsize;
        avar.draining = true;
        while (1) {
          p = null;
          r = null;
          t = null;
          value = avar.value;
          rsize = rs.size;
          if (avar.error !== null) {
            value = util.left(avar.error);
            while (p = takeHead(ps)) {
              runEff(p.cb(value));
            }
            while (r = takeHead(rs)) {
              runEff(r(value));
            }
            while (t = takeHead(ts)) {
              runEff(t(value));
            }
            break;
          }
          if (value === EMPTY && (p = takeHead(ps))) {
            avar.value = value = p.value;
          }
          if (value !== EMPTY) {
            t = takeHead(ts);
            while (rsize-- && (r = takeHead(rs))) {
              runEff(r(util.right(value)));
            }
            if (t !== null) {
              avar.value = EMPTY;
              runEff(t(util.right(value)));
            }
          }
          if (p !== null) {
            runEff(p.cb(util.right(void 0)));
          }
          if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
            break;
          }
        }
        avar.draining = false;
      }
      AVar2.EMPTY = EMPTY;
      AVar2.putLast = putLast;
      AVar2.takeLast = takeLast;
      AVar2.takeHead = takeHead;
      AVar2.deleteCell = deleteCell;
      AVar2.drainVar = drainVar;
      return AVar2;
    }();
    exports2.empty = function() {
      return new AVar(AVar.EMPTY);
    };
    exports2._newVar = function(value) {
      return function() {
        return new AVar(value);
      };
    };
    exports2._killVar = function(util, error, avar) {
      return function() {
        if (avar.error === null) {
          avar.error = error;
          avar.value = AVar.EMPTY;
          AVar.drainVar(util, avar);
        }
      };
    };
    exports2._putVar = function(util, value, avar, cb) {
      return function() {
        var cell = AVar.putLast(avar.puts, { cb, value });
        AVar.drainVar(util, avar);
        return function() {
          AVar.deleteCell(cell);
        };
      };
    };
    exports2._takeVar = function(util, avar, cb) {
      return function() {
        var cell = AVar.putLast(avar.takes, cb);
        AVar.drainVar(util, avar);
        return function() {
          AVar.deleteCell(cell);
        };
      };
    };
    exports2._readVar = function(util, avar, cb) {
      return function() {
        var cell = AVar.putLast(avar.reads, cb);
        AVar.drainVar(util, avar);
        return function() {
          AVar.deleteCell(cell);
        };
      };
    };
    exports2._tryPutVar = function(util, value, avar) {
      return function() {
        if (avar.value === AVar.EMPTY && avar.error === null) {
          avar.value = value;
          AVar.drainVar(util, avar);
          return true;
        } else {
          return false;
        }
      };
    };
    exports2._tryTakeVar = function(util, avar) {
      return function() {
        var value = avar.value;
        if (value === AVar.EMPTY) {
          return util.nothing;
        } else {
          avar.value = AVar.EMPTY;
          AVar.drainVar(util, avar);
          return util.just(value);
        }
      };
    };
    exports2._tryReadVar = function(util, avar) {
      return function() {
        if (avar.value === AVar.EMPTY) {
          return util.nothing;
        } else {
          return util.just(avar.value);
        }
      };
    };
    exports2._status = function(util, avar) {
      return function() {
        if (avar.error) {
          return util.killed(avar.error);
        }
        if (avar.value === AVar.EMPTY) {
          return util.empty;
        }
        return util.filled(avar.value);
      };
    };
  }
});

// output/Effect.AVar/index.js
var require_Effect7 = __commonJS({
  "output/Effect.AVar/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign43();
    var Data_Either = require_Data16();
    var Data_Maybe = require_Data15();
    var Killed = function() {
      function Killed2(value0) {
        this.value0 = value0;
      }
      ;
      Killed2.create = function(value0) {
        return new Killed2(value0);
      };
      return Killed2;
    }();
    var Filled = function() {
      function Filled2(value0) {
        this.value0 = value0;
      }
      ;
      Filled2.create = function(value0) {
        return new Filled2(value0);
      };
      return Filled2;
    }();
    var Empty = function() {
      function Empty2() {
      }
      ;
      Empty2.value = new Empty2();
      return Empty2;
    }();
    var $$new = $foreign["_newVar"];
    var isKilled = function(v) {
      if (v instanceof Killed) {
        return true;
      }
      ;
      return false;
    };
    var isFilled = function(v) {
      if (v instanceof Filled) {
        return true;
      }
      ;
      return false;
    };
    var isEmpty = function(v) {
      if (v instanceof Empty) {
        return true;
      }
      ;
      return false;
    };
    var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
    };
    var kill = function(err) {
      return function(avar) {
        return $foreign["_killVar"](ffiUtil, err, avar);
      };
    };
    var put = function(value) {
      return function(avar) {
        return function(cb) {
          return $foreign["_putVar"](ffiUtil, value, avar, cb);
        };
      };
    };
    var read = function(avar) {
      return function(cb) {
        return $foreign["_readVar"](ffiUtil, avar, cb);
      };
    };
    var status = function(avar) {
      return $foreign["_status"](ffiUtil, avar);
    };
    var take = function(avar) {
      return function(cb) {
        return $foreign["_takeVar"](ffiUtil, avar, cb);
      };
    };
    var tryPut = function(value) {
      return function(avar) {
        return $foreign["_tryPutVar"](ffiUtil, value, avar);
      };
    };
    var tryRead = function(avar) {
      return $foreign["_tryReadVar"](ffiUtil, avar);
    };
    var tryTake = function(avar) {
      return $foreign["_tryTakeVar"](ffiUtil, avar);
    };
    module2.exports = {
      Killed,
      Filled,
      Empty,
      "new": $$new,
      take,
      tryTake,
      put,
      tryPut,
      read,
      tryRead,
      kill,
      status,
      isEmpty,
      isFilled,
      isKilled,
      empty: $foreign.empty
    };
  }
});

// output/Effect.Aff.AVar/index.js
var require_Effect_Aff = __commonJS({
  "output/Effect.Aff.AVar/index.js"(exports2, module2) {
    "use strict";
    var Effect_AVar = require_Effect7();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var tryTake = function() {
      var $0 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      return function($1) {
        return $0(Effect_AVar.tryTake($1));
      };
    }();
    var tryRead = function() {
      var $2 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      return function($3) {
        return $2(Effect_AVar.tryRead($3));
      };
    }();
    var tryPut = function(value) {
      var $4 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      var $5 = Effect_AVar.tryPut(value);
      return function($6) {
        return $4($5($6));
      };
    };
    var take = function(avar) {
      return Effect_Aff.makeAff(function(k) {
        return function __do() {
          var c = Effect_AVar.take(avar)(k)();
          return Effect_Aff.effectCanceler(c);
        };
      });
    };
    var status = function() {
      var $7 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      return function($8) {
        return $7(Effect_AVar.status($8));
      };
    }();
    var read = function(avar) {
      return Effect_Aff.makeAff(function(k) {
        return function __do() {
          var c = Effect_AVar.read(avar)(k)();
          return Effect_Aff.effectCanceler(c);
        };
      });
    };
    var put = function(value) {
      return function(avar) {
        return Effect_Aff.makeAff(function(k) {
          return function __do() {
            var c = Effect_AVar.put(value)(avar)(k)();
            return Effect_Aff.effectCanceler(c);
          };
        });
      };
    };
    var $$new = function() {
      var $9 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      return function($10) {
        return $9(Effect_AVar["new"]($10));
      };
    }();
    var kill = function(error) {
      var $11 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      var $12 = Effect_AVar.kill(error);
      return function($13) {
        return $11($12($13));
      };
    };
    var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
    module2.exports = {
      "new": $$new,
      empty,
      status,
      take,
      tryTake,
      put,
      tryPut,
      read,
      tryRead,
      kill,
      Empty: Effect_AVar.Empty,
      Filled: Effect_AVar.Filled,
      Killed: Effect_AVar.Killed,
      isEmpty: Effect_AVar.isEmpty,
      isFilled: Effect_AVar.isFilled,
      isKilled: Effect_AVar.isKilled
    };
  }
});

// output/Effect.Console/foreign.js
var require_foreign44 = __commonJS({
  "output/Effect.Console/foreign.js"(exports2) {
    "use strict";
    exports2.log = function(s) {
      return function() {
        console.log(s);
      };
    };
    exports2.warn = function(s) {
      return function() {
        console.warn(s);
      };
    };
    exports2.error = function(s) {
      return function() {
        console.error(s);
      };
    };
    exports2.info = function(s) {
      return function() {
        console.info(s);
      };
    };
    exports2.time = function(s) {
      return function() {
        console.time(s);
      };
    };
    exports2.timeLog = function(s) {
      return function() {
        console.timeLog(s);
      };
    };
    exports2.timeEnd = function(s) {
      return function() {
        console.timeEnd(s);
      };
    };
    exports2.clear = function() {
      console.clear();
    };
  }
});

// output/Effect.Console/index.js
var require_Effect8 = __commonJS({
  "output/Effect.Console/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign44();
    var Data_Show = require_Data14();
    var warnShow = function(dictShow) {
      return function(a) {
        return $foreign.warn(Data_Show.show(dictShow)(a));
      };
    };
    var logShow = function(dictShow) {
      return function(a) {
        return $foreign.log(Data_Show.show(dictShow)(a));
      };
    };
    var infoShow = function(dictShow) {
      return function(a) {
        return $foreign.info(Data_Show.show(dictShow)(a));
      };
    };
    var errorShow = function(dictShow) {
      return function(a) {
        return $foreign.error(Data_Show.show(dictShow)(a));
      };
    };
    module2.exports = {
      logShow,
      warnShow,
      errorShow,
      infoShow,
      log: $foreign.log,
      warn: $foreign.warn,
      error: $foreign.error,
      info: $foreign.info,
      time: $foreign.time,
      timeLog: $foreign.timeLog,
      timeEnd: $foreign.timeEnd,
      clear: $foreign.clear
    };
  }
});

// output/Foreign.JSON/foreign.js
var require_foreign45 = __commonJS({
  "output/Foreign.JSON/foreign.js"(exports2) {
    "use strict";
    exports2.parseJSONImpl = function(str) {
      return JSON.parse(str);
    };
  }
});

// output/Effect.Uncurried/foreign.js
var require_foreign46 = __commonJS({
  "output/Effect.Uncurried/foreign.js"(exports2) {
    "use strict";
    exports2.mkEffectFn1 = function mkEffectFn1(fn) {
      return function(x) {
        return fn(x)();
      };
    };
    exports2.mkEffectFn2 = function mkEffectFn2(fn) {
      return function(a, b) {
        return fn(a)(b)();
      };
    };
    exports2.mkEffectFn3 = function mkEffectFn3(fn) {
      return function(a, b, c) {
        return fn(a)(b)(c)();
      };
    };
    exports2.mkEffectFn4 = function mkEffectFn4(fn) {
      return function(a, b, c, d) {
        return fn(a)(b)(c)(d)();
      };
    };
    exports2.mkEffectFn5 = function mkEffectFn5(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e)();
      };
    };
    exports2.mkEffectFn6 = function mkEffectFn6(fn) {
      return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f)();
      };
    };
    exports2.mkEffectFn7 = function mkEffectFn7(fn) {
      return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g)();
      };
    };
    exports2.mkEffectFn8 = function mkEffectFn8(fn) {
      return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)();
      };
    };
    exports2.mkEffectFn9 = function mkEffectFn9(fn) {
      return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)();
      };
    };
    exports2.mkEffectFn10 = function mkEffectFn10(fn) {
      return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)();
      };
    };
    exports2.runEffectFn1 = function runEffectFn1(fn) {
      return function(a) {
        return function() {
          return fn(a);
        };
      };
    };
    exports2.runEffectFn2 = function runEffectFn2(fn) {
      return function(a) {
        return function(b) {
          return function() {
            return fn(a, b);
          };
        };
      };
    };
    exports2.runEffectFn3 = function runEffectFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function() {
              return fn(a, b, c);
            };
          };
        };
      };
    };
    exports2.runEffectFn4 = function runEffectFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function() {
                return fn(a, b, c, d);
              };
            };
          };
        };
      };
    };
    exports2.runEffectFn5 = function runEffectFn5(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function() {
                  return fn(a, b, c, d, e);
                };
              };
            };
          };
        };
      };
    };
    exports2.runEffectFn6 = function runEffectFn6(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function() {
                    return fn(a, b, c, d, e, f);
                  };
                };
              };
            };
          };
        };
      };
    };
    exports2.runEffectFn7 = function runEffectFn7(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function() {
                      return fn(a, b, c, d, e, f, g);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
    exports2.runEffectFn8 = function runEffectFn8(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function() {
                        return fn(a, b, c, d, e, f, g, h);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
    exports2.runEffectFn9 = function runEffectFn9(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function() {
                          return fn(a, b, c, d, e, f, g, h, i);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
    exports2.runEffectFn10 = function runEffectFn10(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return function() {
                            return fn(a, b, c, d, e, f, g, h, i, j);
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  }
});

// output/Effect.Uncurried/index.js
var require_Effect9 = __commonJS({
  "output/Effect.Uncurried/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign46();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Effect = require_Effect();
    var semigroupEffectFn9 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn9(function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return function(g) {
                          return function(h) {
                            return function(i) {
                              return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn9(f1)(a)(b)(c)(d)(e)(f)(g)(h)(i))($foreign.runEffectFn9(f2)(a)(b)(c)(d)(e)(f)(g)(h)(i));
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn8 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn8(function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return function(g) {
                          return function(h) {
                            return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn8(f1)(a)(b)(c)(d)(e)(f)(g)(h))($foreign.runEffectFn8(f2)(a)(b)(c)(d)(e)(f)(g)(h));
                          };
                        };
                      };
                    };
                  };
                };
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn7 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn7(function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return function(g) {
                          return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn7(f1)(a)(b)(c)(d)(e)(f)(g))($foreign.runEffectFn7(f2)(a)(b)(c)(d)(e)(f)(g));
                        };
                      };
                    };
                  };
                };
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn6 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn6(function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn6(f1)(a)(b)(c)(d)(e)(f))($foreign.runEffectFn6(f2)(a)(b)(c)(d)(e)(f));
                      };
                    };
                  };
                };
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn5 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn5(function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn5(f1)(a)(b)(c)(d)(e))($foreign.runEffectFn5(f2)(a)(b)(c)(d)(e));
                    };
                  };
                };
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn4 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn4(function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn4(f1)(a)(b)(c)(d))($foreign.runEffectFn4(f2)(a)(b)(c)(d));
                  };
                };
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn3 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn3(function(a) {
              return function(b) {
                return function(c) {
                  return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn3(f1)(a)(b)(c))($foreign.runEffectFn3(f2)(a)(b)(c));
                };
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn2 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn2(function(a) {
              return function(b) {
                return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn2(f1)(a)(b))($foreign.runEffectFn2(f2)(a)(b));
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn10 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn10(function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return function(g) {
                          return function(h) {
                            return function(i) {
                              return function(j) {
                                return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn10(f1)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j))($foreign.runEffectFn10(f2)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j));
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            });
          };
        }
      };
    };
    var semigroupEffectFn1 = function(dictSemigroup) {
      return {
        append: function(f1) {
          return function(f2) {
            return $foreign.mkEffectFn1(function(a) {
              return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn1(f1)(a))($foreign.runEffectFn1(f2)(a));
            });
          };
        }
      };
    };
    var monoidEffectFn9 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn9(function(v) {
          return function(v1) {
            return function(v2) {
              return function(v3) {
                return function(v4) {
                  return function(v5) {
                    return function(v6) {
                      return function(v7) {
                        return function(v8) {
                          return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn9(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn8 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn8(function(v) {
          return function(v1) {
            return function(v2) {
              return function(v3) {
                return function(v4) {
                  return function(v5) {
                    return function(v6) {
                      return function(v7) {
                        return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                      };
                    };
                  };
                };
              };
            };
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn8(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn7 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn7(function(v) {
          return function(v1) {
            return function(v2) {
              return function(v3) {
                return function(v4) {
                  return function(v5) {
                    return function(v6) {
                      return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                    };
                  };
                };
              };
            };
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn7(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn6 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn6(function(v) {
          return function(v1) {
            return function(v2) {
              return function(v3) {
                return function(v4) {
                  return function(v5) {
                    return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                  };
                };
              };
            };
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn6(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn5 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn5(function(v) {
          return function(v1) {
            return function(v2) {
              return function(v3) {
                return function(v4) {
                  return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                };
              };
            };
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn5(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn4 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn4(function(v) {
          return function(v1) {
            return function(v2) {
              return function(v3) {
                return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
              };
            };
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn4(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn3 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn3(function(v) {
          return function(v1) {
            return function(v2) {
              return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
            };
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn3(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn2 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn2(function(v) {
          return function(v1) {
            return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn2(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn10 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn10(function(v) {
          return function(v1) {
            return function(v2) {
              return function(v3) {
                return function(v4) {
                  return function(v5) {
                    return function(v6) {
                      return function(v7) {
                        return function(v8) {
                          return function(v9) {
                            return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }),
        Semigroup0: function() {
          return semigroupEffectFn10(dictMonoid.Semigroup0());
        }
      };
    };
    var monoidEffectFn1 = function(dictMonoid) {
      return {
        mempty: $foreign.mkEffectFn1(function(v) {
          return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
        }),
        Semigroup0: function() {
          return semigroupEffectFn1(dictMonoid.Semigroup0());
        }
      };
    };
    module2.exports = {
      semigroupEffectFn1,
      semigroupEffectFn2,
      semigroupEffectFn3,
      semigroupEffectFn4,
      semigroupEffectFn5,
      semigroupEffectFn6,
      semigroupEffectFn7,
      semigroupEffectFn8,
      semigroupEffectFn9,
      semigroupEffectFn10,
      monoidEffectFn1,
      monoidEffectFn2,
      monoidEffectFn3,
      monoidEffectFn4,
      monoidEffectFn5,
      monoidEffectFn6,
      monoidEffectFn7,
      monoidEffectFn8,
      monoidEffectFn9,
      monoidEffectFn10,
      mkEffectFn1: $foreign.mkEffectFn1,
      mkEffectFn2: $foreign.mkEffectFn2,
      mkEffectFn3: $foreign.mkEffectFn3,
      mkEffectFn4: $foreign.mkEffectFn4,
      mkEffectFn5: $foreign.mkEffectFn5,
      mkEffectFn6: $foreign.mkEffectFn6,
      mkEffectFn7: $foreign.mkEffectFn7,
      mkEffectFn8: $foreign.mkEffectFn8,
      mkEffectFn9: $foreign.mkEffectFn9,
      mkEffectFn10: $foreign.mkEffectFn10,
      runEffectFn1: $foreign.runEffectFn1,
      runEffectFn2: $foreign.runEffectFn2,
      runEffectFn3: $foreign.runEffectFn3,
      runEffectFn4: $foreign.runEffectFn4,
      runEffectFn5: $foreign.runEffectFn5,
      runEffectFn6: $foreign.runEffectFn6,
      runEffectFn7: $foreign.runEffectFn7,
      runEffectFn8: $foreign.runEffectFn8,
      runEffectFn9: $foreign.runEffectFn9,
      runEffectFn10: $foreign.runEffectFn10
    };
  }
});

// output/Foreign.JSON/index.js
var require_Foreign2 = __commonJS({
  "output/Foreign.JSON/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign45();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Bifunctor = require_Data24();
    var Data_Identity = require_Data20();
    var Data_List_Types = require_Data_List();
    var Effect_Exception = require_Effect2();
    var Effect_Uncurried = require_Effect9();
    var Effect_Unsafe = require_Effect5();
    var Foreign = require_Foreign();
    var parseJSON = function() {
      var $0 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function() {
        var $3 = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList);
        return function($4) {
          return $3(Foreign.ForeignError.create(Effect_Exception.message($4)));
        };
      }());
      var $1 = Effect_Uncurried.runEffectFn1($foreign.parseJSONImpl);
      return function($2) {
        return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($0(Effect_Unsafe.unsafePerformEffect(Effect_Exception["try"]($1($2))))));
      };
    }();
    var decodeJSONWith = function(f) {
      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(f)(parseJSON);
    };
    module2.exports = {
      parseJSON,
      decodeJSONWith
    };
  }
});

// output/Foreign.Object/foreign.js
var require_foreign47 = __commonJS({
  "output/Foreign.Object/foreign.js"(exports2) {
    "use strict";
    exports2._copyST = function(m) {
      return function() {
        var r = {};
        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            r[k] = m[k];
          }
        }
        return r;
      };
    };
    exports2.empty = {};
    exports2.runST = function(f) {
      return f();
    };
    exports2._fmapObject = function(m0, f) {
      var m = {};
      for (var k in m0) {
        if (hasOwnProperty.call(m0, k)) {
          m[k] = f(m0[k]);
        }
      }
      return m;
    };
    exports2._mapWithKey = function(m0, f) {
      var m = {};
      for (var k in m0) {
        if (hasOwnProperty.call(m0, k)) {
          m[k] = f(k)(m0[k]);
        }
      }
      return m;
    };
    exports2._foldM = function(bind) {
      return function(f) {
        return function(mz) {
          return function(m) {
            var acc = mz;
            function g(k2) {
              return function(z) {
                return f(z)(k2)(m[k2]);
              };
            }
            for (var k in m) {
              if (hasOwnProperty.call(m, k)) {
                acc = bind(acc)(g(k));
              }
            }
            return acc;
          };
        };
      };
    };
    exports2._foldSCObject = function(m, z, f, fromMaybe) {
      var acc = z;
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          var maybeR = f(acc)(k)(m[k]);
          var r = fromMaybe(null)(maybeR);
          if (r === null)
            return acc;
          else
            acc = r;
        }
      }
      return acc;
    };
    exports2.all = function(f) {
      return function(m) {
        for (var k in m) {
          if (hasOwnProperty.call(m, k) && !f(k)(m[k]))
            return false;
        }
        return true;
      };
    };
    exports2.size = function(m) {
      var s = 0;
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          ++s;
        }
      }
      return s;
    };
    exports2._lookup = function(no, yes, k, m) {
      return k in m ? yes(m[k]) : no;
    };
    exports2._lookupST = function(no, yes, k, m) {
      return function() {
        return k in m ? yes(m[k]) : no;
      };
    };
    function toArrayWithKey(f) {
      return function(m) {
        var r = [];
        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            r.push(f(k)(m[k]));
          }
        }
        return r;
      };
    }
    exports2.toArrayWithKey = toArrayWithKey;
    exports2.keys = Object.keys || toArrayWithKey(function(k) {
      return function() {
        return k;
      };
    });
  }
});

// output/Data.Function.Uncurried/foreign.js
var require_foreign48 = __commonJS({
  "output/Data.Function.Uncurried/foreign.js"(exports2) {
    "use strict";
    exports2.mkFn0 = function(fn) {
      return function() {
        return fn();
      };
    };
    exports2.mkFn2 = function(fn) {
      return function(a, b) {
        return fn(a)(b);
      };
    };
    exports2.mkFn3 = function(fn) {
      return function(a, b, c) {
        return fn(a)(b)(c);
      };
    };
    exports2.mkFn4 = function(fn) {
      return function(a, b, c, d) {
        return fn(a)(b)(c)(d);
      };
    };
    exports2.mkFn5 = function(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
      };
    };
    exports2.mkFn6 = function(fn) {
      return function(a, b, c, d, e, f) {
        return fn(a)(b)(c)(d)(e)(f);
      };
    };
    exports2.mkFn7 = function(fn) {
      return function(a, b, c, d, e, f, g) {
        return fn(a)(b)(c)(d)(e)(f)(g);
      };
    };
    exports2.mkFn8 = function(fn) {
      return function(a, b, c, d, e, f, g, h) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h);
      };
    };
    exports2.mkFn9 = function(fn) {
      return function(a, b, c, d, e, f, g, h, i) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
      };
    };
    exports2.mkFn10 = function(fn) {
      return function(a, b, c, d, e, f, g, h, i, j) {
        return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
      };
    };
    exports2.runFn0 = function(fn) {
      return fn();
    };
    exports2.runFn2 = function(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    };
    exports2.runFn3 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    };
    exports2.runFn4 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
    exports2.runFn5 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    };
    exports2.runFn6 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    };
    exports2.runFn7 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    };
    exports2.runFn8 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
    exports2.runFn9 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
    exports2.runFn10 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  }
});

// output/Data.Function.Uncurried/index.js
var require_Data_Function = __commonJS({
  "output/Data.Function.Uncurried/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign48();
    var runFn1 = function(f) {
      return f;
    };
    var mkFn1 = function(f) {
      return f;
    };
    module2.exports = {
      mkFn1,
      runFn1,
      mkFn0: $foreign.mkFn0,
      mkFn2: $foreign.mkFn2,
      mkFn3: $foreign.mkFn3,
      mkFn4: $foreign.mkFn4,
      mkFn5: $foreign.mkFn5,
      mkFn6: $foreign.mkFn6,
      mkFn7: $foreign.mkFn7,
      mkFn8: $foreign.mkFn8,
      mkFn9: $foreign.mkFn9,
      mkFn10: $foreign.mkFn10,
      runFn0: $foreign.runFn0,
      runFn2: $foreign.runFn2,
      runFn3: $foreign.runFn3,
      runFn4: $foreign.runFn4,
      runFn5: $foreign.runFn5,
      runFn6: $foreign.runFn6,
      runFn7: $foreign.runFn7,
      runFn8: $foreign.runFn8,
      runFn9: $foreign.runFn9,
      runFn10: $foreign.runFn10
    };
  }
});

// output/Foreign.Object.ST/foreign.js
var require_foreign49 = __commonJS({
  "output/Foreign.Object.ST/foreign.js"(exports2) {
    "use strict";
    exports2["new"] = function() {
      return {};
    };
    exports2.peekImpl = function(just) {
      return function(nothing) {
        return function(k) {
          return function(m) {
            return function() {
              return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
            };
          };
        };
      };
    };
    exports2.poke = function(k) {
      return function(v) {
        return function(m) {
          return function() {
            m[k] = v;
            return m;
          };
        };
      };
    };
    exports2["delete"] = function(k) {
      return function(m) {
        return function() {
          delete m[k];
          return m;
        };
      };
    };
  }
});

// output/Foreign.Object.ST/index.js
var require_Foreign_Object = __commonJS({
  "output/Foreign.Object.ST/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign49();
    var Data_Maybe = require_Data15();
    var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    module2.exports = {
      peek,
      "new": $foreign["new"],
      poke: $foreign.poke,
      "delete": $foreign["delete"]
    };
  }
});

// output/Foreign.Object/index.js
var require_Foreign3 = __commonJS({
  "output/Foreign.Object/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign47();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad_ST_Internal = require_Control_Monad_ST();
    var Data_Array = require_Data39();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Function_Uncurried = require_Data_Function();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_TraversableWithIndex = require_Data30();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Foreign_Object_ST = require_Foreign_Object();
    var Unsafe_Coerce = require_Unsafe();
    var values = $foreign.toArrayWithKey(function(v) {
      return function(v1) {
        return v1;
      };
    });
    var toUnfoldable = function(dictUnfoldable) {
      var $36 = Data_Array.toUnfoldable(dictUnfoldable);
      var $37 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function($38) {
        return $36($37($38));
      };
    };
    var toAscUnfoldable = function(dictUnfoldable) {
      var $39 = Data_Array.toUnfoldable(dictUnfoldable);
      var $40 = Data_Array.sortWith(Data_Ord.ordString)(Data_Tuple.fst);
      var $41 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function($42) {
        return $39($40($41($42)));
      };
    };
    var toAscArray = toAscUnfoldable(Data_Unfoldable.unfoldableArray);
    var toArray = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
    var thawST = $foreign["_copyST"];
    var singleton = function(k) {
      return function(v) {
        return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
    };
    var showObject = function(dictShow) {
      return {
        show: function(m) {
          return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toArray(m)) + ")");
        }
      };
    };
    var mutate = function(f) {
      return function(m) {
        return $foreign.runST(function __do() {
          var s = thawST(m)();
          f(s)();
          return s;
        });
      };
    };
    var member = Data_Function_Uncurried.runFn4($foreign["_lookup"])(false)(Data_Function["const"](true));
    var mapWithKey = function(f) {
      return function(m) {
        return $foreign["_mapWithKey"](m, f);
      };
    };
    var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
    var isSubmap = function(dictEq) {
      return function(m1) {
        return function(m2) {
          var f = function(k) {
            return function(v) {
              return $foreign["_lookup"](false, Data_Eq.eq(dictEq)(v), k, m2);
            };
          };
          return $foreign.all(f)(m1);
        };
      };
    };
    var isEmpty = $foreign.all(function(v) {
      return function(v1) {
        return false;
      };
    });
    var insert = function(k) {
      return function(v) {
        return mutate(Foreign_Object_ST.poke(k)(v));
      };
    };
    var functorObject = {
      map: function(f) {
        return function(m) {
          return $foreign["_fmapObject"](m, f);
        };
      }
    };
    var functorWithIndexObject = {
      mapWithIndex: mapWithKey,
      Functor0: function() {
        return functorObject;
      }
    };
    var fromHomogeneous = function(dictHomogeneous) {
      return Unsafe_Coerce.unsafeCoerce;
    };
    var fromFoldableWith = function(dictFoldable) {
      return function(f) {
        return function(l) {
          return $foreign.runST(function __do() {
            var s = Foreign_Object_ST["new"]();
            Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(dictFoldable)(l)(function(v) {
              return function __do2() {
                var v$prime = $foreign["_lookupST"](v.value1, f(v.value1), v.value0, s)();
                return Foreign_Object_ST.poke(v.value0)(v$prime)(s)();
              };
            })();
            return s;
          });
        };
      };
    };
    var fromFoldable = function(dictFoldable) {
      return function(l) {
        return $foreign.runST(function __do() {
          var s = Foreign_Object_ST["new"]();
          Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function(v) {
            return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
          })();
          return s;
        });
      };
    };
    var freezeST = $foreign["_copyST"];
    var foldMaybe = function(f) {
      return function(z) {
        return function(m) {
          return $foreign["_foldSCObject"](m, z, f, Data_Maybe.fromMaybe);
        };
      };
    };
    var foldM = function(dictMonad) {
      return function(f) {
        return function(z) {
          return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
        };
      };
    };
    var union = function(m) {
      return mutate(function(s) {
        return foldM(Control_Monad_ST_Internal.monadST)(function(s$prime) {
          return function(k) {
            return function(v) {
              return Foreign_Object_ST.poke(k)(v)(s$prime);
            };
          };
        })(s)(m);
      });
    };
    var unions = function(dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(union)($foreign.empty);
    };
    var unionWith = function(f) {
      return function(m1) {
        return function(m2) {
          return mutate(function(s1) {
            return foldM(Control_Monad_ST_Internal.monadST)(function(s2) {
              return function(k) {
                return function(v1) {
                  return Foreign_Object_ST.poke(k)($foreign["_lookup"](v1, function(v2) {
                    return f(v1)(v2);
                  }, k, m2))(s2);
                };
              };
            })(s1)(m1);
          })(m2);
        };
      };
    };
    var semigroupObject = function(dictSemigroup) {
      return {
        append: unionWith(Data_Semigroup.append(dictSemigroup))
      };
    };
    var monoidObject = function(dictSemigroup) {
      return {
        mempty: $foreign.empty,
        Semigroup0: function() {
          return semigroupObject(dictSemigroup);
        }
      };
    };
    var fold = $foreign["_foldM"](Data_Function.applyFlipped);
    var foldMap = function(dictMonoid) {
      return function(f) {
        return fold(function(acc) {
          return function(k) {
            return function(v) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
            };
          };
        })(Data_Monoid.mempty(dictMonoid));
      };
    };
    var foldableObject = {
      foldl: function(f) {
        return fold(function(z) {
          return function(v) {
            return f(z);
          };
        });
      },
      foldr: function(f) {
        return function(z) {
          return function(m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
        };
      },
      foldMap: function(dictMonoid) {
        return function(f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
        };
      }
    };
    var foldableWithIndexObject = {
      foldlWithIndex: function(f) {
        return fold(Data_Function.flip(f));
      },
      foldrWithIndex: function(f) {
        return function(z) {
          return function(m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
        };
      },
      foldMapWithIndex: function(dictMonoid) {
        return foldMap(dictMonoid);
      },
      Foldable0: function() {
        return foldableObject;
      }
    };
    var traversableWithIndexObject = {
      traverseWithIndex: function(dictApplicative) {
        return function(f) {
          return function(ms) {
            return fold(function(acc) {
              return function(k) {
                return function(v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                };
              };
            })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
        };
      },
      FunctorWithIndex0: function() {
        return functorWithIndexObject;
      },
      FoldableWithIndex1: function() {
        return foldableWithIndexObject;
      },
      Traversable2: function() {
        return traversableObject;
      }
    };
    var traversableObject = {
      traverse: function(dictApplicative) {
        var $43 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
        return function($44) {
          return $43(Data_Function["const"]($44));
        };
      },
      sequence: function(dictApplicative) {
        return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function() {
        return functorObject;
      },
      Foldable1: function() {
        return foldableObject;
      }
    };
    var filterWithKey = function(predicate) {
      return function(m) {
        var go = function() {
          var step = function(acc) {
            return function(k) {
              return function(v) {
                var $33 = predicate(k)(v);
                if ($33) {
                  return Foreign_Object_ST.poke(k)(v)(acc);
                }
                ;
                return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(acc);
              };
            };
          };
          return function __do() {
            var m$prime = Foreign_Object_ST["new"]();
            return foldM(Control_Monad_ST_Internal.monadST)(step)(m$prime)(m)();
          };
        }();
        return $foreign.runST(go);
      };
    };
    var filterKeys = function(predicate) {
      return filterWithKey(function($45) {
        return Data_Function["const"](predicate($45));
      });
    };
    var filter = function(predicate) {
      return filterWithKey(Data_Function["const"](predicate));
    };
    var eqObject = function(dictEq) {
      return {
        eq: function(m1) {
          return function(m2) {
            return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
          };
        }
      };
    };
    var ordObject = function(dictOrd) {
      return {
        compare: function(m1) {
          return function(m2) {
            return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(Data_Ord.ordString)(dictOrd)))(toAscArray(m1))(toAscArray(m2));
          };
        },
        Eq0: function() {
          return eqObject(dictOrd.Eq0());
        }
      };
    };
    var eq1Object = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqObject(dictEq));
      }
    };
    var $$delete = function(k) {
      return mutate(Foreign_Object_ST["delete"](k));
    };
    var pop = function(k) {
      return function(m) {
        return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(lookup(k)(m))(function(a) {
          return new Data_Tuple.Tuple(a, $$delete(k)(m));
        });
      };
    };
    var alter = function(f) {
      return function(k) {
        return function(m) {
          var v = f(lookup(k)(m));
          if (v instanceof Data_Maybe.Nothing) {
            return $$delete(k)(m);
          }
          ;
          if (v instanceof Data_Maybe.Just) {
            return insert(k)(v.value0)(m);
          }
          ;
          throw new Error("Failed pattern match at Foreign.Object (line 209, column 15 - line 211, column 25): " + [v.constructor.name]);
        };
      };
    };
    var update = function(f) {
      return function(k) {
        return function(m) {
          return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
        };
      };
    };
    module2.exports = {
      isEmpty,
      singleton,
      insert,
      lookup,
      toUnfoldable,
      toAscUnfoldable,
      fromFoldable,
      fromFoldableWith,
      fromHomogeneous,
      "delete": $$delete,
      pop,
      member,
      alter,
      update,
      mapWithKey,
      filterWithKey,
      filterKeys,
      filter,
      values,
      union,
      unionWith,
      unions,
      isSubmap,
      fold,
      foldMap,
      foldM,
      foldMaybe,
      thawST,
      freezeST,
      functorObject,
      functorWithIndexObject,
      foldableObject,
      foldableWithIndexObject,
      traversableObject,
      traversableWithIndexObject,
      eqObject,
      eq1Object,
      ordObject,
      showObject,
      semigroupObject,
      monoidObject,
      empty: $foreign.empty,
      size: $foreign.size,
      keys: $foreign.keys,
      all: $foreign.all,
      runST: $foreign.runST,
      toArrayWithKey: $foreign.toArrayWithKey
    };
  }
});

// output/IdePurescript.Modules/foreign.js
var require_foreign50 = __commonJS({
  "output/IdePurescript.Modules/foreign.js"(exports2) {
    exports2.tmpDir = function() {
      return require("os").tmpdir();
    };
  }
});

// output/Data.String.Common/foreign.js
var require_foreign51 = __commonJS({
  "output/Data.String.Common/foreign.js"(exports2) {
    "use strict";
    exports2._localeCompare = function(lt) {
      return function(eq) {
        return function(gt) {
          return function(s1) {
            return function(s2) {
              var result = s1.localeCompare(s2);
              return result < 0 ? lt : result > 0 ? gt : eq;
            };
          };
        };
      };
    };
    exports2.replace = function(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    };
    exports2.replaceAll = function(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2);
        };
      };
    };
    exports2.split = function(sep) {
      return function(s) {
        return s.split(sep);
      };
    };
    exports2.toLower = function(s) {
      return s.toLowerCase();
    };
    exports2.toUpper = function(s) {
      return s.toUpperCase();
    };
    exports2.trim = function(s) {
      return s.trim();
    };
    exports2.joinWith = function(s) {
      return function(xs) {
        return xs.join(s);
      };
    };
  }
});

// output/Data.String.Common/index.js
var require_Data_String4 = __commonJS({
  "output/Data.String.Common/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign51();
    var Data_Ordering = require_Data9();
    var $$null = function(s) {
      return s === "";
    };
    var localeCompare = $foreign["_localeCompare"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
    module2.exports = {
      "null": $$null,
      localeCompare,
      replace: $foreign.replace,
      replaceAll: $foreign.replaceAll,
      split: $foreign.split,
      toLower: $foreign.toLower,
      toUpper: $foreign.toUpper,
      trim: $foreign.trim,
      joinWith: $foreign.joinWith
    };
  }
});

// output/Data.String.Regex/foreign.js
var require_foreign52 = __commonJS({
  "output/Data.String.Regex/foreign.js"(exports2) {
    "use strict";
    exports2.showRegexImpl = function(r) {
      return "" + r;
    };
    exports2.regexImpl = function(left) {
      return function(right) {
        return function(s1) {
          return function(s2) {
            try {
              return right(new RegExp(s1, s2));
            } catch (e) {
              return left(e.message);
            }
          };
        };
      };
    };
    exports2.source = function(r) {
      return r.source;
    };
    exports2.flagsImpl = function(r) {
      return {
        multiline: r.multiline,
        ignoreCase: r.ignoreCase,
        global: r.global,
        dotAll: r.dotAll,
        sticky: !!r.sticky,
        unicode: !!r.unicode
      };
    };
    exports2.test = function(r) {
      return function(s) {
        var lastIndex = r.lastIndex;
        var result = r.test(s);
        r.lastIndex = lastIndex;
        return result;
      };
    };
    exports2._match = function(just) {
      return function(nothing) {
        return function(r) {
          return function(s) {
            var m = s.match(r);
            if (m == null || m.length === 0) {
              return nothing;
            } else {
              for (var i = 0; i < m.length; i++) {
                m[i] = m[i] == null ? nothing : just(m[i]);
              }
              return just(m);
            }
          };
        };
      };
    };
    exports2.replace = function(r) {
      return function(s1) {
        return function(s2) {
          return s2.replace(r, s1);
        };
      };
    };
    exports2._replaceBy = function(just) {
      return function(nothing) {
        return function(r) {
          return function(f) {
            return function(s) {
              return s.replace(r, function(match) {
                var groups = [];
                var group, i = 1;
                while (typeof (group = arguments[i++]) !== "number") {
                  groups.push(group == null ? nothing : just(group));
                }
                return f(match)(groups);
              });
            };
          };
        };
      };
    };
    exports2._search = function(just) {
      return function(nothing) {
        return function(r) {
          return function(s) {
            var result = s.search(r);
            return result === -1 ? nothing : just(result);
          };
        };
      };
    };
    exports2.split = function(r) {
      return function(s) {
        return s.split(r);
      };
    };
  }
});

// output/Control.Alternative/index.js
var require_Control14 = __commonJS({
  "output/Control.Alternative/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Plus = require_Control9();
    var Data_Functor = require_Data4();
    var Data_Unit = require_Data3();
    var guard = function(dictAlternative) {
      return function(v) {
        if (v) {
          return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
        }
        ;
        if (!v) {
          return Control_Plus.empty(dictAlternative.Plus1());
        }
        ;
        throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [v.constructor.name]);
      };
    };
    var alternativeArray = {
      Applicative0: function() {
        return Control_Applicative.applicativeArray;
      },
      Plus1: function() {
        return Control_Plus.plusArray;
      }
    };
    module2.exports = {
      guard,
      alternativeArray,
      alt: Control_Alt.alt,
      liftA1: Control_Applicative.liftA1,
      pure: Control_Applicative.pure,
      unless: Control_Applicative.unless,
      when: Control_Applicative.when,
      apply: Control_Apply.apply,
      empty: Control_Plus.empty,
      map: Data_Functor.map,
      "void": Data_Functor["void"]
    };
  }
});

// output/Data.String.Regex.Flags/index.js
var require_Data_String_Regex = __commonJS({
  "output/Data.String.Regex.Flags/index.js"(exports2, module2) {
    "use strict";
    var Control_Alternative = require_Control14();
    var Data_Eq = require_Data8();
    var Data_Functor = require_Data4();
    var Data_Semigroup = require_Data7();
    var Data_String_Common = require_Data_String4();
    var RegexFlags = function() {
      function RegexFlags2(value0) {
        this.value0 = value0;
      }
      ;
      RegexFlags2.create = function(value0) {
        return new RegexFlags2(value0);
      };
      return RegexFlags2;
    }();
    var unicode = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: true
    });
    var sticky = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: true,
      unicode: false
    });
    var showRegexFlags = {
      show: function(v) {
        var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.dotAll))("dotAll"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_Alternative.guard(Control_Alternative.alternativeArray)(v.value0.unicode))("unicode")))))));
        var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([]);
        if ($6) {
          return "noFlags";
        }
        ;
        return "(" + (Data_String_Common.joinWith(" <> ")(usedFlags) + ")");
      }
    };
    var semigroupRegexFlags = {
      append: function(v) {
        return function(v1) {
          return new RegexFlags({
            global: v.value0.global || v1.value0.global,
            ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase,
            multiline: v.value0.multiline || v1.value0.multiline,
            dotAll: v.value0.dotAll || v1.value0.dotAll,
            sticky: v.value0.sticky || v1.value0.sticky,
            unicode: v.value0.unicode || v1.value0.unicode
          });
        };
      }
    };
    var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
    });
    var multiline = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: true,
      dotAll: false,
      sticky: false,
      unicode: false
    });
    var monoidRegexFlags = {
      mempty: noFlags,
      Semigroup0: function() {
        return semigroupRegexFlags;
      }
    };
    var ignoreCase = new RegexFlags({
      global: false,
      ignoreCase: true,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
    });
    var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      dotAll: false,
      sticky: false,
      unicode: false
    });
    var eqRegexFlags = {
      eq: function(v) {
        return function(v1) {
          return v.value0.global === v1.value0.global && (v.value0.ignoreCase === v1.value0.ignoreCase && (v.value0.multiline === v1.value0.multiline && (v.value0.dotAll === v1.value0.dotAll && (v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode))));
        };
      }
    };
    var dotAll = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      dotAll: true,
      sticky: false,
      unicode: false
    });
    module2.exports = {
      RegexFlags,
      noFlags,
      global,
      ignoreCase,
      multiline,
      sticky,
      unicode,
      dotAll,
      semigroupRegexFlags,
      monoidRegexFlags,
      eqRegexFlags,
      showRegexFlags
    };
  }
});

// output/Data.String.Regex/index.js
var require_Data_String5 = __commonJS({
  "output/Data.String.Regex/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign52();
    var Data_Either = require_Data16();
    var Data_Maybe = require_Data15();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var showRegex = {
      show: $foreign.showRegexImpl
    };
    var search = $foreign["_search"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var replace$prime = $foreign["_replaceBy"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var renderFlags = function(v) {
      return function() {
        if (v.value0.global) {
          return "g";
        }
        ;
        return "";
      }() + (function() {
        if (v.value0.ignoreCase) {
          return "i";
        }
        ;
        return "";
      }() + (function() {
        if (v.value0.multiline) {
          return "m";
        }
        ;
        return "";
      }() + (function() {
        if (v.value0.dotAll) {
          return "s";
        }
        ;
        return "";
      }() + (function() {
        if (v.value0.sticky) {
          return "y";
        }
        ;
        return "";
      }() + function() {
        if (v.value0.unicode) {
          return "u";
        }
        ;
        return "";
      }()))));
    };
    var regex = function(s) {
      return function(f) {
        return $foreign.regexImpl(Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
    };
    var parseFlags = function(s) {
      return new Data_String_Regex_Flags.RegexFlags({
        global: Data_String_CodeUnits.contains("g")(s),
        ignoreCase: Data_String_CodeUnits.contains("i")(s),
        multiline: Data_String_CodeUnits.contains("m")(s),
        dotAll: Data_String_CodeUnits.contains("s")(s),
        sticky: Data_String_CodeUnits.contains("y")(s),
        unicode: Data_String_CodeUnits.contains("u")(s)
      });
    };
    var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var flags = function($9) {
      return Data_String_Regex_Flags.RegexFlags.create($foreign.flagsImpl($9));
    };
    module2.exports = {
      regex,
      flags,
      renderFlags,
      parseFlags,
      match,
      "replace'": replace$prime,
      search,
      showRegex,
      source: $foreign.source,
      test: $foreign.test,
      replace: $foreign.replace,
      split: $foreign.split
    };
  }
});

// output/Data.String.Utils/foreign.js
var require_foreign53 = __commonJS({
  "output/Data.String.Utils/foreign.js"(exports2) {
    "use strict";
    function codePointAtImpl(just, nothing, i, s) {
      var codePointArray = Array.from(s);
      var isWithinRange = i >= 0 && i < codePointArray.length;
      return isWithinRange ? just(codePointArray[i].codePointAt(0)) : nothing;
    }
    function codePointAtPrimeImpl(just, nothing, i, s) {
      return i >= 0 && i < s.length ? just(s.codePointAt(i)) : nothing;
    }
    function endsWithImpl(searchString, s) {
      return s.endsWith(searchString);
    }
    function endsWithPrimeImpl(searchString, position, s) {
      return s.endsWith(searchString, position);
    }
    function escapeRegexImpl(str) {
      return str.replace(/[.*+?^${}()|[\]\-\\]/g, "\\$&");
    }
    function fromCharArrayImpl(array) {
      return array.join("");
    }
    function includesImpl(searchString, str) {
      return str.includes(searchString);
    }
    function includesPrimeImpl(needle, position, haystack) {
      var pos = Math.max(0, position);
      var needleA = Array.from(needle);
      var haystackA = Array.from(haystack).slice(pos);
      var needleALen = needleA.length;
      var maxIndex = haystackA.length + 1 - needleALen;
      var found = false;
      var i;
      for (i = 0; i < maxIndex; i++) {
        if (needleA.every(function(e, j) {
          return e === haystackA[i + j];
        })) {
          found = true;
          break;
        }
      }
      return found;
    }
    function lengthImpl(str) {
      return Array.from(str).length;
    }
    function linesImpl(str) {
      return str.split(/\r\n|[\n\v\f\r\u0085\u2028\u2029]/);
    }
    function normalizeImpl(str) {
      return str.normalize();
    }
    function normalizePrimeImpl(normalizationForm, str) {
      return str.normalize(normalizationForm);
    }
    function padEndPrimeImpl(targetLength, str) {
      return str.padEnd(targetLength);
    }
    function padStartPrimeImpl(targetLength, str) {
      return str.padStart(targetLength);
    }
    function repeatImpl(just, nothing, n, str) {
      var result;
      try {
        result = just(str.repeat(n));
      } catch (error) {
        result = nothing;
      }
      return result;
    }
    function startsWithImpl(searchString, s) {
      return s.startsWith(searchString);
    }
    function startsWithPrimeImpl(searchString, position, s) {
      return s.startsWith(searchString, position);
    }
    function stripCharsImpl(chars, s) {
      return s.replace(RegExp("[" + escapeRegexImpl(chars) + "]", "g"), "");
    }
    function stripDiacriticsImpl(str) {
      return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }
    function toCharArrayImpl(str) {
      return Array.from(str);
    }
    function unsafeCodePointAtImpl(i, s) {
      var codePointArray = Array.from(s);
      var isWithinRange = i >= 0 && i < codePointArray.length;
      if (isWithinRange) {
        return codePointArray[i].codePointAt(0);
      } else {
        throw new Error("Data.String.Utils.unsafeCodePointAt: Invalid index");
      }
    }
    function unsafeCodePointAtPrimeImpl(i, s) {
      if (i >= 0 && i < s.length) {
        return s.codePointAt(i);
      } else {
        throw new Error("Data.String.Utils.unsafeCodePointAt': Invalid index");
      }
    }
    function unsafeRepeatImpl(n, str) {
      try {
        return str.repeat(n);
      } catch (error) {
        throw new Error("Data.String.Utils.unsafeRepeat: Invalid count");
      }
    }
    function wordsImpl(s) {
      return s.split(/[\u000a-\u000d\u0085\u2028\u2029\u0009\u0020\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000]+/);
    }
    exports2.codePointAtImpl = codePointAtImpl;
    exports2.codePointAtPrimeImpl = codePointAtPrimeImpl;
    exports2.endsWithImpl = endsWithImpl;
    exports2.endsWithPrimeImpl = endsWithPrimeImpl;
    exports2.escapeRegexImpl = escapeRegexImpl;
    exports2.fromCharArrayImpl = fromCharArrayImpl;
    exports2.includesImpl = includesImpl;
    exports2.includesPrimeImpl = includesPrimeImpl;
    exports2.lengthImpl = lengthImpl;
    exports2.linesImpl = linesImpl;
    exports2.normalizeImpl = normalizeImpl;
    exports2.normalizePrimeImpl = normalizePrimeImpl;
    exports2.padEndPrimeImpl = padEndPrimeImpl;
    exports2.padStartPrimeImpl = padStartPrimeImpl;
    exports2.repeatImpl = repeatImpl;
    exports2.startsWithImpl = startsWithImpl;
    exports2.startsWithPrimeImpl = startsWithPrimeImpl;
    exports2.stripCharsImpl = stripCharsImpl;
    exports2.stripDiacriticsImpl = stripDiacriticsImpl;
    exports2.toCharArrayImpl = toCharArrayImpl;
    exports2.unsafeCodePointAtImpl = unsafeCodePointAtImpl;
    exports2.unsafeCodePointAtPrimeImpl = unsafeCodePointAtPrimeImpl;
    exports2.unsafeRepeatImpl = unsafeRepeatImpl;
    exports2.wordsImpl = wordsImpl;
  }
});

// output/Data.String.CodePoints/foreign.js
var require_foreign54 = __commonJS({
  "output/Data.String.CodePoints/foreign.js"(exports2) {
    "use strict";
    var hasArrayFrom = typeof Array.from === "function";
    var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
    var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
    var hasCodePointAt = typeof String.prototype.codePointAt === "function";
    exports2._unsafeCodePointAt0 = function(fallback) {
      return hasCodePointAt ? function(str) {
        return str.codePointAt(0);
      } : fallback;
    };
    exports2._codePointAt = function(fallback) {
      return function(Just) {
        return function(Nothing) {
          return function(unsafeCodePointAt0) {
            return function(index) {
              return function(str) {
                var length = str.length;
                if (index < 0 || index >= length)
                  return Nothing;
                if (hasStringIterator) {
                  var iter = str[Symbol.iterator]();
                  for (var i = index; ; --i) {
                    var o = iter.next();
                    if (o.done)
                      return Nothing;
                    if (i === 0)
                      return Just(unsafeCodePointAt0(o.value));
                  }
                }
                return fallback(index)(str);
              };
            };
          };
        };
      };
    };
    exports2._countPrefix = function(fallback) {
      return function(unsafeCodePointAt0) {
        if (hasStringIterator) {
          return function(pred) {
            return function(str) {
              var iter = str[Symbol.iterator]();
              for (var cpCount = 0; ; ++cpCount) {
                var o = iter.next();
                if (o.done)
                  return cpCount;
                var cp = unsafeCodePointAt0(o.value);
                if (!pred(cp))
                  return cpCount;
              }
            };
          };
        }
        return fallback;
      };
    };
    exports2._fromCodePointArray = function(singleton) {
      return hasFromCodePoint ? function(cps) {
        if (cps.length < 1e4) {
          return String.fromCodePoint.apply(String, cps);
        }
        return cps.map(singleton).join("");
      } : function(cps) {
        return cps.map(singleton).join("");
      };
    };
    exports2._singleton = function(fallback) {
      return hasFromCodePoint ? String.fromCodePoint : fallback;
    };
    exports2._take = function(fallback) {
      return function(n) {
        if (hasStringIterator) {
          return function(str) {
            var accum = "";
            var iter = str[Symbol.iterator]();
            for (var i = 0; i < n; ++i) {
              var o = iter.next();
              if (o.done)
                return accum;
              accum += o.value;
            }
            return accum;
          };
        }
        return fallback(n);
      };
    };
    exports2._toCodePointArray = function(fallback) {
      return function(unsafeCodePointAt0) {
        if (hasArrayFrom) {
          return function(str) {
            return Array.from(str, unsafeCodePointAt0);
          };
        }
        return fallback;
      };
    };
  }
});

// output/Data.Enum/foreign.js
var require_foreign55 = __commonJS({
  "output/Data.Enum/foreign.js"(exports2) {
    "use strict";
    exports2.toCharCode = function(c) {
      return c.charCodeAt(0);
    };
    exports2.fromCharCode = function(c) {
      return String.fromCharCode(c);
    };
  }
});

// output/Data.Enum/index.js
var require_Data42 = __commonJS({
  "output/Data.Enum/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign55();
    var Control_Alternative = require_Control14();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Boolean = require_Data();
    var Data_Bounded = require_Data13();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Data_Unfoldable1 = require_Data31();
    var Data_Unit = require_Data3();
    var Cardinality = function(x) {
      return x;
    };
    var toEnum = function(dict) {
      return dict.toEnum;
    };
    var succ = function(dict) {
      return dict.succ;
    };
    var upFromIncluding = function(dictEnum) {
      return function(dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
      };
    };
    var showCardinality = {
      show: function(v) {
        return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
      }
    };
    var pred = function(dict) {
      return dict.pred;
    };
    var ordCardinality = Data_Ord.ordInt;
    var newtypeCardinality = {
      Coercible0: function() {
        return void 0;
      }
    };
    var fromEnum = function(dict) {
      return dict.fromEnum;
    };
    var toEnumWithDefaults = function(dictBoundedEnum) {
      return function(low) {
        return function(high) {
          return function(x) {
            var v = toEnum(dictBoundedEnum)(x);
            if (v instanceof Data_Maybe.Just) {
              return v.value0;
            }
            ;
            if (v instanceof Data_Maybe.Nothing) {
              var $55 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
              if ($55) {
                return low;
              }
              ;
              return high;
            }
            ;
            throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
          };
        };
      };
    };
    var eqCardinality = Data_Eq.eqInt;
    var enumUnit = {
      succ: Data_Function["const"](Data_Maybe.Nothing.value),
      pred: Data_Function["const"](Data_Maybe.Nothing.value),
      Ord0: function() {
        return Data_Ord.ordUnit;
      }
    };
    var enumTuple = function(dictEnum) {
      return function(dictBoundedEnum) {
        return {
          succ: function(v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))(function() {
              var $98 = Data_Tuple.Tuple.create(v.value0);
              return function($99) {
                return Data_Maybe.Just.create($98($99));
              };
            }())(succ(dictBoundedEnum.Enum1())(v.value1));
          },
          pred: function(v) {
            return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))(function() {
              var $100 = Data_Tuple.Tuple.create(v.value0);
              return function($101) {
                return Data_Maybe.Just.create($100($101));
              };
            }())(pred(dictBoundedEnum.Enum1())(v.value1));
          },
          Ord0: function() {
            return Data_Tuple.ordTuple(dictEnum.Ord0())(dictBoundedEnum.Enum1().Ord0());
          }
        };
      };
    };
    var enumOrdering = {
      succ: function(v) {
        if (v instanceof Data_Ordering.LT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
        }
        ;
        if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
        }
        ;
        if (v instanceof Data_Ordering.GT) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [v.constructor.name]);
      },
      pred: function(v) {
        if (v instanceof Data_Ordering.LT) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
        }
        ;
        if (v instanceof Data_Ordering.GT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
        }
        ;
        throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [v.constructor.name]);
      },
      Ord0: function() {
        return Data_Ord.ordOrdering;
      }
    };
    var enumMaybe = function(dictBoundedEnum) {
      return {
        succ: function(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
          }
          ;
          if (v instanceof Data_Maybe.Just) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [v.constructor.name]);
        },
        pred: function(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
          }
          ;
          if (v instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [v.constructor.name]);
        },
        Ord0: function() {
          return Data_Maybe.ordMaybe(dictBoundedEnum.Enum1().Ord0());
        }
      };
    };
    var enumInt = {
      succ: function(n) {
        var $68 = n < Data_Bounded.top(Data_Bounded.boundedInt);
        if ($68) {
          return new Data_Maybe.Just(n + 1 | 0);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      pred: function(n) {
        var $69 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
        if ($69) {
          return new Data_Maybe.Just(n - 1 | 0);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      Ord0: function() {
        return Data_Ord.ordInt;
      }
    };
    var enumFromTo = function(dictEnum) {
      return function(dictUnfoldable1) {
        var go = function(step) {
          return function(op) {
            return function(to) {
              return function(a) {
                return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function(a$prime) {
                  return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(op(a$prime)(to)))(a$prime);
                }));
              };
            };
          };
        };
        return function(v) {
          return function(v1) {
            if (Data_Eq.eq(dictEnum.Ord0().Eq0())(v)(v1)) {
              return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
            }
            ;
            if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
              return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
            }
            ;
            if (Data_Boolean.otherwise) {
              return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
            }
            ;
            throw new Error("Failed pattern match at Data.Enum (line 186, column 14 - line 190, column 51): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      };
    };
    var enumFromThenTo = function(dictUnfoldable) {
      return function(dictFunctor) {
        return function(dictBoundedEnum) {
          var go = function(step) {
            return function(to) {
              return function(e) {
                if (e <= to) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
                }
                ;
                if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
                }
                ;
                throw new Error("Failed pattern match at Data.Enum (line 217, column 5 - line 219, column 28): " + [step.constructor.name, to.constructor.name, e.constructor.name]);
              };
            };
          };
          return function(a) {
            return function(b) {
              return function(c) {
                var c$prime = fromEnum(dictBoundedEnum)(c);
                var b$prime = fromEnum(dictBoundedEnum)(b);
                var a$prime = fromEnum(dictBoundedEnum)(a);
                return Data_Functor.map(dictFunctor)(function() {
                  var $102 = Data_Maybe.fromJust();
                  var $103 = toEnum(dictBoundedEnum);
                  return function($104) {
                    return $102($103($104));
                  };
                }())(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
              };
            };
          };
        };
      };
    };
    var enumEither = function(dictBoundedEnum) {
      return function(dictBoundedEnum1) {
        return {
          succ: function(v) {
            if (v instanceof Data_Either.Left) {
              return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function($105) {
                return Data_Maybe.Just.create(Data_Either.Left.create($105));
              })(succ(dictBoundedEnum.Enum1())(v.value0));
            }
            ;
            if (v instanceof Data_Either.Right) {
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function($106) {
                return Data_Maybe.Just.create(Data_Either.Right.create($106));
              })(succ(dictBoundedEnum1.Enum1())(v.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [v.constructor.name]);
          },
          pred: function(v) {
            if (v instanceof Data_Either.Left) {
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function($107) {
                return Data_Maybe.Just.create(Data_Either.Left.create($107));
              })(pred(dictBoundedEnum.Enum1())(v.value0));
            }
            ;
            if (v instanceof Data_Either.Right) {
              return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function($108) {
                return Data_Maybe.Just.create(Data_Either.Right.create($108));
              })(pred(dictBoundedEnum1.Enum1())(v.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [v.constructor.name]);
          },
          Ord0: function() {
            return Data_Either.ordEither(dictBoundedEnum.Enum1().Ord0())(dictBoundedEnum1.Enum1().Ord0());
          }
        };
      };
    };
    var enumBoolean = {
      succ: function(v) {
        if (!v) {
          return new Data_Maybe.Just(true);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      pred: function(v) {
        if (v) {
          return new Data_Maybe.Just(false);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      Ord0: function() {
        return Data_Ord.ordBoolean;
      }
    };
    var downFromIncluding = function(dictEnum) {
      return function(dictUnfoldable1) {
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
      };
    };
    var diag = function(a) {
      return new Data_Tuple.Tuple(a, a);
    };
    var downFrom = function(dictEnum) {
      return function(dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function() {
          var $109 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
          var $110 = pred(dictEnum);
          return function($111) {
            return $109($110($111));
          };
        }());
      };
    };
    var upFrom = function(dictEnum) {
      return function(dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function() {
          var $112 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
          var $113 = succ(dictEnum);
          return function($114) {
            return $112($113($114));
          };
        }());
      };
    };
    var defaultToEnum = function(dictBounded) {
      return function(dictEnum) {
        return function(i$prime) {
          var go = function($copy_i) {
            return function($copy_x) {
              var $tco_var_i = $copy_i;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i, x) {
                var $83 = i === 0;
                if ($83) {
                  $tco_done = true;
                  return new Data_Maybe.Just(x);
                }
                ;
                var v = succ(dictEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                  $tco_var_i = i - 1 | 0;
                  $copy_x = v.value0;
                  return;
                }
                ;
                if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
                }
                ;
                throw new Error("Failed pattern match at Data.Enum (line 296, column 12 - line 298, column 33): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_i, $copy_x);
              }
              ;
              return $tco_result;
            };
          };
          var $86 = i$prime < 0;
          if ($86) {
            return Data_Maybe.Nothing.value;
          }
          ;
          return go(i$prime)(Data_Bounded.bottom(dictBounded));
        };
      };
    };
    var defaultSucc = function(toEnum$prime) {
      return function(fromEnum$prime) {
        return function(a) {
          return toEnum$prime(fromEnum$prime(a) + 1 | 0);
        };
      };
    };
    var defaultPred = function(toEnum$prime) {
      return function(fromEnum$prime) {
        return function(a) {
          return toEnum$prime(fromEnum$prime(a) - 1 | 0);
        };
      };
    };
    var defaultFromEnum = function(dictEnum) {
      var go = function($copy_i) {
        return function($copy_x) {
          var $tco_var_i = $copy_i;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(i, x) {
            var v = pred(dictEnum)(x);
            if (v instanceof Data_Maybe.Just) {
              $tco_var_i = i + 1 | 0;
              $copy_x = v.value0;
              return;
            }
            ;
            if (v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return i;
            }
            ;
            throw new Error("Failed pattern match at Data.Enum (line 309, column 5 - line 311, column 19): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_i, $copy_x);
          }
          ;
          return $tco_result;
        };
      };
      return go(0);
    };
    var defaultCardinality = function(dictBounded) {
      return function(dictEnum) {
        var go = function($copy_i) {
          return function($copy_x) {
            var $tco_var_i = $copy_i;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i, x) {
              var v = succ(dictEnum)(x);
              if (v instanceof Data_Maybe.Just) {
                $tco_var_i = i + 1 | 0;
                $copy_x = v.value0;
                return;
              }
              ;
              if (v instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return i;
              }
              ;
              throw new Error("Failed pattern match at Data.Enum (line 276, column 5 - line 278, column 19): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_i, $copy_x);
            }
            ;
            return $tco_result;
          };
        };
        return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
      };
    };
    var charToEnum = function(v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
        return new Data_Maybe.Just($foreign.fromCharCode(v));
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var enumChar = {
      succ: defaultSucc(charToEnum)($foreign.toCharCode),
      pred: defaultPred(charToEnum)($foreign.toCharCode),
      Ord0: function() {
        return Data_Ord.ordChar;
      }
    };
    var cardinality = function(dict) {
      return dict.cardinality;
    };
    var boundedEnumUnit = {
      cardinality: 1,
      toEnum: function(v) {
        if (v === 0) {
          return new Data_Maybe.Just(Data_Unit.unit);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      fromEnum: Data_Function["const"](0),
      Bounded0: function() {
        return Data_Bounded.boundedUnit;
      },
      Enum1: function() {
        return enumUnit;
      }
    };
    var boundedEnumOrdering = {
      cardinality: 3,
      toEnum: function(v) {
        if (v === 0) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
        }
        ;
        if (v === 1) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
        }
        ;
        if (v === 2) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      fromEnum: function(v) {
        if (v instanceof Data_Ordering.LT) {
          return 0;
        }
        ;
        if (v instanceof Data_Ordering.EQ) {
          return 1;
        }
        ;
        if (v instanceof Data_Ordering.GT) {
          return 2;
        }
        ;
        throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): " + [v.constructor.name]);
      },
      Bounded0: function() {
        return Data_Bounded.boundedOrdering;
      },
      Enum1: function() {
        return enumOrdering;
      }
    };
    var boundedEnumChar = {
      cardinality: $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0,
      toEnum: charToEnum,
      fromEnum: $foreign.toCharCode,
      Bounded0: function() {
        return Data_Bounded.boundedChar;
      },
      Enum1: function() {
        return enumChar;
      }
    };
    var boundedEnumBoolean = {
      cardinality: 2,
      toEnum: function(v) {
        if (v === 0) {
          return new Data_Maybe.Just(false);
        }
        ;
        if (v === 1) {
          return new Data_Maybe.Just(true);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      fromEnum: function(v) {
        if (!v) {
          return 0;
        }
        ;
        if (v) {
          return 1;
        }
        ;
        throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): " + [v.constructor.name]);
      },
      Bounded0: function() {
        return Data_Bounded.boundedBoolean;
      },
      Enum1: function() {
        return enumBoolean;
      }
    };
    module2.exports = {
      succ,
      pred,
      cardinality,
      toEnum,
      fromEnum,
      toEnumWithDefaults,
      Cardinality,
      enumFromTo,
      enumFromThenTo,
      upFrom,
      upFromIncluding,
      downFrom,
      downFromIncluding,
      defaultSucc,
      defaultPred,
      defaultCardinality,
      defaultToEnum,
      defaultFromEnum,
      enumBoolean,
      enumInt,
      enumChar,
      enumUnit,
      enumOrdering,
      enumMaybe,
      enumEither,
      enumTuple,
      boundedEnumBoolean,
      boundedEnumChar,
      boundedEnumUnit,
      boundedEnumOrdering,
      newtypeCardinality,
      eqCardinality,
      ordCardinality,
      showCardinality
    };
  }
});

// output/Data.String.CodePoints/index.js
var require_Data_String6 = __commonJS({
  "output/Data.String.CodePoints/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign54();
    var Data_Array = require_Data39();
    var Data_Boolean = require_Data();
    var Data_Bounded = require_Data13();
    var Data_Enum = require_Data42();
    var Data_EuclideanRing = require_Data18();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var Data_String_Unsafe = require_Data_String();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var CodePoint = function(x) {
      return x;
    };
    var unsurrogate = function(lead) {
      return function(trail) {
        return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
    };
    var showCodePoint = {
      show: function(v) {
        return "(CodePoint 0x" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + ")");
      }
    };
    var isTrail = function(cu) {
      return 56320 <= cu && cu <= 57343;
    };
    var isLead = function(cu) {
      return 55296 <= cu && cu <= 56319;
    };
    var uncons = function(s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
        return Data_Maybe.Nothing.value;
      }
      ;
      if (v === 1) {
        return new Data_Maybe.Just({
          head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
          tail: ""
        });
      }
      ;
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
        return new Data_Maybe.Just({
          head: unsurrogate(cu0)(cu1),
          tail: Data_String_CodeUnits.drop(2)(s)
        });
      }
      ;
      return new Data_Maybe.Just({
        head: cu0,
        tail: Data_String_CodeUnits.drop(1)(s)
      });
    };
    var unconsButWithTuple = function(s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
    };
    var toCodePointArrayFallback = function(s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
    };
    var unsafeCodePointAt0Fallback = function(s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
        var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
        var $26 = isTrail(cu1);
        if ($26) {
          return unsurrogate(cu0)(cu1);
        }
        ;
        return cu0;
      }
      ;
      return cu0;
    };
    var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
    var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
    var length = function($52) {
      return Data_Array.length(toCodePointArray($52));
    };
    var lastIndexOf = function(p) {
      return function(s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(i) {
          return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.lastIndexOf(p)(s));
      };
    };
    var indexOf = function(p) {
      return function(s) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(i) {
          return length(Data_String_CodeUnits.take(i)(s));
        })(Data_String_CodeUnits.indexOf(p)(s));
      };
    };
    var fromCharCode = function() {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function($54) {
        return Data_String_CodeUnits.singleton($53($54));
      };
    }();
    var singletonFallback = function(v) {
      if (v <= 65535) {
        return fromCharCode(v);
      }
      ;
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
    };
    var fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
    var singleton = $foreign["_singleton"](singletonFallback);
    var takeFallback = function(n) {
      return function(v) {
        if (n < 1) {
          return "";
        }
        ;
        var v1 = uncons(v);
        if (v1 instanceof Data_Maybe.Just) {
          return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
        }
        ;
        return v;
      };
    };
    var take = $foreign["_take"](takeFallback);
    var lastIndexOf$prime = function(p) {
      return function(i) {
        return function(s) {
          var i$prime = Data_String_CodeUnits.length(take(i)(s));
          return Data_Functor.map(Data_Maybe.functorMaybe)(function(k) {
            return length(Data_String_CodeUnits.take(k)(s));
          })(Data_String_CodeUnits["lastIndexOf'"](p)(i$prime)(s));
        };
      };
    };
    var splitAt = function(i) {
      return function(s) {
        var before = take(i)(s);
        return {
          before,
          after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
        };
      };
    };
    var eqCodePoint = {
      eq: function(x) {
        return function(y) {
          return x === y;
        };
      }
    };
    var ordCodePoint = {
      compare: function(x) {
        return function(y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
        };
      },
      Eq0: function() {
        return eqCodePoint;
      }
    };
    var drop = function(n) {
      return function(s) {
        return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
    };
    var indexOf$prime = function(p) {
      return function(i) {
        return function(s) {
          var s$prime = drop(i)(s);
          return Data_Functor.map(Data_Maybe.functorMaybe)(function(k) {
            return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;
          })(Data_String_CodeUnits.indexOf(p)(s$prime));
        };
      };
    };
    var countTail = function($copy_p) {
      return function($copy_s) {
        return function($copy_accum) {
          var $tco_var_p = $copy_p;
          var $tco_var_s = $copy_s;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(p, s, accum) {
            var v = uncons(s);
            if (v instanceof Data_Maybe.Just) {
              var $39 = p(v.value0.head);
              if ($39) {
                $tco_var_p = p;
                $tco_var_s = v.value0.tail;
                $copy_accum = accum + 1 | 0;
                return;
              }
              ;
              $tco_done = true;
              return accum;
            }
            ;
            $tco_done = true;
            return accum;
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
          }
          ;
          return $tco_result;
        };
      };
    };
    var countFallback = function(p) {
      return function(s) {
        return countTail(p)(s)(0);
      };
    };
    var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);
    var dropWhile = function(p) {
      return function(s) {
        return drop(countPrefix(p)(s))(s);
      };
    };
    var takeWhile = function(p) {
      return function(s) {
        return take(countPrefix(p)(s))(s);
      };
    };
    var codePointFromChar = function() {
      var $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
      return function($56) {
        return CodePoint($55($56));
      };
    }();
    var codePointAtFallback = function($copy_n) {
      return function($copy_s) {
        var $tco_var_n = $copy_n;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(n, s) {
          var v = uncons(s);
          if (v instanceof Data_Maybe.Just) {
            var $44 = n === 0;
            if ($44) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0.head);
            }
            ;
            $tco_var_n = n - 1 | 0;
            $copy_s = v.value0.tail;
            return;
          }
          ;
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_n, $copy_s);
        }
        ;
        return $tco_result;
      };
    };
    var codePointAt = function(v) {
      return function(v1) {
        if (v < 0) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v === 0 && v1 === "") {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v === 0) {
          return new Data_Maybe.Just(unsafeCodePointAt0(v1));
        }
        ;
        return $foreign["_codePointAt"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);
      };
    };
    var boundedCodePoint = {
      bottom: 0,
      top: 1114111,
      Ord0: function() {
        return ordCodePoint;
      }
    };
    var boundedEnumCodePoint = {
      cardinality: 1114111 + 1 | 0,
      fromEnum: function(v) {
        return v;
      },
      toEnum: function(n) {
        if (n >= 0 && n <= 1114111) {
          return new Data_Maybe.Just(n);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [n.constructor.name]);
      },
      Bounded0: function() {
        return boundedCodePoint;
      },
      Enum1: function() {
        return enumCodePoint;
      }
    };
    var enumCodePoint = {
      succ: Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)),
      pred: Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)),
      Ord0: function() {
        return ordCodePoint;
      }
    };
    module2.exports = {
      codePointFromChar,
      singleton,
      fromCodePointArray,
      toCodePointArray,
      codePointAt,
      uncons,
      length,
      countPrefix,
      indexOf,
      "indexOf'": indexOf$prime,
      lastIndexOf,
      "lastIndexOf'": lastIndexOf$prime,
      take,
      takeWhile,
      drop,
      dropWhile,
      splitAt,
      eqCodePoint,
      ordCodePoint,
      showCodePoint,
      boundedCodePoint,
      enumCodePoint,
      boundedEnumCodePoint,
      contains: Data_String_CodeUnits.contains,
      stripPrefix: Data_String_CodeUnits.stripPrefix,
      stripSuffix: Data_String_CodeUnits.stripSuffix
    };
  }
});

// output/Data.String.Regex.Unsafe/index.js
var require_Data_String_Regex2 = __commonJS({
  "output/Data.String.Regex.Unsafe/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Either = require_Data16();
    var Data_String_Regex = require_Data_String5();
    var Partial_Unsafe = require_Partial2();
    var unsafeRegex = function(s) {
      return function(f) {
        return Data_Either.either(Partial_Unsafe.unsafeCrashWith)(Control_Category.identity(Control_Category.categoryFn))(Data_String_Regex.regex(s)(f));
      };
    };
    module2.exports = {
      unsafeRegex
    };
  }
});

// output/Data.String.Utils/index.js
var require_Data_String7 = __commonJS({
  "output/Data.String.Utils/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign53();
    var Data_Array = require_Data39();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Show = require_Data14();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var Data_String_Regex = require_Data_String5();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var Data_String_Regex_Unsafe = require_Data_String_Regex2();
    var Data_Unit = require_Data3();
    var NFC = function() {
      function NFC2() {
      }
      ;
      NFC2.value = new NFC2();
      return NFC2;
    }();
    var NFD = function() {
      function NFD2() {
      }
      ;
      NFD2.value = new NFD2();
      return NFD2;
    }();
    var NFKC = function() {
      function NFKC2() {
      }
      ;
      NFKC2.value = new NFKC2();
      return NFKC2;
    }();
    var NFKD = function() {
      function NFKD2() {
      }
      ;
      NFKD2.value = new NFKD2();
      return NFKD2;
    }();
    var words = function(s) {
      return $foreign.wordsImpl(s);
    };
    var unsafeRepeat = function(n) {
      return function(s) {
        return $foreign.unsafeRepeatImpl(n, s);
      };
    };
    var unsafeCodePointAt$prime = function(n) {
      return function(s) {
        return $foreign.unsafeCodePointAtPrimeImpl(n, s);
      };
    };
    var unsafeCodePointAt = function(n) {
      return function(s) {
        return $foreign.unsafeCodePointAtImpl(n, s);
      };
    };
    var trimStart = function(s) {
      return s.trimStart(Data_Unit.unit);
    };
    var trimEnd = function(s) {
      return s.trimEnd(Data_Unit.unit);
    };
    var toCharArray = function(s) {
      return $foreign.toCharArrayImpl(s);
    };
    var stripDiacritics = function(s) {
      return $foreign.stripDiacriticsImpl(s);
    };
    var stripChars = function(chars) {
      return function(s) {
        return $foreign.stripCharsImpl(chars, s);
      };
    };
    var startsWith$prime = function(searchString) {
      return function(position) {
        return function(s) {
          return $foreign.startsWithPrimeImpl(searchString, position, s);
        };
      };
    };
    var startsWith = function(searchString) {
      return function(s) {
        return $foreign.startsWithImpl(searchString, s);
      };
    };
    var showNormalizationForm = {
      show: function(v) {
        if (v instanceof NFC) {
          return "NFC";
        }
        ;
        if (v instanceof NFD) {
          return "NFD";
        }
        ;
        if (v instanceof NFKC) {
          return "NFKC";
        }
        ;
        if (v instanceof NFKD) {
          return "NFKD";
        }
        ;
        throw new Error("Failed pattern match at Data.String.Utils (line 264, column 1 - line 268, column 21): " + [v.constructor.name]);
      }
    };
    var repeat = function(n) {
      return function(s) {
        return $foreign.repeatImpl(Data_Maybe.Just.create, Data_Maybe.Nothing.value, n, s);
      };
    };
    var padStart$prime = function(n) {
      return function(s) {
        return $foreign.padStartPrimeImpl(n, s);
      };
    };
    var padStart = function(n) {
      return function(s) {
        var numberOfCodeUnits = Data_String_CodeUnits.length(s);
        var numberOfCodePoints = Data_String_CodePoints.length(s);
        return padStart$prime((n + numberOfCodeUnits | 0) - numberOfCodePoints | 0)(s);
      };
    };
    var padEnd$prime = function(n) {
      return function(s) {
        return $foreign.padEndPrimeImpl(n, s);
      };
    };
    var padEnd = function(n) {
      return function(s) {
        var numberOfCodeUnits = Data_String_CodeUnits.length(s);
        var numberOfCodePoints = Data_String_CodePoints.length(s);
        return padEnd$prime((n + numberOfCodeUnits | 0) - numberOfCodePoints | 0)(s);
      };
    };
    var normalize$prime = function(nf) {
      return function(s) {
        return $foreign.normalizePrimeImpl(Data_Show.show(showNormalizationForm)(nf), s);
      };
    };
    var normalize = function(s) {
      return $foreign.normalizeImpl(s);
    };
    var lines = function(s) {
      return $foreign.linesImpl(s);
    };
    var stripMarginWith = function(delimiter) {
      var go = function(line) {
        var trimmed = trimStart(line);
        var $5 = startsWith(delimiter)(trimmed);
        if ($5) {
          return Data_String_CodePoints.drop(Data_String_CodePoints.length(delimiter))(trimmed);
        }
        ;
        return line;
      };
      var $6 = Data_String_Common.joinWith("\n");
      var $7 = Data_Functor.map(Data_Functor.functorArray)(go);
      return function($8) {
        return $6($7(lines(Data_String_Common.trim($8))));
      };
    };
    var stripMargin = stripMarginWith("|");
    var length = function(dictWarn) {
      return function(s) {
        return $foreign.lengthImpl(s);
      };
    };
    var includes$prime = function(needle) {
      return function(position) {
        return function(haystack) {
          return $foreign.includesPrimeImpl(needle, position, haystack);
        };
      };
    };
    var includes = function(searchString) {
      return function(s) {
        return $foreign.includesImpl(searchString, s);
      };
    };
    var fromCharArray = function(arr) {
      return $foreign.fromCharArrayImpl(arr);
    };
    var mapChars = function(f) {
      var $9 = Data_Functor.map(Data_Functor.functorArray)(f);
      return function($10) {
        return fromCharArray($9(toCharArray($10)));
      };
    };
    var filter = function(p) {
      var $11 = Data_Array.filter(p);
      return function($12) {
        return fromCharArray($11(toCharArray($12)));
      };
    };
    var escapeRegex = function(s) {
      return $foreign.escapeRegexImpl(s);
    };
    var replaceAll = function(dictWarn) {
      var mkRegex = function(str) {
        return Data_String_Regex_Unsafe.unsafeRegex(escapeRegex(str))(Data_String_Regex_Flags.global);
      };
      return function($13) {
        return Data_String_Regex.replace(mkRegex($13));
      };
    };
    var endsWith$prime = function(searchString) {
      return function(position) {
        return function(s) {
          return $foreign.endsWithPrimeImpl(searchString, position, s);
        };
      };
    };
    var endsWith = function(searchString) {
      return function(s) {
        return $foreign.endsWithImpl(searchString, s);
      };
    };
    var codePointAt$prime = function(n) {
      return function(s) {
        return $foreign.codePointAtPrimeImpl(Data_Maybe.Just.create, Data_Maybe.Nothing.value, n, s);
      };
    };
    var codePointAt = function(dictWarn) {
      return function(n) {
        return function(s) {
          return $foreign.codePointAtImpl(Data_Maybe.Just.create, Data_Maybe.Nothing.value, n, s);
        };
      };
    };
    var charAt = function(n) {
      return function(str) {
        return Data_Array.index(toCharArray(str))(n);
      };
    };
    module2.exports = {
      NFC,
      NFD,
      NFKC,
      NFKD,
      charAt,
      codePointAt,
      "codePointAt'": codePointAt$prime,
      endsWith,
      "endsWith'": endsWith$prime,
      escapeRegex,
      filter,
      fromCharArray,
      includes,
      "includes'": includes$prime,
      length,
      lines,
      mapChars,
      normalize,
      "normalize'": normalize$prime,
      padEnd,
      "padEnd'": padEnd$prime,
      padStart,
      "padStart'": padStart$prime,
      repeat,
      replaceAll,
      startsWith,
      "startsWith'": startsWith$prime,
      stripChars,
      stripDiacritics,
      stripMargin,
      stripMarginWith,
      toCharArray,
      trimEnd,
      trimStart,
      unsafeCodePointAt,
      "unsafeCodePointAt'": unsafeCodePointAt$prime,
      unsafeRepeat,
      words,
      showNormalizationForm
    };
  }
});

// output/Data.UUID/foreign.js
var require_foreign56 = __commonJS({
  "output/Data.UUID/foreign.js"(exports2) {
    "use strict";
    var mkV3UUID = null;
    exports2.getUUID3Impl = function(str) {
      return function(namespace) {
        if (mkV3UUID === null) {
          var uuid = require("uuid");
          mkV3UUID = uuid.v3;
        }
        return mkV3UUID(str, namespace);
      };
    };
    var mkV4UUID = null;
    exports2.getUUIDImpl = function() {
      if (mkV4UUID === null) {
        var uuid = require("uuid");
        mkV4UUID = uuid.v4;
      }
      return mkV4UUID();
    };
    var mkV5UUID = null;
    exports2.getUUID5Impl = function(str) {
      return function(namespace) {
        if (mkV5UUID === null) {
          var uuid = require("uuid");
          mkV5UUID = uuid.v5;
        }
        return mkV5UUID(str, namespace);
      };
    };
    var validateUUID = null;
    exports2.validateV4UUID = function(str) {
      if (validateUUID === null) {
        var uuid = require("uuid");
        validateUUID = uuid.validate;
      }
      return validateUUID(str);
    };
  }
});

// output/Data.UUID/index.js
var require_Data43 = __commonJS({
  "output/Data.UUID/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign56();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Either = require_Data16();
    var Data_Identity = require_Data20();
    var Data_List_NonEmpty = require_Data_List3();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Effect = require_Effect();
    var Foreign = require_Foreign();
    var UUID = function(x) {
      return x;
    };
    var toString = function(v) {
      return v;
    };
    var showUUID = {
      show: function(v) {
        return "(UUID " + (v + ")");
      }
    };
    var parseUUID = function(str) {
      var v = $foreign.validateV4UUID(str);
      if (v) {
        return Data_Maybe.Just.create(str);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var genv5UUID = function(s) {
      return function(v) {
        return $foreign.getUUID5Impl(s)(v);
      };
    };
    var genv3UUID = function(s) {
      return function(v) {
        return UUID($foreign.getUUID3Impl(s)(v));
      };
    };
    var genUUID = Control_Bind.bind(Effect.bindEffect)($foreign.getUUIDImpl)(function() {
      var $24 = Control_Applicative.pure(Effect.applicativeEffect);
      return function($25) {
        return $24(UUID($25));
      };
    }());
    var eqUUID = {
      eq: function(x) {
        return function(y) {
          return x === y;
        };
      }
    };
    var ordUUID = {
      compare: function(x) {
        return function(y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
        };
      },
      Eq0: function() {
        return eqUUID;
      }
    };
    var encodeUUID = {
      encode: function($26) {
        return Foreign.unsafeToForeign(toString($26));
      }
    };
    var emptyUUID = "00000000-0000-0000-0000-000000000000";
    var decodeUUID = {
      decode: function(x) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity)(x))(function() {
          var $27 = Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity);
          var $28 = Data_Either.note(Data_List_NonEmpty.singleton(new Foreign.ForeignError("Failed to parse foreign UUID")));
          return function($29) {
            return $27($28(parseUUID($29)));
          };
        }());
      }
    };
    module2.exports = {
      emptyUUID,
      genUUID,
      parseUUID,
      genv3UUID,
      genv5UUID,
      toString,
      showUUID,
      eqUUID,
      ordUUID,
      decodeUUID,
      encodeUUID
    };
  }
});

// output/IdePurescript.Exec/foreign.js
var require_foreign57 = __commonJS({
  "output/IdePurescript.Exec/foreign.js"(exports2) {
    var { writeFileSync } = require("fs");
    exports2.whichSyncImpl = function(options) {
      var which = require("which");
      return function(path) {
        return function() {
          return which.sync(path, { all: true, path: options.path, pathExt: options.pathExt });
        };
      };
    };
  }
});

// output/Node.Path/foreign.js
var require_foreign58 = __commonJS({
  "output/Node.Path/foreign.js"(exports2) {
    "use strict";
    var path = require("path");
    exports2.normalize = path.normalize;
    exports2.concat = function(segments) {
      return path.join.apply(this, segments);
    };
    exports2.resolve = function(from) {
      return function(to) {
        return function() {
          return path.resolve.apply(this, from.concat([to]));
        };
      };
    };
    exports2.relative = function(from) {
      return function(to) {
        return path.relative(from, to);
      };
    };
    exports2.dirname = function(p) {
      return path.normalize(path.dirname(p));
    };
    exports2.basename = path.basename;
    exports2.basenameWithoutExt = function(p) {
      return function(ext) {
        return path.basename(p, ext);
      };
    };
    exports2.extname = path.extname;
    exports2.sep = path.sep;
    exports2.delimiter = path.delimiter;
    exports2.parse = path.parse;
    exports2.isAbsolute = path.isAbsolute;
  }
});

// output/Node.Path/index.js
var require_Node = __commonJS({
  "output/Node.Path/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign58();
    module2.exports = {
      normalize: $foreign.normalize,
      concat: $foreign.concat,
      resolve: $foreign.resolve,
      relative: $foreign.relative,
      dirname: $foreign.dirname,
      basename: $foreign.basename,
      basenameWithoutExt: $foreign.basenameWithoutExt,
      extname: $foreign.extname,
      sep: $foreign.sep,
      delimiter: $foreign.delimiter,
      parse: $foreign.parse,
      isAbsolute: $foreign.isAbsolute
    };
  }
});

// output/Node.Process/foreign.js
var require_foreign59 = __commonJS({
  "output/Node.Process/foreign.js"(exports2) {
    "use strict";
    exports2.process = process;
    exports2.onBeforeExit = function(callback) {
      return function() {
        process.on("beforeExit", callback);
      };
    };
    exports2.onExit = function(callback) {
      return function() {
        process.on("exit", function(code) {
          callback(code)();
        });
      };
    };
    exports2.onUncaughtException = function(callback) {
      return function() {
        process.on("uncaughtException", function(error) {
          callback(error)();
        });
      };
    };
    exports2.onUnhandledRejection = function(callback) {
      return function() {
        process.on("unhandledRejection", function(error, promise) {
          callback(error)(promise)();
        });
      };
    };
    exports2.onSignalImpl = function(signal) {
      return function(callback) {
        return function() {
          process.on(signal, callback);
        };
      };
    };
    exports2.chdir = function(dir) {
      return function() {
        process.chdir(dir);
      };
    };
    exports2.setEnv = function(var_) {
      return function(val) {
        return function() {
          process.env[var_] = val;
        };
      };
    };
    exports2.unsetEnv = function(var_) {
      return function() {
        delete process.env[var_];
      };
    };
    exports2.exit = function(code) {
      return function() {
        process.exit(code);
      };
    };
    exports2.copyArray = function(xs) {
      return function() {
        return xs.slice();
      };
    };
    exports2.copyObject = function(o) {
      return function() {
        return Object.assign({}, o);
      };
    };
  }
});

// output/Data.Posix.Signal/index.js
var require_Data_Posix = __commonJS({
  "output/Data.Posix.Signal/index.js"(exports2, module2) {
    "use strict";
    var Data_Maybe = require_Data15();
    var Data_Ordering = require_Data9();
    var SIGABRT = function() {
      function SIGABRT2() {
      }
      ;
      SIGABRT2.value = new SIGABRT2();
      return SIGABRT2;
    }();
    var SIGALRM = function() {
      function SIGALRM2() {
      }
      ;
      SIGALRM2.value = new SIGALRM2();
      return SIGALRM2;
    }();
    var SIGBUS = function() {
      function SIGBUS2() {
      }
      ;
      SIGBUS2.value = new SIGBUS2();
      return SIGBUS2;
    }();
    var SIGCHLD = function() {
      function SIGCHLD2() {
      }
      ;
      SIGCHLD2.value = new SIGCHLD2();
      return SIGCHLD2;
    }();
    var SIGCLD = function() {
      function SIGCLD2() {
      }
      ;
      SIGCLD2.value = new SIGCLD2();
      return SIGCLD2;
    }();
    var SIGCONT = function() {
      function SIGCONT2() {
      }
      ;
      SIGCONT2.value = new SIGCONT2();
      return SIGCONT2;
    }();
    var SIGEMT = function() {
      function SIGEMT2() {
      }
      ;
      SIGEMT2.value = new SIGEMT2();
      return SIGEMT2;
    }();
    var SIGFPE = function() {
      function SIGFPE2() {
      }
      ;
      SIGFPE2.value = new SIGFPE2();
      return SIGFPE2;
    }();
    var SIGHUP = function() {
      function SIGHUP2() {
      }
      ;
      SIGHUP2.value = new SIGHUP2();
      return SIGHUP2;
    }();
    var SIGILL = function() {
      function SIGILL2() {
      }
      ;
      SIGILL2.value = new SIGILL2();
      return SIGILL2;
    }();
    var SIGINFO = function() {
      function SIGINFO2() {
      }
      ;
      SIGINFO2.value = new SIGINFO2();
      return SIGINFO2;
    }();
    var SIGINT = function() {
      function SIGINT2() {
      }
      ;
      SIGINT2.value = new SIGINT2();
      return SIGINT2;
    }();
    var SIGIO = function() {
      function SIGIO2() {
      }
      ;
      SIGIO2.value = new SIGIO2();
      return SIGIO2;
    }();
    var SIGIOT = function() {
      function SIGIOT2() {
      }
      ;
      SIGIOT2.value = new SIGIOT2();
      return SIGIOT2;
    }();
    var SIGKILL = function() {
      function SIGKILL2() {
      }
      ;
      SIGKILL2.value = new SIGKILL2();
      return SIGKILL2;
    }();
    var SIGLOST = function() {
      function SIGLOST2() {
      }
      ;
      SIGLOST2.value = new SIGLOST2();
      return SIGLOST2;
    }();
    var SIGPIPE = function() {
      function SIGPIPE2() {
      }
      ;
      SIGPIPE2.value = new SIGPIPE2();
      return SIGPIPE2;
    }();
    var SIGPOLL = function() {
      function SIGPOLL2() {
      }
      ;
      SIGPOLL2.value = new SIGPOLL2();
      return SIGPOLL2;
    }();
    var SIGPROF = function() {
      function SIGPROF2() {
      }
      ;
      SIGPROF2.value = new SIGPROF2();
      return SIGPROF2;
    }();
    var SIGPWR = function() {
      function SIGPWR2() {
      }
      ;
      SIGPWR2.value = new SIGPWR2();
      return SIGPWR2;
    }();
    var SIGQUIT = function() {
      function SIGQUIT2() {
      }
      ;
      SIGQUIT2.value = new SIGQUIT2();
      return SIGQUIT2;
    }();
    var SIGSEGV = function() {
      function SIGSEGV2() {
      }
      ;
      SIGSEGV2.value = new SIGSEGV2();
      return SIGSEGV2;
    }();
    var SIGSTKFLT = function() {
      function SIGSTKFLT2() {
      }
      ;
      SIGSTKFLT2.value = new SIGSTKFLT2();
      return SIGSTKFLT2;
    }();
    var SIGSTOP = function() {
      function SIGSTOP2() {
      }
      ;
      SIGSTOP2.value = new SIGSTOP2();
      return SIGSTOP2;
    }();
    var SIGSYS = function() {
      function SIGSYS2() {
      }
      ;
      SIGSYS2.value = new SIGSYS2();
      return SIGSYS2;
    }();
    var SIGTERM = function() {
      function SIGTERM2() {
      }
      ;
      SIGTERM2.value = new SIGTERM2();
      return SIGTERM2;
    }();
    var SIGTRAP = function() {
      function SIGTRAP2() {
      }
      ;
      SIGTRAP2.value = new SIGTRAP2();
      return SIGTRAP2;
    }();
    var SIGTSTP = function() {
      function SIGTSTP2() {
      }
      ;
      SIGTSTP2.value = new SIGTSTP2();
      return SIGTSTP2;
    }();
    var SIGTTIN = function() {
      function SIGTTIN2() {
      }
      ;
      SIGTTIN2.value = new SIGTTIN2();
      return SIGTTIN2;
    }();
    var SIGTTOU = function() {
      function SIGTTOU2() {
      }
      ;
      SIGTTOU2.value = new SIGTTOU2();
      return SIGTTOU2;
    }();
    var SIGUNUSED = function() {
      function SIGUNUSED2() {
      }
      ;
      SIGUNUSED2.value = new SIGUNUSED2();
      return SIGUNUSED2;
    }();
    var SIGURG = function() {
      function SIGURG2() {
      }
      ;
      SIGURG2.value = new SIGURG2();
      return SIGURG2;
    }();
    var SIGUSR1 = function() {
      function SIGUSR12() {
      }
      ;
      SIGUSR12.value = new SIGUSR12();
      return SIGUSR12;
    }();
    var SIGUSR2 = function() {
      function SIGUSR22() {
      }
      ;
      SIGUSR22.value = new SIGUSR22();
      return SIGUSR22;
    }();
    var SIGVTALRM = function() {
      function SIGVTALRM2() {
      }
      ;
      SIGVTALRM2.value = new SIGVTALRM2();
      return SIGVTALRM2;
    }();
    var SIGWINCH = function() {
      function SIGWINCH2() {
      }
      ;
      SIGWINCH2.value = new SIGWINCH2();
      return SIGWINCH2;
    }();
    var SIGXCPU = function() {
      function SIGXCPU2() {
      }
      ;
      SIGXCPU2.value = new SIGXCPU2();
      return SIGXCPU2;
    }();
    var SIGXFSZ = function() {
      function SIGXFSZ2() {
      }
      ;
      SIGXFSZ2.value = new SIGXFSZ2();
      return SIGXFSZ2;
    }();
    var toString = function(s) {
      if (s instanceof SIGABRT) {
        return "SIGABRT";
      }
      ;
      if (s instanceof SIGALRM) {
        return "SIGALRM";
      }
      ;
      if (s instanceof SIGBUS) {
        return "SIGBUS";
      }
      ;
      if (s instanceof SIGCHLD) {
        return "SIGCHLD";
      }
      ;
      if (s instanceof SIGCLD) {
        return "SIGCLD";
      }
      ;
      if (s instanceof SIGCONT) {
        return "SIGCONT";
      }
      ;
      if (s instanceof SIGEMT) {
        return "SIGEMT";
      }
      ;
      if (s instanceof SIGFPE) {
        return "SIGFPE";
      }
      ;
      if (s instanceof SIGHUP) {
        return "SIGHUP";
      }
      ;
      if (s instanceof SIGILL) {
        return "SIGILL";
      }
      ;
      if (s instanceof SIGINFO) {
        return "SIGINFO";
      }
      ;
      if (s instanceof SIGINT) {
        return "SIGINT";
      }
      ;
      if (s instanceof SIGIO) {
        return "SIGIO";
      }
      ;
      if (s instanceof SIGIOT) {
        return "SIGIOT";
      }
      ;
      if (s instanceof SIGKILL) {
        return "SIGKILL";
      }
      ;
      if (s instanceof SIGLOST) {
        return "SIGLOST";
      }
      ;
      if (s instanceof SIGPIPE) {
        return "SIGPIPE";
      }
      ;
      if (s instanceof SIGPOLL) {
        return "SIGPOLL";
      }
      ;
      if (s instanceof SIGPROF) {
        return "SIGPROF";
      }
      ;
      if (s instanceof SIGPWR) {
        return "SIGPWR";
      }
      ;
      if (s instanceof SIGQUIT) {
        return "SIGQUIT";
      }
      ;
      if (s instanceof SIGSEGV) {
        return "SIGSEGV";
      }
      ;
      if (s instanceof SIGSTKFLT) {
        return "SIGSTKFLT";
      }
      ;
      if (s instanceof SIGSTOP) {
        return "SIGSTOP";
      }
      ;
      if (s instanceof SIGSYS) {
        return "SIGSYS";
      }
      ;
      if (s instanceof SIGTERM) {
        return "SIGTERM";
      }
      ;
      if (s instanceof SIGTRAP) {
        return "SIGTRAP";
      }
      ;
      if (s instanceof SIGTSTP) {
        return "SIGTSTP";
      }
      ;
      if (s instanceof SIGTTIN) {
        return "SIGTTIN";
      }
      ;
      if (s instanceof SIGTTOU) {
        return "SIGTTOU";
      }
      ;
      if (s instanceof SIGUNUSED) {
        return "SIGUNUSED";
      }
      ;
      if (s instanceof SIGURG) {
        return "SIGURG";
      }
      ;
      if (s instanceof SIGUSR1) {
        return "SIGUSR1";
      }
      ;
      if (s instanceof SIGUSR2) {
        return "SIGUSR2";
      }
      ;
      if (s instanceof SIGVTALRM) {
        return "SIGVTALRM";
      }
      ;
      if (s instanceof SIGWINCH) {
        return "SIGWINCH";
      }
      ;
      if (s instanceof SIGXCPU) {
        return "SIGXCPU";
      }
      ;
      if (s instanceof SIGXFSZ) {
        return "SIGXFSZ";
      }
      ;
      throw new Error("Failed pattern match at Data.Posix.Signal (line 48, column 14 - line 86, column 24): " + [s.constructor.name]);
    };
    var showSignal = {
      show: toString
    };
    var fromString = function(s) {
      if (s === "SIGABRT") {
        return new Data_Maybe.Just(SIGABRT.value);
      }
      ;
      if (s === "SIGALRM") {
        return new Data_Maybe.Just(SIGALRM.value);
      }
      ;
      if (s === "SIGBUS") {
        return new Data_Maybe.Just(SIGBUS.value);
      }
      ;
      if (s === "SIGCHLD") {
        return new Data_Maybe.Just(SIGCHLD.value);
      }
      ;
      if (s === "SIGCLD") {
        return new Data_Maybe.Just(SIGCLD.value);
      }
      ;
      if (s === "SIGCONT") {
        return new Data_Maybe.Just(SIGCONT.value);
      }
      ;
      if (s === "SIGEMT") {
        return new Data_Maybe.Just(SIGEMT.value);
      }
      ;
      if (s === "SIGFPE") {
        return new Data_Maybe.Just(SIGFPE.value);
      }
      ;
      if (s === "SIGHUP") {
        return new Data_Maybe.Just(SIGHUP.value);
      }
      ;
      if (s === "SIGILL") {
        return new Data_Maybe.Just(SIGILL.value);
      }
      ;
      if (s === "SIGINFO") {
        return new Data_Maybe.Just(SIGINFO.value);
      }
      ;
      if (s === "SIGINT") {
        return new Data_Maybe.Just(SIGINT.value);
      }
      ;
      if (s === "SIGIO") {
        return new Data_Maybe.Just(SIGIO.value);
      }
      ;
      if (s === "SIGIOT") {
        return new Data_Maybe.Just(SIGIOT.value);
      }
      ;
      if (s === "SIGKILL") {
        return new Data_Maybe.Just(SIGKILL.value);
      }
      ;
      if (s === "SIGLOST") {
        return new Data_Maybe.Just(SIGLOST.value);
      }
      ;
      if (s === "SIGPIPE") {
        return new Data_Maybe.Just(SIGPIPE.value);
      }
      ;
      if (s === "SIGPOLL") {
        return new Data_Maybe.Just(SIGPOLL.value);
      }
      ;
      if (s === "SIGPROF") {
        return new Data_Maybe.Just(SIGPROF.value);
      }
      ;
      if (s === "SIGPWR") {
        return new Data_Maybe.Just(SIGPWR.value);
      }
      ;
      if (s === "SIGQUIT") {
        return new Data_Maybe.Just(SIGQUIT.value);
      }
      ;
      if (s === "SIGSEGV") {
        return new Data_Maybe.Just(SIGSEGV.value);
      }
      ;
      if (s === "SIGSTKFLT") {
        return new Data_Maybe.Just(SIGSTKFLT.value);
      }
      ;
      if (s === "SIGSTOP") {
        return new Data_Maybe.Just(SIGSTOP.value);
      }
      ;
      if (s === "SIGSYS") {
        return new Data_Maybe.Just(SIGSYS.value);
      }
      ;
      if (s === "SIGTERM") {
        return new Data_Maybe.Just(SIGTERM.value);
      }
      ;
      if (s === "SIGTRAP") {
        return new Data_Maybe.Just(SIGTRAP.value);
      }
      ;
      if (s === "SIGTSTP") {
        return new Data_Maybe.Just(SIGTSTP.value);
      }
      ;
      if (s === "SIGTTIN") {
        return new Data_Maybe.Just(SIGTTIN.value);
      }
      ;
      if (s === "SIGTTOU") {
        return new Data_Maybe.Just(SIGTTOU.value);
      }
      ;
      if (s === "SIGUNUSED") {
        return new Data_Maybe.Just(SIGUNUSED.value);
      }
      ;
      if (s === "SIGURG") {
        return new Data_Maybe.Just(SIGURG.value);
      }
      ;
      if (s === "SIGUSR1") {
        return new Data_Maybe.Just(SIGUSR1.value);
      }
      ;
      if (s === "SIGUSR2") {
        return new Data_Maybe.Just(SIGUSR2.value);
      }
      ;
      if (s === "SIGVTALRM") {
        return new Data_Maybe.Just(SIGVTALRM.value);
      }
      ;
      if (s === "SIGWINCH") {
        return new Data_Maybe.Just(SIGWINCH.value);
      }
      ;
      if (s === "SIGXCPU") {
        return new Data_Maybe.Just(SIGXCPU.value);
      }
      ;
      if (s === "SIGXFSZ") {
        return new Data_Maybe.Just(SIGXFSZ.value);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var eqSignal = {
      eq: function(x) {
        return function(y) {
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
            return true;
          }
          ;
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
            return true;
          }
          ;
          if (x instanceof SIGBUS && y instanceof SIGBUS) {
            return true;
          }
          ;
          if (x instanceof SIGCHLD && y instanceof SIGCHLD) {
            return true;
          }
          ;
          if (x instanceof SIGCLD && y instanceof SIGCLD) {
            return true;
          }
          ;
          if (x instanceof SIGCONT && y instanceof SIGCONT) {
            return true;
          }
          ;
          if (x instanceof SIGEMT && y instanceof SIGEMT) {
            return true;
          }
          ;
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
            return true;
          }
          ;
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
            return true;
          }
          ;
          if (x instanceof SIGILL && y instanceof SIGILL) {
            return true;
          }
          ;
          if (x instanceof SIGINFO && y instanceof SIGINFO) {
            return true;
          }
          ;
          if (x instanceof SIGINT && y instanceof SIGINT) {
            return true;
          }
          ;
          if (x instanceof SIGIO && y instanceof SIGIO) {
            return true;
          }
          ;
          if (x instanceof SIGIOT && y instanceof SIGIOT) {
            return true;
          }
          ;
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
            return true;
          }
          ;
          if (x instanceof SIGLOST && y instanceof SIGLOST) {
            return true;
          }
          ;
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
            return true;
          }
          ;
          if (x instanceof SIGPOLL && y instanceof SIGPOLL) {
            return true;
          }
          ;
          if (x instanceof SIGPROF && y instanceof SIGPROF) {
            return true;
          }
          ;
          if (x instanceof SIGPWR && y instanceof SIGPWR) {
            return true;
          }
          ;
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
            return true;
          }
          ;
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
            return true;
          }
          ;
          if (x instanceof SIGSTKFLT && y instanceof SIGSTKFLT) {
            return true;
          }
          ;
          if (x instanceof SIGSTOP && y instanceof SIGSTOP) {
            return true;
          }
          ;
          if (x instanceof SIGSYS && y instanceof SIGSYS) {
            return true;
          }
          ;
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
            return true;
          }
          ;
          if (x instanceof SIGTRAP && y instanceof SIGTRAP) {
            return true;
          }
          ;
          if (x instanceof SIGTSTP && y instanceof SIGTSTP) {
            return true;
          }
          ;
          if (x instanceof SIGTTIN && y instanceof SIGTTIN) {
            return true;
          }
          ;
          if (x instanceof SIGTTOU && y instanceof SIGTTOU) {
            return true;
          }
          ;
          if (x instanceof SIGUNUSED && y instanceof SIGUNUSED) {
            return true;
          }
          ;
          if (x instanceof SIGURG && y instanceof SIGURG) {
            return true;
          }
          ;
          if (x instanceof SIGUSR1 && y instanceof SIGUSR1) {
            return true;
          }
          ;
          if (x instanceof SIGUSR2 && y instanceof SIGUSR2) {
            return true;
          }
          ;
          if (x instanceof SIGVTALRM && y instanceof SIGVTALRM) {
            return true;
          }
          ;
          if (x instanceof SIGWINCH && y instanceof SIGWINCH) {
            return true;
          }
          ;
          if (x instanceof SIGXCPU && y instanceof SIGXCPU) {
            return true;
          }
          ;
          if (x instanceof SIGXFSZ && y instanceof SIGXFSZ) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var ordSignal = {
      compare: function(x) {
        return function(y) {
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGABRT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGABRT) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGALRM) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGALRM) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGBUS && y instanceof SIGBUS) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGBUS) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGBUS) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGCHLD && y instanceof SIGCHLD) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGCHLD) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGCHLD) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGCLD && y instanceof SIGCLD) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGCLD) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGCLD) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGCONT && y instanceof SIGCONT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGCONT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGCONT) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGEMT && y instanceof SIGEMT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGEMT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGEMT) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGFPE) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGFPE) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGHUP) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGHUP) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGILL && y instanceof SIGILL) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGILL) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGILL) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGINFO && y instanceof SIGINFO) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGINFO) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGINFO) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGINT && y instanceof SIGINT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGINT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGINT) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGIO && y instanceof SIGIO) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGIO) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGIO) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGIOT && y instanceof SIGIOT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGIOT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGIOT) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGKILL) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGKILL) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGLOST && y instanceof SIGLOST) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGLOST) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGLOST) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGPIPE) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGPIPE) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGPOLL && y instanceof SIGPOLL) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGPOLL) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGPOLL) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGPROF && y instanceof SIGPROF) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGPROF) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGPROF) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGPWR && y instanceof SIGPWR) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGPWR) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGPWR) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGQUIT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGQUIT) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGSEGV) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGSEGV) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGSTKFLT && y instanceof SIGSTKFLT) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGSTKFLT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGSTKFLT) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGSTOP && y instanceof SIGSTOP) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGSTOP) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGSTOP) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGSYS && y instanceof SIGSYS) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGSYS) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGSYS) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGTERM) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGTERM) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGTRAP && y instanceof SIGTRAP) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGTRAP) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGTRAP) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGTSTP && y instanceof SIGTSTP) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGTSTP) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGTSTP) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGTTIN && y instanceof SIGTTIN) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGTTIN) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGTTIN) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGTTOU && y instanceof SIGTTOU) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGTTOU) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGTTOU) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGUNUSED && y instanceof SIGUNUSED) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGUNUSED) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGUNUSED) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGURG && y instanceof SIGURG) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGURG) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGURG) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGUSR1 && y instanceof SIGUSR1) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGUSR1) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGUSR1) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGUSR2 && y instanceof SIGUSR2) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGUSR2) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGUSR2) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGVTALRM && y instanceof SIGVTALRM) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGVTALRM) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGVTALRM) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGWINCH && y instanceof SIGWINCH) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGWINCH) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGWINCH) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGXCPU && y instanceof SIGXCPU) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SIGXCPU) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SIGXCPU) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SIGXFSZ && y instanceof SIGXFSZ) {
            return Data_Ordering.EQ.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Posix.Signal (line 140, column 1 - line 140, column 40): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqSignal;
      }
    };
    module2.exports = {
      SIGABRT,
      SIGALRM,
      SIGBUS,
      SIGCHLD,
      SIGCLD,
      SIGCONT,
      SIGEMT,
      SIGFPE,
      SIGHUP,
      SIGILL,
      SIGINFO,
      SIGINT,
      SIGIO,
      SIGIOT,
      SIGKILL,
      SIGLOST,
      SIGPIPE,
      SIGPOLL,
      SIGPROF,
      SIGPWR,
      SIGQUIT,
      SIGSEGV,
      SIGSTKFLT,
      SIGSTOP,
      SIGSYS,
      SIGTERM,
      SIGTRAP,
      SIGTSTP,
      SIGTTIN,
      SIGTTOU,
      SIGUNUSED,
      SIGURG,
      SIGUSR1,
      SIGUSR2,
      SIGVTALRM,
      SIGWINCH,
      SIGXCPU,
      SIGXFSZ,
      toString,
      fromString,
      showSignal,
      eqSignal,
      ordSignal
    };
  }
});

// output/Node.Platform/index.js
var require_Node2 = __commonJS({
  "output/Node.Platform/index.js"(exports2, module2) {
    "use strict";
    var Data_Maybe = require_Data15();
    var Data_Ordering = require_Data9();
    var AIX = function() {
      function AIX2() {
      }
      ;
      AIX2.value = new AIX2();
      return AIX2;
    }();
    var Darwin = function() {
      function Darwin2() {
      }
      ;
      Darwin2.value = new Darwin2();
      return Darwin2;
    }();
    var FreeBSD = function() {
      function FreeBSD2() {
      }
      ;
      FreeBSD2.value = new FreeBSD2();
      return FreeBSD2;
    }();
    var Linux = function() {
      function Linux2() {
      }
      ;
      Linux2.value = new Linux2();
      return Linux2;
    }();
    var OpenBSD = function() {
      function OpenBSD2() {
      }
      ;
      OpenBSD2.value = new OpenBSD2();
      return OpenBSD2;
    }();
    var SunOS = function() {
      function SunOS2() {
      }
      ;
      SunOS2.value = new SunOS2();
      return SunOS2;
    }();
    var Win32 = function() {
      function Win322() {
      }
      ;
      Win322.value = new Win322();
      return Win322;
    }();
    var Android = function() {
      function Android2() {
      }
      ;
      Android2.value = new Android2();
      return Android2;
    }();
    var toString = function(v) {
      if (v instanceof AIX) {
        return "aix";
      }
      ;
      if (v instanceof Darwin) {
        return "darwin";
      }
      ;
      if (v instanceof FreeBSD) {
        return "freebsd";
      }
      ;
      if (v instanceof Linux) {
        return "linux";
      }
      ;
      if (v instanceof OpenBSD) {
        return "openbsd";
      }
      ;
      if (v instanceof SunOS) {
        return "sunos";
      }
      ;
      if (v instanceof Win32) {
        return "win32";
      }
      ;
      if (v instanceof Android) {
        return "android";
      }
      ;
      throw new Error("Failed pattern match at Node.Platform (line 20, column 1 - line 20, column 31): " + [v.constructor.name]);
    };
    var showPlatform = {
      show: function(v) {
        if (v instanceof AIX) {
          return "AIX";
        }
        ;
        if (v instanceof Darwin) {
          return "Darwin";
        }
        ;
        if (v instanceof FreeBSD) {
          return "FreeBSD";
        }
        ;
        if (v instanceof Linux) {
          return "Linux";
        }
        ;
        if (v instanceof OpenBSD) {
          return "OpenBSD";
        }
        ;
        if (v instanceof SunOS) {
          return "SunOS";
        }
        ;
        if (v instanceof Win32) {
          return "Win32";
        }
        ;
        if (v instanceof Android) {
          return "Android";
        }
        ;
        throw new Error("Failed pattern match at Node.Platform (line 43, column 1 - line 51, column 27): " + [v.constructor.name]);
      }
    };
    var fromString = function(v) {
      if (v === "aix") {
        return new Data_Maybe.Just(AIX.value);
      }
      ;
      if (v === "darwin") {
        return new Data_Maybe.Just(Darwin.value);
      }
      ;
      if (v === "freebsd") {
        return new Data_Maybe.Just(FreeBSD.value);
      }
      ;
      if (v === "linux") {
        return new Data_Maybe.Just(Linux.value);
      }
      ;
      if (v === "openbsd") {
        return new Data_Maybe.Just(OpenBSD.value);
      }
      ;
      if (v === "sunos") {
        return new Data_Maybe.Just(SunOS.value);
      }
      ;
      if (v === "win32") {
        return new Data_Maybe.Just(Win32.value);
      }
      ;
      if (v === "android") {
        return new Data_Maybe.Just(Android.value);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var eqPlatform = {
      eq: function(x) {
        return function(y) {
          if (x instanceof AIX && y instanceof AIX) {
            return true;
          }
          ;
          if (x instanceof Darwin && y instanceof Darwin) {
            return true;
          }
          ;
          if (x instanceof FreeBSD && y instanceof FreeBSD) {
            return true;
          }
          ;
          if (x instanceof Linux && y instanceof Linux) {
            return true;
          }
          ;
          if (x instanceof OpenBSD && y instanceof OpenBSD) {
            return true;
          }
          ;
          if (x instanceof SunOS && y instanceof SunOS) {
            return true;
          }
          ;
          if (x instanceof Win32 && y instanceof Win32) {
            return true;
          }
          ;
          if (x instanceof Android && y instanceof Android) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var ordPlatform = {
      compare: function(x) {
        return function(y) {
          if (x instanceof AIX && y instanceof AIX) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof AIX) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof AIX) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Darwin && y instanceof Darwin) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Darwin) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Darwin) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof FreeBSD && y instanceof FreeBSD) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof FreeBSD) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof FreeBSD) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Linux && y instanceof Linux) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Linux) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Linux) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof OpenBSD && y instanceof OpenBSD) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof OpenBSD) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof OpenBSD) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof SunOS && y instanceof SunOS) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof SunOS) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof SunOS) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Win32 && y instanceof Win32) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Win32) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Win32) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Android && y instanceof Android) {
            return Data_Ordering.EQ.value;
          }
          ;
          throw new Error("Failed pattern match at Node.Platform (line 54, column 1 - line 54, column 44): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqPlatform;
      }
    };
    module2.exports = {
      AIX,
      Darwin,
      FreeBSD,
      Linux,
      OpenBSD,
      SunOS,
      Win32,
      Android,
      toString,
      fromString,
      showPlatform,
      eqPlatform,
      ordPlatform
    };
  }
});

// output/Node.Process/index.js
var require_Node3 = __commonJS({
  "output/Node.Process/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign59();
    var Data_Posix_Signal = require_Data_Posix();
    var Foreign_Object = require_Foreign3();
    var Node_Platform = require_Node2();
    var Unsafe_Coerce = require_Unsafe();
    var version = $foreign.process.version;
    var stdoutIsTTY = $foreign.process.stdout.isTTY;
    var stdout = $foreign.process.stdout;
    var stdinIsTTY = $foreign.process.stdin.isTTY;
    var stdin = $foreign.process.stdin;
    var stderrIsTTY = $foreign.process.stderr.isTTY;
    var stderr = $foreign.process.stderr;
    var platformStr = $foreign.process.platform;
    var platform = Node_Platform.fromString(platformStr);
    var pid = $foreign.process.pid;
    var onSignal = function(sig) {
      return $foreign.onSignalImpl(Data_Posix_Signal.toString(sig));
    };
    var mkEffect = Unsafe_Coerce.unsafeCoerce;
    var nextTick = function(callback) {
      return mkEffect(function(v) {
        return $foreign.process.nextTick(callback);
      });
    };
    var lookupMutableObject = function(k) {
      return function(o) {
        return mkEffect(function(v) {
          return Foreign_Object.lookup(k)(o);
        });
      };
    };
    var lookupEnv = function(k) {
      return lookupMutableObject(k)($foreign.process.env);
    };
    var getEnv = $foreign.copyObject($foreign.process.env);
    var execPath = mkEffect(function(v) {
      return $foreign.process.execPath;
    });
    var execArgv = $foreign.copyArray($foreign.process.execArgv);
    var cwd = $foreign.process.cwd;
    var argv = $foreign.copyArray($foreign.process.argv);
    module2.exports = {
      onSignal,
      nextTick,
      argv,
      execArgv,
      execPath,
      cwd,
      getEnv,
      lookupEnv,
      pid,
      platform,
      stdin,
      stdout,
      stderr,
      stdinIsTTY,
      stdoutIsTTY,
      stderrIsTTY,
      version,
      onBeforeExit: $foreign.onBeforeExit,
      onExit: $foreign.onExit,
      onUncaughtException: $foreign.onUncaughtException,
      onUnhandledRejection: $foreign.onUnhandledRejection,
      chdir: $foreign.chdir,
      setEnv: $foreign.setEnv,
      unsetEnv: $foreign.unsetEnv,
      exit: $foreign.exit
    };
  }
});

// output/Node.Which/foreign.js
var require_foreign60 = __commonJS({
  "output/Node.Which/foreign.js"(exports2) {
    var which = require("which");
    exports2.whichImpl = function(options) {
      return function(path) {
        return function(errcb) {
          return function(cb) {
            return function() {
              which(path, { all: true, path: options.path, pathExt: options.pathExt }, function(err, resolved) {
                if (err) {
                  errcb(err)();
                } else {
                  cb(resolved)();
                }
              });
            };
          };
        };
      };
    };
  }
});

// output/Node.Which/index.js
var require_Node4 = __commonJS({
  "output/Node.Which/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign60();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var which$prime = function(v) {
      return function(s) {
        return Effect_Aff.makeAff(function(cb) {
          return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.whichImpl({
            path: Data_Nullable.toNullable(v.path),
            pathExt: Data_Nullable.toNullable(v.pathExt)
          })(s)(function($5) {
            return cb(Data_Either.Left.create($5));
          })(function($6) {
            return cb(Data_Either.Right.create($6));
          }));
        });
      };
    };
    var which = function(s) {
      return Effect_Aff.makeAff(function(cb) {
        return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.whichImpl({
          path: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          pathExt: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
        })(s)(function($7) {
          return cb(Data_Either.Left.create($7));
        })(function($8) {
          return cb(Data_Either.Right.create($8));
        }));
      });
    };
    module2.exports = {
      which,
      "which'": which$prime
    };
  }
});

// output/Effect.Random/foreign.js
var require_foreign61 = __commonJS({
  "output/Effect.Random/foreign.js"(exports2) {
    "use strict";
    exports2.random = Math.random;
  }
});

// output/Effect.Random/index.js
var require_Effect10 = __commonJS({
  "output/Effect.Random/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign61();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Effect = require_Effect();
    var randomRange = function(min) {
      return function(max) {
        return function __do() {
          var n = $foreign.random();
          return n * (max - min) + min;
        };
      };
    };
    var randomInt = function(low) {
      return function(high) {
        return function __do() {
          var n = $foreign.random();
          var asNumber = (Data_Int.toNumber(high) - Data_Int.toNumber(low) + 1) * n + Data_Int.toNumber(low);
          return Data_Int.floor(asNumber);
        };
      };
    };
    var randomBool = Data_Functor.map(Effect.functorEffect)(function(v) {
      return v < 0.5;
    })($foreign.random);
    module2.exports = {
      randomInt,
      randomRange,
      randomBool,
      random: $foreign.random
    };
  }
});

// output/Node.Buffer.Class/index.js
var require_Node_Buffer = __commonJS({
  "output/Node.Buffer.Class/index.js"(exports2, module2) {
    "use strict";
    var writeString = function(dict) {
      return dict.writeString;
    };
    var write = function(dict) {
      return dict.write;
    };
    var unsafeThaw = function(dict) {
      return dict.unsafeThaw;
    };
    var unsafeFreeze = function(dict) {
      return dict.unsafeFreeze;
    };
    var toString = function(dict) {
      return dict.toString;
    };
    var toArrayBuffer = function(dict) {
      return dict.toArrayBuffer;
    };
    var toArray = function(dict) {
      return dict.toArray;
    };
    var thaw = function(dict) {
      return dict.thaw;
    };
    var slice = function(dict) {
      return dict.slice;
    };
    var size = function(dict) {
      return dict.size;
    };
    var setAtOffset = function(dict) {
      return dict.setAtOffset;
    };
    var readString = function(dict) {
      return dict.readString;
    };
    var read = function(dict) {
      return dict.read;
    };
    var getAtOffset = function(dict) {
      return dict.getAtOffset;
    };
    var fromString = function(dict) {
      return dict.fromString;
    };
    var fromArrayBuffer = function(dict) {
      return dict.fromArrayBuffer;
    };
    var fromArray = function(dict) {
      return dict.fromArray;
    };
    var freeze = function(dict) {
      return dict.freeze;
    };
    var fill = function(dict) {
      return dict.fill;
    };
    var create = function(dict) {
      return dict.create;
    };
    var copy = function(dict) {
      return dict.copy;
    };
    var concat$prime = function(dict) {
      return dict["concat'"];
    };
    var concat = function(dict) {
      return dict.concat;
    };
    module2.exports = {
      create,
      freeze,
      unsafeFreeze,
      thaw,
      unsafeThaw,
      fromArray,
      fromString,
      fromArrayBuffer,
      toArrayBuffer,
      read,
      readString,
      toString,
      write,
      writeString,
      toArray,
      getAtOffset,
      setAtOffset,
      slice,
      size,
      concat,
      "concat'": concat$prime,
      copy,
      fill
    };
  }
});

// output/Node.Buffer.Internal/foreign.js
var require_foreign62 = __commonJS({
  "output/Node.Buffer.Internal/foreign.js"(exports2) {
    "use strict";
    exports2.copyAll = function(a) {
      return function() {
        return Buffer.from(a);
      };
    };
    exports2.writeInternal = function(ty) {
      return function(value) {
        return function(offset) {
          return function(buf) {
            return function() {
              buf["write" + ty](value, offset);
            };
          };
        };
      };
    };
    exports2.writeStringInternal = function(encoding) {
      return function(offset) {
        return function(length) {
          return function(value) {
            return function(buff) {
              return function() {
                return buff.write(value, offset, length, encoding);
              };
            };
          };
        };
      };
    };
    exports2.setAtOffset = function(value) {
      return function(offset) {
        return function(buff) {
          return function() {
            buff[offset] = value;
          };
        };
      };
    };
    exports2.copy = function(srcStart) {
      return function(srcEnd) {
        return function(src) {
          return function(targStart) {
            return function(targ) {
              return function() {
                return src.copy(targ, targStart, srcStart, srcEnd);
              };
            };
          };
        };
      };
    };
    exports2.fill = function(octet) {
      return function(start) {
        return function(end) {
          return function(buf) {
            return function() {
              buf.fill(octet, start, end);
            };
          };
        };
      };
    };
  }
});

// output/Node.Buffer.Immutable/foreign.js
var require_foreign63 = __commonJS({
  "output/Node.Buffer.Immutable/foreign.js"(exports2) {
    "use strict";
    exports2.showImpl = require("util").inspect;
    exports2.eqImpl = function(a) {
      return function(b) {
        return a.equals(b);
      };
    };
    exports2.compareImpl = function(a) {
      return function(b) {
        return a.compare(b);
      };
    };
    exports2.create = function(size) {
      return Buffer.alloc(size);
    };
    exports2.fromArray = function(octets) {
      return Buffer.from(octets);
    };
    exports2.size = function(buff) {
      return buff.length;
    };
    exports2.toArray = function(buff) {
      var json = buff.toJSON();
      return json.data || json;
    };
    exports2.toArrayBuffer = function(buff) {
      return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
    };
    exports2.fromArrayBuffer = function(ab) {
      return Buffer.from(ab);
    };
    exports2.fromStringImpl = function(str) {
      return function(encoding) {
        return Buffer.from(str, encoding);
      };
    };
    exports2.readImpl = function(ty) {
      return function(offset) {
        return function(buf) {
          return buf["read" + ty](offset);
        };
      };
    };
    exports2.readStringImpl = function(enc) {
      return function(start) {
        return function(end) {
          return function(buff) {
            return buff.toString(enc, start, end);
          };
        };
      };
    };
    exports2.getAtOffsetImpl = function(just) {
      return function(nothing) {
        return function(offset) {
          return function(buff) {
            var octet = buff[offset];
            return octet == null ? nothing : just(octet);
          };
        };
      };
    };
    exports2.toStringImpl = function(enc) {
      return function(buff) {
        return buff.toString(enc);
      };
    };
    exports2.slice = function(start) {
      return function(end) {
        return function(buff) {
          return buff.slice(start, end);
        };
      };
    };
    exports2.concat = function(buffs) {
      return Buffer.concat(buffs);
    };
    exports2.concatToLength = function(buffs) {
      return function(totalLength) {
        return Buffer.concat(buffs, totalLength);
      };
    };
  }
});

// output/Node.Buffer.Types/index.js
var require_Node_Buffer2 = __commonJS({
  "output/Node.Buffer.Types/index.js"(exports2, module2) {
    "use strict";
    var UInt8 = function() {
      function UInt82() {
      }
      ;
      UInt82.value = new UInt82();
      return UInt82;
    }();
    var UInt16LE = function() {
      function UInt16LE2() {
      }
      ;
      UInt16LE2.value = new UInt16LE2();
      return UInt16LE2;
    }();
    var UInt16BE = function() {
      function UInt16BE2() {
      }
      ;
      UInt16BE2.value = new UInt16BE2();
      return UInt16BE2;
    }();
    var UInt32LE = function() {
      function UInt32LE2() {
      }
      ;
      UInt32LE2.value = new UInt32LE2();
      return UInt32LE2;
    }();
    var UInt32BE = function() {
      function UInt32BE2() {
      }
      ;
      UInt32BE2.value = new UInt32BE2();
      return UInt32BE2;
    }();
    var Int8 = function() {
      function Int82() {
      }
      ;
      Int82.value = new Int82();
      return Int82;
    }();
    var Int16LE = function() {
      function Int16LE2() {
      }
      ;
      Int16LE2.value = new Int16LE2();
      return Int16LE2;
    }();
    var Int16BE = function() {
      function Int16BE2() {
      }
      ;
      Int16BE2.value = new Int16BE2();
      return Int16BE2;
    }();
    var Int32LE = function() {
      function Int32LE2() {
      }
      ;
      Int32LE2.value = new Int32LE2();
      return Int32LE2;
    }();
    var Int32BE = function() {
      function Int32BE2() {
      }
      ;
      Int32BE2.value = new Int32BE2();
      return Int32BE2;
    }();
    var FloatLE = function() {
      function FloatLE2() {
      }
      ;
      FloatLE2.value = new FloatLE2();
      return FloatLE2;
    }();
    var FloatBE = function() {
      function FloatBE2() {
      }
      ;
      FloatBE2.value = new FloatBE2();
      return FloatBE2;
    }();
    var DoubleLE = function() {
      function DoubleLE2() {
      }
      ;
      DoubleLE2.value = new DoubleLE2();
      return DoubleLE2;
    }();
    var DoubleBE = function() {
      function DoubleBE2() {
      }
      ;
      DoubleBE2.value = new DoubleBE2();
      return DoubleBE2;
    }();
    var showBufferValueType = {
      show: function(v) {
        if (v instanceof UInt8) {
          return "UInt8";
        }
        ;
        if (v instanceof UInt16LE) {
          return "UInt16LE";
        }
        ;
        if (v instanceof UInt16BE) {
          return "UInt16BE";
        }
        ;
        if (v instanceof UInt32LE) {
          return "UInt32LE";
        }
        ;
        if (v instanceof UInt32BE) {
          return "UInt32BE";
        }
        ;
        if (v instanceof Int8) {
          return "Int8";
        }
        ;
        if (v instanceof Int16LE) {
          return "Int16LE";
        }
        ;
        if (v instanceof Int16BE) {
          return "Int16BE";
        }
        ;
        if (v instanceof Int32LE) {
          return "Int32LE";
        }
        ;
        if (v instanceof Int32BE) {
          return "Int32BE";
        }
        ;
        if (v instanceof FloatLE) {
          return "FloatLE";
        }
        ;
        if (v instanceof FloatBE) {
          return "FloatBE";
        }
        ;
        if (v instanceof DoubleLE) {
          return "DoubleLE";
        }
        ;
        if (v instanceof DoubleBE) {
          return "DoubleBE";
        }
        ;
        throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [v.constructor.name]);
      }
    };
    module2.exports = {
      UInt8,
      UInt16LE,
      UInt16BE,
      UInt32LE,
      UInt32BE,
      Int8,
      Int16LE,
      Int16BE,
      Int32LE,
      Int32BE,
      FloatLE,
      FloatBE,
      DoubleLE,
      DoubleBE,
      showBufferValueType
    };
  }
});

// output/Node.Encoding/foreign.js
var require_foreign64 = __commonJS({
  "output/Node.Encoding/foreign.js"(exports2) {
    "use strict";
    exports2.byteLengthImpl = function(str) {
      return function(enc) {
        return Buffer.byteLength(str, enc);
      };
    };
  }
});

// output/Node.Encoding/index.js
var require_Node5 = __commonJS({
  "output/Node.Encoding/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign64();
    var ASCII = function() {
      function ASCII2() {
      }
      ;
      ASCII2.value = new ASCII2();
      return ASCII2;
    }();
    var UTF8 = function() {
      function UTF82() {
      }
      ;
      UTF82.value = new UTF82();
      return UTF82;
    }();
    var UTF16LE = function() {
      function UTF16LE2() {
      }
      ;
      UTF16LE2.value = new UTF16LE2();
      return UTF16LE2;
    }();
    var UCS2 = function() {
      function UCS22() {
      }
      ;
      UCS22.value = new UCS22();
      return UCS22;
    }();
    var Base64 = function() {
      function Base642() {
      }
      ;
      Base642.value = new Base642();
      return Base642;
    }();
    var Latin1 = function() {
      function Latin12() {
      }
      ;
      Latin12.value = new Latin12();
      return Latin12;
    }();
    var Binary = function() {
      function Binary2() {
      }
      ;
      Binary2.value = new Binary2();
      return Binary2;
    }();
    var Hex = function() {
      function Hex2() {
      }
      ;
      Hex2.value = new Hex2();
      return Hex2;
    }();
    var showEncoding = {
      show: function(v) {
        if (v instanceof ASCII) {
          return "ASCII";
        }
        ;
        if (v instanceof UTF8) {
          return "UTF8";
        }
        ;
        if (v instanceof UTF16LE) {
          return "UTF16LE";
        }
        ;
        if (v instanceof UCS2) {
          return "UCS2";
        }
        ;
        if (v instanceof Base64) {
          return "Base64";
        }
        ;
        if (v instanceof Latin1) {
          return "Latin1";
        }
        ;
        if (v instanceof Binary) {
          return "Binary";
        }
        ;
        if (v instanceof Hex) {
          return "Hex";
        }
        ;
        throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [v.constructor.name]);
      }
    };
    var encodingToNode = function(v) {
      if (v instanceof ASCII) {
        return "ascii";
      }
      ;
      if (v instanceof UTF8) {
        return "utf8";
      }
      ;
      if (v instanceof UTF16LE) {
        return "utf16le";
      }
      ;
      if (v instanceof UCS2) {
        return "ucs2";
      }
      ;
      if (v instanceof Base64) {
        return "base64";
      }
      ;
      if (v instanceof Latin1) {
        return "latin1";
      }
      ;
      if (v instanceof Binary) {
        return "binary";
      }
      ;
      if (v instanceof Hex) {
        return "hex";
      }
      ;
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [v.constructor.name]);
    };
    var byteLength = function(str) {
      return function(enc) {
        return $foreign.byteLengthImpl(str)(encodingToNode(enc));
      };
    };
    module2.exports = {
      ASCII,
      UTF8,
      UTF16LE,
      UCS2,
      Base64,
      Latin1,
      Binary,
      Hex,
      encodingToNode,
      byteLength,
      showEncoding
    };
  }
});

// output/Node.Buffer.Immutable/index.js
var require_Node_Buffer3 = __commonJS({
  "output/Node.Buffer.Immutable/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign63();
    var Data_Maybe = require_Data15();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Node_Buffer_Types = require_Node_Buffer2();
    var Node_Encoding = require_Node5();
    var toString = function($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
    };
    var showBuffer = {
      show: $foreign.showImpl
    };
    var readString = function($4) {
      return $foreign.readStringImpl(Node_Encoding.encodingToNode($4));
    };
    var read = function() {
      var $5 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function($6) {
        return $foreign.readImpl($5($6));
      };
    }();
    var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
    var fromString = function(str) {
      var $7 = $foreign.fromStringImpl(str);
      return function($8) {
        return $7(Node_Encoding.encodingToNode($8));
      };
    };
    var eqBuffer = {
      eq: $foreign.eqImpl
    };
    var ordBuffer = {
      compare: function(a) {
        return function(b) {
          var v = $foreign.compareImpl(a)(b);
          if (v < 0) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v > 0) {
            return Data_Ordering.GT.value;
          }
          ;
          return Data_Ordering.EQ.value;
        };
      },
      Eq0: function() {
        return eqBuffer;
      }
    };
    var concat$prime = $foreign.concatToLength;
    module2.exports = {
      fromString,
      read,
      readString,
      toString,
      getAtOffset,
      "concat'": concat$prime,
      showBuffer,
      eqBuffer,
      ordBuffer,
      create: $foreign.create,
      fromArray: $foreign.fromArray,
      fromArrayBuffer: $foreign.fromArrayBuffer,
      toArray: $foreign.toArray,
      toArrayBuffer: $foreign.toArrayBuffer,
      concat: $foreign.concat,
      slice: $foreign.slice,
      size: $foreign.size
    };
  }
});

// output/Node.Buffer.Internal/index.js
var require_Node_Buffer4 = __commonJS({
  "output/Node.Buffer.Internal/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign62();
    var Control_Applicative = require_Control4();
    var Data_Functor = require_Data4();
    var Data_Show = require_Data14();
    var Node_Buffer_Immutable = require_Node_Buffer3();
    var Node_Buffer_Types = require_Node_Buffer2();
    var Node_Encoding = require_Node5();
    var writeString = function(dictMonad) {
      return function($20) {
        return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
      };
    };
    var write = function(dictMonad) {
      var $21 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function($22) {
        return $foreign.writeInternal($21($22));
      };
    };
    var unsafeThaw = function(dictMonad) {
      var $23 = Control_Applicative.pure(dictMonad.Applicative0());
      return function($24) {
        return $23($24);
      };
    };
    var usingToImmutable = function(dictMonad) {
      return function(f) {
        return function(x) {
          return unsafeThaw(dictMonad)(f(x));
        };
      };
    };
    var unsafeFreeze = function(dictMonad) {
      var $25 = Control_Applicative.pure(dictMonad.Applicative0());
      return function($26) {
        return $25($26);
      };
    };
    var usingFromImmutable = function(dictMonad) {
      return function(f) {
        return function(buf) {
          return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(f)(unsafeFreeze(dictMonad)(buf));
        };
      };
    };
    var toString = function(dictMonad) {
      return function(m) {
        return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
      };
    };
    var toArrayBuffer = function(dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
    };
    var toArray = function(dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
    };
    var slice = Node_Buffer_Immutable.slice;
    var size = function(dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
    };
    var readString = function(dictMonad) {
      return function(m) {
        return function(o) {
          return function(o$prime) {
            return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
          };
        };
      };
    };
    var read = function(dictMonad) {
      return function(t) {
        return function(o) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
        };
      };
    };
    var getAtOffset = function(dictMonad) {
      return function(o) {
        return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
      };
    };
    var fromString = function(dictMonad) {
      return function(s) {
        return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
      };
    };
    var fromArrayBuffer = function(dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
    };
    var fromArray = function(dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
    };
    var create = function(dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
    };
    var concat$prime = function(dictMonad) {
      return function(arrs) {
        return function(n) {
          return function(v) {
            return Node_Buffer_Immutable["concat'"](arrs)(n);
          };
        };
      };
    };
    var concat = function(arrs) {
      return function(v) {
        return Node_Buffer_Immutable.concat(arrs);
      };
    };
    module2.exports = {
      unsafeFreeze,
      unsafeThaw,
      usingFromImmutable,
      usingToImmutable,
      create,
      fromArray,
      fromString,
      fromArrayBuffer,
      toArrayBuffer,
      read,
      readString,
      toString,
      write,
      writeString,
      toArray,
      getAtOffset,
      slice,
      size,
      concat,
      "concat'": concat$prime,
      copyAll: $foreign.copyAll,
      setAtOffset: $foreign.setAtOffset,
      copy: $foreign.copy,
      fill: $foreign.fill
    };
  }
});

// output/Node.Buffer/index.js
var require_Node6 = __commonJS({
  "output/Node.Buffer/index.js"(exports2, module2) {
    "use strict";
    var Effect = require_Effect();
    var Node_Buffer_Class = require_Node_Buffer();
    var Node_Buffer_Internal = require_Node_Buffer4();
    var Node_Buffer_Types = require_Node_Buffer2();
    var mutableBufferEffect = {
      create: Node_Buffer_Internal.create(Effect.monadEffect),
      freeze: Node_Buffer_Internal.copyAll,
      unsafeFreeze: Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect),
      thaw: Node_Buffer_Internal.copyAll,
      unsafeThaw: Node_Buffer_Internal.unsafeThaw(Effect.monadEffect),
      fromArray: Node_Buffer_Internal.fromArray(Effect.monadEffect),
      fromString: Node_Buffer_Internal.fromString(Effect.monadEffect),
      fromArrayBuffer: Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect),
      toArrayBuffer: Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect),
      read: Node_Buffer_Internal.read(Effect.monadEffect),
      readString: Node_Buffer_Internal.readString(Effect.monadEffect),
      toString: Node_Buffer_Internal.toString(Effect.monadEffect),
      write: Node_Buffer_Internal.write(Effect.monadEffect),
      writeString: Node_Buffer_Internal.writeString(Effect.monadEffect),
      toArray: Node_Buffer_Internal.toArray(Effect.monadEffect),
      getAtOffset: Node_Buffer_Internal.getAtOffset(Effect.monadEffect),
      setAtOffset: Node_Buffer_Internal.setAtOffset,
      slice: Node_Buffer_Internal.slice,
      size: Node_Buffer_Internal.size(Effect.monadEffect),
      concat: Node_Buffer_Internal.concat,
      "concat'": Node_Buffer_Internal["concat'"](Effect.monadEffect),
      copy: Node_Buffer_Internal.copy,
      fill: Node_Buffer_Internal.fill,
      Monad0: function() {
        return Effect.monadEffect;
      }
    };
    module2.exports = {
      mutableBufferEffect,
      concat: Node_Buffer_Class.concat,
      "concat'": Node_Buffer_Class["concat'"],
      copy: Node_Buffer_Class.copy,
      create: Node_Buffer_Class.create,
      fill: Node_Buffer_Class.fill,
      freeze: Node_Buffer_Class.freeze,
      fromArray: Node_Buffer_Class.fromArray,
      fromArrayBuffer: Node_Buffer_Class.fromArrayBuffer,
      fromString: Node_Buffer_Class.fromString,
      getAtOffset: Node_Buffer_Class.getAtOffset,
      read: Node_Buffer_Class.read,
      readString: Node_Buffer_Class.readString,
      setAtOffset: Node_Buffer_Class.setAtOffset,
      size: Node_Buffer_Class.size,
      slice: Node_Buffer_Class.slice,
      thaw: Node_Buffer_Class.thaw,
      toArray: Node_Buffer_Class.toArray,
      toArrayBuffer: Node_Buffer_Class.toArrayBuffer,
      toString: Node_Buffer_Class.toString,
      unsafeFreeze: Node_Buffer_Class.unsafeFreeze,
      unsafeThaw: Node_Buffer_Class.unsafeThaw,
      write: Node_Buffer_Class.write,
      writeString: Node_Buffer_Class.writeString,
      DoubleBE: Node_Buffer_Types.DoubleBE,
      DoubleLE: Node_Buffer_Types.DoubleLE,
      FloatBE: Node_Buffer_Types.FloatBE,
      FloatLE: Node_Buffer_Types.FloatLE,
      Int16BE: Node_Buffer_Types.Int16BE,
      Int16LE: Node_Buffer_Types.Int16LE,
      Int32BE: Node_Buffer_Types.Int32BE,
      Int32LE: Node_Buffer_Types.Int32LE,
      Int8: Node_Buffer_Types.Int8,
      UInt16BE: Node_Buffer_Types.UInt16BE,
      UInt16LE: Node_Buffer_Types.UInt16LE,
      UInt32BE: Node_Buffer_Types.UInt32BE,
      UInt32LE: Node_Buffer_Types.UInt32LE,
      UInt8: Node_Buffer_Types.UInt8
    };
  }
});

// output/Node.ChildProcess/foreign.js
var require_foreign65 = __commonJS({
  "output/Node.ChildProcess/foreign.js"(exports2) {
    "use strict";
    exports2.unsafeFromNullable = function unsafeFromNullable(msg) {
      return function(x) {
        if (x === null)
          throw new Error(msg);
        return x;
      };
    };
    exports2.spawnImpl = function spawnImpl(command) {
      return function(args) {
        return function(opts) {
          return function() {
            return require("child_process").spawn(command, args, opts);
          };
        };
      };
    };
    exports2.execImpl = function execImpl(command) {
      return function(opts) {
        return function(callback) {
          return function() {
            return require("child_process").exec(command, opts, function(err, stdout, stderr) {
              callback(err)(stdout)(stderr)();
            });
          };
        };
      };
    };
    exports2.execFileImpl = function execImpl(command) {
      return function(args) {
        return function(opts) {
          return function(callback) {
            return function() {
              return require("child_process").execFile(command, args, opts, function(err, stdout, stderr) {
                callback(err)(stdout)(stderr)();
              });
            };
          };
        };
      };
    };
    exports2.execSyncImpl = function execSyncImpl(command) {
      return function(opts) {
        return function() {
          return require("child_process").execSync(command, opts);
        };
      };
    };
    exports2.execFileSyncImpl = function execFileSyncImpl(command) {
      return function(args) {
        return function(opts) {
          return function() {
            return require("child_process").execFileSync(command, args, opts);
          };
        };
      };
    };
    exports2.fork = function fork(cmd) {
      return function(args) {
        return function() {
          return require("child_process").fork(cmd, args);
        };
      };
    };
    exports2.mkOnExit = function mkOnExit(mkChildExit) {
      return function onExit(cp) {
        return function(cb) {
          return function() {
            cp.on("exit", function(code, signal) {
              cb(mkChildExit(code)(signal))();
            });
          };
        };
      };
    };
    exports2.mkOnClose = function mkOnClose(mkChildExit) {
      return function onClose(cp) {
        return function(cb) {
          return function() {
            cp.on("close", function(code, signal) {
              cb(mkChildExit(code)(signal))();
            });
          };
        };
      };
    };
    exports2.onDisconnect = function onDisconnect(cp) {
      return function(cb) {
        return function() {
          cp.on("disconnect", cb);
        };
      };
    };
    exports2.mkOnMessage = function mkOnMessage(nothing) {
      return function(just) {
        return function onMessage(cp) {
          return function(cb) {
            return function() {
              cp.on("message", function(mess, sendHandle) {
                cb(mess, sendHandle ? just(sendHandle) : nothing)();
              });
            };
          };
        };
      };
    };
    exports2.onError = function onError(cp) {
      return function(cb) {
        return function() {
          cp.on("error", function(err) {
            cb(err)();
          });
        };
      };
    };
    exports2.undefined = void 0;
    exports2.process = process;
  }
});

// output/Effect.Exception.Unsafe/index.js
var require_Effect_Exception = __commonJS({
  "output/Effect.Exception.Unsafe/index.js"(exports2, module2) {
    "use strict";
    var Effect_Exception = require_Effect2();
    var Effect_Unsafe = require_Effect5();
    var unsafeThrowException = function($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
    };
    var unsafeThrow = function($1) {
      return unsafeThrowException(Effect_Exception.error($1));
    };
    module2.exports = {
      unsafeThrowException,
      unsafeThrow
    };
  }
});

// output/Node.ChildProcess/index.js
var require_Node7 = __commonJS({
  "output/Node.ChildProcess/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign65();
    var Control_Alt = require_Control6();
    var Control_Bind = require_Control5();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Data_Posix_Signal = require_Data_Posix();
    var Data_Show = require_Data14();
    var Effect_Exception_Unsafe = require_Effect_Exception();
    var Unsafe_Coerce = require_Unsafe();
    var Pipe = function() {
      function Pipe2() {
      }
      ;
      Pipe2.value = new Pipe2();
      return Pipe2;
    }();
    var Ignore = function() {
      function Ignore2() {
      }
      ;
      Ignore2.value = new Ignore2();
      return Ignore2;
    }();
    var ShareStream = function() {
      function ShareStream2(value0) {
        this.value0 = value0;
      }
      ;
      ShareStream2.create = function(value0) {
        return new ShareStream2(value0);
      };
      return ShareStream2;
    }();
    var ShareFD = function() {
      function ShareFD2(value0) {
        this.value0 = value0;
      }
      ;
      ShareFD2.create = function(value0) {
        return new ShareFD2(value0);
      };
      return ShareFD2;
    }();
    var Normally = function() {
      function Normally2(value0) {
        this.value0 = value0;
      }
      ;
      Normally2.create = function(value0) {
        return new Normally2(value0);
      };
      return Normally2;
    }();
    var BySignal = function() {
      function BySignal2(value0) {
        this.value0 = value0;
      }
      ;
      BySignal2.create = function(value0) {
        return new BySignal2(value0);
      };
      return BySignal2;
    }();
    var toStandardError = Unsafe_Coerce.unsafeCoerce;
    var toActualStdIOBehaviour = function(b) {
      if (b instanceof Pipe) {
        return "pipe";
      }
      ;
      if (b instanceof Ignore) {
        return "ignore";
      }
      ;
      if (b instanceof ShareFD) {
        return b.value0;
      }
      ;
      if (b instanceof ShareStream) {
        return b.value0;
      }
      ;
      throw new Error("Failed pattern match at Node.ChildProcess (line 510, column 28 - line 514, column 33): " + [b.constructor.name]);
    };
    var toActualStdIOOptions = Data_Functor.map(Data_Functor.functorArray)(function() {
      var $29 = Data_Functor.map(Data_Maybe.functorMaybe)(toActualStdIOBehaviour);
      return function($30) {
        return Data_Nullable.toNullable($29($30));
      };
    }());
    var spawn = function(cmd) {
      return function(args) {
        var convertOpts = function(opts) {
          return {
            cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
            stdio: toActualStdIOOptions(opts.stdio),
            env: Data_Nullable.toNullable(opts.env),
            detached: opts.detached,
            uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
            gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
          };
        };
        var $31 = $foreign.spawnImpl(cmd)(args);
        return function($32) {
          return $31(convertOpts($32));
        };
      };
    };
    var showExit = {
      show: function(v) {
        if (v instanceof Normally) {
          return "Normally " + Data_Show.show(Data_Show.showInt)(v.value0);
        }
        ;
        if (v instanceof BySignal) {
          return "BySignal " + Data_Show.show(Data_Posix_Signal.showSignal)(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Node.ChildProcess (line 163, column 1 - line 165, column 48): " + [v.constructor.name]);
      }
    };
    var runChildProcess = function(v) {
      return v;
    };
    var pipe = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([Pipe.value, Pipe.value, Pipe.value]);
    var pid = function($33) {
      return function(v) {
        return v.pid;
      }(runChildProcess($33));
    };
    var onMessage = $foreign.mkOnMessage(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
    var mkExit = function(code) {
      return function(signal) {
        var fromSignal = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe)(function() {
          var $34 = Data_Functor.map(Data_Maybe.functorMaybe)(BySignal.create);
          return function($35) {
            return $34(Data_Posix_Signal.fromString($35));
          };
        }());
        var fromCode = function() {
          var $36 = Data_Functor.map(Data_Maybe.functorMaybe)(Normally.create);
          return function($37) {
            return $36(Data_Nullable.toMaybe($37));
          };
        }();
        var v = Control_Alt.alt(Data_Maybe.altMaybe)(fromCode(code))(fromSignal(signal));
        if (v instanceof Data_Maybe.Just) {
          return v.value0;
        }
        ;
        if (v instanceof Data_Maybe.Nothing) {
          return Effect_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
        }
        ;
        throw new Error("Failed pattern match at Node.ChildProcess (line 169, column 3 - line 171, column 73): " + [v.constructor.name]);
      };
    };
    var onClose = $foreign.mkOnClose(mkExit);
    var onExit = $foreign.mkOnExit(mkExit);
    var mkEffect = Unsafe_Coerce.unsafeCoerce;
    var send = function(msg) {
      return function(handle) {
        return function(v) {
          return mkEffect(function(v1) {
            return v.send(msg, handle);
          });
        };
      };
    };
    var missingStream = function(str) {
      return "Node.ChildProcess: stream not available: " + (str + "\nThis is probably because you passed something other than Pipe to the stdio option when you spawned it.");
    };
    var stderr = function() {
      var $38 = $foreign.unsafeFromNullable(missingStream("stderr"));
      return function($39) {
        return $38(function(v) {
          return v.stderr;
        }(runChildProcess($39)));
      };
    }();
    var stdin = function() {
      var $40 = $foreign.unsafeFromNullable(missingStream("stdin"));
      return function($41) {
        return $40(function(v) {
          return v.stdin;
        }(runChildProcess($41)));
      };
    }();
    var stdout = function() {
      var $42 = $foreign.unsafeFromNullable(missingStream("stdout"));
      return function($43) {
        return $42(function(v) {
          return v.stdout;
        }(runChildProcess($43)));
      };
    }();
    var kill = function(sig) {
      return function(v) {
        return mkEffect(function(v1) {
          return v.kill(Data_Posix_Signal.toString(sig));
        });
      };
    };
    var inherit = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([new ShareStream($foreign.process.stdin), new ShareStream($foreign.process.stdout), new ShareStream($foreign.process.stderr)]);
    var ignore = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([Ignore.value, Ignore.value, Ignore.value]);
    var disconnect = function($44) {
      return function(v) {
        return v.disconnect;
      }(runChildProcess($44));
    };
    var defaultSpawnOptions = {
      cwd: Data_Maybe.Nothing.value,
      stdio: pipe,
      env: Data_Maybe.Nothing.value,
      detached: false,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
    };
    var defaultExecSyncOptions = {
      cwd: Data_Maybe.Nothing.value,
      input: Data_Maybe.Nothing.value,
      stdio: pipe,
      env: Data_Maybe.Nothing.value,
      timeout: Data_Maybe.Nothing.value,
      maxBuffer: Data_Maybe.Nothing.value,
      killSignal: Data_Maybe.Nothing.value,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
    };
    var defaultExecOptions = {
      cwd: Data_Maybe.Nothing.value,
      env: Data_Maybe.Nothing.value,
      timeout: Data_Maybe.Nothing.value,
      maxBuffer: Data_Maybe.Nothing.value,
      killSignal: Data_Maybe.Nothing.value,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
    };
    var convertExecSyncOptions = function(opts) {
      return {
        cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
        input: Data_Maybe.fromMaybe($foreign["undefined"])(opts.input),
        stdio: toActualStdIOOptions(opts.stdio),
        env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
        timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
        maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
        killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
        uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
        gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
      };
    };
    var execFileSync = function(cmd) {
      return function(args) {
        return function(opts) {
          return $foreign.execFileSyncImpl(cmd)(args)(convertExecSyncOptions(opts));
        };
      };
    };
    var execSync = function(cmd) {
      return function(opts) {
        return $foreign.execSyncImpl(cmd)(convertExecSyncOptions(opts));
      };
    };
    var convertExecOptions = function(opts) {
      return {
        cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
        env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
        timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
        maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
        killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
        uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
        gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
      };
    };
    var exec = function(cmd) {
      return function(opts) {
        return function(callback) {
          return $foreign.execImpl(cmd)(convertExecOptions(opts))(function(err) {
            return function(stdout$prime) {
              return function(stderr$prime) {
                return callback({
                  error: Data_Nullable.toMaybe(err),
                  stdout: stdout$prime,
                  stderr: stderr$prime
                });
              };
            };
          });
        };
      };
    };
    var execFile = function(cmd) {
      return function(args) {
        return function(opts) {
          return function(callback) {
            return $foreign.execFileImpl(cmd)(args)(convertExecOptions(opts))(function(err) {
              return function(stdout$prime) {
                return function(stderr$prime) {
                  return callback({
                    error: Data_Nullable.toMaybe(err),
                    stdout: stdout$prime,
                    stderr: stderr$prime
                  });
                };
              };
            });
          };
        };
      };
    };
    var connected = function(v) {
      return mkEffect(function(v1) {
        return v.connected;
      });
    };
    module2.exports = {
      stdin,
      stdout,
      stderr,
      pid,
      connected,
      kill,
      send,
      disconnect,
      toStandardError,
      Normally,
      BySignal,
      onExit,
      onClose,
      onMessage,
      spawn,
      defaultSpawnOptions,
      exec,
      execFile,
      defaultExecOptions,
      execSync,
      execFileSync,
      defaultExecSyncOptions,
      Pipe,
      Ignore,
      ShareStream,
      ShareFD,
      pipe,
      inherit,
      ignore,
      showExit,
      onDisconnect: $foreign.onDisconnect,
      onError: $foreign.onError,
      fork: $foreign.fork
    };
  }
});

// output/Data.DateTime.Instant/foreign.js
var require_foreign66 = __commonJS({
  "output/Data.DateTime.Instant/foreign.js"(exports2) {
    "use strict";
    var createDateTime = function(y, m, d, h, mi, s, ms) {
      var dateTime = new Date(Date.UTC(y, m, d, h, mi, s, ms));
      if (y >= 0 && y < 100) {
        dateTime.setUTCFullYear(y);
      }
      return dateTime;
    };
    exports2.fromDateTimeImpl = function(y, mo, d, h, mi, s, ms) {
      return createDateTime(y, mo - 1, d, h, mi, s, ms).getTime();
    };
    exports2.toDateTimeImpl = function(ctor) {
      return function(instant) {
        var dt = new Date(instant);
        return ctor(dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
      };
    };
  }
});

// output/Data.Date/foreign.js
var require_foreign67 = __commonJS({
  "output/Data.Date/foreign.js"(exports2) {
    "use strict";
    var createDate = function(y, m, d) {
      var date = new Date(Date.UTC(y, m, d));
      if (y >= 0 && y < 100) {
        date.setUTCFullYear(y);
      }
      return date;
    };
    exports2.canonicalDateImpl = function(ctor, y, m, d) {
      var date = createDate(y, m - 1, d);
      return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
    };
    exports2.calcWeekday = function(y, m, d) {
      return createDate(y, m - 1, d).getUTCDay();
    };
    exports2.calcDiff = function(y1, m1, d1, y2, m2, d2) {
      var dt1 = createDate(y1, m1 - 1, d1);
      var dt2 = createDate(y2, m2 - 1, d2);
      return dt1.getTime() - dt2.getTime();
    };
  }
});

// output/Data.Date.Component/index.js
var require_Data_Date = __commonJS({
  "output/Data.Date.Component/index.js"(exports2, module2) {
    "use strict";
    var Data_Boolean = require_Data();
    var Data_Enum = require_Data42();
    var Data_Eq = require_Data8();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Monday = function() {
      function Monday2() {
      }
      ;
      Monday2.value = new Monday2();
      return Monday2;
    }();
    var Tuesday = function() {
      function Tuesday2() {
      }
      ;
      Tuesday2.value = new Tuesday2();
      return Tuesday2;
    }();
    var Wednesday = function() {
      function Wednesday2() {
      }
      ;
      Wednesday2.value = new Wednesday2();
      return Wednesday2;
    }();
    var Thursday = function() {
      function Thursday2() {
      }
      ;
      Thursday2.value = new Thursday2();
      return Thursday2;
    }();
    var Friday = function() {
      function Friday2() {
      }
      ;
      Friday2.value = new Friday2();
      return Friday2;
    }();
    var Saturday = function() {
      function Saturday2() {
      }
      ;
      Saturday2.value = new Saturday2();
      return Saturday2;
    }();
    var Sunday = function() {
      function Sunday2() {
      }
      ;
      Sunday2.value = new Sunday2();
      return Sunday2;
    }();
    var January = function() {
      function January2() {
      }
      ;
      January2.value = new January2();
      return January2;
    }();
    var February = function() {
      function February2() {
      }
      ;
      February2.value = new February2();
      return February2;
    }();
    var March = function() {
      function March2() {
      }
      ;
      March2.value = new March2();
      return March2;
    }();
    var April = function() {
      function April2() {
      }
      ;
      April2.value = new April2();
      return April2;
    }();
    var May = function() {
      function May2() {
      }
      ;
      May2.value = new May2();
      return May2;
    }();
    var June = function() {
      function June2() {
      }
      ;
      June2.value = new June2();
      return June2;
    }();
    var July = function() {
      function July2() {
      }
      ;
      July2.value = new July2();
      return July2;
    }();
    var August = function() {
      function August2() {
      }
      ;
      August2.value = new August2();
      return August2;
    }();
    var September = function() {
      function September2() {
      }
      ;
      September2.value = new September2();
      return September2;
    }();
    var October = function() {
      function October2() {
      }
      ;
      October2.value = new October2();
      return October2;
    }();
    var November = function() {
      function November2() {
      }
      ;
      November2.value = new November2();
      return November2;
    }();
    var December = function() {
      function December2() {
      }
      ;
      December2.value = new December2();
      return December2;
    }();
    var showYear = {
      show: function(v) {
        return "(Year " + (Data_Show.show(Data_Show.showInt)(v) + ")");
      }
    };
    var showWeekday = {
      show: function(v) {
        if (v instanceof Monday) {
          return "Monday";
        }
        ;
        if (v instanceof Tuesday) {
          return "Tuesday";
        }
        ;
        if (v instanceof Wednesday) {
          return "Wednesday";
        }
        ;
        if (v instanceof Thursday) {
          return "Thursday";
        }
        ;
        if (v instanceof Friday) {
          return "Friday";
        }
        ;
        if (v instanceof Saturday) {
          return "Saturday";
        }
        ;
        if (v instanceof Sunday) {
          return "Sunday";
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 184, column 1 - line 191, column 25): " + [v.constructor.name]);
      }
    };
    var showMonth = {
      show: function(v) {
        if (v instanceof January) {
          return "January";
        }
        ;
        if (v instanceof February) {
          return "February";
        }
        ;
        if (v instanceof March) {
          return "March";
        }
        ;
        if (v instanceof April) {
          return "April";
        }
        ;
        if (v instanceof May) {
          return "May";
        }
        ;
        if (v instanceof June) {
          return "June";
        }
        ;
        if (v instanceof July) {
          return "July";
        }
        ;
        if (v instanceof August) {
          return "August";
        }
        ;
        if (v instanceof September) {
          return "September";
        }
        ;
        if (v instanceof October) {
          return "October";
        }
        ;
        if (v instanceof November) {
          return "November";
        }
        ;
        if (v instanceof December) {
          return "December";
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 101, column 1 - line 113, column 29): " + [v.constructor.name]);
      }
    };
    var showDay = {
      show: function(v) {
        return "(Day " + (Data_Show.show(Data_Show.showInt)(v) + ")");
      }
    };
    var ordYear = Data_Ord.ordInt;
    var ordDay = Data_Ord.ordInt;
    var eqYear = Data_Eq.eqInt;
    var eqWeekday = {
      eq: function(x) {
        return function(y) {
          if (x instanceof Monday && y instanceof Monday) {
            return true;
          }
          ;
          if (x instanceof Tuesday && y instanceof Tuesday) {
            return true;
          }
          ;
          if (x instanceof Wednesday && y instanceof Wednesday) {
            return true;
          }
          ;
          if (x instanceof Thursday && y instanceof Thursday) {
            return true;
          }
          ;
          if (x instanceof Friday && y instanceof Friday) {
            return true;
          }
          ;
          if (x instanceof Saturday && y instanceof Saturday) {
            return true;
          }
          ;
          if (x instanceof Sunday && y instanceof Sunday) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var ordWeekday = {
      compare: function(x) {
        return function(y) {
          if (x instanceof Monday && y instanceof Monday) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Monday) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Monday) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Tuesday && y instanceof Tuesday) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Tuesday) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Tuesday) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Wednesday && y instanceof Wednesday) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Wednesday) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Wednesday) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Thursday && y instanceof Thursday) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Thursday) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Thursday) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Friday && y instanceof Friday) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Friday) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Friday) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Saturday && y instanceof Saturday) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof Saturday) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Saturday) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Sunday && y instanceof Sunday) {
            return Data_Ordering.EQ.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Date.Component (line 154, column 1 - line 154, column 42): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqWeekday;
      }
    };
    var eqMonth = {
      eq: function(x) {
        return function(y) {
          if (x instanceof January && y instanceof January) {
            return true;
          }
          ;
          if (x instanceof February && y instanceof February) {
            return true;
          }
          ;
          if (x instanceof March && y instanceof March) {
            return true;
          }
          ;
          if (x instanceof April && y instanceof April) {
            return true;
          }
          ;
          if (x instanceof May && y instanceof May) {
            return true;
          }
          ;
          if (x instanceof June && y instanceof June) {
            return true;
          }
          ;
          if (x instanceof July && y instanceof July) {
            return true;
          }
          ;
          if (x instanceof August && y instanceof August) {
            return true;
          }
          ;
          if (x instanceof September && y instanceof September) {
            return true;
          }
          ;
          if (x instanceof October && y instanceof October) {
            return true;
          }
          ;
          if (x instanceof November && y instanceof November) {
            return true;
          }
          ;
          if (x instanceof December && y instanceof December) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var ordMonth = {
      compare: function(x) {
        return function(y) {
          if (x instanceof January && y instanceof January) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof January) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof January) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof February && y instanceof February) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof February) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof February) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof March && y instanceof March) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof March) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof March) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof April && y instanceof April) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof April) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof April) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof May && y instanceof May) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof May) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof May) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof June && y instanceof June) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof June) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof June) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof July && y instanceof July) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof July) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof July) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof August && y instanceof August) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof August) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof August) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof September && y instanceof September) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof September) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof September) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof October && y instanceof October) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof October) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof October) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof November && y instanceof November) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof November) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof November) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof December && y instanceof December) {
            return Data_Ordering.EQ.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Date.Component (line 61, column 1 - line 61, column 38): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqMonth;
      }
    };
    var eqDay = Data_Eq.eqInt;
    var boundedYear = {
      bottom: -271820 | 0,
      top: 275759,
      Ord0: function() {
        return ordYear;
      }
    };
    var boundedWeekday = {
      bottom: Monday.value,
      top: Sunday.value,
      Ord0: function() {
        return ordWeekday;
      }
    };
    var boundedMonth = {
      bottom: January.value,
      top: December.value,
      Ord0: function() {
        return ordMonth;
      }
    };
    var boundedEnumYear = {
      cardinality: 547580,
      toEnum: function(n) {
        if (n >= (-271820 | 0) && n <= 275759) {
          return new Data_Maybe.Just(n);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [n.constructor.name]);
      },
      fromEnum: function(v) {
        return v;
      },
      Bounded0: function() {
        return boundedYear;
      },
      Enum1: function() {
        return enumYear;
      }
    };
    var enumYear = {
      succ: function() {
        var $46 = Data_Enum.toEnum(boundedEnumYear);
        var $47 = Data_Enum.fromEnum(boundedEnumYear);
        return function($48) {
          return $46(function(v) {
            return v + 1 | 0;
          }($47($48)));
        };
      }(),
      pred: function() {
        var $49 = Data_Enum.toEnum(boundedEnumYear);
        var $50 = Data_Enum.fromEnum(boundedEnumYear);
        return function($51) {
          return $49(function(v) {
            return v - 1 | 0;
          }($50($51)));
        };
      }(),
      Ord0: function() {
        return ordYear;
      }
    };
    var boundedEnumWeekday = {
      cardinality: 7,
      toEnum: function(v) {
        if (v === 1) {
          return new Data_Maybe.Just(Monday.value);
        }
        ;
        if (v === 2) {
          return new Data_Maybe.Just(Tuesday.value);
        }
        ;
        if (v === 3) {
          return new Data_Maybe.Just(Wednesday.value);
        }
        ;
        if (v === 4) {
          return new Data_Maybe.Just(Thursday.value);
        }
        ;
        if (v === 5) {
          return new Data_Maybe.Just(Friday.value);
        }
        ;
        if (v === 6) {
          return new Data_Maybe.Just(Saturday.value);
        }
        ;
        if (v === 7) {
          return new Data_Maybe.Just(Sunday.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      fromEnum: function(v) {
        if (v instanceof Monday) {
          return 1;
        }
        ;
        if (v instanceof Tuesday) {
          return 2;
        }
        ;
        if (v instanceof Wednesday) {
          return 3;
        }
        ;
        if (v instanceof Thursday) {
          return 4;
        }
        ;
        if (v instanceof Friday) {
          return 5;
        }
        ;
        if (v instanceof Saturday) {
          return 6;
        }
        ;
        if (v instanceof Sunday) {
          return 7;
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 175, column 14 - line 182, column 16): " + [v.constructor.name]);
      },
      Bounded0: function() {
        return boundedWeekday;
      },
      Enum1: function() {
        return enumWeekday;
      }
    };
    var enumWeekday = {
      succ: function() {
        var $52 = Data_Enum.toEnum(boundedEnumWeekday);
        var $53 = Data_Enum.fromEnum(boundedEnumWeekday);
        return function($54) {
          return $52(function(v) {
            return v + 1 | 0;
          }($53($54)));
        };
      }(),
      pred: function() {
        var $55 = Data_Enum.toEnum(boundedEnumWeekday);
        var $56 = Data_Enum.fromEnum(boundedEnumWeekday);
        return function($57) {
          return $55(function(v) {
            return v - 1 | 0;
          }($56($57)));
        };
      }(),
      Ord0: function() {
        return ordWeekday;
      }
    };
    var boundedEnumMonth = {
      cardinality: 12,
      toEnum: function(v) {
        if (v === 1) {
          return new Data_Maybe.Just(January.value);
        }
        ;
        if (v === 2) {
          return new Data_Maybe.Just(February.value);
        }
        ;
        if (v === 3) {
          return new Data_Maybe.Just(March.value);
        }
        ;
        if (v === 4) {
          return new Data_Maybe.Just(April.value);
        }
        ;
        if (v === 5) {
          return new Data_Maybe.Just(May.value);
        }
        ;
        if (v === 6) {
          return new Data_Maybe.Just(June.value);
        }
        ;
        if (v === 7) {
          return new Data_Maybe.Just(July.value);
        }
        ;
        if (v === 8) {
          return new Data_Maybe.Just(August.value);
        }
        ;
        if (v === 9) {
          return new Data_Maybe.Just(September.value);
        }
        ;
        if (v === 10) {
          return new Data_Maybe.Just(October.value);
        }
        ;
        if (v === 11) {
          return new Data_Maybe.Just(November.value);
        }
        ;
        if (v === 12) {
          return new Data_Maybe.Just(December.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      },
      fromEnum: function(v) {
        if (v instanceof January) {
          return 1;
        }
        ;
        if (v instanceof February) {
          return 2;
        }
        ;
        if (v instanceof March) {
          return 3;
        }
        ;
        if (v instanceof April) {
          return 4;
        }
        ;
        if (v instanceof May) {
          return 5;
        }
        ;
        if (v instanceof June) {
          return 6;
        }
        ;
        if (v instanceof July) {
          return 7;
        }
        ;
        if (v instanceof August) {
          return 8;
        }
        ;
        if (v instanceof September) {
          return 9;
        }
        ;
        if (v instanceof October) {
          return 10;
        }
        ;
        if (v instanceof November) {
          return 11;
        }
        ;
        if (v instanceof December) {
          return 12;
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [v.constructor.name]);
      },
      Bounded0: function() {
        return boundedMonth;
      },
      Enum1: function() {
        return enumMonth;
      }
    };
    var enumMonth = {
      succ: function() {
        var $58 = Data_Enum.toEnum(boundedEnumMonth);
        var $59 = Data_Enum.fromEnum(boundedEnumMonth);
        return function($60) {
          return $58(function(v) {
            return v + 1 | 0;
          }($59($60)));
        };
      }(),
      pred: function() {
        var $61 = Data_Enum.toEnum(boundedEnumMonth);
        var $62 = Data_Enum.fromEnum(boundedEnumMonth);
        return function($63) {
          return $61(function(v) {
            return v - 1 | 0;
          }($62($63)));
        };
      }(),
      Ord0: function() {
        return ordMonth;
      }
    };
    var boundedDay = {
      bottom: 1,
      top: 31,
      Ord0: function() {
        return ordDay;
      }
    };
    var boundedEnumDay = {
      cardinality: 31,
      toEnum: function(n) {
        if (n >= 1 && n <= 31) {
          return new Data_Maybe.Just(n);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [n.constructor.name]);
      },
      fromEnum: function(v) {
        return v;
      },
      Bounded0: function() {
        return boundedDay;
      },
      Enum1: function() {
        return enumDay;
      }
    };
    var enumDay = {
      succ: function() {
        var $64 = Data_Enum.toEnum(boundedEnumDay);
        var $65 = Data_Enum.fromEnum(boundedEnumDay);
        return function($66) {
          return $64(function(v) {
            return v + 1 | 0;
          }($65($66)));
        };
      }(),
      pred: function() {
        var $67 = Data_Enum.toEnum(boundedEnumDay);
        var $68 = Data_Enum.fromEnum(boundedEnumDay);
        return function($69) {
          return $67(function(v) {
            return v - 1 | 0;
          }($68($69)));
        };
      }(),
      Ord0: function() {
        return ordDay;
      }
    };
    module2.exports = {
      January,
      February,
      March,
      April,
      May,
      June,
      July,
      August,
      September,
      October,
      November,
      December,
      Monday,
      Tuesday,
      Wednesday,
      Thursday,
      Friday,
      Saturday,
      Sunday,
      eqYear,
      ordYear,
      boundedYear,
      enumYear,
      boundedEnumYear,
      showYear,
      eqMonth,
      ordMonth,
      boundedMonth,
      enumMonth,
      boundedEnumMonth,
      showMonth,
      eqDay,
      ordDay,
      boundedDay,
      enumDay,
      boundedEnumDay,
      showDay,
      eqWeekday,
      ordWeekday,
      boundedWeekday,
      enumWeekday,
      boundedEnumWeekday,
      showWeekday
    };
  }
});

// output/Data.Date/index.js
var require_Data44 = __commonJS({
  "output/Data.Date/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign67();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Boolean = require_Data();
    var Data_Bounded = require_Data13();
    var Data_Date_Component = require_Data_Date();
    var Data_Enum = require_Data42();
    var Data_Eq = require_Data8();
    var Data_EuclideanRing = require_Data18();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Data_Time_Duration = require_Data_Time();
    var $$Date = function() {
      function $$Date2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      $$Date2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new $$Date2(value0, value1, value2);
          };
        };
      };
      return $$Date2;
    }();
    var year = function(v) {
      return v.value0;
    };
    var weekday = function(v) {
      var n = $foreign.calcWeekday(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2);
      var $41 = n === 0;
      if ($41) {
        return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(7));
      }
      ;
      return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(n));
    };
    var showDate = {
      show: function(v) {
        return "(Date " + (Data_Show.show(Data_Date_Component.showYear)(v.value0) + (" " + (Data_Show.show(Data_Date_Component.showMonth)(v.value1) + (" " + (Data_Show.show(Data_Date_Component.showDay)(v.value2) + ")")))));
      }
    };
    var month = function(v) {
      return v.value1;
    };
    var isLeapYear = function(y) {
      var y$prime = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y);
      return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(4) === 0 && (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(400) === 0 || !(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(y$prime)(100) === 0));
    };
    var lastDayOfMonth = function(y) {
      return function(m) {
        var unsafeDay = function() {
          var $108 = Data_Maybe.fromJust();
          var $109 = Data_Enum.toEnum(Data_Date_Component.boundedEnumDay);
          return function($110) {
            return $108($109($110));
          };
        }();
        if (m instanceof Data_Date_Component.January) {
          return unsafeDay(31);
        }
        ;
        if (m instanceof Data_Date_Component.February) {
          if (isLeapYear(y)) {
            return unsafeDay(29);
          }
          ;
          if (Data_Boolean.otherwise) {
            return unsafeDay(28);
          }
          ;
        }
        ;
        if (m instanceof Data_Date_Component.March) {
          return unsafeDay(31);
        }
        ;
        if (m instanceof Data_Date_Component.April) {
          return unsafeDay(30);
        }
        ;
        if (m instanceof Data_Date_Component.May) {
          return unsafeDay(31);
        }
        ;
        if (m instanceof Data_Date_Component.June) {
          return unsafeDay(30);
        }
        ;
        if (m instanceof Data_Date_Component.July) {
          return unsafeDay(31);
        }
        ;
        if (m instanceof Data_Date_Component.August) {
          return unsafeDay(31);
        }
        ;
        if (m instanceof Data_Date_Component.September) {
          return unsafeDay(30);
        }
        ;
        if (m instanceof Data_Date_Component.October) {
          return unsafeDay(31);
        }
        ;
        if (m instanceof Data_Date_Component.November) {
          return unsafeDay(30);
        }
        ;
        if (m instanceof Data_Date_Component.December) {
          return unsafeDay(31);
        }
        ;
        throw new Error("Failed pattern match at Data.Date (line 127, column 22 - line 141, column 27): " + [m.constructor.name]);
      };
    };
    var eqDate = {
      eq: function(x) {
        return function(y) {
          return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
        };
      }
    };
    var ordDate = {
      compare: function(x) {
        return function(y) {
          var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
          }
          ;
          var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
          }
          ;
          return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
        };
      },
      Eq0: function() {
        return eqDate;
      }
    };
    var enumDate = {
      succ: function(v) {
        var sm = Data_Enum.succ(Data_Date_Component.enumMonth)(v.value1);
        var l = lastDayOfMonth(v.value0)(v.value1);
        var sd = function() {
          var v1 = Data_Enum.succ(Data_Date_Component.enumDay)(v.value2);
          var $73 = Data_Ord.greaterThan(Data_Maybe.ordMaybe(Data_Date_Component.ordDay))(v1)(new Data_Maybe.Just(l));
          if ($73) {
            return Data_Maybe.Nothing.value;
          }
          ;
          return v1;
        }();
        var m$prime = function() {
          var $74 = Data_Maybe.isNothing(sd);
          if ($74) {
            return Data_Maybe.fromMaybe(Data_Date_Component.January.value)(sm);
          }
          ;
          return v.value1;
        }();
        var y$prime = function() {
          var $75 = Data_Maybe.isNothing(sd) && Data_Maybe.isNothing(sm);
          if ($75) {
            return Data_Enum.succ(Data_Date_Component.enumYear)(v.value0);
          }
          ;
          return new Data_Maybe.Just(v.value0);
        }();
        var d$prime = function() {
          var $76 = Data_Maybe.isNothing(sd);
          if ($76) {
            return Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1);
          }
          ;
          return sd;
        }();
        return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
      },
      pred: function(v) {
        var pm = Data_Enum.pred(Data_Date_Component.enumMonth)(v.value1);
        var pd = Data_Enum.pred(Data_Date_Component.enumDay)(v.value2);
        var y$prime = function() {
          var $81 = Data_Maybe.isNothing(pd) && Data_Maybe.isNothing(pm);
          if ($81) {
            return Data_Enum.pred(Data_Date_Component.enumYear)(v.value0);
          }
          ;
          return new Data_Maybe.Just(v.value0);
        }();
        var m$prime = function() {
          var $82 = Data_Maybe.isNothing(pd);
          if ($82) {
            return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(pm);
          }
          ;
          return v.value1;
        }();
        var l = lastDayOfMonth(v.value0)(m$prime);
        var d$prime = function() {
          var $83 = Data_Maybe.isNothing(pd);
          if ($83) {
            return new Data_Maybe.Just(l);
          }
          ;
          return pd;
        }();
        return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create)(y$prime))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(m$prime)))(d$prime);
      },
      Ord0: function() {
        return ordDate;
      }
    };
    var diff = function(dictDuration) {
      return function(v) {
        return function(v1) {
          return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2, v1.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v1.value1), v1.value2));
        };
      };
    };
    var day = function(v) {
      return v.value2;
    };
    var canonicalDate = function(y) {
      return function(m) {
        return function(d) {
          var mkDate = function(y$prime) {
            return function(m$prime) {
              return function(d$prime) {
                return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
              };
            };
          };
          return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
        };
      };
    };
    var exactDate = function(y) {
      return function(m) {
        return function(d) {
          var dt = new $$Date(y, m, d);
          var $99 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);
          if ($99) {
            return new Data_Maybe.Just(dt);
          }
          ;
          return Data_Maybe.Nothing.value;
        };
      };
    };
    var boundedDate = {
      bottom: new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)),
      top: new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)),
      Ord0: function() {
        return ordDate;
      }
    };
    var adjust = function(v) {
      return function(date) {
        var adj = function(v1) {
          return function(v2) {
            if (v1 === 0) {
              return new Data_Maybe.Just(v2);
            }
            ;
            var j = v1 + Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(v2.value2) | 0;
            var low = j < 1;
            var l = lastDayOfMonth(v2.value0)(function() {
              if (low) {
                return Data_Maybe.fromMaybe(Data_Date_Component.December.value)(Data_Enum.pred(Data_Date_Component.enumMonth)(v2.value1));
              }
              ;
              return v2.value1;
            }());
            var hi = j > Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l);
            var i$prime = function() {
              if (low) {
                return j;
              }
              ;
              if (hi) {
                return (j - Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(l) | 0) - 1 | 0;
              }
              ;
              if (Data_Boolean.otherwise) {
                return 0;
              }
              ;
              throw new Error("Failed pattern match at Data.Date (line 101, column 9 - line 103, column 28): " + []);
            }();
            var dt$prime = function() {
              if (low) {
                return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Enum.pred(enumDate))(Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(1)));
              }
              ;
              if (hi) {
                return Data_Enum.succ(enumDate)(new $$Date(v2.value0, v2.value1, l));
              }
              ;
              if (Data_Boolean.otherwise) {
                return Data_Functor.map(Data_Maybe.functorMaybe)($$Date.create(v2.value0)(v2.value1))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(j));
              }
              ;
              throw new Error("Failed pattern match at Data.Date (line 104, column 9 - line 106, column 48): " + []);
            }();
            return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(adj(i$prime))(dt$prime);
          };
        };
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Int.fromNumber(v))(Data_Function.flip(adj)(date));
      };
    };
    module2.exports = {
      canonicalDate,
      exactDate,
      year,
      month,
      day,
      weekday,
      diff,
      isLeapYear,
      lastDayOfMonth,
      adjust,
      eqDate,
      ordDate,
      boundedDate,
      showDate,
      enumDate,
      April: Data_Date_Component.April,
      August: Data_Date_Component.August,
      December: Data_Date_Component.December,
      February: Data_Date_Component.February,
      January: Data_Date_Component.January,
      July: Data_Date_Component.July,
      June: Data_Date_Component.June,
      March: Data_Date_Component.March,
      May: Data_Date_Component.May,
      November: Data_Date_Component.November,
      October: Data_Date_Component.October,
      September: Data_Date_Component.September,
      Friday: Data_Date_Component.Friday,
      Monday: Data_Date_Component.Monday,
      Saturday: Data_Date_Component.Saturday,
      Sunday: Data_Date_Component.Sunday,
      Thursday: Data_Date_Component.Thursday,
      Tuesday: Data_Date_Component.Tuesday,
      Wednesday: Data_Date_Component.Wednesday
    };
  }
});

// output/Data.DateTime/foreign.js
var require_foreign68 = __commonJS({
  "output/Data.DateTime/foreign.js"(exports2) {
    "use strict";
    var createUTC = function(y, mo, d, h, m, s, ms) {
      var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));
      if (y >= 0 && y < 100) {
        date.setUTCFullYear(y);
      }
      return date.getTime();
    };
    exports2.calcDiff = function(rec1, rec2) {
      var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
      var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
      return msUTC1 - msUTC2;
    };
    exports2.adjustImpl = function(just) {
      return function(nothing) {
        return function(offset) {
          return function(rec) {
            var msUTC = createUTC(rec.year, rec.month - 1, rec.day, rec.hour, rec.minute, rec.second, rec.millisecond);
            var dt = new Date(msUTC + offset);
            return isNaN(dt.getTime()) ? nothing : just({
              year: dt.getUTCFullYear(),
              month: dt.getUTCMonth() + 1,
              day: dt.getUTCDate(),
              hour: dt.getUTCHours(),
              minute: dt.getUTCMinutes(),
              second: dt.getUTCSeconds(),
              millisecond: dt.getUTCMilliseconds()
            });
          };
        };
      };
    };
  }
});

// output/Data.Time.Component/index.js
var require_Data_Time2 = __commonJS({
  "output/Data.Time.Component/index.js"(exports2, module2) {
    "use strict";
    var Data_Boolean = require_Data();
    var Data_Enum = require_Data42();
    var Data_Eq = require_Data8();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var showSecond = {
      show: function(v) {
        return "(Second " + (Data_Show.show(Data_Show.showInt)(v) + ")");
      }
    };
    var showMinute = {
      show: function(v) {
        return "(Minute " + (Data_Show.show(Data_Show.showInt)(v) + ")");
      }
    };
    var showMillisecond = {
      show: function(v) {
        return "(Millisecond " + (Data_Show.show(Data_Show.showInt)(v) + ")");
      }
    };
    var showHour = {
      show: function(v) {
        return "(Hour " + (Data_Show.show(Data_Show.showInt)(v) + ")");
      }
    };
    var ordSecond = Data_Ord.ordInt;
    var ordMinute = Data_Ord.ordInt;
    var ordMillisecond = Data_Ord.ordInt;
    var ordHour = Data_Ord.ordInt;
    var eqSecond = Data_Eq.eqInt;
    var eqMinute = Data_Eq.eqInt;
    var eqMillisecond = Data_Eq.eqInt;
    var eqHour = Data_Eq.eqInt;
    var boundedSecond = {
      bottom: 0,
      top: 59,
      Ord0: function() {
        return ordSecond;
      }
    };
    var boundedMinute = {
      bottom: 0,
      top: 59,
      Ord0: function() {
        return ordMinute;
      }
    };
    var boundedMillisecond = {
      bottom: 0,
      top: 999,
      Ord0: function() {
        return ordMillisecond;
      }
    };
    var boundedHour = {
      bottom: 0,
      top: 23,
      Ord0: function() {
        return ordHour;
      }
    };
    var boundedEnumSecond = {
      cardinality: 60,
      toEnum: function(n) {
        if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [n.constructor.name]);
      },
      fromEnum: function(v) {
        return v;
      },
      Bounded0: function() {
        return boundedSecond;
      },
      Enum1: function() {
        return enumSecond;
      }
    };
    var enumSecond = {
      succ: function() {
        var $28 = Data_Enum.toEnum(boundedEnumSecond);
        var $29 = Data_Enum.fromEnum(boundedEnumSecond);
        return function($30) {
          return $28(function(v) {
            return v + 1 | 0;
          }($29($30)));
        };
      }(),
      pred: function() {
        var $31 = Data_Enum.toEnum(boundedEnumSecond);
        var $32 = Data_Enum.fromEnum(boundedEnumSecond);
        return function($33) {
          return $31(function(v) {
            return v - 1 | 0;
          }($32($33)));
        };
      }(),
      Ord0: function() {
        return ordSecond;
      }
    };
    var boundedEnumMinute = {
      cardinality: 60,
      toEnum: function(n) {
        if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [n.constructor.name]);
      },
      fromEnum: function(v) {
        return v;
      },
      Bounded0: function() {
        return boundedMinute;
      },
      Enum1: function() {
        return enumMinute;
      }
    };
    var enumMinute = {
      succ: function() {
        var $34 = Data_Enum.toEnum(boundedEnumMinute);
        var $35 = Data_Enum.fromEnum(boundedEnumMinute);
        return function($36) {
          return $34(function(v) {
            return v + 1 | 0;
          }($35($36)));
        };
      }(),
      pred: function() {
        var $37 = Data_Enum.toEnum(boundedEnumMinute);
        var $38 = Data_Enum.fromEnum(boundedEnumMinute);
        return function($39) {
          return $37(function(v) {
            return v - 1 | 0;
          }($38($39)));
        };
      }(),
      Ord0: function() {
        return ordMinute;
      }
    };
    var boundedEnumMillisecond = {
      cardinality: 1e3,
      toEnum: function(n) {
        if (n >= 0 && n <= 999) {
          return new Data_Maybe.Just(n);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [n.constructor.name]);
      },
      fromEnum: function(v) {
        return v;
      },
      Bounded0: function() {
        return boundedMillisecond;
      },
      Enum1: function() {
        return enumMillisecond;
      }
    };
    var enumMillisecond = {
      succ: function() {
        var $40 = Data_Enum.toEnum(boundedEnumMillisecond);
        var $41 = Data_Enum.fromEnum(boundedEnumMillisecond);
        return function($42) {
          return $40(function(v) {
            return v + 1 | 0;
          }($41($42)));
        };
      }(),
      pred: function() {
        var $43 = Data_Enum.toEnum(boundedEnumMillisecond);
        var $44 = Data_Enum.fromEnum(boundedEnumMillisecond);
        return function($45) {
          return $43(function(v) {
            return v - 1 | 0;
          }($44($45)));
        };
      }(),
      Ord0: function() {
        return ordMillisecond;
      }
    };
    var boundedEnumHour = {
      cardinality: 24,
      toEnum: function(n) {
        if (n >= 0 && n <= 23) {
          return new Data_Maybe.Just(n);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [n.constructor.name]);
      },
      fromEnum: function(v) {
        return v;
      },
      Bounded0: function() {
        return boundedHour;
      },
      Enum1: function() {
        return enumHour;
      }
    };
    var enumHour = {
      succ: function() {
        var $46 = Data_Enum.toEnum(boundedEnumHour);
        var $47 = Data_Enum.fromEnum(boundedEnumHour);
        return function($48) {
          return $46(function(v) {
            return v + 1 | 0;
          }($47($48)));
        };
      }(),
      pred: function() {
        var $49 = Data_Enum.toEnum(boundedEnumHour);
        var $50 = Data_Enum.fromEnum(boundedEnumHour);
        return function($51) {
          return $49(function(v) {
            return v - 1 | 0;
          }($50($51)));
        };
      }(),
      Ord0: function() {
        return ordHour;
      }
    };
    module2.exports = {
      eqHour,
      ordHour,
      boundedHour,
      enumHour,
      boundedEnumHour,
      showHour,
      eqMinute,
      ordMinute,
      boundedMinute,
      enumMinute,
      boundedEnumMinute,
      showMinute,
      eqSecond,
      ordSecond,
      boundedSecond,
      enumSecond,
      boundedEnumSecond,
      showSecond,
      eqMillisecond,
      ordMillisecond,
      boundedMillisecond,
      enumMillisecond,
      boundedEnumMillisecond,
      showMillisecond
    };
  }
});

// output/Data.Time/index.js
var require_Data45 = __commonJS({
  "output/Data.Time/index.js"(exports2, module2) {
    "use strict";
    var Control_Apply = require_Control3();
    var Data_Bounded = require_Data13();
    var Data_Enum = require_Data42();
    var Data_Eq = require_Data8();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Time_Component = require_Data_Time2();
    var Data_Time_Duration = require_Data_Time();
    var Data_Tuple = require_Data22();
    var $$Math = require_Math();
    var Time = function() {
      function Time2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      Time2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new Time2(value0, value1, value2, value3);
            };
          };
        };
      };
      return Time2;
    }();
    var showTime = {
      show: function(v) {
        return "(Time " + (Data_Show.show(Data_Time_Component.showHour)(v.value0) + (" " + (Data_Show.show(Data_Time_Component.showMinute)(v.value1) + (" " + (Data_Show.show(Data_Time_Component.showSecond)(v.value2) + (" " + (Data_Show.show(Data_Time_Component.showMillisecond)(v.value3) + ")")))))));
      }
    };
    var setSecond = function(s) {
      return function(v) {
        return new Time(v.value0, v.value1, s, v.value3);
      };
    };
    var setMinute = function(m) {
      return function(v) {
        return new Time(v.value0, m, v.value2, v.value3);
      };
    };
    var setMillisecond = function(ms) {
      return function(v) {
        return new Time(v.value0, v.value1, v.value2, ms);
      };
    };
    var setHour = function(h) {
      return function(v) {
        return new Time(h, v.value1, v.value2, v.value3);
      };
    };
    var second = function(v) {
      return v.value2;
    };
    var minute = function(v) {
      return v.value1;
    };
    var millisecond = function(v) {
      return v.value3;
    };
    var millisToTime = function(v) {
      var hours = $$Math.floor(v / 36e5);
      var minutes = $$Math.floor((v - hours * 36e5) / 6e4);
      var seconds = $$Math.floor((v - (hours * 36e5 + minutes * 6e4)) / 1e3);
      var milliseconds = v - (hours * 36e5 + minutes * 6e4 + seconds * 1e3);
      return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Int.floor(hours))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Int.floor(minutes))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Int.floor(seconds))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Int.floor(milliseconds))));
    };
    var hour = function(v) {
      return v.value0;
    };
    var timeToMillis = function(t) {
      return Data_Time_Duration.Milliseconds(36e5 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 6e4 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1e3 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
    };
    var eqTime = {
      eq: function(x) {
        return function(y) {
          return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
        };
      }
    };
    var ordTime = {
      compare: function(x) {
        return function(y) {
          var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
          }
          ;
          var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v1 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
          }
          ;
          var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
          if (v2 instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v2 instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
          }
          ;
          return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
        };
      },
      Eq0: function() {
        return eqTime;
      }
    };
    var diff = function(dictDuration) {
      return function(t1) {
        return function(t2) {
          return Data_Time_Duration.toDuration(dictDuration)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(timeToMillis(t1))(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(timeToMillis(t2))));
        };
      };
    };
    var boundedTime = {
      bottom: new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)),
      top: new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)),
      Ord0: function() {
        return ordTime;
      }
    };
    var maxTime = timeToMillis(Data_Bounded.top(boundedTime));
    var minTime = timeToMillis(Data_Bounded.bottom(boundedTime));
    var adjust = function(dictDuration) {
      return function(d) {
        return function(t) {
          var tLength = timeToMillis(t);
          var d$prime = Data_Time_Duration.fromDuration(dictDuration)(d);
          var wholeDays = Data_Time_Duration.Days($$Math.floor(Data_Newtype.unwrap()(d$prime) / 864e5));
          var msAdjust = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(d$prime)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationMilliseconds)(Data_Time_Duration.fromDuration(Data_Time_Duration.durationDays)(wholeDays)));
          var msAdjusted = Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(tLength)(msAdjust);
          var wrap = function() {
            var $112 = Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(maxTime);
            if ($112) {
              return 1;
            }
            ;
            var $113 = Data_Ord.lessThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(minTime);
            if ($113) {
              return -1;
            }
            ;
            return 0;
          }();
          return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Time_Duration.semigroupDays)(wholeDays)(wrap), millisToTime(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(msAdjusted)(864e5 * -wrap)));
        };
      };
    };
    module2.exports = {
      Time,
      hour,
      setHour,
      minute,
      setMinute,
      second,
      setSecond,
      millisecond,
      setMillisecond,
      adjust,
      diff,
      eqTime,
      ordTime,
      boundedTime,
      showTime
    };
  }
});

// output/Data.DateTime/index.js
var require_Data46 = __commonJS({
  "output/Data.DateTime/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign68();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Bounded = require_Data13();
    var Data_Date = require_Data44();
    var Data_Date_Component = require_Data_Date();
    var Data_Enum = require_Data42();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Data_Time = require_Data45();
    var Data_Time_Component = require_Data_Time2();
    var Data_Time_Duration = require_Data_Time();
    var DateTime = function() {
      function DateTime2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      DateTime2.create = function(value0) {
        return function(value1) {
          return new DateTime2(value0, value1);
        };
      };
      return DateTime2;
    }();
    var toRecord = function(v) {
      return {
        year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
        month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
        day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
        hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
        minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
        second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
        millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
      };
    };
    var time = function(v) {
      return v.value1;
    };
    var showDateTime = {
      show: function(v) {
        return "(DateTime " + (Data_Show.show(Data_Date.showDate)(v.value0) + (" " + (Data_Show.show(Data_Time.showTime)(v.value1) + ")")));
      }
    };
    var modifyTimeF = function(dictFunctor) {
      return function(f) {
        return function(v) {
          return Data_Functor.map(dictFunctor)(DateTime.create(v.value0))(f(v.value1));
        };
      };
    };
    var modifyTime = function(f) {
      return function(v) {
        return new DateTime(v.value0, f(v.value1));
      };
    };
    var modifyDateF = function(dictFunctor) {
      return function(f) {
        return function(v) {
          return Data_Functor.map(dictFunctor)(Data_Function.flip(DateTime.create)(v.value1))(f(v.value0));
        };
      };
    };
    var modifyDate = function(f) {
      return function(v) {
        return new DateTime(f(v.value0), v.value1);
      };
    };
    var eqDateTime = {
      eq: function(x) {
        return function(y) {
          return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
        };
      }
    };
    var ordDateTime = {
      compare: function(x) {
        return function(y) {
          var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return Data_Ordering.GT.value;
          }
          ;
          return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
        };
      },
      Eq0: function() {
        return eqDateTime;
      }
    };
    var diff = function(dictDuration) {
      return function(dt1) {
        return function(dt2) {
          return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
        };
      };
    };
    var date = function(v) {
      return v.value0;
    };
    var boundedDateTime = {
      bottom: new DateTime(Data_Bounded.bottom(Data_Date.boundedDate), Data_Bounded.bottom(Data_Time.boundedTime)),
      top: new DateTime(Data_Bounded.top(Data_Date.boundedDate), Data_Bounded.top(Data_Time.boundedTime)),
      Ord0: function() {
        return ordDateTime;
      }
    };
    var adjust = function(dictDuration) {
      return function(d) {
        return function(dt) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.adjustImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Data_Time_Duration.fromDuration(dictDuration)(d))(toRecord(dt)))(function(rec) {
            return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(DateTime.create)(Control_Bind.join(Data_Maybe.bindMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.exactDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(rec.year)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(rec.month)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(rec.day)))))(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(rec.hour)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(rec.minute)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(rec.second)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(rec.millisecond)));
          });
        };
      };
    };
    module2.exports = {
      DateTime,
      date,
      modifyDate,
      modifyDateF,
      time,
      modifyTime,
      modifyTimeF,
      adjust,
      diff,
      eqDateTime,
      ordDateTime,
      boundedDateTime,
      showDateTime,
      April: Data_Date.April,
      August: Data_Date.August,
      December: Data_Date.December,
      February: Data_Date.February,
      January: Data_Date.January,
      July: Data_Date.July,
      June: Data_Date.June,
      March: Data_Date.March,
      May: Data_Date.May,
      November: Data_Date.November,
      October: Data_Date.October,
      September: Data_Date.September,
      Friday: Data_Date.Friday,
      Monday: Data_Date.Monday,
      Saturday: Data_Date.Saturday,
      Sunday: Data_Date.Sunday,
      Thursday: Data_Date.Thursday,
      Tuesday: Data_Date.Tuesday,
      Wednesday: Data_Date.Wednesday,
      canonicalDate: Data_Date.canonicalDate,
      day: Data_Date.day,
      exactDate: Data_Date.exactDate,
      month: Data_Date.month,
      weekday: Data_Date.weekday,
      year: Data_Date.year,
      Time: Data_Time.Time,
      hour: Data_Time.hour,
      millisecond: Data_Time.millisecond,
      minute: Data_Time.minute,
      second: Data_Time.second,
      setHour: Data_Time.setHour,
      setMillisecond: Data_Time.setMillisecond,
      setMinute: Data_Time.setMinute,
      setSecond: Data_Time.setSecond
    };
  }
});

// output/Data.DateTime.Instant/index.js
var require_Data_DateTime = __commonJS({
  "output/Data.DateTime.Instant/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign66();
    var Data_Boolean = require_Data();
    var Data_Bounded = require_Data13();
    var Data_Date = require_Data44();
    var Data_Date_Component = require_Data_Date();
    var Data_DateTime = require_Data46();
    var Data_Enum = require_Data42();
    var Data_Maybe = require_Data15();
    var Data_Show = require_Data14();
    var Data_Time = require_Data45();
    var Data_Time_Component = require_Data_Time2();
    var Data_Time_Duration = require_Data_Time();
    var unInstant = function(v) {
      return v;
    };
    var toDateTime = function() {
      var mkDateTime = function(y) {
        return function(mo) {
          return function(d) {
            return function(h) {
              return function(mi) {
                return function(s) {
                  return function(ms) {
                    return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                  };
                };
              };
            };
          };
        };
      };
      return $foreign.toDateTimeImpl(mkDateTime);
    }();
    var showInstant = {
      show: function(v) {
        return "(Instant " + (Data_Show.show(Data_Time_Duration.showMilliseconds)(v) + ")");
      }
    };
    var ordDateTime = Data_Time_Duration.ordMilliseconds;
    var instant = function(v) {
      if (v >= -86399778816e5 && v <= 8639977881599999) {
        return new Data_Maybe.Just(v);
      }
      ;
      if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.DateTime.Instant (line 44, column 1 - line 44, column 41): " + [v.constructor.name]);
    };
    var fromDateTime = function(v) {
      return $foreign.fromDateTimeImpl(Data_Date.year(v.value0), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)), Data_Date.day(v.value0), Data_Time.hour(v.value1), Data_Time.minute(v.value1), Data_Time.second(v.value1), Data_Time.millisecond(v.value1));
    };
    var fromDate = function(d) {
      return $foreign.fromDateTimeImpl(Data_Date.year(d), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(d)), Data_Date.day(d), Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond));
    };
    var eqDateTime = Data_Time_Duration.eqMilliseconds;
    var boundedInstant = {
      bottom: -86399778816e5,
      top: 8639977881599999,
      Ord0: function() {
        return ordDateTime;
      }
    };
    module2.exports = {
      instant,
      unInstant,
      fromDateTime,
      fromDate,
      toDateTime,
      eqDateTime,
      ordDateTime,
      boundedInstant,
      showInstant
    };
  }
});

// output/Node.FS/index.js
var require_Node8 = __commonJS({
  "output/Node.FS/index.js"(exports2, module2) {
    "use strict";
    var Data_Show = require_Data14();
    var FileLink = function() {
      function FileLink2() {
      }
      ;
      FileLink2.value = new FileLink2();
      return FileLink2;
    }();
    var DirLink = function() {
      function DirLink2() {
      }
      ;
      DirLink2.value = new DirLink2();
      return DirLink2;
    }();
    var JunctionLink = function() {
      function JunctionLink2() {
      }
      ;
      JunctionLink2.value = new JunctionLink2();
      return JunctionLink2;
    }();
    var R = function() {
      function R2() {
      }
      ;
      R2.value = new R2();
      return R2;
    }();
    var R_PLUS = function() {
      function R_PLUS2() {
      }
      ;
      R_PLUS2.value = new R_PLUS2();
      return R_PLUS2;
    }();
    var RS = function() {
      function RS2() {
      }
      ;
      RS2.value = new RS2();
      return RS2;
    }();
    var RS_PLUS = function() {
      function RS_PLUS2() {
      }
      ;
      RS_PLUS2.value = new RS_PLUS2();
      return RS_PLUS2;
    }();
    var W = function() {
      function W2() {
      }
      ;
      W2.value = new W2();
      return W2;
    }();
    var WX = function() {
      function WX2() {
      }
      ;
      WX2.value = new WX2();
      return WX2;
    }();
    var W_PLUS = function() {
      function W_PLUS2() {
      }
      ;
      W_PLUS2.value = new W_PLUS2();
      return W_PLUS2;
    }();
    var WX_PLUS = function() {
      function WX_PLUS2() {
      }
      ;
      WX_PLUS2.value = new WX_PLUS2();
      return WX_PLUS2;
    }();
    var A = function() {
      function A2() {
      }
      ;
      A2.value = new A2();
      return A2;
    }();
    var AX = function() {
      function AX2() {
      }
      ;
      AX2.value = new AX2();
      return AX2;
    }();
    var A_PLUS = function() {
      function A_PLUS2() {
      }
      ;
      A_PLUS2.value = new A_PLUS2();
      return A_PLUS2;
    }();
    var AX_PLUS = function() {
      function AX_PLUS2() {
      }
      ;
      AX_PLUS2.value = new AX_PLUS2();
      return AX_PLUS2;
    }();
    var symlinkTypeToNode = function(ty) {
      if (ty instanceof FileLink) {
        return "file";
      }
      ;
      if (ty instanceof DirLink) {
        return "dir";
      }
      ;
      if (ty instanceof JunctionLink) {
        return "junction";
      }
      ;
      throw new Error("Failed pattern match at Node.FS (line 68, column 24 - line 71, column 29): " + [ty.constructor.name]);
    };
    var showSymlinkType = {
      show: function(v) {
        if (v instanceof FileLink) {
          return "FileLink";
        }
        ;
        if (v instanceof DirLink) {
          return "DirLink";
        }
        ;
        if (v instanceof JunctionLink) {
          return "JunctionLink";
        }
        ;
        throw new Error("Failed pattern match at Node.FS (line 73, column 1 - line 76, column 37): " + [v.constructor.name]);
      }
    };
    var showFileFlags = {
      show: function(v) {
        if (v instanceof R) {
          return "R";
        }
        ;
        if (v instanceof R_PLUS) {
          return "R_PLUS";
        }
        ;
        if (v instanceof RS) {
          return "RS";
        }
        ;
        if (v instanceof RS_PLUS) {
          return "RS_PLUS";
        }
        ;
        if (v instanceof W) {
          return "W";
        }
        ;
        if (v instanceof WX) {
          return "WX";
        }
        ;
        if (v instanceof W_PLUS) {
          return "W_PLUS";
        }
        ;
        if (v instanceof WX_PLUS) {
          return "WX_PLUS";
        }
        ;
        if (v instanceof A) {
          return "A";
        }
        ;
        if (v instanceof AX) {
          return "AX";
        }
        ;
        if (v instanceof A_PLUS) {
          return "A_PLUS";
        }
        ;
        if (v instanceof AX_PLUS) {
          return "AX_PLUS";
        }
        ;
        throw new Error("Failed pattern match at Node.FS (line 22, column 1 - line 34, column 27): " + [v.constructor.name]);
      }
    };
    var fileFlagsToNode = function(ff) {
      if (ff instanceof R) {
        return "r";
      }
      ;
      if (ff instanceof R_PLUS) {
        return "r+";
      }
      ;
      if (ff instanceof RS) {
        return "rs";
      }
      ;
      if (ff instanceof RS_PLUS) {
        return "rs+";
      }
      ;
      if (ff instanceof W) {
        return "w";
      }
      ;
      if (ff instanceof WX) {
        return "wx";
      }
      ;
      if (ff instanceof W_PLUS) {
        return "w+";
      }
      ;
      if (ff instanceof WX_PLUS) {
        return "wx+";
      }
      ;
      if (ff instanceof A) {
        return "a";
      }
      ;
      if (ff instanceof AX) {
        return "ax";
      }
      ;
      if (ff instanceof A_PLUS) {
        return "a+";
      }
      ;
      if (ff instanceof AX_PLUS) {
        return "ax+";
      }
      ;
      throw new Error("Failed pattern match at Node.FS (line 42, column 22 - line 54, column 19): " + [ff.constructor.name]);
    };
    var eqSymlinkType = {
      eq: function(v) {
        return function(v1) {
          if (v instanceof FileLink && v1 instanceof FileLink) {
            return true;
          }
          ;
          if (v instanceof DirLink && v1 instanceof DirLink) {
            return true;
          }
          ;
          if (v instanceof JunctionLink && v1 instanceof JunctionLink) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var eqFileFlags = {
      eq: function(x) {
        return function(y) {
          return Data_Show.show(showFileFlags)(x) === Data_Show.show(showFileFlags)(y);
        };
      }
    };
    module2.exports = {
      R,
      R_PLUS,
      RS,
      RS_PLUS,
      W,
      WX,
      W_PLUS,
      WX_PLUS,
      A,
      AX,
      A_PLUS,
      AX_PLUS,
      FileLink,
      DirLink,
      JunctionLink,
      symlinkTypeToNode,
      fileFlagsToNode,
      showFileFlags,
      eqFileFlags,
      showSymlinkType,
      eqSymlinkType
    };
  }
});

// output/Node.FS.Internal/foreign.js
var require_foreign69 = __commonJS({
  "output/Node.FS.Internal/foreign.js"(exports2) {
    "use strict";
    exports2.unsafeRequireFS = require("fs");
  }
});

// output/Node.FS.Internal/index.js
var require_Node_FS = __commonJS({
  "output/Node.FS.Internal/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign69();
    var Unsafe_Coerce = require_Unsafe();
    var mkEffect = Unsafe_Coerce.unsafeCoerce;
    module2.exports = {
      mkEffect,
      unsafeRequireFS: $foreign.unsafeRequireFS
    };
  }
});

// output/Node.FS.Perms/index.js
var require_Node_FS2 = __commonJS({
  "output/Node.FS.Perms/index.js"(exports2, module2) {
    "use strict";
    var Control_Apply = require_Control3();
    var Data_Boolean = require_Data();
    var Data_Enum = require_Data42();
    var Data_Eq = require_Data8();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var write = {
      r: false,
      w: true,
      x: false
    };
    var semiringPerm = {
      add: function(v) {
        return function(v1) {
          return {
            r: v.r || v1.r,
            w: v.w || v1.w,
            x: v.x || v1.x
          };
        };
      },
      zero: {
        r: false,
        w: false,
        x: false
      },
      mul: function(v) {
        return function(v1) {
          return {
            r: v.r && v1.r,
            w: v.w && v1.w,
            x: v.x && v1.x
          };
        };
      },
      one: {
        r: true,
        w: true,
        x: true
      }
    };
    var read = {
      r: true,
      w: false,
      x: false
    };
    var permToInt = function(v) {
      return (function() {
        if (v.r) {
          return 4;
        }
        ;
        return 0;
      }() + function() {
        if (v.w) {
          return 2;
        }
        ;
        return 0;
      }() | 0) + function() {
        if (v.x) {
          return 1;
        }
        ;
        return 0;
      }() | 0;
    };
    var permToString = function() {
      var $97 = Data_Show.show(Data_Show.showInt);
      return function($98) {
        return $97(permToInt($98));
      };
    }();
    var permsToString = function(v) {
      return "0" + (permToString(v.u) + (permToString(v.g) + permToString(v.o)));
    };
    var permsToInt = function(dictPartial) {
      var $99 = Data_Maybe.fromJust();
      var $100 = Data_Int.fromStringAs(Data_Int.octal);
      return function($101) {
        return $99($100(permsToString($101)));
      };
    }();
    var none = Data_Semiring.zero(semiringPerm);
    var mkPerms = function(u) {
      return function(g) {
        return function(o) {
          return {
            u,
            g,
            o
          };
        };
      };
    };
    var mkPerm = function(r) {
      return function(w) {
        return function(x) {
          return {
            r,
            w,
            x
          };
        };
      };
    };
    var execute = {
      r: false,
      w: false,
      x: true
    };
    var permFromChar = function(c) {
      if (c === "0") {
        return Data_Maybe.Just.create(none);
      }
      ;
      if (c === "1") {
        return Data_Maybe.Just.create(execute);
      }
      ;
      if (c === "2") {
        return Data_Maybe.Just.create(write);
      }
      ;
      if (c === "3") {
        return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(write)(execute));
      }
      ;
      if (c === "4") {
        return Data_Maybe.Just.create(read);
      }
      ;
      if (c === "5") {
        return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(read)(execute));
      }
      ;
      if (c === "6") {
        return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(read)(write));
      }
      ;
      if (c === "7") {
        return Data_Maybe.Just.create(Data_Semiring.add(semiringPerm)(Data_Semiring.add(semiringPerm)(read)(write))(execute));
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var permsFromString = function() {
      var zeroChar = Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Enum.boundedEnumChar)(48));
      var dropPrefix = function(x) {
        return function(xs) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqChar))(Data_String_CodeUnits.charAt(0)(xs))(new Data_Maybe.Just(x))) {
            return Data_String_CodePoints.drop(1)(xs);
          }
          ;
          if (Data_Boolean.otherwise) {
            return xs;
          }
          ;
          throw new Error("Failed pattern match at Node.FS.Perms (line 126, column 5 - line 128, column 35): " + [x.constructor.name, xs.constructor.name]);
        };
      };
      var _perms = function(v) {
        if (v.length === 3) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(mkPerms)(permFromChar(v[0])))(permFromChar(v[1])))(permFromChar(v[2]));
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var $102 = dropPrefix(zeroChar);
      return function($103) {
        return _perms(Data_String_CodeUnits.toCharArray($102($103)));
      };
    }();
    var eqPerm = {
      eq: function(v) {
        return function(v1) {
          return v.r === v1.r && (v.w === v1.w && v.x === v1.x);
        };
      }
    };
    var eqPerms = {
      eq: function(v) {
        return function(v1) {
          return Data_Eq.eq(eqPerm)(v.u)(v1.u) && (Data_Eq.eq(eqPerm)(v.g)(v1.g) && Data_Eq.eq(eqPerm)(v.o)(v1.o));
        };
      }
    };
    var ordPerm = {
      compare: function(v) {
        return function(v1) {
          return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordBoolean))([v.r, v.w, v.x])([v1.r, v1.w, v1.x]);
        };
      },
      Eq0: function() {
        return eqPerm;
      }
    };
    var ordPerms = {
      compare: function(v) {
        return function(v1) {
          return Data_Ord.compare(Data_Ord.ordArray(ordPerm))([v.u, v.g, v.o])([v1.u, v1.g, v1.o]);
        };
      },
      Eq0: function() {
        return eqPerms;
      }
    };
    var all = Data_Semiring.one(semiringPerm);
    var showPerm = {
      show: function(v) {
        if (Data_Eq.eq(eqPerm)(v)(none)) {
          return "none";
        }
        ;
        if (Data_Eq.eq(eqPerm)(v)(all)) {
          return "all";
        }
        ;
        var ps = Data_Semigroup.append(Data_Semigroup.semigroupArray)(function() {
          if (v.r) {
            return ["read"];
          }
          ;
          return [];
        }())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(function() {
          if (v.w) {
            return ["write"];
          }
          ;
          return [];
        }())(function() {
          if (v.x) {
            return ["execute"];
          }
          ;
          return [];
        }()));
        return Data_String_Common.joinWith(" + ")(ps);
      }
    };
    var showPerms = {
      show: function(v) {
        var f = function(perm) {
          var str = Data_Show.show(showPerm)(perm);
          var $93 = Data_Maybe.isNothing(Data_String_CodePoints.indexOf(" ")(str));
          if ($93) {
            return str;
          }
          ;
          return "(" + (str + ")");
        };
        return "mkPerms " + Data_String_Common.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(f)([v.u, v.g, v.o]));
      }
    };
    module2.exports = {
      mkPerm,
      none,
      read,
      write,
      execute,
      all,
      mkPerms,
      permsFromString,
      permsToString,
      permsToInt,
      eqPerm,
      ordPerm,
      showPerm,
      semiringPerm,
      eqPerms,
      ordPerms,
      showPerms
    };
  }
});

// output/Node.FS.Stats/foreign.js
var require_foreign70 = __commonJS({
  "output/Node.FS.Stats/foreign.js"(exports2) {
    "use strict";
    exports2.showStatsObj = require("util").inspect;
    exports2.statsMethod = function(m, s) {
      return s[m]();
    };
  }
});

// output/Data.JSDate/foreign.js
var require_foreign71 = __commonJS({
  "output/Data.JSDate/foreign.js"(exports2) {
    "use strict";
    var createDate = function(y, m, d, h, mi, s, ms) {
      var date = new Date(Date.UTC(y, m, d, h, mi, s, ms));
      if (y >= 0 && y < 100) {
        date.setUTCFullYear(y);
      }
      return date;
    };
    var createLocalDate = function(y, m, d, h, mi, s, ms) {
      var date = new Date(y, m, d, h, mi, s, ms);
      if (y >= 0 && y < 100) {
        date.setFullYear(y);
      }
      return date;
    };
    exports2.now = function() {
      return new Date();
    };
    exports2.isValid = function(date) {
      return !isNaN(date.getTime());
    };
    exports2.toInstantImpl = function(just) {
      return function(nothing) {
        return function(date) {
          var t = date.getTime();
          return isNaN(t) ? nothing : just(t);
        };
      };
    };
    exports2.fromInstant = function(instant) {
      return new Date(instant);
    };
    exports2.jsdate = function(parts) {
      return createDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
    };
    exports2.jsdateLocal = function(parts) {
      return function() {
        return createLocalDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
      };
    };
    exports2.dateMethod = function(method, date) {
      return date[method]();
    };
    exports2.dateMethodEff = function(method, date) {
      return function() {
        return date[method]();
      };
    };
    exports2.parse = function(dateString) {
      return function() {
        return new Date(dateString);
      };
    };
    exports2.fromTime = function(time) {
      return new Date(time);
    };
  }
});

// output/Data.JSDate/index.js
var require_Data47 = __commonJS({
  "output/Data.JSDate/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign71();
    var Control_Bind = require_Control5();
    var Data_Date = require_Data44();
    var Data_Date_Component = require_Data_Date();
    var Data_DateTime = require_Data46();
    var Data_DateTime_Instant = require_Data_DateTime();
    var Data_Enum = require_Data42();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Data_Time = require_Data45();
    var Data_Time_Component = require_Data_Time2();
    var Data_Time_Duration = require_Data_Time();
    var Foreign = require_Foreign();
    var toUTCString = function(dt) {
      return $foreign.dateMethod("toUTCString", dt);
    };
    var toTimeString = function(dt) {
      return $foreign.dateMethod("toTimeString", dt);
    };
    var toString = function(dt) {
      return $foreign.dateMethod("toString", dt);
    };
    var toInstant = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(function($4) {
      return Data_DateTime_Instant.instant(Data_Time_Duration.Milliseconds($4));
    })($foreign.toInstantImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value));
    var toISOString = function(dt) {
      return $foreign.dateMethodEff("toISOString", dt);
    };
    var toDateTime = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime_Instant.toDateTime))(toInstant);
    var toDateString = function(dt) {
      return $foreign.dateMethod("toDateString", dt);
    };
    var toDate = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime.date))(toDateTime);
    var readDate = Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Date");
    var getUTCSeconds = function(dt) {
      return $foreign.dateMethod("getUTCSeconds", dt);
    };
    var getUTCMonth = function(dt) {
      return $foreign.dateMethod("getUTCMonth", dt);
    };
    var getUTCMinutes = function(dt) {
      return $foreign.dateMethod("getUTCMinutes", dt);
    };
    var getUTCMilliseconds = function(dt) {
      return $foreign.dateMethod("getUTCMilliseconds", dt);
    };
    var getUTCHours = function(dt) {
      return $foreign.dateMethod("getUTCHours", dt);
    };
    var getUTCFullYear = function(dt) {
      return $foreign.dateMethod("getUTCFullYear", dt);
    };
    var getUTCDay = function(dt) {
      return $foreign.dateMethod("getUTCDay", dt);
    };
    var getUTCDate = function(dt) {
      return $foreign.dateMethod("getUTCDate", dt);
    };
    var getTimezoneOffset = function(dt) {
      return $foreign.dateMethodEff("getTimezoneOffset", dt);
    };
    var getTime = function(dt) {
      return $foreign.dateMethod("getTime", dt);
    };
    var showJSDate = {
      show: function(a) {
        return "(fromTime " + (Data_Show.show(Data_Show.showNumber)(getTime(a)) + ")");
      }
    };
    var getSeconds = function(dt) {
      return $foreign.dateMethodEff("getSeconds", dt);
    };
    var getMonth = function(dt) {
      return $foreign.dateMethodEff("getMonth", dt);
    };
    var getMinutes = function(dt) {
      return $foreign.dateMethodEff("getMinutes", dt);
    };
    var getMilliseconds = function(dt) {
      return $foreign.dateMethodEff("getMilliseconds", dt);
    };
    var getHours = function(dt) {
      return $foreign.dateMethodEff("getHours", dt);
    };
    var getFullYear = function(dt) {
      return $foreign.dateMethodEff("getFullYear", dt);
    };
    var getDay = function(dt) {
      return $foreign.dateMethodEff("getDay", dt);
    };
    var getDate = function(dt) {
      return $foreign.dateMethodEff("getDate", dt);
    };
    var fromDateTime = function(v) {
      return $foreign.jsdate({
        year: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0))),
        month: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)) - 1 | 0),
        day: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0))),
        hour: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1))),
        minute: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1))),
        second: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1))),
        millisecond: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1)))
      });
    };
    var eqJSDate = {
      eq: function(a) {
        return function(b) {
          return getTime(a) === getTime(b);
        };
      }
    };
    var ordJSDate = {
      compare: function(a) {
        return function(b) {
          return Data_Ord.compare(Data_Ord.ordNumber)(getTime(a))(getTime(b));
        };
      },
      Eq0: function() {
        return eqJSDate;
      }
    };
    module2.exports = {
      readDate,
      fromDateTime,
      toDateTime,
      toDate,
      toInstant,
      getTime,
      getUTCDate,
      getUTCDay,
      getUTCFullYear,
      getUTCHours,
      getUTCMilliseconds,
      getUTCMinutes,
      getUTCMonth,
      getUTCSeconds,
      getDate,
      getDay,
      getFullYear,
      getHours,
      getMilliseconds,
      getMinutes,
      getMonth,
      getSeconds,
      getTimezoneOffset,
      toDateString,
      toISOString,
      toString,
      toTimeString,
      toUTCString,
      eqJSDate,
      ordJSDate,
      showJSDate,
      isValid: $foreign.isValid,
      fromInstant: $foreign.fromInstant,
      jsdate: $foreign.jsdate,
      jsdateLocal: $foreign.jsdateLocal,
      now: $foreign.now,
      parse: $foreign.parse,
      fromTime: $foreign.fromTime
    };
  }
});

// output/Node.FS.Stats/index.js
var require_Node_FS3 = __commonJS({
  "output/Node.FS.Stats/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign70();
    var Data_JSDate = require_Data47();
    var Data_Maybe = require_Data15();
    var Stats = function() {
      function Stats2(value0) {
        this.value0 = value0;
      }
      ;
      Stats2.create = function(value0) {
        return new Stats2(value0);
      };
      return Stats2;
    }();
    var statusChangedTime = function(v) {
      return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.ctime));
    };
    var showStats = {
      show: function(v) {
        return "Stats " + $foreign.showStatsObj(v.value0);
      }
    };
    var modifiedTime = function(v) {
      return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.mtime));
    };
    var isSymbolicLink = function(v) {
      return $foreign.statsMethod("isSymbolicLink", v.value0);
    };
    var isSocket = function(v) {
      return $foreign.statsMethod("isSocket", v.value0);
    };
    var isFile = function(v) {
      return $foreign.statsMethod("isFile", v.value0);
    };
    var isFIFO = function(v) {
      return $foreign.statsMethod("isFIFO", v.value0);
    };
    var isDirectory = function(v) {
      return $foreign.statsMethod("isDirectory", v.value0);
    };
    var isCharacterDevice = function(v) {
      return $foreign.statsMethod("isCharacterDevice", v.value0);
    };
    var isBlockDevice = function(v) {
      return $foreign.statsMethod("isBlockDevice", v.value0);
    };
    var accessedTime = function(v) {
      return Data_Maybe.fromJust()(Data_JSDate.toDateTime(v.value0.atime));
    };
    module2.exports = {
      Stats,
      isFile,
      isDirectory,
      isBlockDevice,
      isCharacterDevice,
      isFIFO,
      isSocket,
      isSymbolicLink,
      accessedTime,
      modifiedTime,
      statusChangedTime,
      showStats
    };
  }
});

// output/Node.FS.Sync/index.js
var require_Node_FS4 = __commonJS({
  "output/Node.FS.Sync/index.js"(exports2, module2) {
    "use strict";
    var Data_DateTime_Instant = require_Data_DateTime();
    var Data_EuclideanRing = require_Data18();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Data_Show = require_Data14();
    var Effect = require_Effect();
    var Node_Buffer = require_Node6();
    var Node_Buffer_Class = require_Node_Buffer();
    var Node_Encoding = require_Node5();
    var Node_FS = require_Node8();
    var Node_FS_Internal = require_Node_FS();
    var Node_FS_Perms = require_Node_FS2();
    var Node_FS_Stats = require_Node_FS3();
    var fs = Node_FS_Internal.unsafeRequireFS;
    var link = function(src) {
      return function(dst) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.linkSync(src, dst);
        });
      };
    };
    var mkdir$prime = function(file) {
      return function(perms) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.mkdirSync(file, Node_FS_Perms.permsToString(perms));
        });
      };
    };
    var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));
    var readFile = function(file) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.readFileSync(file, {});
      });
    };
    var readTextFile = function(encoding) {
      return function(file) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.readFileSync(file, {
            encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
          });
        });
      };
    };
    var readdir = function(file) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.readdirSync(file);
      });
    };
    var readlink = function(path) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.readlinkSync(path);
      });
    };
    var realpath = function(path) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.realpathSync(path, {});
      });
    };
    var realpath$prime = function(path) {
      return function(cache) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.realpathSync(path, cache);
        });
      };
    };
    var rename = function(oldFile) {
      return function(newFile) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.renameSync(oldFile, newFile);
        });
      };
    };
    var rmdir = function(file) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.rmdirSync(file);
      });
    };
    var stat = function(file) {
      return Data_Functor.map(Effect.functorEffect)(Node_FS_Stats.Stats.create)(Node_FS_Internal.mkEffect(function(v) {
        return fs.statSync(file);
      }));
    };
    var symlink = function(src) {
      return function(dst) {
        return function(ty) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.symlinkSync(src, dst, Node_FS.symlinkTypeToNode(ty));
          });
        };
      };
    };
    var truncate = function(file) {
      return function(len) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.truncateSync(file, len);
        });
      };
    };
    var unlink = function(file) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.unlinkSync(file);
      });
    };
    var utimes = function(file) {
      return function(atime) {
        return function(mtime) {
          var toEpochMilliseconds = function($29) {
            return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($29));
          };
          var ms = function(v) {
            return Data_Int.round(v);
          };
          var fromDate = function(date) {
            return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms(toEpochMilliseconds(date)))(1e3);
          };
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.utimesSync(file, fromDate(atime), fromDate(mtime));
          });
        };
      };
    };
    var writeFile = function(file) {
      return function(buff) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.writeFileSync(file, buff, {});
        });
      };
    };
    var writeTextFile = function(encoding) {
      return function(file) {
        return function(text) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.writeFileSync(file, text, {
              encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
            });
          });
        };
      };
    };
    var fdWrite = function(fd) {
      return function(buff) {
        return function(off) {
          return function(len) {
            return function(pos) {
              return Node_FS_Internal.mkEffect(function(v) {
                return fs.writeSync(fd, buff, off, len, Data_Nullable.toNullable(pos));
              });
            };
          };
        };
      };
    };
    var fdRead = function(fd) {
      return function(buff) {
        return function(off) {
          return function(len) {
            return function(pos) {
              return Node_FS_Internal.mkEffect(function(v) {
                return fs.readSync(fd, buff, off, len, Data_Nullable.toNullable(pos));
              });
            };
          };
        };
      };
    };
    var fdOpen = function(file) {
      return function(flags) {
        return function(mode) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.openSync(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode));
          });
        };
      };
    };
    var fdNext = function(fd) {
      return function(buff) {
        return function __do() {
          var sz = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
          return fdRead(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)();
        };
      };
    };
    var fdFlush = function(fd) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.fsyncSync(fd);
      });
    };
    var fdClose = function(fd) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.closeSync(fd);
      });
    };
    var fdAppend = function(fd) {
      return function(buff) {
        return function __do() {
          var sz = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
          return fdWrite(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)();
        };
      };
    };
    var exists = function(file) {
      return Node_FS_Internal.mkEffect(function(v) {
        return fs.existsSync(file);
      });
    };
    var chown = function(file) {
      return function(uid) {
        return function(gid) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.chownSync(file, uid, gid);
          });
        };
      };
    };
    var chmod = function(file) {
      return function(perms) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.chmodSync(file, Node_FS_Perms.permsToString(perms));
        });
      };
    };
    var appendTextFile = function(encoding) {
      return function(file) {
        return function(buff) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.appendFileSync(file, buff, {
              encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
            });
          });
        };
      };
    };
    var appendFile = function(file) {
      return function(buff) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.appendFileSync(file, buff, {});
        });
      };
    };
    module2.exports = {
      rename,
      truncate,
      chown,
      chmod,
      stat,
      link,
      symlink,
      readlink,
      realpath,
      "realpath'": realpath$prime,
      unlink,
      rmdir,
      mkdir,
      "mkdir'": mkdir$prime,
      readdir,
      utimes,
      readFile,
      readTextFile,
      writeFile,
      writeTextFile,
      appendFile,
      appendTextFile,
      exists,
      fdOpen,
      fdRead,
      fdNext,
      fdWrite,
      fdAppend,
      fdFlush,
      fdClose
    };
  }
});

// output/PscIde/foreign.js
var require_foreign72 = __commonJS({
  "output/PscIde/foreign.js"(exports2) {
    var net = require("net");
    exports2.send = function(cmd) {
      return function(port) {
        return function(cb) {
          return function(err) {
            return function() {
              var sock = net.createConnection({ host: "127.0.0.1", port }), result = "";
              sock.on("data", function(data) {
                result += data;
              }).on("end", function() {
                cb(result)();
              }).on("connect", function() {
                sock.setEncoding("utf8");
                sock.write(cmd + "\n");
              }).on("error", function(e) {
                err(e)();
              });
            };
          };
        };
      };
    };
  }
});

// output/Data.Argonaut.Core/foreign.js
var require_foreign73 = __commonJS({
  "output/Data.Argonaut.Core/foreign.js"(exports2) {
    "use strict";
    function id(x) {
      return x;
    }
    exports2.fromBoolean = id;
    exports2.fromNumber = id;
    exports2.fromString = id;
    exports2.fromArray = id;
    exports2.fromObject = id;
    exports2.jsonNull = null;
    exports2.stringify = function(j) {
      return JSON.stringify(j);
    };
    exports2.stringifyWithIndent = function(i) {
      return function(j) {
        return JSON.stringify(j, null, i);
      };
    };
    function isArray(a) {
      return Object.prototype.toString.call(a) === "[object Array]";
    }
    exports2._caseJson = function(isNull, isBool, isNum, isStr, isArr, isObj, j) {
      if (j == null)
        return isNull();
      else if (typeof j === "boolean")
        return isBool(j);
      else if (typeof j === "number")
        return isNum(j);
      else if (typeof j === "string")
        return isStr(j);
      else if (Object.prototype.toString.call(j) === "[object Array]")
        return isArr(j);
      else
        return isObj(j);
    };
    exports2._compare = function _compare(EQ, GT, LT, a, b) {
      if (a == null) {
        if (b == null)
          return EQ;
        else
          return LT;
      } else if (typeof a === "boolean") {
        if (typeof b === "boolean") {
          if (a === b)
            return EQ;
          else if (a === false)
            return LT;
          else
            return GT;
        } else if (b == null)
          return GT;
        else
          return LT;
      } else if (typeof a === "number") {
        if (typeof b === "number") {
          if (a === b)
            return EQ;
          else if (a < b)
            return LT;
          else
            return GT;
        } else if (b == null)
          return GT;
        else if (typeof b === "boolean")
          return GT;
        else
          return LT;
      } else if (typeof a === "string") {
        if (typeof b === "string") {
          if (a === b)
            return EQ;
          else if (a < b)
            return LT;
          else
            return GT;
        } else if (b == null)
          return GT;
        else if (typeof b === "boolean")
          return GT;
        else if (typeof b === "number")
          return GT;
        else
          return LT;
      } else if (isArray(a)) {
        if (isArray(b)) {
          for (var i = 0; i < Math.min(a.length, b.length); i++) {
            var ca = _compare(EQ, GT, LT, a[i], b[i]);
            if (ca !== EQ)
              return ca;
          }
          if (a.length === b.length)
            return EQ;
          else if (a.length < b.length)
            return LT;
          else
            return GT;
        } else if (b == null)
          return GT;
        else if (typeof b === "boolean")
          return GT;
        else if (typeof b === "number")
          return GT;
        else if (typeof b === "string")
          return GT;
        else
          return LT;
      } else {
        if (b == null)
          return GT;
        else if (typeof b === "boolean")
          return GT;
        else if (typeof b === "number")
          return GT;
        else if (typeof b === "string")
          return GT;
        else if (isArray(b))
          return GT;
        else {
          var akeys = Object.keys(a);
          var bkeys = Object.keys(b);
          if (akeys.length < bkeys.length)
            return LT;
          else if (akeys.length > bkeys.length)
            return GT;
          var keys = akeys.concat(bkeys).sort();
          for (var j = 0; j < keys.length; j++) {
            var k = keys[j];
            if (a[k] === void 0)
              return LT;
            else if (b[k] === void 0)
              return GT;
            var ck = _compare(EQ, GT, LT, a[k], b[k]);
            if (ck !== EQ)
              return ck;
          }
          return EQ;
        }
      }
    };
  }
});

// output/Data.Argonaut.Core/index.js
var require_Data_Argonaut = __commonJS({
  "output/Data.Argonaut.Core/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign73();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Foreign_Object = require_Foreign3();
    var verbJsonType = function(def) {
      return function(f) {
        return function(g) {
          return g(def)(f);
        };
      };
    };
    var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
    var jsonZero = $foreign.fromNumber(0);
    var jsonTrue = $foreign.fromBoolean(true);
    var jsonSingletonObject = function(key) {
      return function(val) {
        return $foreign.fromObject(Foreign_Object.singleton(key)(val));
      };
    };
    var jsonSingletonArray = function(j) {
      return $foreign.fromArray([j]);
    };
    var jsonFalse = $foreign.fromBoolean(false);
    var jsonEmptyString = $foreign.fromString("");
    var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
    var jsonEmptyArray = $foreign.fromArray([]);
    var isJsonType = verbJsonType(false)(Data_Function["const"](true));
    var ordJson = {
      compare: function(a) {
        return function(b) {
          return $foreign["_compare"](Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
        };
      },
      Eq0: function() {
        return eqJson;
      }
    };
    var eqJson = {
      eq: function(j1) {
        return function(j2) {
          return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
        };
      }
    };
    var caseJsonString = function(d) {
      return function(f) {
        return function(j) {
          return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
        };
      };
    };
    var isString = isJsonType(caseJsonString);
    var toString = toJsonType(caseJsonString);
    var caseJsonObject = function(d) {
      return function(f) {
        return function(j) {
          return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
        };
      };
    };
    var isObject = isJsonType(caseJsonObject);
    var toObject = toJsonType(caseJsonObject);
    var caseJsonNumber = function(d) {
      return function(f) {
        return function(j) {
          return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
      };
    };
    var isNumber = isJsonType(caseJsonNumber);
    var toNumber = toJsonType(caseJsonNumber);
    var caseJsonNull = function(d) {
      return function(f) {
        return function(j) {
          return $foreign["_caseJson"](f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
      };
    };
    var isNull = isJsonType(caseJsonNull);
    var toNull = toJsonType(caseJsonNull);
    var caseJsonBoolean = function(d) {
      return function(f) {
        return function(j) {
          return $foreign["_caseJson"](Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
        };
      };
    };
    var isBoolean = isJsonType(caseJsonBoolean);
    var toBoolean = toJsonType(caseJsonBoolean);
    var caseJsonArray = function(d) {
      return function(f) {
        return function(j) {
          return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
        };
      };
    };
    var isArray = isJsonType(caseJsonArray);
    var toArray = toJsonType(caseJsonArray);
    var caseJson = function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(json) {
                  return $foreign["_caseJson"](a, b, c, d, e, f, json);
                };
              };
            };
          };
        };
      };
    };
    module2.exports = {
      caseJson,
      caseJsonNull,
      caseJsonBoolean,
      caseJsonNumber,
      caseJsonString,
      caseJsonArray,
      caseJsonObject,
      isNull,
      isBoolean,
      isNumber,
      isString,
      isArray,
      isObject,
      toNull,
      toBoolean,
      toNumber,
      toString,
      toArray,
      toObject,
      jsonTrue,
      jsonFalse,
      jsonZero,
      jsonEmptyString,
      jsonEmptyArray,
      jsonSingletonArray,
      jsonEmptyObject,
      jsonSingletonObject,
      eqJson,
      ordJson,
      fromBoolean: $foreign.fromBoolean,
      fromNumber: $foreign.fromNumber,
      fromString: $foreign.fromString,
      fromArray: $foreign.fromArray,
      fromObject: $foreign.fromObject,
      jsonNull: $foreign.jsonNull,
      stringify: $foreign.stringify,
      stringifyWithIndent: $foreign.stringifyWithIndent
    };
  }
});

// output/Data.Argonaut.Decode.Error/index.js
var require_Data_Argonaut_Decode = __commonJS({
  "output/Data.Argonaut.Decode.Error/index.js"(exports2, module2) {
    "use strict";
    var Data_Argonaut_Core = require_Data_Argonaut();
    var Data_Eq = require_Data8();
    var Data_Generic_Rep = require_Data_Generic();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var TypeMismatch = function() {
      function TypeMismatch2(value0) {
        this.value0 = value0;
      }
      ;
      TypeMismatch2.create = function(value0) {
        return new TypeMismatch2(value0);
      };
      return TypeMismatch2;
    }();
    var UnexpectedValue = function() {
      function UnexpectedValue2(value0) {
        this.value0 = value0;
      }
      ;
      UnexpectedValue2.create = function(value0) {
        return new UnexpectedValue2(value0);
      };
      return UnexpectedValue2;
    }();
    var AtIndex = function() {
      function AtIndex2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      AtIndex2.create = function(value0) {
        return function(value1) {
          return new AtIndex2(value0, value1);
        };
      };
      return AtIndex2;
    }();
    var AtKey = function() {
      function AtKey2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      AtKey2.create = function(value0) {
        return function(value1) {
          return new AtKey2(value0, value1);
        };
      };
      return AtKey2;
    }();
    var Named = function() {
      function Named2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Named2.create = function(value0) {
        return function(value1) {
          return new Named2(value0, value1);
        };
      };
      return Named2;
    }();
    var MissingValue = function() {
      function MissingValue2() {
      }
      ;
      MissingValue2.value = new MissingValue2();
      return MissingValue2;
    }();
    var showJsonDecodeError = {
      show: function(v) {
        if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
        }
        ;
        if (v instanceof UnexpectedValue) {
          return "(UnexpectedValue " + (Data_Argonaut_Core.stringify(v.value0) + ")");
        }
        ;
        if (v instanceof AtIndex) {
          return "(AtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
        }
        ;
        if (v instanceof AtKey) {
          return "(AtKey " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
        }
        ;
        if (v instanceof Named) {
          return "(Named " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
        }
        ;
        if (v instanceof MissingValue) {
          return "MissingValue";
        }
        ;
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 24, column 10 - line 30, column 35): " + [v.constructor.name]);
      }
    };
    var printJsonDecodeError = function(err) {
      var go = function(v) {
        if (v instanceof TypeMismatch) {
          return "  Expected value of type '" + (v.value0 + "'.");
        }
        ;
        if (v instanceof UnexpectedValue) {
          return "  Unexpected value " + (Data_Argonaut_Core.stringify(v.value0) + ".");
        }
        ;
        if (v instanceof AtIndex) {
          return "  At array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (":\n" + go(v.value1)));
        }
        ;
        if (v instanceof AtKey) {
          return "  At object key '" + (v.value0 + ("':\n" + go(v.value1)));
        }
        ;
        if (v instanceof Named) {
          return "  Under '" + (v.value0 + ("':\n" + go(v.value1)));
        }
        ;
        if (v instanceof MissingValue) {
          return "  No value was found.";
        }
        ;
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 37, column 8 - line 43, column 44): " + [v.constructor.name]);
      };
      return "An error occurred while decoding a JSON value:\n" + go(err);
    };
    var genericJsonDecodeError = {
      to: function(x) {
        if (x instanceof Data_Generic_Rep.Inl) {
          return new TypeMismatch(x.value0);
        }
        ;
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new UnexpectedValue(x.value0.value0);
        }
        ;
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new AtIndex(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
        }
        ;
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new AtKey(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
        }
        ;
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return new Named(x.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value1);
        }
        ;
        if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
          return MissingValue.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 21, column 1 - line 21, column 68): " + [x.constructor.name]);
      },
      from: function(x) {
        if (x instanceof TypeMismatch) {
          return new Data_Generic_Rep.Inl(x.value0);
        }
        ;
        if (x instanceof UnexpectedValue) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
        }
        ;
        if (x instanceof AtIndex) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))));
        }
        ;
        if (x instanceof AtKey) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
        }
        ;
        if (x instanceof Named) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))));
        }
        ;
        if (x instanceof MissingValue) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
        }
        ;
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 21, column 1 - line 21, column 68): " + [x.constructor.name]);
      }
    };
    var eqJsonDecodeError = {
      eq: function(x) {
        return function(y) {
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            return x.value0 === y.value0;
          }
          ;
          if (x instanceof UnexpectedValue && y instanceof UnexpectedValue) {
            return Data_Eq.eq(Data_Argonaut_Core.eqJson)(x.value0)(y.value0);
          }
          ;
          if (x instanceof AtIndex && y instanceof AtIndex) {
            return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
          }
          ;
          if (x instanceof AtKey && y instanceof AtKey) {
            return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
          }
          ;
          if (x instanceof Named && y instanceof Named) {
            return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
          }
          ;
          if (x instanceof MissingValue && y instanceof MissingValue) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var ordJsonDecodeError = {
      compare: function(x) {
        return function(y) {
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
            return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          }
          ;
          if (x instanceof TypeMismatch) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof TypeMismatch) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof UnexpectedValue && y instanceof UnexpectedValue) {
            return Data_Ord.compare(Data_Argonaut_Core.ordJson)(x.value0)(y.value0);
          }
          ;
          if (x instanceof UnexpectedValue) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof UnexpectedValue) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof AtIndex && y instanceof AtIndex) {
            var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
            }
            ;
            return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
          }
          ;
          if (x instanceof AtIndex) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof AtIndex) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof AtKey && y instanceof AtKey) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
            }
            ;
            return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
          }
          ;
          if (x instanceof AtKey) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof AtKey) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof Named && y instanceof Named) {
            var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
            }
            ;
            return Data_Ord.compare(ordJsonDecodeError)(x.value1)(y.value1);
          }
          ;
          if (x instanceof Named) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof Named) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof MissingValue && y instanceof MissingValue) {
            return Data_Ordering.EQ.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 20, column 1 - line 20, column 58): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqJsonDecodeError;
      }
    };
    module2.exports = {
      TypeMismatch,
      UnexpectedValue,
      AtIndex,
      AtKey,
      Named,
      MissingValue,
      printJsonDecodeError,
      eqJsonDecodeError,
      ordJsonDecodeError,
      genericJsonDecodeError,
      showJsonDecodeError
    };
  }
});

// output/Data.Array.NonEmpty.Internal/foreign.js
var require_foreign74 = __commonJS({
  "output/Data.Array.NonEmpty.Internal/foreign.js"(exports2) {
    "use strict";
    exports2.foldr1Impl = function(f) {
      return function(xs) {
        var acc = xs[xs.length - 1];
        for (var i = xs.length - 2; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
    exports2.foldl1Impl = function(f) {
      return function(xs) {
        var acc = xs[0];
        var len = xs.length;
        for (var i = 1; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
    exports2.traverse1Impl = function() {
      function Cont(fn) {
        this.fn = fn;
      }
      var emptyList = {};
      var ConsCell = function(head, tail) {
        this.head = head;
        this.tail = tail;
      };
      function finalCell(head) {
        return new ConsCell(head, emptyList);
      }
      function consList(x) {
        return function(xs) {
          return new ConsCell(x, xs);
        };
      }
      function listToArray(list) {
        var arr = [];
        var xs = list;
        while (xs !== emptyList) {
          arr.push(xs.head);
          xs = xs.tail;
        }
        return arr;
      }
      return function(apply) {
        return function(map) {
          return function(f) {
            var buildFrom = function(x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };
            var go = function(acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function() {
                  var built = go(buildFrom(last, acc), currentLen - 1, xs);
                  return built;
                });
              }
            };
            return function(array) {
              var acc = map(finalCell)(f(array[array.length - 1]));
              var result = go(acc, array.length - 1, array);
              while (result instanceof Cont) {
                result = result.fn();
              }
              return map(listToArray)(result);
            };
          };
        };
      };
    }();
  }
});

// output/Data.Array.NonEmpty.Internal/index.js
var require_Data_Array_NonEmpty = __commonJS({
  "output/Data.Array.NonEmpty.Internal/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign74();
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Monad = require_Control7();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_FoldableWithIndex = require_Data28();
    var Data_Functor = require_Data4();
    var Data_FunctorWithIndex = require_Data27();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Semigroup_Foldable = require_Data_Semigroup();
    var Data_Semigroup_Traversable = require_Data_Semigroup2();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_TraversableWithIndex = require_Data30();
    var Data_Unfoldable1 = require_Data31();
    var NonEmptyArray = function(x) {
      return x;
    };
    var unfoldable1NonEmptyArray = Data_Unfoldable1.unfoldable1Array;
    var traversableWithIndexNonEmptyArray = Data_TraversableWithIndex.traversableWithIndexArray;
    var traversableNonEmptyArray = Data_Traversable.traversableArray;
    var showNonEmptyArray = function(dictShow) {
      return {
        show: function(v) {
          return "(NonEmptyArray " + (Data_Show.show(Data_Show.showArray(dictShow))(v) + ")");
        }
      };
    };
    var semigroupNonEmptyArray = Data_Semigroup.semigroupArray;
    var ordNonEmptyArray = function(dictOrd) {
      return Data_Ord.ordArray(dictOrd);
    };
    var ord1NonEmptyArray = Data_Ord.ord1Array;
    var monadNonEmptyArray = Control_Monad.monadArray;
    var functorWithIndexNonEmptyArray = Data_FunctorWithIndex.functorWithIndexArray;
    var functorNonEmptyArray = Data_Functor.functorArray;
    var foldableWithIndexNonEmptyArray = Data_FoldableWithIndex.foldableWithIndexArray;
    var foldableNonEmptyArray = Data_Foldable.foldableArray;
    var foldable1NonEmptyArray = {
      foldMap1: function(dictSemigroup) {
        return Data_Semigroup_Foldable.foldMap1DefaultL(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
      },
      foldr1: $foreign.foldr1Impl,
      foldl1: $foreign.foldl1Impl,
      Foldable0: function() {
        return foldableNonEmptyArray;
      }
    };
    var traversable1NonEmptyArray = {
      traverse1: function(dictApply) {
        return $foreign.traverse1Impl(Control_Apply.apply(dictApply))(Data_Functor.map(dictApply.Functor0()));
      },
      sequence1: function(dictApply) {
        return Data_Semigroup_Traversable.sequence1Default(traversable1NonEmptyArray)(dictApply);
      },
      Foldable10: function() {
        return foldable1NonEmptyArray;
      },
      Traversable1: function() {
        return traversableNonEmptyArray;
      }
    };
    var eqNonEmptyArray = function(dictEq) {
      return Data_Eq.eqArray(dictEq);
    };
    var eq1NonEmptyArray = Data_Eq.eq1Array;
    var bindNonEmptyArray = Control_Bind.bindArray;
    var applyNonEmptyArray = Control_Apply.applyArray;
    var applicativeNonEmptyArray = Control_Applicative.applicativeArray;
    var altNonEmptyArray = Control_Alt.altArray;
    module2.exports = {
      NonEmptyArray,
      showNonEmptyArray,
      eqNonEmptyArray,
      eq1NonEmptyArray,
      ordNonEmptyArray,
      ord1NonEmptyArray,
      semigroupNonEmptyArray,
      functorNonEmptyArray,
      functorWithIndexNonEmptyArray,
      foldableNonEmptyArray,
      foldableWithIndexNonEmptyArray,
      foldable1NonEmptyArray,
      unfoldable1NonEmptyArray,
      traversableNonEmptyArray,
      traversableWithIndexNonEmptyArray,
      traversable1NonEmptyArray,
      applyNonEmptyArray,
      applicativeNonEmptyArray,
      bindNonEmptyArray,
      monadNonEmptyArray,
      altNonEmptyArray
    };
  }
});

// output/Data.Array.NonEmpty/index.js
var require_Data_Array2 = __commonJS({
  "output/Data.Array.NonEmpty/index.js"(exports2, module2) {
    "use strict";
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Array_NonEmpty_Internal = require_Data_Array_NonEmpty();
    var Data_Bifunctor = require_Data24();
    var Data_Boolean = require_Data();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_NonEmpty = require_Data33();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Semigroup_Foldable = require_Data_Semigroup();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable1 = require_Data31();
    var Unsafe_Coerce = require_Unsafe();
    var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
    var unsafeFromArray = Data_Array_NonEmpty_Internal.NonEmptyArray;
    var toArray = function(v) {
      return v;
    };
    var unionBy$prime = function(eq) {
      return function(xs) {
        var $50 = Data_Array.unionBy(eq)(toArray(xs));
        return function($51) {
          return unsafeFromArray($50($51));
        };
      };
    };
    var union$prime = function(dictEq) {
      return unionBy$prime(Data_Eq.eq(dictEq));
    };
    var unionBy = function(eq) {
      return function(xs) {
        var $52 = unionBy$prime(eq)(xs);
        return function($53) {
          return $52(toArray($53));
        };
      };
    };
    var union = function(dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
    };
    var unzip = function() {
      var $54 = Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(unsafeFromArray)(unsafeFromArray);
      return function($55) {
        return $54(Data_Array.unzip(toArray($55)));
      };
    }();
    var updateAt = function(i) {
      return function(x) {
        var $56 = Data_Array.updateAt(i)(x);
        return function($57) {
          return unsafeFromArrayF($56(toArray($57)));
        };
      };
    };
    var zip = function(xs) {
      return function(ys) {
        return unsafeFromArray(Data_Array.zip(toArray(xs))(toArray(ys)));
      };
    };
    var zipWith = function(f) {
      return function(xs) {
        return function(ys) {
          return unsafeFromArray(Data_Array.zipWith(f)(toArray(xs))(toArray(ys)));
        };
      };
    };
    var zipWithA = function(dictApplicative) {
      return function(f) {
        return function(xs) {
          return function(ys) {
            return unsafeFromArrayF(Data_Array.zipWithA(dictApplicative)(f)(toArray(xs))(toArray(ys)));
          };
        };
      };
    };
    var splitAt = function(i) {
      return function(xs) {
        return Data_Array.splitAt(i)(toArray(xs));
      };
    };
    var some = function(dictAlternative) {
      return function(dictLazy) {
        var $58 = Data_Array.some(dictAlternative)(dictLazy);
        return function($59) {
          return unsafeFromArrayF($58($59));
        };
      };
    };
    var snoc$prime = function(xs) {
      return function(x) {
        return unsafeFromArray(Data_Array.snoc(xs)(x));
      };
    };
    var snoc = function(xs) {
      return function(x) {
        return unsafeFromArray(Data_Array.snoc(toArray(xs))(x));
      };
    };
    var singleton = function($60) {
      return unsafeFromArray(Data_Array.singleton($60));
    };
    var replicate = function(i) {
      return function(x) {
        return unsafeFromArray(Data_Array.replicate(Data_Ord.max(Data_Ord.ordInt)(1)(i))(x));
      };
    };
    var range = function(x) {
      return function(y) {
        return unsafeFromArray(Data_Array.range(x)(y));
      };
    };
    var modifyAt = function(i) {
      return function(f) {
        var $61 = Data_Array.modifyAt(i)(f);
        return function($62) {
          return unsafeFromArrayF($61(toArray($62)));
        };
      };
    };
    var intersectBy$prime = function(eq) {
      return function(xs) {
        return Data_Array.intersectBy(eq)(toArray(xs));
      };
    };
    var intersectBy = function(eq) {
      return function(xs) {
        var $63 = intersectBy$prime(eq)(xs);
        return function($64) {
          return $63(toArray($64));
        };
      };
    };
    var intersect$prime = function(dictEq) {
      return intersectBy$prime(Data_Eq.eq(dictEq));
    };
    var intersect = function(dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
    };
    var intercalate = function(dictSemigroup) {
      return Data_Semigroup_Foldable.intercalate(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(dictSemigroup);
    };
    var insertAt = function(i) {
      return function(x) {
        var $65 = Data_Array.insertAt(i)(x);
        return function($66) {
          return unsafeFromArrayF($65(toArray($66)));
        };
      };
    };
    var fromFoldable1 = function(dictFoldable1) {
      var $67 = Data_Array.fromFoldable(dictFoldable1.Foldable0());
      return function($68) {
        return unsafeFromArray($67($68));
      };
    };
    var fromArray = function(xs) {
      if (Data_Array.length(xs) > 0) {
        return new Data_Maybe.Just(unsafeFromArray(xs));
      }
      ;
      if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 159, column 1 - line 159, column 58): " + [xs.constructor.name]);
    };
    var fromFoldable = function(dictFoldable) {
      var $69 = Data_Array.fromFoldable(dictFoldable);
      return function($70) {
        return fromArray($69($70));
      };
    };
    var foldr1 = Data_Semigroup_Foldable.foldr1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray);
    var foldl1 = Data_Semigroup_Foldable.foldl1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray);
    var foldMap1 = function(dictSemigroup) {
      return Data_Semigroup_Foldable.foldMap1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(dictSemigroup);
    };
    var fold1 = function(dictSemigroup) {
      return Data_Semigroup_Foldable.fold1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)(dictSemigroup);
    };
    var difference$prime = function(dictEq) {
      return function(xs) {
        return Data_Array.difference(dictEq)(toArray(xs));
      };
    };
    var cons$prime = function(x) {
      return function(xs) {
        return unsafeFromArray(Data_Array.cons(x)(xs));
      };
    };
    var fromNonEmpty = function(v) {
      return cons$prime(v.value0)(v.value1);
    };
    var concatMap = Data_Function.flip(Control_Bind.bind(Data_Array_NonEmpty_Internal.bindNonEmptyArray));
    var concat = function() {
      var $71 = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(toArray);
      return function($72) {
        return unsafeFromArray(Data_Array.concat(toArray($71($72))));
      };
    }();
    var appendArray = function(xs) {
      return function(ys) {
        return unsafeFromArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(xs))(ys));
      };
    };
    var alterAt = function(i) {
      return function(f) {
        var $73 = Data_Array.alterAt(i)(f);
        return function($74) {
          return $73(toArray($74));
        };
      };
    };
    var adaptMaybe = function(f) {
      var $75 = Data_Maybe.fromJust();
      return function($76) {
        return $75(f(toArray($76)));
      };
    };
    var head = adaptMaybe(Data_Array.head);
    var init = adaptMaybe(Data_Array.init);
    var last = adaptMaybe(Data_Array.last);
    var tail = adaptMaybe(Data_Array.tail);
    var uncons = adaptMaybe(Data_Array.uncons);
    var toNonEmpty = function($77) {
      return function(v) {
        return new Data_NonEmpty.NonEmpty(v.head, v.tail);
      }(uncons($77));
    };
    var unsnoc = adaptMaybe(Data_Array.unsnoc);
    var adaptAny = function(f) {
      return function($78) {
        return f(toArray($78));
      };
    };
    var all = function(p) {
      return adaptAny(Data_Array.all(p));
    };
    var any = function(p) {
      return adaptAny(Data_Array.any(p));
    };
    var catMaybes = adaptAny(Data_Array.catMaybes);
    var $$delete = function(dictEq) {
      return function(x) {
        return adaptAny(Data_Array["delete"](dictEq)(x));
      };
    };
    var deleteAt = function(i) {
      return adaptAny(Data_Array.deleteAt(i));
    };
    var deleteBy = function(f) {
      return function(x) {
        return adaptAny(Data_Array.deleteBy(f)(x));
      };
    };
    var difference = function(dictEq) {
      return function(xs) {
        return adaptAny(difference$prime(dictEq)(xs));
      };
    };
    var drop = function(i) {
      return adaptAny(Data_Array.drop(i));
    };
    var dropEnd = function(i) {
      return adaptAny(Data_Array.dropEnd(i));
    };
    var dropWhile = function(f) {
      return adaptAny(Data_Array.dropWhile(f));
    };
    var elem = function(dictEq) {
      return function(x) {
        return adaptAny(Data_Array.elem(dictEq)(x));
      };
    };
    var elemIndex = function(dictEq) {
      return function(x) {
        return adaptAny(Data_Array.elemIndex(dictEq)(x));
      };
    };
    var elemLastIndex = function(dictEq) {
      return function(x) {
        return adaptAny(Data_Array.elemLastIndex(dictEq)(x));
      };
    };
    var filter = function(f) {
      return adaptAny(Data_Array.filter(f));
    };
    var filterA = function(dictApplicative) {
      return function(f) {
        return adaptAny(Data_Array.filterA(dictApplicative)(f));
      };
    };
    var find = function(p) {
      return adaptAny(Data_Array.find(p));
    };
    var findIndex = function(p) {
      return adaptAny(Data_Array.findIndex(p));
    };
    var findLastIndex = function(x) {
      return adaptAny(Data_Array.findLastIndex(x));
    };
    var findMap = function(p) {
      return adaptAny(Data_Array.findMap(p));
    };
    var foldM = function(dictMonad) {
      return function(f) {
        return function(acc) {
          return adaptAny(Data_Array.foldM(dictMonad)(f)(acc));
        };
      };
    };
    var foldRecM = function(dictMonadRec) {
      return function(f) {
        return function(acc) {
          return adaptAny(Data_Array.foldRecM(dictMonadRec)(f)(acc));
        };
      };
    };
    var index = adaptAny(Data_Array.index);
    var length = adaptAny(Data_Array.length);
    var mapMaybe = function(f) {
      return adaptAny(Data_Array.mapMaybe(f));
    };
    var notElem = function(dictEq) {
      return function(x) {
        return adaptAny(Data_Array.notElem(dictEq)(x));
      };
    };
    var partition = function(f) {
      return adaptAny(Data_Array.partition(f));
    };
    var slice = function(start) {
      return function(end) {
        return adaptAny(Data_Array.slice(start)(end));
      };
    };
    var span = function(f) {
      return adaptAny(Data_Array.span(f));
    };
    var take = function(i) {
      return adaptAny(Data_Array.take(i));
    };
    var takeEnd = function(i) {
      return adaptAny(Data_Array.takeEnd(i));
    };
    var takeWhile = function(f) {
      return adaptAny(Data_Array.takeWhile(f));
    };
    var toUnfoldable = function(dictUnfoldable) {
      return adaptAny(Data_Array.toUnfoldable(dictUnfoldable));
    };
    var unsafeAdapt = function(f) {
      var $79 = adaptAny(f);
      return function($80) {
        return unsafeFromArray($79($80));
      };
    };
    var cons = function(x) {
      return unsafeAdapt(Data_Array.cons(x));
    };
    var group = function(dictEq) {
      return unsafeAdapt(Data_Array.group(dictEq));
    };
    var group$prime = function(dictWarn) {
      return function(dictOrd) {
        return unsafeAdapt(Data_Array.groupAll(dictOrd));
      };
    };
    var groupAllBy = function(op) {
      return unsafeAdapt(Data_Array.groupAllBy(op));
    };
    var groupAll = function(dictOrd) {
      return groupAllBy(Data_Ord.compare(dictOrd));
    };
    var groupBy = function(op) {
      return unsafeAdapt(Data_Array.groupBy(op));
    };
    var insert = function(dictOrd) {
      return function(x) {
        return unsafeAdapt(Data_Array.insert(dictOrd)(x));
      };
    };
    var insertBy = function(f) {
      return function(x) {
        return unsafeAdapt(Data_Array.insertBy(f)(x));
      };
    };
    var intersperse = function(x) {
      return unsafeAdapt(Data_Array.intersperse(x));
    };
    var mapWithIndex = function(f) {
      return unsafeAdapt(Data_Array.mapWithIndex(f));
    };
    var modifyAtIndices = function(dictFoldable) {
      return function(is) {
        return function(f) {
          return unsafeAdapt(Data_Array.modifyAtIndices(dictFoldable)(is)(f));
        };
      };
    };
    var nub = function(dictOrd) {
      return unsafeAdapt(Data_Array.nub(dictOrd));
    };
    var nubBy = function(f) {
      return unsafeAdapt(Data_Array.nubBy(f));
    };
    var nubByEq = function(f) {
      return unsafeAdapt(Data_Array.nubByEq(f));
    };
    var nubEq = function(dictEq) {
      return unsafeAdapt(Data_Array.nubEq(dictEq));
    };
    var reverse = unsafeAdapt(Data_Array.reverse);
    var scanl = function(f) {
      return function(x) {
        return unsafeAdapt(Data_Array.scanl(f)(x));
      };
    };
    var scanr = function(f) {
      return function(x) {
        return unsafeAdapt(Data_Array.scanr(f)(x));
      };
    };
    var sort = function(dictOrd) {
      return unsafeAdapt(Data_Array.sort(dictOrd));
    };
    var sortBy = function(f) {
      return unsafeAdapt(Data_Array.sortBy(f));
    };
    var sortWith = function(dictOrd) {
      return function(f) {
        return unsafeAdapt(Data_Array.sortWith(dictOrd)(f));
      };
    };
    var updateAtIndices = function(dictFoldable) {
      return function(pairs) {
        return unsafeAdapt(Data_Array.updateAtIndices(dictFoldable)(pairs));
      };
    };
    var unsafeIndex = function(dictPartial) {
      return adaptAny(Data_Array.unsafeIndex());
    };
    var toUnfoldable1 = function(dictUnfoldable1) {
      return function(xs) {
        var len = length(xs);
        var f = function(i) {
          return Data_Tuple.Tuple.create(unsafeIndex()(xs)(i))(function() {
            var $49 = i < (len - 1 | 0);
            if ($49) {
              return new Data_Maybe.Just(i + 1 | 0);
            }
            ;
            return Data_Maybe.Nothing.value;
          }());
        };
        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(f)(0);
      };
    };
    module2.exports = {
      fromArray,
      fromNonEmpty,
      toArray,
      toNonEmpty,
      fromFoldable,
      fromFoldable1,
      toUnfoldable,
      toUnfoldable1,
      singleton,
      range,
      replicate,
      some,
      length,
      cons,
      "cons'": cons$prime,
      snoc,
      "snoc'": snoc$prime,
      appendArray,
      insert,
      insertBy,
      head,
      last,
      tail,
      init,
      uncons,
      unsnoc,
      index,
      elem,
      notElem,
      elemIndex,
      elemLastIndex,
      find,
      findMap,
      findIndex,
      findLastIndex,
      insertAt,
      deleteAt,
      updateAt,
      updateAtIndices,
      modifyAt,
      modifyAtIndices,
      alterAt,
      intersperse,
      reverse,
      concat,
      concatMap,
      filter,
      partition,
      splitAt,
      filterA,
      mapMaybe,
      catMaybes,
      mapWithIndex,
      foldl1,
      foldr1,
      foldMap1,
      fold1,
      intercalate,
      scanl,
      scanr,
      sort,
      sortBy,
      sortWith,
      slice,
      take,
      takeEnd,
      takeWhile,
      drop,
      dropEnd,
      dropWhile,
      span,
      group,
      groupAll,
      "group'": group$prime,
      groupBy,
      groupAllBy,
      nub,
      nubBy,
      nubEq,
      nubByEq,
      union,
      "union'": union$prime,
      unionBy,
      "unionBy'": unionBy$prime,
      "delete": $$delete,
      deleteBy,
      difference,
      "difference'": difference$prime,
      intersect,
      "intersect'": intersect$prime,
      intersectBy,
      "intersectBy'": intersectBy$prime,
      zipWith,
      zipWithA,
      zip,
      unzip,
      any,
      all,
      foldM,
      foldRecM,
      unsafeIndex
    };
  }
});

// output/Data.Set/index.js
var require_Data48 = __commonJS({
  "output/Data.Set/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Control_Monad_ST_Internal = require_Control_Monad_ST();
    var Data_Array = require_Data39();
    var Data_Array_ST = require_Data_Array();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_List = require_Data38();
    var Data_List_Types = require_Data_List();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Show = require_Data14();
    var Data_Unfoldable = require_Data32();
    var Data_Unit = require_Data3();
    var $$Set = function(x) {
      return x;
    };
    var union = function(dictOrd) {
      return function(v) {
        return function(v1) {
          return Data_Map_Internal.union(dictOrd)(v)(v1);
        };
      };
    };
    var toMap = function(v) {
      return v;
    };
    var toList = function(v) {
      return Data_Map_Internal.keys(v);
    };
    var toUnfoldable = function(dictUnfoldable) {
      var $66 = Data_List.toUnfoldable(dictUnfoldable);
      return function($67) {
        return $66(toList($67));
      };
    };
    var size = function(v) {
      return Data_Map_Internal.size(v);
    };
    var singleton = function(a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
    };
    var showSet = function(dictShow) {
      return {
        show: function(s) {
          return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(dictShow))(toUnfoldable(Data_Unfoldable.unfoldableArray)(s)) + ")");
        }
      };
    };
    var semigroupSet = function(dictOrd) {
      return {
        append: union(dictOrd)
      };
    };
    var member = function(dictOrd) {
      return function(a) {
        return function(v) {
          return Data_Map_Internal.member(dictOrd)(a)(v);
        };
      };
    };
    var isEmpty = function(v) {
      return Data_Map_Internal.isEmpty(v);
    };
    var insert = function(dictOrd) {
      return function(a) {
        return function(v) {
          return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
        };
      };
    };
    var fromMap = $$Set;
    var foldableSet = {
      foldMap: function(dictMonoid) {
        return function(f) {
          var $68 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
          return function($69) {
            return $68(toList($69));
          };
        };
      },
      foldl: function(f) {
        return function(x) {
          var $70 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
          return function($71) {
            return $70(toList($71));
          };
        };
      },
      foldr: function(f) {
        return function(x) {
          var $72 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
          return function($73) {
            return $72(toList($73));
          };
        };
      }
    };
    var findMin = function(v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(v1) {
        return v1.key;
      })(Data_Map_Internal.findMin(v));
    };
    var findMax = function(v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(v1) {
        return v1.key;
      })(Data_Map_Internal.findMax(v));
    };
    var filter = function(dictOrd) {
      return function(f) {
        return function(v) {
          return Data_Map_Internal.filterWithKey(dictOrd)(function(k) {
            return function(v1) {
              return f(k);
            };
          })(v);
        };
      };
    };
    var eqSet = function(dictEq) {
      return {
        eq: function(v) {
          return function(v1) {
            return Data_Eq.eq(Data_Map_Internal.eqMap(dictEq)(Data_Eq.eqUnit))(v)(v1);
          };
        }
      };
    };
    var ordSet = function(dictOrd) {
      return {
        compare: function(s1) {
          return function(s2) {
            return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(toList(s1))(toList(s2));
          };
        },
        Eq0: function() {
          return eqSet(dictOrd.Eq0());
        }
      };
    };
    var eq1Set = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqSet(dictEq));
      }
    };
    var ord1Set = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordSet(dictOrd));
      },
      Eq10: function() {
        return eq1Set;
      }
    };
    var empty = Data_Map_Internal.empty;
    var fromFoldable = function(dictFoldable) {
      return function(dictOrd) {
        return Data_Foldable.foldl(dictFoldable)(function(m) {
          return function(a) {
            return insert(dictOrd)(a)(m);
          };
        })(empty);
      };
    };
    var intersection = function(dictOrd) {
      return function(s1) {
        return function(s2) {
          var toArray = function() {
            var $74 = Data_Array.fromFoldable(Data_List_Types.foldableList);
            return function($75) {
              return $74(toList($75));
            };
          }();
          var rs = toArray(s2);
          var rl = Data_Array.length(rs);
          var ls = toArray(s1);
          var ll = Data_Array.length(ls);
          var intersect = function(acc) {
            var go = function(l) {
              return function(r) {
                var $61 = l < ll && r < rl;
                if ($61) {
                  var v = Data_Ord.compare(dictOrd)(ls[l])(rs[r]);
                  if (v instanceof Data_Ordering.EQ) {
                    return function __do() {
                      Data_Array_ST.push(ls[l])(acc)();
                      return new Control_Monad_Rec_Class.Loop({
                        a: l + 1 | 0,
                        b: r + 1 | 0
                      });
                    };
                  }
                  ;
                  if (v instanceof Data_Ordering.LT) {
                    return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                      a: l + 1 | 0,
                      b: r
                    }));
                  }
                  ;
                  if (v instanceof Data_Ordering.GT) {
                    return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Loop({
                      a: l,
                      b: r + 1 | 0
                    }));
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Set (line 179, column 12 - line 184, column 43): " + [v.constructor.name]);
                }
                ;
                return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(new Control_Monad_Rec_Class.Done(acc));
              };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_ST_Internal.monadRecST)(go)(0)(0);
          };
          return fromFoldable(Data_Foldable.foldableArray)(dictOrd)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Data_Array_ST["new"])(intersect))(Data_Array_ST.unsafeFreeze)());
        };
      };
    };
    var map = function(dictOrd) {
      return function(f) {
        return Data_Foldable.foldl(foldableSet)(function(m) {
          return function(a) {
            return insert(dictOrd)(f(a))(m);
          };
        })(empty);
      };
    };
    var mapMaybe = function(dictOrd) {
      return function(f) {
        return Data_Foldable.foldr(foldableSet)(function(a) {
          return function(acc) {
            return Data_Maybe.maybe(acc)(function(b) {
              return insert(dictOrd)(b)(acc);
            })(f(a));
          };
        })(empty);
      };
    };
    var monoidSet = function(dictOrd) {
      return {
        mempty: empty,
        Semigroup0: function() {
          return semigroupSet(dictOrd);
        }
      };
    };
    var unions = function(dictFoldable) {
      return function(dictOrd) {
        return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
    };
    var $$delete = function(dictOrd) {
      return function(a) {
        return function(v) {
          return Data_Map_Internal["delete"](dictOrd)(a)(v);
        };
      };
    };
    var difference = function(dictOrd) {
      return function(s1) {
        return function(s2) {
          return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
        };
      };
    };
    var subset = function(dictOrd) {
      return function(s1) {
        return function(s2) {
          return isEmpty(difference(dictOrd)(s1)(s2));
        };
      };
    };
    var properSubset = function(dictOrd) {
      return function(s1) {
        return function(s2) {
          return subset(dictOrd)(s1)(s2) && Data_Eq.notEq(eqSet(dictOrd.Eq0()))(s1)(s2);
        };
      };
    };
    var checkValid = function(v) {
      return Data_Map_Internal.checkValid(v);
    };
    var catMaybes = function(dictOrd) {
      return mapMaybe(dictOrd)(Control_Category.identity(Control_Category.categoryFn));
    };
    module2.exports = {
      fromFoldable,
      toUnfoldable,
      empty,
      isEmpty,
      singleton,
      map,
      checkValid,
      insert,
      member,
      "delete": $$delete,
      size,
      findMin,
      findMax,
      union,
      unions,
      difference,
      subset,
      properSubset,
      intersection,
      filter,
      mapMaybe,
      catMaybes,
      toMap,
      fromMap,
      eqSet,
      eq1Set,
      showSet,
      ordSet,
      ord1Set,
      monoidSet,
      semigroupSet,
      foldableSet
    };
  }
});

// output/Data.String.NonEmpty.Internal/index.js
var require_Data_String_NonEmpty = __commonJS({
  "output/Data.String.NonEmpty.Internal/index.js"(exports2, module2) {
    "use strict";
    var Control_Bind = require_Control5();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var Data_Symbol = require_Data5();
    var NonEmptyString = function(x) {
      return x;
    };
    var NonEmptyReplacement = function(x) {
      return x;
    };
    var toUpper = function(v) {
      return Data_String_Common.toUpper(v);
    };
    var toString = function(v) {
      return v;
    };
    var toLower = function(v) {
      return Data_String_Common.toLower(v);
    };
    var showNonEmptyString = {
      show: function(v) {
        return "(NonEmptyString.unsafeFromString " + (Data_Show.show(Data_Show.showString)(v) + ")");
      }
    };
    var showNonEmptyReplacement = {
      show: function(v) {
        return "(NonEmptyReplacement " + (Data_Show.show(showNonEmptyString)(v) + ")");
      }
    };
    var semigroupNonEmptyString = Data_Semigroup.semigroupString;
    var semigroupNonEmptyReplacement = semigroupNonEmptyString;
    var replaceAll = function(pat) {
      return function(v) {
        return function(v1) {
          return Data_String_Common.replaceAll(pat)(v)(v1);
        };
      };
    };
    var replace = function(pat) {
      return function(v) {
        return function(v1) {
          return Data_String_Common.replace(pat)(v)(v1);
        };
      };
    };
    var prependString = function(s1) {
      return function(v) {
        return s1 + v;
      };
    };
    var ordNonEmptyString = Data_Ord.ordString;
    var ordNonEmptyReplacement = ordNonEmptyString;
    var nonEmptyNonEmpty = function(dictIsSymbol) {
      return {
        nes: function(p) {
          return Data_Symbol.reflectSymbol(dictIsSymbol)(p);
        }
      };
    };
    var nes = function(dict) {
      return dict.nes;
    };
    var makeNonEmptyBad = function(dictFail) {
      return {
        nes: function(v) {
          return "";
        }
      };
    };
    var localeCompare = function(v) {
      return function(v1) {
        return Data_String_Common.localeCompare(v)(v1);
      };
    };
    var liftS = function(f) {
      return function(v) {
        return f(v);
      };
    };
    var joinWith1 = function(dictFoldable1) {
      return function(v) {
        var $47 = Data_Foldable.intercalate(dictFoldable1.Foldable0())(Data_Monoid.monoidString)(v);
        return function($48) {
          return NonEmptyString($47($48));
        };
      };
    };
    var joinWith = function(dictFoldable) {
      return function(splice) {
        var $49 = Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(splice);
        return function($50) {
          return $49($50);
        };
      };
    };
    var join1With = function(dictFoldable1) {
      return function(splice) {
        var $51 = joinWith(dictFoldable1.Foldable0())(splice);
        return function($52) {
          return NonEmptyString($51($52));
        };
      };
    };
    var fromString = function(v) {
      if (v === "") {
        return Data_Maybe.Nothing.value;
      }
      ;
      return new Data_Maybe.Just(v);
    };
    var stripPrefix = function(pat) {
      return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripPrefix(pat)));
    };
    var stripSuffix = function(pat) {
      return Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(fromString)(liftS(Data_String_CodeUnits.stripSuffix(pat)));
    };
    var trim = function(v) {
      return fromString(Data_String_Common.trim(v));
    };
    var unsafeFromString = function(dictPartial) {
      var $53 = Data_Maybe.fromJust();
      return function($54) {
        return $53(fromString($54));
      };
    };
    var eqNonEmptyString = Data_Eq.eqString;
    var eqNonEmptyReplacement = eqNonEmptyString;
    var contains = function($55) {
      return liftS(Data_String_CodeUnits.contains($55));
    };
    var appendString = function(v) {
      return function(s2) {
        return v + s2;
      };
    };
    module2.exports = {
      nes,
      NonEmptyString,
      NonEmptyReplacement,
      fromString,
      unsafeFromString,
      toString,
      appendString,
      prependString,
      stripPrefix,
      stripSuffix,
      contains,
      localeCompare,
      replace,
      replaceAll,
      toLower,
      toUpper,
      trim,
      joinWith,
      join1With,
      joinWith1,
      liftS,
      eqNonEmptyString,
      ordNonEmptyString,
      semigroupNonEmptyString,
      showNonEmptyString,
      makeNonEmptyBad,
      nonEmptyNonEmpty,
      eqNonEmptyReplacement,
      ordNonEmptyReplacement,
      semigroupNonEmptyReplacement,
      showNonEmptyReplacement
    };
  }
});

// output/Data.Argonaut.Decode.Decoders/index.js
var require_Data_Argonaut_Decode2 = __commonJS({
  "output/Data.Argonaut.Decode.Decoders/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Argonaut_Core = require_Data_Argonaut();
    var Data_Argonaut_Decode_Error = require_Data_Argonaut_Decode();
    var Data_Array = require_Data39();
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Array_NonEmpty_Internal = require_Data_Array_NonEmpty();
    var Data_Bifunctor = require_Data24();
    var Data_Boolean = require_Data();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Int = require_Data37();
    var Data_List = require_Data38();
    var Data_List_NonEmpty = require_Data_List3();
    var Data_List_Types = require_Data_List();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_NonEmpty = require_Data33();
    var Data_Set = require_Data48();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_NonEmpty_Internal = require_Data_String_NonEmpty();
    var Data_Traversable = require_Data29();
    var Data_TraversableWithIndex = require_Data30();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var Foreign_Object = require_Foreign3();
    var getFieldOptional$prime = function(decoder) {
      return function(obj) {
        return function(str) {
          var decode = function(json) {
            var $5 = Data_Argonaut_Core.isNull(json);
            if ($5) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
            }
            ;
            return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str))(decoder(json)));
          };
          return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(str)(obj));
        };
      };
    };
    var getFieldOptional = function(decoder) {
      return function(obj) {
        return function(str) {
          var decode = function() {
            var $14 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
            return function($15) {
              return $14(decoder($15));
            };
          }();
          return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(function() {
            var $16 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
            return function($17) {
              return $16(decode($17));
            };
          }())(Foreign_Object.lookup(str)(obj));
        };
      };
    };
    var getField = function(decoder) {
      return function(obj) {
        return function(str) {
          return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))(function() {
            var $18 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
            return function($19) {
              return $18(decoder($19));
            };
          }())(Foreign_Object.lookup(str)(obj));
        };
      };
    };
    var decodeVoid = function(v) {
      return Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Data_Argonaut_Core.fromString("Value cannot be Void")));
    };
    var decodeString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
    var decodeNumber = Data_Argonaut_Core.caseJsonNumber(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Number")))(Data_Either.Right.create);
    var decodeNull = Data_Argonaut_Core.caseJsonNull(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("null")))(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)));
    var decodeNonEmptyString = function(json) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.Named.create("NonEmptyString")(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Functor.map(Data_Either.functorEither)(Data_String_NonEmpty_Internal.fromString)(decodeString(json)));
    };
    var decodeMaybe = function(decoder) {
      return function(json) {
        if (Data_Argonaut_Core.isNull(json)) {
          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decoder(json));
        }
        ;
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Decoders (line 37, column 1 - line 41, column 38): " + [decoder.constructor.name, json.constructor.name]);
      };
    };
    var decodeJObject = function() {
      var $20 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
      return function($21) {
        return $20(Data_Argonaut_Core.toObject($21));
      };
    }();
    var decodeJArray = function() {
      var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
      return function($23) {
        return $22(Data_Argonaut_Core.toArray($23));
      };
    }();
    var decodeList = function(decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $24 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("List"));
        var $25 = Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(decoder);
        return function($26) {
          return $24($25($26));
        };
      }())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray));
    };
    var decodeSet = function(dictOrd) {
      return function(decoder) {
        var $27 = Data_Functor.map(Data_Either.functorEither)(Data_Set.fromFoldable(Data_List_Types.foldableList)(dictOrd));
        var $28 = decodeList(decoder);
        return function($29) {
          return $27($28($29));
        };
      };
    };
    var decodeNonEmptyArray = function(decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $30 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmptyArray"));
        var $31 = Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(Data_Either.applicativeEither)(decoder);
        return function($32) {
          return $30($31($32));
        };
      }())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $33 = Data_Functor.map(Data_Either.functorEither)(function(x) {
          return Data_Array_NonEmpty["cons'"](x.head)(x.tail);
        });
        var $34 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmptyArray"));
        return function($35) {
          return $33($34(Data_Array.uncons($35)));
        };
      }())(decodeJArray));
    };
    var decodeNonEmptyList = function(decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $36 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmptyList"));
        var $37 = Data_Traversable.traverse(Data_List_Types.traversableNonEmptyList)(Data_Either.applicativeEither)(decoder);
        return function($38) {
          return $36($37($38));
        };
      }())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $39 = Data_Functor.map(Data_Either.functorEither)(function(x) {
          return Data_List_NonEmpty["cons'"](x.head)(x.tail);
        });
        var $40 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmptyList"));
        return function($41) {
          return $39($40(Data_List.uncons($41)));
        };
      }())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray)));
    };
    var decodeNonEmpty_Array = function(decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $42 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmpty Array"));
        var $43 = Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_Traversable.traversableArray))(Data_Either.applicativeEither)(decoder);
        return function($44) {
          return $42($43($44));
        };
      }())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $45 = Data_Functor.map(Data_Either.functorEither)(function(x) {
          return new Data_NonEmpty.NonEmpty(x.head, x.tail);
        });
        var $46 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmpty Array"));
        return function($47) {
          return $45($46(Data_Array.uncons($47)));
        };
      }())(decodeJArray));
    };
    var decodeNonEmpty_List = function(decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $48 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmpty List"));
        var $49 = Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_List_Types.traversableList))(Data_Either.applicativeEither)(decoder);
        return function($50) {
          return $48($49($50));
        };
      }())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $51 = Data_Functor.map(Data_Either.functorEither)(function(x) {
          return new Data_NonEmpty.NonEmpty(x.head, x.tail);
        });
        var $52 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmpty List"));
        return function($53) {
          return $51($52(Data_List.uncons($53)));
        };
      }())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray)));
    };
    var decodeInt = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
      var $54 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Integer"));
      return function($55) {
        return $54(Data_Int.fromNumber($55));
      };
    }())(decodeNumber);
    var decodeIdentity = function(decoder) {
      return function(json) {
        return Data_Functor.map(Data_Either.functorEither)(Data_Identity.Identity)(decoder(json));
      };
    };
    var decodeForeignObject = function(decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $56 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("ForeignObject"));
        var $57 = Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decoder);
        return function($58) {
          return $56($57($58));
        };
      }())(decodeJObject);
    };
    var decodeEither = function(decoderA) {
      return function(decoderB) {
        return function(json) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Either"))(Control_Bind.bind(Data_Either.bindEither)(decodeJObject(json))(function(obj) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.AtKey("tag", Data_Argonaut_Decode_Error.MissingValue.value))(Foreign_Object.lookup("tag")(obj)))(function(tag) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.AtKey("value", Data_Argonaut_Decode_Error.MissingValue.value))(Foreign_Object.lookup("value")(obj)))(function(val) {
                var v = Data_Argonaut_Core.toString(tag);
                if (v instanceof Data_Maybe.Just && v.value0 === "Right") {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Either.Right.create)(decoderB(val));
                }
                ;
                if (v instanceof Data_Maybe.Just && v.value0 === "Left") {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Either.Left.create)(decoderA(val));
                }
                ;
                return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey("tag", new Data_Argonaut_Decode_Error.UnexpectedValue(tag)));
              });
            });
          }));
        };
      };
    };
    var decodeCodePoint = function(json) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.Named.create("CodePoint")(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Functor.map(Data_Either.functorEither)(Data_String_CodePoints.codePointAt(0))(decodeString(json)));
    };
    var decodeBoolean = Data_Argonaut_Core.caseJsonBoolean(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Boolean")))(Data_Either.Right.create);
    var decodeArray = function(decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
        var $59 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
        var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function(i) {
          var $62 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
          return function($63) {
            return $62(decoder($63));
          };
        });
        return function($61) {
          return $59($60($61));
        };
      }())(decodeJArray);
    };
    var decodeTuple = function(decoderA) {
      return function(decoderB) {
        return function(json) {
          var f = function(v) {
            if (v.length === 2) {
              return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(decoderA(v[0])))(decoderB(v[1]));
            }
            ;
            return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Tuple"));
          };
          return Control_Bind.bind(Data_Either.bindEither)(decodeArray(Data_Either.Right.create)(json))(f);
        };
      };
    };
    var decodeMap = function(dictOrd) {
      return function(decoderA) {
        return function(decoderB) {
          var $64 = Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Types.foldableList));
          var $65 = decodeList(decodeTuple(decoderA)(decoderB));
          return function($66) {
            return $64($65($66));
          };
        };
      };
    };
    module2.exports = {
      decodeIdentity,
      decodeMaybe,
      decodeTuple,
      decodeEither,
      decodeNull,
      decodeBoolean,
      decodeNumber,
      decodeInt,
      decodeString,
      decodeNonEmptyString,
      decodeNonEmpty_Array,
      decodeNonEmptyArray,
      decodeNonEmpty_List,
      decodeNonEmptyList,
      decodeCodePoint,
      decodeForeignObject,
      decodeArray,
      decodeList,
      decodeSet,
      decodeMap,
      decodeVoid,
      decodeJArray,
      decodeJObject,
      getField,
      getFieldOptional,
      "getFieldOptional'": getFieldOptional$prime
    };
  }
});

// output/Record.Unsafe.Union/foreign.js
var require_foreign75 = __commonJS({
  "output/Record.Unsafe.Union/foreign.js"(exports2) {
    "use strict";
    exports2.unsafeUnionFn = function(r1, r2) {
      var copy = {};
      for (var k1 in r2) {
        if ({}.hasOwnProperty.call(r2, k1)) {
          copy[k1] = r2[k1];
        }
      }
      for (var k2 in r1) {
        if ({}.hasOwnProperty.call(r1, k2)) {
          copy[k2] = r1[k2];
        }
      }
      return copy;
    };
  }
});

// output/Record.Unsafe.Union/index.js
var require_Record_Unsafe = __commonJS({
  "output/Record.Unsafe.Union/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign75();
    var Data_Function_Uncurried = require_Data_Function();
    var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
    module2.exports = {
      unsafeUnion,
      unsafeUnionFn: $foreign.unsafeUnionFn
    };
  }
});

// output/Record/index.js
var require_Record2 = __commonJS({
  "output/Record/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_Symbol = require_Data5();
    var Record_Unsafe = require_Record();
    var Record_Unsafe_Union = require_Record_Unsafe();
    var Type_Proxy = require_Type();
    var Unsafe_Coerce = require_Unsafe();
    var union = function(dictUnion) {
      return function(l) {
        return function(r) {
          return Record_Unsafe_Union.unsafeUnionFn(l, r);
        };
      };
    };
    var set = function(dictIsSymbol) {
      return function(dictCons) {
        return function(dictCons1) {
          return function(l) {
            return function(b) {
              return function(r) {
                return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
              };
            };
          };
        };
      };
    };
    var nub = function(dictNub) {
      return Unsafe_Coerce.unsafeCoerce;
    };
    var merge = function(dictUnion) {
      return function(dictNub) {
        return function(l) {
          return function(r) {
            return Record_Unsafe_Union.unsafeUnionFn(l, r);
          };
        };
      };
    };
    var insert = function(dictIsSymbol) {
      return function(dictLacks) {
        return function(dictCons) {
          return function(l) {
            return function(a) {
              return function(r) {
                return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
              };
            };
          };
        };
      };
    };
    var get = function(dictIsSymbol) {
      return function(dictCons) {
        return function(l) {
          return function(r) {
            return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
          };
        };
      };
    };
    var modify = function(dictIsSymbol) {
      return function(dictCons) {
        return function(dictCons1) {
          return function(l) {
            return function(f) {
              return function(r) {
                return set(dictIsSymbol)()()(l)(f(get(dictIsSymbol)()(l)(r)))(r);
              };
            };
          };
        };
      };
    };
    var equalFieldsNil = {
      equalFields: function(v) {
        return function(v1) {
          return function(v2) {
            return true;
          };
        };
      }
    };
    var equalFields = function(dict) {
      return dict.equalFields;
    };
    var equalFieldsCons = function(dictIsSymbol) {
      return function(dictEq) {
        return function(dictCons) {
          return function(dictEqualFields) {
            return {
              equalFields: function(v) {
                return function(a) {
                  return function(b) {
                    var get$prime = get(dictIsSymbol)()(Type_Proxy["Proxy"].value);
                    var equalRest = equalFields(dictEqualFields)(Type_Proxy["Proxy"].value);
                    return Data_Eq.eq(dictEq)(get$prime(a))(get$prime(b)) && equalRest(a)(b);
                  };
                };
              }
            };
          };
        };
      };
    };
    var equal = function(dictRowToList) {
      return function(dictEqualFields) {
        return function(a) {
          return function(b) {
            return equalFields(dictEqualFields)(Type_Proxy["Proxy"].value)(a)(b);
          };
        };
      };
    };
    var disjointUnion = function(dictUnion) {
      return function(dictNub) {
        return function(l) {
          return function(r) {
            return Record_Unsafe_Union.unsafeUnionFn(l, r);
          };
        };
      };
    };
    var $$delete = function(dictIsSymbol) {
      return function(dictLacks) {
        return function(dictCons) {
          return function(l) {
            return function(r) {
              return Record_Unsafe.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
            };
          };
        };
      };
    };
    var rename = function(dictIsSymbol) {
      return function(dictIsSymbol1) {
        return function(dictCons) {
          return function(dictLacks) {
            return function(dictCons1) {
              return function(dictLacks1) {
                return function(prev) {
                  return function(next) {
                    return function(record) {
                      return insert(dictIsSymbol1)()()(next)(get(dictIsSymbol)()(prev)(record))($$delete(dictIsSymbol)()()(prev)(record));
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
    module2.exports = {
      get,
      set,
      modify,
      insert,
      "delete": $$delete,
      rename,
      equal,
      merge,
      union,
      disjointUnion,
      nub,
      equalFields,
      equalFieldsCons,
      equalFieldsNil
    };
  }
});

// output/Data.Argonaut.Decode.Class/index.js
var require_Data_Argonaut_Decode3 = __commonJS({
  "output/Data.Argonaut.Decode.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Bind = require_Control5();
    var Data_Argonaut_Core = require_Data_Argonaut();
    var Data_Argonaut_Decode_Decoders = require_Data_Argonaut_Decode2();
    var Data_Argonaut_Decode_Error = require_Data_Argonaut_Decode();
    var Data_Bifunctor = require_Data24();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Symbol = require_Data5();
    var Foreign_Object = require_Foreign3();
    var Record = require_Record2();
    var Type_Proxy = require_Type();
    var gDecodeJsonNil = {
      gDecodeJson: function(v) {
        return function(v1) {
          return new Data_Either.Right({});
        };
      }
    };
    var gDecodeJson = function(dict) {
      return dict.gDecodeJson;
    };
    var decodeVoid = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeVoid
    };
    var decodeRecord = function(dictGDecodeJson) {
      return function(dictRowToList) {
        return {
          decodeJson: function(json) {
            var v = Data_Argonaut_Core.toObject(json);
            if (v instanceof Data_Maybe.Just) {
              return gDecodeJson(dictGDecodeJson)(v.value0)(Type_Proxy["Proxy"].value);
            }
            ;
            if (v instanceof Data_Maybe.Nothing) {
              return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
            }
            ;
            throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 103, column 5 - line 105, column 46): " + [v.constructor.name]);
          }
        };
      };
    };
    var decodeJsonString = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeString
    };
    var decodeJsonNumber = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeNumber
    };
    var decodeJsonNull = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeNull
    };
    var decodeJsonNonEmptyString = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeNonEmptyString
    };
    var decodeJsonJson = {
      decodeJson: Data_Either.Right.create
    };
    var decodeJsonInt = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeInt
    };
    var decodeJsonField = function(dict) {
      return dict.decodeJsonField;
    };
    var gDecodeJsonCons = function(dictDecodeJsonField) {
      return function(dictGDecodeJson) {
        return function(dictIsSymbol) {
          return function(dictCons) {
            return function(dictLacks) {
              return {
                gDecodeJson: function(object) {
                  return function(v) {
                    var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var fieldValue = Foreign_Object.lookup(fieldName)(object);
                    var v1 = decodeJsonField(dictDecodeJsonField)(fieldValue);
                    if (v1 instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(v1.value0))(function(val) {
                        return Control_Bind.bind(Data_Either.bindEither)(gDecodeJson(dictGDecodeJson)(object)(Type_Proxy["Proxy"].value))(function(rest) {
                          return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(val)(rest));
                        });
                      });
                    }
                    ;
                    if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                    }
                    ;
                    throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 127, column 5 - line 134, column 44): " + [v1.constructor.name]);
                  };
                }
              };
            };
          };
        };
      };
    };
    var decodeJsonCodePoint = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeCodePoint
    };
    var decodeJsonBoolean = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeBoolean
    };
    var decodeJson = function(dict) {
      return dict.decodeJson;
    };
    var decodeJsonEither = function(dictDecodeJson) {
      return function(dictDecodeJson1) {
        return {
          decodeJson: Data_Argonaut_Decode_Decoders.decodeEither(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1))
        };
      };
    };
    var decodeJsonMaybe = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeMaybe(decodeJson(dictDecodeJson))
      };
    };
    var decodeJsonNonEmptyArray = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeNonEmptyArray(decodeJson(dictDecodeJson))
      };
    };
    var decodeJsonNonEmptyList = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeNonEmptyList(decodeJson(dictDecodeJson))
      };
    };
    var decodeJsonNonEmpty_Array = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeNonEmpty_Array(decodeJson(dictDecodeJson))
      };
    };
    var decodeJsonNonEmpty_List = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeNonEmpty_List(decodeJson(dictDecodeJson))
      };
    };
    var decodeJsonTuple = function(dictDecodeJson) {
      return function(dictDecodeJson1) {
        return {
          decodeJson: Data_Argonaut_Decode_Decoders.decodeTuple(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1))
        };
      };
    };
    var decodeList = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeList(decodeJson(dictDecodeJson))
      };
    };
    var decodeMap = function(dictOrd) {
      return function(dictDecodeJson) {
        return function(dictDecodeJson1) {
          return {
            decodeJson: Data_Argonaut_Decode_Decoders.decodeMap(dictOrd)(decodeJson(dictDecodeJson))(decodeJson(dictDecodeJson1))
          };
        };
      };
    };
    var decodeSet = function(dictOrd) {
      return function(dictDecodeJson) {
        return {
          decodeJson: Data_Argonaut_Decode_Decoders.decodeSet(dictOrd)(decodeJson(dictDecodeJson))
        };
      };
    };
    var decodeIdentity = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeIdentity(decodeJson(dictDecodeJson))
      };
    };
    var decodeForeignObject = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeForeignObject(decodeJson(dictDecodeJson))
      };
    };
    var decodeFieldMaybe = function(dictDecodeJson) {
      return {
        decodeJsonField: function(v) {
          if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Just.create(new Data_Either.Right(Data_Maybe.Nothing.value));
          }
          ;
          if (v instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(decodeJson(decodeJsonMaybe(dictDecodeJson))(v.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class (line 139, column 1 - line 143, column 49): " + [v.constructor.name]);
        }
      };
    };
    var decodeFieldId = function(dictDecodeJson) {
      return {
        decodeJsonField: function(j) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(decodeJson(dictDecodeJson))(j);
        }
      };
    };
    var decodeArray = function(dictDecodeJson) {
      return {
        decodeJson: Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson))
      };
    };
    module2.exports = {
      decodeJson,
      decodeJsonField,
      gDecodeJson,
      decodeIdentity,
      decodeJsonMaybe,
      decodeJsonTuple,
      decodeJsonEither,
      decodeJsonNull,
      decodeJsonBoolean,
      decodeJsonNumber,
      decodeJsonInt,
      decodeJsonString,
      decodeJsonNonEmptyString,
      decodeJsonJson,
      decodeJsonNonEmpty_Array,
      decodeJsonNonEmptyArray,
      decodeJsonNonEmpty_List,
      decodeJsonNonEmptyList,
      decodeJsonCodePoint,
      decodeForeignObject,
      decodeArray,
      decodeList,
      decodeSet,
      decodeMap,
      decodeVoid,
      decodeRecord,
      gDecodeJsonNil,
      gDecodeJsonCons,
      decodeFieldMaybe,
      decodeFieldId
    };
  }
});

// output/Data.Argonaut.Encode.Encoders/index.js
var require_Data_Argonaut_Encode = __commonJS({
  "output/Data.Argonaut.Encode.Encoders/index.js"(exports2, module2) {
    "use strict";
    var Data_Argonaut_Core = require_Data_Argonaut();
    var Data_Array = require_Data39();
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_List = require_Data38();
    var Data_List_NonEmpty = require_Data_List3();
    var Data_List_Types = require_Data_List();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_Set = require_Data48();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_NonEmpty_Internal = require_Data_String_NonEmpty();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Data_Void = require_Data6();
    var Foreign_Object = require_Foreign3();
    var extend = function(encoder) {
      return function(v) {
        var $32 = Data_Argonaut_Core.caseJsonObject(Data_Argonaut_Core.jsonSingletonObject(v.value0)(v.value1))(function() {
          var $34 = Foreign_Object.insert(v.value0)(v.value1);
          return function($35) {
            return Data_Argonaut_Core.fromObject($34($35));
          };
        }());
        return function($33) {
          return $32(encoder($33));
        };
      };
    };
    var extendOptional = function(encoder) {
      return function(v) {
        if (v instanceof Data_Maybe.Just) {
          return extend(encoder)(v.value0);
        }
        ;
        if (v instanceof Data_Maybe.Nothing) {
          return encoder;
        }
        ;
        throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 121, column 26 - line 123, column 21): " + [v.constructor.name]);
      };
    };
    var encodeVoid = Data_Void.absurd;
    var encodeUnit = Data_Function["const"](Data_Argonaut_Core.jsonNull);
    var encodeTuple = function(encoderA) {
      return function(encoderB) {
        return function(v) {
          return Data_Argonaut_Core.fromArray([encoderA(v.value0), encoderB(v.value1)]);
        };
      };
    };
    var encodeString = Data_Argonaut_Core.fromString;
    var encodeNumber = Data_Argonaut_Core.fromNumber;
    var encodeNonEmptyString = function($36) {
      return Data_Argonaut_Core.fromString(Data_String_NonEmpty_Internal.toString($36));
    };
    var encodeMaybe = function(encoder) {
      return function(v) {
        if (v instanceof Data_Maybe.Nothing) {
          return Data_Argonaut_Core.jsonNull;
        }
        ;
        if (v instanceof Data_Maybe.Just) {
          return encoder(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Argonaut.Encode.Encoders (line 31, column 23 - line 33, column 22): " + [v.constructor.name]);
      };
    };
    var encodeList = function(encoder) {
      var $37 = Data_Functor.map(Data_Functor.functorArray)(encoder);
      var $38 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
      return function($39) {
        return Data_Argonaut_Core.fromArray($37($38($39)));
      };
    };
    var encodeMap = function(dictOrd) {
      return function(encoderA) {
        return function(encoderB) {
          var $40 = encodeList(encodeTuple(encoderA)(encoderB));
          var $41 = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
          return function($42) {
            return $40($41($42));
          };
        };
      };
    };
    var encodeNonEmptyList = function(encoder) {
      var $43 = encodeList(encoder);
      return function($44) {
        return $43(Data_List_NonEmpty.toList($44));
      };
    };
    var encodeNonEmpty_List = function(encoder) {
      return function(v) {
        return encodeList(encoder)(new Data_List_Types.Cons(v.value0, v.value1));
      };
    };
    var encodeSet = function(dictOrd) {
      return function(encoder) {
        var $45 = encodeList(encoder);
        var $46 = Data_Set.toUnfoldable(Data_List_Types.unfoldableList);
        return function($47) {
          return $45($46($47));
        };
      };
    };
    var encodeInt = function($48) {
      return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($48));
    };
    var encodeIdentity = function(encoder) {
      return function(v) {
        return encoder(v);
      };
    };
    var encodeForeignObject = function(encoder) {
      var $49 = Data_Functor.map(Foreign_Object.functorObject)(encoder);
      return function($50) {
        return Data_Argonaut_Core.fromObject($49($50));
      };
    };
    var encodeEither = function(encoderA) {
      return function(encoderB) {
        var obj = function(encoder) {
          return function(tag) {
            return function(x) {
              return Data_Argonaut_Core.fromObject(Foreign_Object.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple("tag", Data_Argonaut_Core.fromString(tag)), new Data_List_Types.Cons(new Data_Tuple.Tuple("value", encoder(x)), Data_List_Types.Nil.value))));
            };
          };
        };
        return Data_Either.either(obj(encoderA)("Left"))(obj(encoderB)("Right"));
      };
    };
    var encodeCodePoint = function($51) {
      return encodeString(Data_String_CodePoints.singleton($51));
    };
    var encodeChar = function($52) {
      return encodeString(Data_String_CodeUnits.singleton($52));
    };
    var encodeBoolean = Data_Argonaut_Core.fromBoolean;
    var encodeArray = function(encoder) {
      var $53 = Data_Functor.map(Data_Functor.functorArray)(encoder);
      return function($54) {
        return Data_Argonaut_Core.fromArray($53($54));
      };
    };
    var encodeNonEmptyArray = function(encoder) {
      var $55 = encodeArray(encoder);
      return function($56) {
        return $55(Data_Array_NonEmpty.toArray($56));
      };
    };
    var encodeNonEmpty_Array = function(encoder) {
      return function(v) {
        return encodeArray(encoder)(Data_Array.cons(v.value0)(v.value1));
      };
    };
    var assocOptional = function(encoder) {
      return function(k) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function() {
          var $57 = Data_Tuple.Tuple.create(k);
          return function($58) {
            return $57(encoder($58));
          };
        }());
      };
    };
    var assoc = function(encoder) {
      return function(k) {
        var $59 = Data_Tuple.Tuple.create(k);
        return function($60) {
          return $59(encoder($60));
        };
      };
    };
    module2.exports = {
      encodeIdentity,
      encodeMaybe,
      encodeTuple,
      encodeEither,
      encodeUnit,
      encodeBoolean,
      encodeNumber,
      encodeInt,
      encodeString,
      encodeCodePoint,
      encodeNonEmptyString,
      encodeNonEmpty_Array,
      encodeNonEmptyArray,
      encodeNonEmpty_List,
      encodeNonEmptyList,
      encodeChar,
      encodeArray,
      encodeList,
      encodeForeignObject,
      encodeSet,
      encodeMap,
      encodeVoid,
      assoc,
      assocOptional,
      extend,
      extendOptional
    };
  }
});

// output/Data.Argonaut.Encode.Class/index.js
var require_Data_Argonaut_Encode2 = __commonJS({
  "output/Data.Argonaut.Encode.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Argonaut_Core = require_Data_Argonaut();
    var Data_Argonaut_Encode_Encoders = require_Data_Argonaut_Encode();
    var Data_Symbol = require_Data5();
    var Foreign_Object = require_Foreign3();
    var Record = require_Record2();
    var Type_Proxy = require_Type();
    var gEncodeJsonNil = {
      gEncodeJson: function(v) {
        return function(v1) {
          return Foreign_Object.empty;
        };
      }
    };
    var gEncodeJson = function(dict) {
      return dict.gEncodeJson;
    };
    var encodeVoid = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeVoid
    };
    var encodeRecord = function(dictGEncodeJson) {
      return function(dictRowToList) {
        return {
          encodeJson: function(rec) {
            return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Proxy["Proxy"].value));
          }
        };
      };
    };
    var encodeNonEmptyString = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeNonEmptyString
    };
    var encodeJsonUnit = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeUnit
    };
    var encodeJsonJson = {
      encodeJson: Control_Category.identity(Control_Category.categoryFn)
    };
    var encodeJsonJString = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeString
    };
    var encodeJsonJNumber = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeNumber
    };
    var encodeJsonJBoolean = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeBoolean
    };
    var encodeJsonInt = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeInt
    };
    var encodeJsonCodePoint = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeCodePoint
    };
    var encodeJsonChar = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeChar
    };
    var encodeJson = function(dict) {
      return dict.encodeJson;
    };
    var encodeJsonArray = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeArray(encodeJson(dictEncodeJson))
      };
    };
    var encodeJsonEither = function(dictEncodeJson) {
      return function(dictEncodeJson1) {
        return {
          encodeJson: Data_Argonaut_Encode_Encoders.encodeEither(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1))
        };
      };
    };
    var encodeJsonList = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeList(encodeJson(dictEncodeJson))
      };
    };
    var encodeJsonMaybe = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeMaybe(encodeJson(dictEncodeJson))
      };
    };
    var encodeJsonNonEmptyArray = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeNonEmptyArray(encodeJson(dictEncodeJson))
      };
    };
    var encodeJsonNonEmptyList = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeNonEmptyList(encodeJson(dictEncodeJson))
      };
    };
    var encodeJsonNonEmpty_Array = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeNonEmpty_Array(encodeJson(dictEncodeJson))
      };
    };
    var encodeJsonNonEmpty_List = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeNonEmpty_List(encodeJson(dictEncodeJson))
      };
    };
    var encodeJsonTuple = function(dictEncodeJson) {
      return function(dictEncodeJson1) {
        return {
          encodeJson: Data_Argonaut_Encode_Encoders.encodeTuple(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1))
        };
      };
    };
    var encodeMap = function(dictOrd) {
      return function(dictEncodeJson) {
        return function(dictEncodeJson1) {
          return {
            encodeJson: Data_Argonaut_Encode_Encoders.encodeMap(dictOrd)(encodeJson(dictEncodeJson))(encodeJson(dictEncodeJson1))
          };
        };
      };
    };
    var encodeSet = function(dictOrd) {
      return function(dictEncodeJson) {
        return {
          encodeJson: Data_Argonaut_Encode_Encoders.encodeSet(dictOrd)(encodeJson(dictEncodeJson))
        };
      };
    };
    var gEncodeJsonCons = function(dictEncodeJson) {
      return function(dictGEncodeJson) {
        return function(dictIsSymbol) {
          return function(dictCons) {
            return {
              gEncodeJson: function(row) {
                return function(v) {
                  return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Proxy["Proxy"].value));
                };
              }
            };
          };
        };
      };
    };
    var encodeIdentity = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeIdentity(encodeJson(dictEncodeJson))
      };
    };
    var encodeForeignObject = function(dictEncodeJson) {
      return {
        encodeJson: Data_Argonaut_Encode_Encoders.encodeForeignObject(encodeJson(dictEncodeJson))
      };
    };
    module2.exports = {
      encodeJson,
      gEncodeJson,
      encodeIdentity,
      encodeJsonMaybe,
      encodeJsonTuple,
      encodeJsonEither,
      encodeJsonUnit,
      encodeJsonJBoolean,
      encodeJsonJNumber,
      encodeJsonInt,
      encodeJsonJString,
      encodeJsonJson,
      encodeJsonCodePoint,
      encodeNonEmptyString,
      encodeJsonNonEmpty_Array,
      encodeJsonNonEmptyArray,
      encodeJsonNonEmpty_List,
      encodeJsonNonEmptyList,
      encodeJsonChar,
      encodeJsonArray,
      encodeJsonList,
      encodeForeignObject,
      encodeSet,
      encodeMap,
      encodeVoid,
      encodeRecord,
      gEncodeJsonNil,
      gEncodeJsonCons
    };
  }
});

// output/Data.Argonaut.Decode.Combinators/index.js
var require_Data_Argonaut_Decode4 = __commonJS({
  "output/Data.Argonaut.Decode.Combinators/index.js"(exports2, module2) {
    "use strict";
    var Data_Argonaut_Decode_Class = require_Data_Argonaut_Decode3();
    var Data_Argonaut_Decode_Decoders = require_Data_Argonaut_Decode2();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var getFieldOptional$prime = function(dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders["getFieldOptional'"](Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
    };
    var getFieldOptional = function(dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getFieldOptional(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
    };
    var getField = function(dictDecodeJson) {
      return Data_Argonaut_Decode_Decoders.getField(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson));
    };
    var defaultField = function(parser) {
      return function($$default) {
        return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe($$default))(parser);
      };
    };
    module2.exports = {
      getField,
      getFieldOptional,
      "getFieldOptional'": getFieldOptional$prime,
      defaultField
    };
  }
});

// output/Data.Argonaut.Parser/foreign.js
var require_foreign76 = __commonJS({
  "output/Data.Argonaut.Parser/foreign.js"(exports2) {
    "use strict";
    exports2._jsonParser = function(fail, succ, s) {
      try {
        return succ(JSON.parse(s));
      } catch (e) {
        return fail(e.message);
      }
    };
  }
});

// output/Data.Argonaut.Parser/index.js
var require_Data_Argonaut2 = __commonJS({
  "output/Data.Argonaut.Parser/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign76();
    var Data_Either = require_Data16();
    var jsonParser = function(j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
    };
    module2.exports = {
      jsonParser
    };
  }
});

// output/Data.Argonaut.Decode.Parser/index.js
var require_Data_Argonaut_Decode5 = __commonJS({
  "output/Data.Argonaut.Decode.Parser/index.js"(exports2, module2) {
    "use strict";
    var Data_Argonaut_Decode_Error = require_Data_Argonaut_Decode();
    var Data_Argonaut_Parser = require_Data_Argonaut2();
    var Data_Bifunctor = require_Data24();
    var parseJson = function() {
      var $1 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function(v) {
        return new Data_Argonaut_Decode_Error.TypeMismatch("JSON");
      });
      return function($2) {
        return $1(Data_Argonaut_Parser.jsonParser($2));
      };
    }();
    module2.exports = {
      parseJson
    };
  }
});

// output/Data.Argonaut.Encode.Combinators/index.js
var require_Data_Argonaut_Encode3 = __commonJS({
  "output/Data.Argonaut.Encode.Combinators/index.js"(exports2, module2) {
    "use strict";
    var Data_Argonaut_Encode_Class = require_Data_Argonaut_Encode2();
    var Data_Argonaut_Encode_Encoders = require_Data_Argonaut_Encode();
    var extendOptional = function(dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.extendOptional(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
    };
    var extend = function(dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.extend(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
    };
    var assocOptional = function(dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.assocOptional(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
    };
    var assoc = function(dictEncodeJson) {
      return Data_Argonaut_Encode_Encoders.assoc(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
    };
    module2.exports = {
      assoc,
      assocOptional,
      extend,
      extendOptional
    };
  }
});

// output/PscIde.Command/index.js
var require_PscIde = __commonJS({
  "output/PscIde.Command/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Data_Argonaut_Core = require_Data_Argonaut();
    var Data_Argonaut_Decode_Class = require_Data_Argonaut_Decode3();
    var Data_Argonaut_Decode_Combinators = require_Data_Argonaut_Decode4();
    var Data_Argonaut_Decode_Error = require_Data_Argonaut_Decode();
    var Data_Argonaut_Decode_Parser = require_Data_Argonaut_Decode5();
    var Data_Argonaut_Encode_Class = require_Data_Argonaut_Encode2();
    var Data_Argonaut_Encode_Combinators = require_Data_Argonaut_Encode3();
    var Data_Array = require_Data39();
    var Data_Bifunctor = require_Data24();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Show = require_Data14();
    var Data_String_Common = require_Data_String4();
    var Package = function() {
      function Package2() {
      }
      ;
      Package2.value = new Package2();
      return Package2;
    }();
    var Ident = function() {
      function Ident2() {
      }
      ;
      Ident2.value = new Ident2();
      return Ident2;
    }();
    var PursuitCompletion = function(x) {
      return x;
    };
    var PscSuggestion = function(x) {
      return x;
    };
    var TypePosition = function(x) {
      return x;
    };
    var NSValue = function() {
      function NSValue2() {
      }
      ;
      NSValue2.value = new NSValue2();
      return NSValue2;
    }();
    var NSType = function() {
      function NSType2() {
      }
      ;
      NSType2.value = new NSType2();
      return NSType2;
    }();
    var NSKind = function() {
      function NSKind2() {
      }
      ;
      NSKind2.value = new NSKind2();
      return NSKind2;
    }();
    var ModuleList = function(x) {
      return x;
    };
    var Message = function(x) {
      return x;
    };
    var Flex = function() {
      function Flex2(value0) {
        this.value0 = value0;
      }
      ;
      Flex2.create = function(value0) {
        return new Flex2(value0);
      };
      return Flex2;
    }();
    var Distance = function() {
      function Distance2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Distance2.create = function(value0) {
        return function(value1) {
          return new Distance2(value0, value1);
        };
      };
      return Distance2;
    }();
    var LoadedModules = function() {
      function LoadedModules2() {
      }
      ;
      LoadedModules2.value = new LoadedModules2();
      return LoadedModules2;
    }();
    var Imports = function() {
      function Imports2(value0) {
        this.value0 = value0;
      }
      ;
      Imports2.create = function(value0) {
        return new Imports2(value0);
      };
      return Imports2;
    }();
    var AvailableModules = function() {
      function AvailableModules2() {
      }
      ;
      AvailableModules2.value = new AvailableModules2();
      return AvailableModules2;
    }();
    var Implicit = function() {
      function Implicit2() {
      }
      ;
      Implicit2.value = new Implicit2();
      return Implicit2;
    }();
    var Explicit = function() {
      function Explicit2(value0) {
        this.value0 = value0;
      }
      ;
      Explicit2.create = function(value0) {
        return new Explicit2(value0);
      };
      return Explicit2;
    }();
    var Hiding = function() {
      function Hiding2(value0) {
        this.value0 = value0;
      }
      ;
      Hiding2.create = function(value0) {
        return new Hiding2(value0);
      };
      return Hiding2;
    }();
    var AddImplicitImport = function() {
      function AddImplicitImport2(value0) {
        this.value0 = value0;
      }
      ;
      AddImplicitImport2.create = function(value0) {
        return new AddImplicitImport2(value0);
      };
      return AddImplicitImport2;
    }();
    var AddQualifiedImport = function() {
      function AddQualifiedImport2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      AddQualifiedImport2.create = function(value0) {
        return function(value1) {
          return new AddQualifiedImport2(value0, value1);
        };
      };
      return AddQualifiedImport2;
    }();
    var AddImport = function() {
      function AddImport2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      AddImport2.create = function(value0) {
        return function(value1) {
          return new AddImport2(value0, value1);
        };
      };
      return AddImport2;
    }();
    var Import = function(x) {
      return x;
    };
    var ImportList = function(x) {
      return x;
    };
    var DeclValue = function() {
      function DeclValue2() {
      }
      ;
      DeclValue2.value = new DeclValue2();
      return DeclValue2;
    }();
    var DeclType = function() {
      function DeclType2() {
      }
      ;
      DeclType2.value = new DeclType2();
      return DeclType2;
    }();
    var DeclTypeSynonym = function() {
      function DeclTypeSynonym2() {
      }
      ;
      DeclTypeSynonym2.value = new DeclTypeSynonym2();
      return DeclTypeSynonym2;
    }();
    var DeclDataConstructor = function() {
      function DeclDataConstructor2() {
      }
      ;
      DeclDataConstructor2.value = new DeclDataConstructor2();
      return DeclDataConstructor2;
    }();
    var DeclTypeClass = function() {
      function DeclTypeClass2() {
      }
      ;
      DeclTypeClass2.value = new DeclTypeClass2();
      return DeclTypeClass2;
    }();
    var DeclValueOperator = function() {
      function DeclValueOperator2() {
      }
      ;
      DeclValueOperator2.value = new DeclValueOperator2();
      return DeclValueOperator2;
    }();
    var DeclTypeOperator = function() {
      function DeclTypeOperator2() {
      }
      ;
      DeclTypeOperator2.value = new DeclTypeOperator2();
      return DeclTypeOperator2;
    }();
    var DeclModule = function() {
      function DeclModule2() {
      }
      ;
      DeclModule2.value = new DeclModule2();
      return DeclModule2;
    }();
    var ExactFilter = function() {
      function ExactFilter2(value0) {
        this.value0 = value0;
      }
      ;
      ExactFilter2.create = function(value0) {
        return new ExactFilter2(value0);
      };
      return ExactFilter2;
    }();
    var PrefixFilter = function() {
      function PrefixFilter2(value0) {
        this.value0 = value0;
      }
      ;
      PrefixFilter2.create = function(value0) {
        return new PrefixFilter2(value0);
      };
      return PrefixFilter2;
    }();
    var ModuleFilter = function() {
      function ModuleFilter2(value0) {
        this.value0 = value0;
      }
      ;
      ModuleFilter2.create = function(value0) {
        return new ModuleFilter2(value0);
      };
      return ModuleFilter2;
    }();
    var DependencyFilter = function() {
      function DependencyFilter2(value0) {
        this.value0 = value0;
      }
      ;
      DependencyFilter2.create = function(value0) {
        return new DependencyFilter2(value0);
      };
      return DependencyFilter2;
    }();
    var NamespaceFilter = function() {
      function NamespaceFilter2(value0) {
        this.value0 = value0;
      }
      ;
      NamespaceFilter2.create = function(value0) {
        return new NamespaceFilter2(value0);
      };
      return NamespaceFilter2;
    }();
    var DeclarationFilter = function() {
      function DeclarationFilter2(value0) {
        this.value0 = value0;
      }
      ;
      DeclarationFilter2.create = function(value0) {
        return new DeclarationFilter2(value0);
      };
      return DeclarationFilter2;
    }();
    var TypeInfo = function(x) {
      return x;
    };
    var SuccessFile = function() {
      function SuccessFile2(value0) {
        this.value0 = value0;
      }
      ;
      SuccessFile2.create = function(value0) {
        return new SuccessFile2(value0);
      };
      return SuccessFile2;
    }();
    var SuccessText = function() {
      function SuccessText2(value0) {
        this.value0 = value0;
      }
      ;
      SuccessText2.create = function(value0) {
        return new SuccessText2(value0);
      };
      return SuccessText2;
    }();
    var MultipleResults = function() {
      function MultipleResults2(value0) {
        this.value0 = value0;
      }
      ;
      MultipleResults2.create = function(value0) {
        return new MultipleResults2(value0);
      };
      return MultipleResults2;
    }();
    var PursIdeInfo = function(x) {
      return x;
    };
    var RebuildError = function(x) {
      return x;
    };
    var RebuildResult = function(x) {
      return x;
    };
    var CompletionOptions = function(x) {
      return x;
    };
    var JS = function() {
      function JS2() {
      }
      ;
      JS2.value = new JS2();
      return JS2;
    }();
    var JSSourceMap = function() {
      function JSSourceMap2() {
      }
      ;
      JSSourceMap2.value = new JSSourceMap2();
      return JSSourceMap2;
    }();
    var CoreFn = function() {
      function CoreFn2() {
      }
      ;
      CoreFn2.value = new CoreFn2();
      return CoreFn2;
    }();
    var Other = function() {
      function Other2(value0) {
        this.value0 = value0;
      }
      ;
      Other2.create = function(value0) {
        return new Other2(value0);
      };
      return Other2;
    }();
    var Cwd = function() {
      function Cwd2() {
      }
      ;
      Cwd2.value = new Cwd2();
      return Cwd2;
    }();
    var Ls = function() {
      function Ls2(value0) {
        this.value0 = value0;
      }
      ;
      Ls2.create = function(value0) {
        return new Ls2(value0);
      };
      return Ls2;
    }();
    var Quit = function() {
      function Quit2() {
      }
      ;
      Quit2.value = new Quit2();
      return Quit2;
    }();
    var Reset = function() {
      function Reset2() {
      }
      ;
      Reset2.value = new Reset2();
      return Reset2;
    }();
    var Load = function() {
      function Load2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Load2.create = function(value0) {
        return function(value1) {
          return new Load2(value0, value1);
        };
      };
      return Load2;
    }();
    var Complete = function() {
      function Complete2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      Complete2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new Complete2(value0, value1, value2, value3);
            };
          };
        };
      };
      return Complete2;
    }();
    var Pursuit = function() {
      function Pursuit2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Pursuit2.create = function(value0) {
        return function(value1) {
          return new Pursuit2(value0, value1);
        };
      };
      return Pursuit2;
    }();
    var Type = function() {
      function Type2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      Type2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new Type2(value0, value1, value2);
          };
        };
      };
      return Type2;
    }();
    var AddClause = function() {
      function AddClause2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      AddClause2.create = function(value0) {
        return function(value1) {
          return new AddClause2(value0, value1);
        };
      };
      return AddClause2;
    }();
    var CaseSplit = function() {
      function CaseSplit2(value0, value1, value2, value3, value4) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
      }
      ;
      CaseSplit2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return function(value4) {
                return new CaseSplit2(value0, value1, value2, value3, value4);
              };
            };
          };
        };
      };
      return CaseSplit2;
    }();
    var ImportCmd = function() {
      function ImportCmd2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      ImportCmd2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new ImportCmd2(value0, value1, value2, value3);
            };
          };
        };
      };
      return ImportCmd2;
    }();
    var RebuildCmd = function() {
      function RebuildCmd2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      RebuildCmd2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new RebuildCmd2(value0, value1, value2);
          };
        };
      };
      return RebuildCmd2;
    }();
    var Usages = function() {
      function Usages2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      Usages2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new Usages2(value0, value1, value2);
          };
        };
      };
      return Usages2;
    }();
    var unwrapResponse = function(dictDecodeJson) {
      return function(dictDecodeJson1) {
        return function(s) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.printJsonDecodeError)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Parser.parseJson(s))(function(json) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("resultType"))(function(resultType) {
                if (resultType === "success") {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson1)(o)("result"))(function(result) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Either.Right(result));
                  });
                }
                ;
                return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson)(o)("result"))(function(result) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Either.Left(result));
                });
              });
            });
          }));
        };
      };
    };
    var showPursuitType = {
      show: function(v) {
        if (v instanceof Package) {
          return "package";
        }
        ;
        if (v instanceof Ident) {
          return "completion";
        }
        ;
        throw new Error("Failed pattern match at PscIde.Command (line 19, column 1 - line 21, column 30): " + [v.constructor.name]);
      }
    };
    var jsonSingletonObject$prime = function(dictEncodeJson) {
      return function(s) {
        return function(o) {
          return Data_Argonaut_Core.jsonSingletonObject(s)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(o));
        };
      };
    };
    var filterWrapper = function(dictEncodeJson) {
      return function(f) {
        return function(q) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("filter")(f))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(dictEncodeJson)("params")(q))(Data_Argonaut_Core.jsonEmptyObject));
        };
      };
    };
    var encodePursuitType = {
      encodeJson: function() {
        var $92 = Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString);
        var $93 = Data_Show.show(showPursuitType);
        return function($94) {
          return $92($93($94));
        };
      }()
    };
    var encodeNamespace = {
      encodeJson: function(v) {
        if (v instanceof NSValue) {
          return Data_Argonaut_Core.fromString("value");
        }
        ;
        if (v instanceof NSType) {
          return Data_Argonaut_Core.fromString("type");
        }
        ;
        if (v instanceof NSKind) {
          return Data_Argonaut_Core.fromString("kind");
        }
        ;
        throw new Error("Failed pattern match at PscIde.Command (line 241, column 1 - line 244, column 40): " + [v.constructor.name]);
      }
    };
    var encodeMaybeNull = function(dictEncodeJson) {
      return Data_Maybe.maybe(Data_Argonaut_Core.jsonNull)(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson));
    };
    var encodeMatcher = {
      encodeJson: function(v) {
        if (v instanceof Flex) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("matcher")("flex"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("params")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0)))(Data_Argonaut_Core.jsonEmptyObject));
        }
        ;
        if (v instanceof Distance) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("matcher")("distance"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("params")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonInt)("maximumDistance")(v.value1))(Data_Argonaut_Core.jsonEmptyObject))))(Data_Argonaut_Core.jsonEmptyObject));
        }
        ;
        throw new Error("Failed pattern match at PscIde.Command (line 30, column 1 - line 42, column 23): " + [v.constructor.name]);
      }
    };
    var encodeImportCommand = {
      encodeJson: function(v) {
        if (v instanceof AddImplicitImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addImplicitImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Core.jsonEmptyObject));
        }
        ;
        if (v instanceof AddQualifiedImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addQualifiedImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("qualifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
        }
        ;
        if (v instanceof AddImport) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("importCommand")("addImport"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("identifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("qualifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
        }
        ;
        throw new Error("Failed pattern match at PscIde.Command (line 225, column 1 - line 239, column 23): " + [v.constructor.name]);
      }
    };
    var encodeCompletionOptions = {
      encodeJson: function(v) {
        return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("maxResults")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonInt)(v.maxResults)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("groupReexports")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.groupReexports)))(Data_Argonaut_Core.jsonEmptyObject));
      }
    };
    var encodeCodegenTarget = {
      encodeJson: function(v) {
        if (v instanceof JS) {
          return Data_Argonaut_Core.fromString("js");
        }
        ;
        if (v instanceof JSSourceMap) {
          return Data_Argonaut_Core.fromString("sourcemaps");
        }
        ;
        if (v instanceof CoreFn) {
          return Data_Argonaut_Core.fromString("corefn");
        }
        ;
        if (v instanceof Other) {
          return Data_Argonaut_Core.fromString(v.value0);
        }
        ;
        throw new Error("Failed pattern match at PscIde.Command (line 246, column 1 - line 250, column 38): " + [v.constructor.name]);
      }
    };
    var decodeTypePosition = {
      decodeJson: function(json) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("name"))(function(name) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonInt))(o)("start"))(function(start) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonInt))(o)("end"))(function(end) {
                if (start.length === 2 && end.length === 2) {
                  return new Data_Either.Right({
                    name,
                    start: {
                      line: start[0],
                      column: start[1]
                    },
                    end: {
                      line: end[0],
                      column: end[1]
                    }
                  });
                }
                ;
                return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
              });
            });
          });
        });
      }
    };
    var decodePursuitCompletion = {
      decodeJson: function(json) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("ident"))(function(identifier) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonString))(o)("type"))(function(type$prime) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("module"))(function(module$prime) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("package"))(function($$package) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("text"))(function(text) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)({
                      identifier,
                      "type'": type$prime,
                      "module'": module$prime,
                      "package": $$package,
                      text
                    });
                  });
                });
              });
            });
          });
        });
      }
    };
    var decodeModuleList = {
      decodeJson: function(json) {
        return Data_Functor.map(Data_Either.functorEither)(ModuleList)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(json));
      }
    };
    var decodeMessage = {
      decodeJson: function(json) {
        return Data_Maybe.maybe(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(function($95) {
          return Data_Either.Right.create(Message($95));
        })(Data_Argonaut_Core.toString(json));
      }
    };
    var decodeImport = {
      decodeJson: function(json) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("module"))(function(moduleName) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("importType"))(function(importType) {
              return Control_Bind.bind(Data_Either.bindEither)(Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("qualifier")))(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value)))(function(q) {
                if (importType === "implicit") {
                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                    moduleName,
                    importType: Implicit.value,
                    qualifier: q
                  });
                }
                ;
                if (importType === "explicit") {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(o)("identifiers"))(function(identifiers) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)({
                      moduleName,
                      importType: new Explicit(identifiers),
                      qualifier: q
                    });
                  });
                }
                ;
                if (importType === "hiding") {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(o)("identifiers"))(function(identifiers) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)({
                      moduleName,
                      importType: new Hiding(identifiers),
                      qualifier: q
                    });
                  });
                }
                ;
                return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("ImportType"));
              });
            });
          });
        });
      }
    };
    var decodeImportList = {
      decodeJson: function(json) {
        var decodeModuleNameBug = function(moduleName) {
          return Data_Functor.map(Data_Either.functorEither)(Data_String_Common.joinWith("."))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(moduleName));
        };
        var decodeObject = Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(o)("moduleName"))(function(moduleNameField) {
            return Control_Bind.bind(Data_Either.bindEither)(Control_Alt.alt(Data_Either.altEither)(decodeModuleNameBug(moduleNameField))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(moduleNameField)))(function(moduleName) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(decodeImport))(o)("imports"))(function(imports) {
                return Control_Applicative.pure(Data_Either.applicativeEither)({
                  moduleName: new Data_Maybe.Just(moduleName),
                  imports
                });
              });
            });
          });
        });
        var decodeArray = Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(decodeImport))(json))(function(imports) {
          return Control_Applicative.pure(Data_Either.applicativeEither)({
            moduleName: Data_Maybe.Nothing.value,
            imports
          });
        });
        return Control_Alt.alt(Data_Either.altEither)(decodeObject)(decodeArray);
      }
    };
    var declarationTypeToString = function(v) {
      if (v instanceof DeclValue) {
        return "value";
      }
      ;
      if (v instanceof DeclType) {
        return "type";
      }
      ;
      if (v instanceof DeclTypeSynonym) {
        return "synonym";
      }
      ;
      if (v instanceof DeclDataConstructor) {
        return "dataconstructor";
      }
      ;
      if (v instanceof DeclTypeClass) {
        return "typeclass";
      }
      ;
      if (v instanceof DeclValueOperator) {
        return "valueoperator";
      }
      ;
      if (v instanceof DeclTypeOperator) {
        return "typeoperator";
      }
      ;
      if (v instanceof DeclModule) {
        return "module";
      }
      ;
      throw new Error("Failed pattern match at PscIde.Command (line 131, column 27 - line 139, column 25): " + [v.constructor.name]);
    };
    var encodeFilter = {
      encodeJson: function(v) {
        if (v instanceof ExactFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("exact")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0));
        }
        ;
        if (v instanceof PrefixFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("prefix")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("search")(v.value0));
        }
        ;
        if (v instanceof ModuleFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("modules")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))("modules")(v.value0));
        }
        ;
        if (v instanceof DependencyFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("dependencies")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))("modules")(v.value0));
        }
        ;
        if (v instanceof NamespaceFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("namespace")(jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonArray(encodeNamespace))("namespaces")(v.value0));
        }
        ;
        if (v instanceof DeclarationFilter) {
          return filterWrapper(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))("declarations")(Data_Functor.map(Data_Functor.functorArray)(declarationTypeToString)(v.value0));
        }
        ;
        throw new Error("Failed pattern match at PscIde.Command (line 61, column 1 - line 73, column 69): " + [v.constructor.name]);
      }
    };
    var declarationTypeFromString = function(v) {
      if (v === "value") {
        return new Data_Maybe.Just(DeclValue.value);
      }
      ;
      if (v === "type") {
        return new Data_Maybe.Just(DeclType.value);
      }
      ;
      if (v === "synonym") {
        return new Data_Maybe.Just(DeclTypeSynonym.value);
      }
      ;
      if (v === "dataconstructor") {
        return new Data_Maybe.Just(DeclDataConstructor.value);
      }
      ;
      if (v === "typeclass") {
        return new Data_Maybe.Just(DeclTypeClass.value);
      }
      ;
      if (v === "valueoperator") {
        return new Data_Maybe.Just(DeclValueOperator.value);
      }
      ;
      if (v === "typeoperator") {
        return new Data_Maybe.Just(DeclTypeOperator.value);
      }
      ;
      if (v === "module") {
        return new Data_Maybe.Just(DeclModule.value);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var decodeTypeInfo = {
      decodeJson: function(json) {
        var getFieldMaybe = function(dictDecodeJson) {
          return function(o) {
            return function(f) {
              return Data_Either.Right.create(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Argonaut_Decode_Combinators.getField(dictDecodeJson)(o)(f)));
            };
          };
        };
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("identifier"))(function(identifier) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("type"))(function(type$prime) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("module"))(function(module$prime) {
                return Control_Bind.bind(Data_Either.bindEither)(getFieldMaybe(decodeTypePosition)(o)("definedAt"))(function(definedAt) {
                  return Control_Bind.bind(Data_Either.bindEither)(getFieldMaybe(Data_Argonaut_Decode_Class.decodeJsonString)(o)("expandedType"))(function(expandedType) {
                    return Control_Bind.bind(Data_Either.bindEither)(getFieldMaybe(Data_Argonaut_Decode_Class.decodeJsonString)(o)("documentation"))(function(documentation) {
                      return Control_Bind.bind(Data_Either.bindEither)(getFieldMaybe(Data_Argonaut_Decode_Class.decodeJsonString)(o)("declarationType"))(function(declarationTypeStr) {
                        return Control_Bind.bind(Data_Either.bindEither)(Data_Either.Right.create(Data_Either.either(Data_Function["const"]([]))(Control_Category.identity(Control_Category.categoryFn))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(o)("exportedFrom"))))(function(exportedFrom) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                            identifier,
                            "type'": type$prime,
                            "module'": module$prime,
                            definedAt,
                            expandedType,
                            documentation,
                            exportedFrom,
                            declarationType: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(declarationTypeFromString)(declarationTypeStr)
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      }
    };
    var decodeImportResult = {
      decodeJson: function(json) {
        return Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(SuccessText.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(json)))(Data_Functor.map(Data_Either.functorEither)(SuccessFile.create)(Data_Argonaut_Decode_Class.decodeJson(decodeMessage)(json))))(Data_Functor.map(Data_Either.functorEither)(MultipleResults.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(decodeTypeInfo))(json))))(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("ImportResult")));
      }
    };
    var decodeRebuildError = {
      decodeJson: function(json) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("message"))(function(message) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("errorCode"))(function(errorCode) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("errorLink"))(function(errorLink) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonString))(o)("moduleName"))(function(moduleName) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonString))(o)("filename"))(function(filename) {
                    return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.hush(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(o)("position"))(function(p) {
                      return Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function(v) {
                        return function(v1) {
                          return function(v2) {
                            return function(v3) {
                              return {
                                startLine: v,
                                startColumn: v1,
                                endLine: v2,
                                endColumn: v3
                              };
                            };
                          };
                        };
                      })(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(p)("startLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(p)("startColumn")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(p)("endLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(p)("endColumn"));
                    }))))(function(position) {
                      return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.hush(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(o)("pursIde"))(function(pio) {
                        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(pio)("name"))(function(name) {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(decodeTypeInfo))(pio)("completions"))(function(completions) {
                            return Control_Applicative.pure(Data_Either.applicativeEither)({
                              name,
                              completions
                            });
                          });
                        });
                      }))))(function(pursIde) {
                        return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.hush(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(o)("suggestion"))(function(so) {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(so)("replacement"))(function(replacement) {
                            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(so)("replaceRange"))(function(rr) {
                              return Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.hush(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function(v) {
                                return function(v1) {
                                  return function(v2) {
                                    return function(v3) {
                                      return {
                                        startLine: v,
                                        startColumn: v1,
                                        endLine: v2,
                                        endColumn: v3
                                      };
                                    };
                                  };
                                };
                              })(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(rr)("startLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(rr)("startColumn")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(rr)("endLine")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonInt)(rr)("endColumn")))))(function(replaceRange) {
                                return Control_Applicative.pure(Data_Either.applicativeEither)({
                                  replacement,
                                  replaceRange
                                });
                              });
                            });
                          });
                        }))))(function(suggestion) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                            errorCode,
                            errorLink,
                            moduleName,
                            filename,
                            message,
                            position,
                            pursIde,
                            suggestion
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      }
    };
    var decodeRebuildResult = {
      decodeJson: function(json) {
        return Data_Functor.map(Data_Either.functorEither)(RebuildResult)(Control_Alt.alt(Data_Either.altEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(decodeRebuildError))(json))(Data_Functor.map(Data_Either.functorEither)(Data_Array.singleton)(Data_Argonaut_Decode_Class.decodeJson(decodeRebuildError)(json))));
      }
    };
    var commandWrapper = function(dictEncodeJson) {
      return function(s) {
        return function(o) {
          return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("command")(s))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(dictEncodeJson)("params")(o))(Data_Argonaut_Core.jsonEmptyObject));
        };
      };
    };
    var encodeCommand = {
      encodeJson: function(v) {
        if (v instanceof Cwd) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("cwd");
        }
        ;
        if (v instanceof Ls && v.value0 instanceof LoadedModules) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("loadedModules"))(Data_Argonaut_Core.jsonEmptyObject));
        }
        ;
        if (v instanceof Ls && v.value0 instanceof AvailableModules) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("availableModules"))(Data_Argonaut_Core.jsonEmptyObject));
        }
        ;
        if (v instanceof Ls && v.value0 instanceof Imports) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("list")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("type")("import"))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("file")(v.value0.value0))(Data_Argonaut_Core.jsonEmptyObject)));
        }
        ;
        if (v instanceof Quit) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("quit");
        }
        ;
        if (v instanceof Reset) {
          return jsonSingletonObject$prime(Data_Argonaut_Encode_Class.encodeJsonJString)("command")("reset");
        }
        ;
        if (v instanceof Load) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("load")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("modules")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("dependencies")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJString))(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
        }
        ;
        if (v instanceof Complete) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("complete")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("matcher")(encodeMaybeNull(encodeMatcher)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("currentModule")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("options")(Data_Argonaut_Encode_Class.encodeJson(encodeCompletionOptions)(v.value3)))(Data_Argonaut_Core.jsonEmptyObject)))));
        }
        ;
        if (v instanceof Pursuit) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("pursuit")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Class.encodeJson(encodePursuitType)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJString)("query")(v.value1))(Data_Argonaut_Core.jsonEmptyObject)));
        }
        ;
        if (v instanceof Type) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("search")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("currentModule")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
        }
        ;
        if (v instanceof AddClause) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("addClause")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("line")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("annotations")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.value1)))(Data_Argonaut_Core.jsonEmptyObject)));
        }
        ;
        if (v instanceof CaseSplit) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("caseSplit")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("line")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("begin")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("end")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("annotations")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.value3)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("type")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value4)))(Data_Argonaut_Core.jsonEmptyObject))))));
        }
        ;
        if (v instanceof ImportCmd) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("import")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("file")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("outfile")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("filters")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(encodeFilter))(v.value2)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("importCommand")(Data_Argonaut_Encode_Class.encodeJson(encodeImportCommand)(v.value3)))(Data_Argonaut_Core.jsonEmptyObject)))));
        }
        ;
        if (v instanceof RebuildCmd) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("rebuild")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("file")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("actualFile")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("codegen")(encodeMaybeNull(Data_Argonaut_Encode_Class.encodeJsonArray(encodeCodegenTarget))(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
        }
        ;
        if (v instanceof Usages) {
          return commandWrapper(Data_Argonaut_Encode_Class.encodeJsonJson)("usages")(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("module")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("namespace")(Data_Argonaut_Encode_Class.encodeJson(encodeNamespace)(v.value1)))(Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Combinators.assoc(Data_Argonaut_Encode_Class.encodeJsonJson)("identifier")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value2)))(Data_Argonaut_Core.jsonEmptyObject))));
        }
        ;
        throw new Error("Failed pattern match at PscIde.Command (line 147, column 1 - line 220, column 6): " + [v.constructor.name]);
      }
    };
    module2.exports = {
      Package,
      Ident,
      Flex,
      Distance,
      ExactFilter,
      PrefixFilter,
      ModuleFilter,
      DependencyFilter,
      NamespaceFilter,
      DeclarationFilter,
      filterWrapper,
      "jsonSingletonObject'": jsonSingletonObject$prime,
      CompletionOptions,
      Cwd,
      Ls,
      Quit,
      Reset,
      Load,
      Complete,
      Pursuit,
      Type,
      AddClause,
      CaseSplit,
      ImportCmd,
      RebuildCmd,
      Usages,
      LoadedModules,
      Imports,
      AvailableModules,
      NSValue,
      NSType,
      NSKind,
      JS,
      JSSourceMap,
      CoreFn,
      Other,
      AddImplicitImport,
      AddQualifiedImport,
      AddImport,
      DeclValue,
      DeclType,
      DeclTypeSynonym,
      DeclDataConstructor,
      DeclTypeClass,
      DeclValueOperator,
      DeclTypeOperator,
      DeclModule,
      declarationTypeFromString,
      declarationTypeToString,
      commandWrapper,
      encodeMaybeNull,
      TypePosition,
      TypeInfo,
      PursuitCompletion,
      ModuleList,
      Message,
      ImportList,
      Import,
      RebuildError,
      PscSuggestion,
      RebuildResult,
      PursIdeInfo,
      Implicit,
      Explicit,
      Hiding,
      SuccessFile,
      SuccessText,
      MultipleResults,
      unwrapResponse,
      showPursuitType,
      encodePursuitType,
      encodeMatcher,
      encodeFilter,
      encodeCompletionOptions,
      encodeCommand,
      encodeImportCommand,
      encodeNamespace,
      encodeCodegenTarget,
      decodeMessage,
      decodeModuleList,
      decodeTypeInfo,
      decodeTypePosition,
      decodePursuitCompletion,
      decodeImportList,
      decodeImport,
      decodeImportResult,
      decodeRebuildError,
      decodeRebuildResult
    };
  }
});

// output/PscIde/index.js
var require_PscIde2 = __commonJS({
  "output/PscIde/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign72();
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Argonaut_Core = require_Data_Argonaut();
    var Data_Argonaut_Decode_Class = require_Data_Argonaut_Decode3();
    var Data_Argonaut_Encode_Class = require_Data_Argonaut_Encode2();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var PscIde_Command = require_PscIde();
    var sendCommandR = function(dictEncodeJson) {
      return function(dictDecodeJson) {
        return function(dictDecodeJson1) {
          return function(port) {
            return function(command) {
              return Effect_Aff.makeAff(function(cb) {
                return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.send(Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(command)))(port)(function() {
                  var $6 = PscIde_Command.unwrapResponse(dictDecodeJson)(dictDecodeJson1);
                  return function($7) {
                    return cb(Data_Either.Right.create($6($7)));
                  };
                }())(function($8) {
                  return cb(Data_Either.Left.create($8));
                }));
              });
            };
          };
        };
      };
    };
    var sendCommand = function(dictEncodeJson) {
      return function(dictDecodeJson) {
        return function(port) {
          return function(command) {
            return Effect_Aff.makeAff(function(cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)($foreign.send(Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(command)))(port)(function() {
                var $9 = Control_Bind.join(Data_Either.bindEither);
                var $10 = PscIde_Command.unwrapResponse(Data_Argonaut_Decode_Class.decodeJsonString)(dictDecodeJson);
                return function($11) {
                  return cb(Data_Either.Right.create($9($10($11))));
                };
              }())(function($12) {
                return cb(Data_Either.Left.create($12));
              }));
            });
          };
        };
      };
    };
    var type$prime = function(port) {
      return function(s) {
        return function(fs) {
          return function(mod) {
            return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeTypeInfo))(port)(new PscIde_Command.Type(s, fs, mod));
          };
        };
      };
    };
    var usages = function(port) {
      return function(file) {
        return function(ns) {
          return function(ident) {
            return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeTypePosition))(port)(new PscIde_Command.Usages(file, ns, ident));
          };
        };
      };
    };
    var reset = function(port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(PscIde_Command.Reset.value);
    };
    var rebuild = function(port) {
      return function(file) {
        return function(actualFile) {
          return function(targets) {
            return sendCommandR(PscIde_Command.encodeCommand)(PscIde_Command.decodeRebuildResult)(PscIde_Command.decodeRebuildResult)(port)(new PscIde_Command.RebuildCmd(file, actualFile, targets));
          };
        };
      };
    };
    var quit = function(port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(PscIde_Command.Quit.value);
    };
    var qualifiedImport = function(port) {
      return function(infile) {
        return function(outfile) {
          return function(mod) {
            return function(qualifier) {
              return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeImportResult)(port)(new PscIde_Command.ImportCmd(infile, outfile, [], new PscIde_Command.AddQualifiedImport(mod, qualifier)));
            };
          };
        };
      };
    };
    var pursuitCompletion = function(port) {
      return function(q) {
        return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodePursuitCompletion))(port)(new PscIde_Command.Pursuit(PscIde_Command.Ident.value, q));
      };
    };
    var load = function(port) {
      return function(ms) {
        return function(ds) {
          return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(new PscIde_Command.Load(ms, ds));
        };
      };
    };
    var listLoadedModules = function(port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeModuleList)(port)(new PscIde_Command.Ls(PscIde_Command.LoadedModules.value));
    };
    var listImports = function(port) {
      return function(fp) {
        return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeImportList)(port)(new PscIde_Command.Ls(new PscIde_Command.Imports(fp)));
      };
    };
    var listAvailableModules = function(port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeModuleList)(port)(new PscIde_Command.Ls(PscIde_Command.AvailableModules.value));
    };
    var implicitImport = function(port) {
      return function(infile) {
        return function(outfile) {
          return function(filters) {
            return function(mod) {
              return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeImportResult)(port)(new PscIde_Command.ImportCmd(infile, outfile, filters, new PscIde_Command.AddImplicitImport(mod)));
            };
          };
        };
      };
    };
    var explicitImport = function(port) {
      return function(infile) {
        return function(outfile) {
          return function(filters) {
            return function(ident) {
              return function(qualifier) {
                return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeImportResult)(port)(new PscIde_Command.ImportCmd(infile, outfile, filters, new PscIde_Command.AddImport(ident, qualifier)));
              };
            };
          };
        };
      };
    };
    var defaultCompletionOptions = {
      maxResults: Data_Maybe.Nothing.value,
      groupReexports: false
    };
    var cwd = function(port) {
      return sendCommand(PscIde_Command.encodeCommand)(PscIde_Command.decodeMessage)(port)(PscIde_Command.Cwd.value);
    };
    var complete = function(port) {
      return function(fs) {
        return function(m) {
          return function(mod) {
            return function(opts) {
              return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeTypeInfo))(port)(new PscIde_Command.Complete(fs, m, mod, opts));
            };
          };
        };
      };
    };
    var suggestTypos = function(port) {
      return function(q) {
        return function(m) {
          return function(mod) {
            return function(opts) {
              return Data_Functor.map(Effect_Aff.functorAff)(function(v) {
                return Control_Alt.alt(Data_Either.altEither)(v)(Control_Applicative.pure(Data_Either.applicativeEither)([]));
              })(complete(port)([])(new Data_Maybe.Just(new PscIde_Command.Distance(q, m)))(mod)(opts));
            };
          };
        };
      };
    };
    var caseSplit = function(port) {
      return function(line) {
        return function(begin) {
          return function(end) {
            return function(annotations) {
              return function(typ) {
                return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(port)(new PscIde_Command.CaseSplit(line, begin, end, annotations, typ));
              };
            };
          };
        };
      };
    };
    var addClause = function(port) {
      return function(line) {
        return function(annotations) {
          return sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonString))(port)(new PscIde_Command.AddClause(line, annotations));
        };
      };
    };
    module2.exports = {
      sendCommandR,
      sendCommand,
      cwd,
      listLoadedModules,
      listAvailableModules,
      listImports,
      load,
      quit,
      reset,
      pursuitCompletion,
      defaultCompletionOptions,
      complete,
      "type'": type$prime,
      suggestTypos,
      addClause,
      caseSplit,
      implicitImport,
      explicitImport,
      qualifiedImport,
      rebuild,
      usages,
      send: $foreign.send
    };
  }
});

// output/PscIde.Server/index.js
var require_PscIde3 = __commonJS({
  "output/PscIde.Server/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Parallel_Class = require_Control_Parallel();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Effect_Random = require_Effect10();
    var Node_Buffer = require_Node6();
    var Node_Buffer_Class = require_Node_Buffer();
    var Node_ChildProcess = require_Node7();
    var Node_Encoding = require_Node5();
    var Node_FS_Sync = require_Node_FS4();
    var Node_Path = require_Node();
    var Node_Which = require_Node4();
    var PscIde = require_PscIde2();
    var Started = function() {
      function Started2(value0) {
        this.value0 = value0;
      }
      ;
      Started2.create = function(value0) {
        return new Started2(value0);
      };
      return Started2;
    }();
    var Closed = function() {
      function Closed2() {
      }
      ;
      Closed2.value = new Closed2();
      return Closed2;
    }();
    var StartError = function() {
      function StartError2(value0) {
        this.value0 = value0;
      }
      ;
      StartError2.create = function(value0) {
        return new StartError2(value0);
      };
      return StartError2;
    }();
    var All = function() {
      function All2() {
      }
      ;
      All2.value = new All2();
      return All2;
    }();
    var None = function() {
      function None2() {
      }
      ;
      None2.value = new None2();
      return None2;
    }();
    var Debug = function() {
      function Debug2() {
      }
      ;
      Debug2.value = new Debug2();
      return Debug2;
    }();
    var Perf = function() {
      function Perf2() {
      }
      ;
      Perf2.value = new Perf2();
      return Perf2;
    }();
    var Executable = function() {
      function Executable2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Executable2.create = function(value0) {
        return function(value1) {
          return new Executable2(value0, value1);
        };
      };
      return Executable2;
    }();
    var stopServer = function(port) {
      return Data_Functor["void"](Effect_Aff.functorAff)(PscIde.quit(port));
    };
    var portFilePath = function(cwd) {
      return Node_Path.concat([cwd, ".psc-ide-port"]);
    };
    var savePort = function(port) {
      return function(cwd) {
        return Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value)(portFilePath(cwd))(Data_Show.show(Data_Show.showInt)(port));
      };
    };
    var pickFreshPort = Effect_Random.randomInt(15e3)(16e3);
    var logParam = function(v) {
      if (v instanceof All) {
        return "all";
      }
      ;
      if (v instanceof None) {
        return "none";
      }
      ;
      if (v instanceof Debug) {
        return "debug";
      }
      ;
      if (v instanceof Perf) {
        return "perf";
      }
      ;
      throw new Error("Failed pattern match at PscIde.Server (line 48, column 12 - line 52, column 17): " + [v.constructor.name]);
    };
    var startServer = function(v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.spawn(v.exe)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(function() {
        if (v.combinedExe) {
          return ["ide", "server"];
        }
        ;
        return [];
      }())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([])(function(p) {
        return ["-p", Data_Show.show(Data_Show.showInt)(p)];
      })(v.port))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([])(function(d) {
        return ["-d", d];
      })(v.directory))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([])(function(od) {
        return ["--output-directory", od];
      })(v.outputDirectory))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(function() {
        if (v.watch) {
          return [];
        }
        ;
        return ["--no-watch"];
      }())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(function() {
        if (v.debug) {
          return ["--debug"];
        }
        ;
        return [];
      }())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(function() {
        if (v.polling) {
          return ["--polling"];
        }
        ;
        return [];
      }())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(function() {
        if (v.editorMode) {
          return ["--editor-mode"];
        }
        ;
        return [];
      }())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([])(function(l) {
        return ["--log-level", logParam(l)];
      })(v.logLevel))(v.source))))))))))({
        cwd: v.cwd,
        stdio: v.stdio,
        env: Node_ChildProcess.defaultSpawnOptions.env,
        detached: Node_ChildProcess.defaultSpawnOptions.detached,
        uid: Node_ChildProcess.defaultSpawnOptions.uid,
        gid: Node_ChildProcess.defaultSpawnOptions.gid
      })))(function(cp) {
        var handleErr = Effect_Aff.makeAff(function(cb) {
          return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)(function __do() {
            Node_ChildProcess.onError(cp)(function(v1) {
              return cb(Data_Either.Right.create(StartError.create("psc-ide-server error:" + ("{ code: " + (v1.code + (", errno: " + (v1.errno + (", syscall: " + (v1.syscall + " }")))))))));
            })();
            return Node_ChildProcess.onClose(cp)(function(exit) {
              if (exit instanceof Node_ChildProcess.Normally && exit.value0 === 0) {
                return cb(new Data_Either.Right(Closed.value));
              }
              ;
              if (exit instanceof Node_ChildProcess.Normally) {
                return cb(Data_Either.Right.create(StartError.create("Error code returned: " + Data_Show.show(Data_Show.showInt)(exit.value0))));
              }
              ;
              return cb(Data_Either.Right.create(new StartError("Other close error")));
            })();
          });
        });
        return Control_Parallel_Class.sequential(Effect_Aff.parallelAff)(Control_Alt.alt(Effect_Aff.altParAff)(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(handleErr))(Control_Parallel_Class.parallel(Effect_Aff.parallelAff)(Data_Functor.voidLeft(Effect_Aff.functorAff)(Effect_Aff.delay(100))(new Started(cp)))));
      });
    };
    var getSavedPort = function(cwd) {
      return Data_Functor.map(Effect.functorEffect)(function(v) {
        return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Int.fromString)(Data_Either.hush(v));
      })(Control_Monad_Error_Class["try"](Control_Monad_Error_Class.monadErrorEffect)(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(portFilePath(cwd))));
    };
    var findBins$prime = function(v) {
      return function(executable) {
        var getVersion = function(bin) {
          return Effect_Aff.makeAff(function(cb) {
            return Data_Functor.voidRight(Effect.functorEffect)(Effect_Aff.nonCanceler)(Node_ChildProcess.execFile(bin)(["--version"])({
              cwd: Node_ChildProcess.defaultExecOptions.cwd,
              env: v.env,
              timeout: Node_ChildProcess.defaultExecOptions.timeout,
              maxBuffer: Node_ChildProcess.defaultExecOptions.maxBuffer,
              killSignal: Node_ChildProcess.defaultExecOptions.killSignal,
              uid: Node_ChildProcess.defaultExecOptions.uid,
              gid: Node_ChildProcess.defaultExecOptions.gid
            })(function(v1) {
              return Data_Maybe.maybe(Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(Node_Buffer_Class.readString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value)(0)(100)(v1.stdout)))(cb))(function($44) {
                return cb(Data_Either.Left.create($44));
              })(v1.error);
            }));
          });
        };
        return Control_Bind.bind(Effect_Aff.bindAff)(Control_Alt.alt(Effect_Aff.altAff)(Node_Which["which'"]({
          path: v.path,
          pathExt: v.pathExt
        })(executable))(Control_Applicative.pure(Effect_Aff.applicativeAff)([])))(function(bins) {
          return Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableArray)(bins)(function(bin) {
            return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Functor.functorFn)(Executable.create(bin))(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)))(Effect_Aff.attempt(getVersion(bin)));
          });
        });
      };
    };
    var findBins = findBins$prime({
      path: Data_Maybe.Nothing.value,
      pathExt: Data_Maybe.Nothing.value,
      env: Data_Maybe.Nothing.value
    });
    var deleteSavedPort = function(cwd) {
      return Node_FS_Sync.unlink(portFilePath(cwd));
    };
    var defaultServerArgs = {
      exe: "purs",
      combinedExe: true,
      cwd: Data_Maybe.Nothing.value,
      stdio: Node_ChildProcess.pipe,
      source: [],
      port: Data_Maybe.Nothing.value,
      directory: Data_Maybe.Nothing.value,
      outputDirectory: Data_Maybe.Nothing.value,
      watch: true,
      debug: false,
      polling: false,
      editorMode: false,
      logLevel: Data_Maybe.Nothing.value
    };
    module2.exports = {
      Started,
      Closed,
      StartError,
      All,
      None,
      Debug,
      Perf,
      logParam,
      defaultServerArgs,
      startServer,
      portFilePath,
      savePort,
      deleteSavedPort,
      getSavedPort,
      pickFreshPort,
      stopServer,
      Executable,
      findBins,
      "findBins'": findBins$prime
    };
  }
});

// output/IdePurescript.Exec/index.js
var require_IdePurescript = __commonJS({
  "output/IdePurescript.Exec/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign57();
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Foreign_Object = require_Foreign3();
    var Node_Path = require_Node();
    var Node_Process = require_Node3();
    var Node_Which = require_Node4();
    var PscIde_Server = require_PscIde3();
    var whichSync = function(v) {
      return $foreign.whichSyncImpl({
        path: Data_Nullable.toNullable(v.path),
        pathExt: Data_Nullable.toNullable(v.pathExt)
      });
    };
    var findBinsNoVersion = function(v) {
      return function(executable) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Control_Alt.alt(Effect_Aff.altAff)(Node_Which["which'"]({
          path: v.path,
          pathExt: v.pathExt
        })(executable))(Control_Applicative.pure(Effect_Aff.applicativeAff)([])))(function(bins) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Functor.functorArray)(function(bin) {
            return new PscIde_Server.Executable(bin, Data_Maybe.Nothing.value);
          })(bins));
        });
      };
    };
    var findBins = function(pathVar) {
      return function(server) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.getEnv))(function(env) {
          return PscIde_Server["findBins'"]({
            pathExt: Data_Maybe.Nothing.value,
            path: Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(pathVar),
            env: Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(function() {
              var $11 = Data_Function.flip(Foreign_Object.insert("PATH"))(env);
              return function($12) {
                return Data_Maybe.Just.create($11($12));
              };
            }())(pathVar)
          })(server);
        });
      };
    };
    var addNpmBinPath = function(rootDir) {
      return function(path) {
        return Node_Path.concat([rootDir, "node_modules", ".bin"]) + Data_Maybe.maybe("")(function(v) {
          return Node_Path.delimiter + v;
        })(path);
      };
    };
    var getPathVar = function(addNpmBin) {
      return function(rootDir) {
        return function __do() {
          var processPath = Node_Process.lookupEnv("PATH")();
          if (addNpmBin) {
            return Data_Either.Right.create(addNpmBinPath(rootDir)(processPath));
          }
          ;
          return Data_Either.Left.create(Data_Maybe.fromMaybe("")(processPath));
        };
      };
    };
    module2.exports = {
      findBins,
      findBinsNoVersion,
      getPathVar,
      addNpmBinPath,
      whichSync,
      whichSyncImpl: $foreign.whichSyncImpl
    };
  }
});

// output/IdePurescript.PscIde/index.js
var require_IdePurescript2 = __commonJS({
  "output/IdePurescript.PscIde/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Data_Argonaut_Decode_Class = require_Data_Argonaut_Decode3();
    var Data_Argonaut_Decode_Combinators = require_Data_Argonaut_Decode4();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Semigroup = require_Data7();
    var Effect_Aff = require_Effect6();
    var Effect_Exception = require_Effect2();
    var PscIde = require_PscIde2();
    var PscIde_Command = require_PscIde();
    var ModuleCompletion = function() {
      function ModuleCompletion2(value0) {
        this.value0 = value0;
      }
      ;
      ModuleCompletion2.create = function(value0) {
        return new ModuleCompletion2(value0);
      };
      return ModuleCompletion2;
    }();
    var runMsg = function(v) {
      return v;
    };
    var primModules = ["Prim", "Prim.Boolean", "Prim.Ordering", "Prim.Row", "Prim.RowList", "Prim.Symbol", "Prim.TypeError"];
    var eitherToErr = function(c) {
      return Control_Bind.bind(Effect_Aff.bindAff)(c)(function(r) {
        if (r instanceof Data_Either.Left) {
          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(r.value0));
        }
        ;
        if (r instanceof Data_Either.Right) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(r.value0);
        }
        ;
        throw new Error("Failed pattern match at IdePurescript.PscIde (line 33, column 3 - line 35, column 26): " + [r.constructor.name]);
      });
    };
    var getCompletion$prime = function(matcher) {
      return function(mainFilter) {
        return function(port) {
          return function(currentModule) {
            return function(modulePrefix) {
              return function(unqualModules) {
                return function(getQualifiedModule) {
                  return function(opts) {
                    var modules = Data_Maybe.maybe(unqualModules)(getQualifiedModule)(modulePrefix);
                    var moduleFilters = [PscIde_Command.ModuleFilter.create(function() {
                      var $11 = Data_Array["null"](modules);
                      if ($11) {
                        return unqualModules;
                      }
                      ;
                      return modules;
                    }())];
                    return eitherToErr(PscIde.complete(port)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(mainFilter)(moduleFilters))(matcher)(currentModule)(opts));
                  };
                };
              };
            };
          };
        };
      };
    };
    var getCompletion = function(port) {
      return function(prefix) {
        return getCompletion$prime(Data_Maybe.Nothing.value)([new PscIde_Command.PrefixFilter(prefix)])(port);
      };
    };
    var result = function(f) {
      return function(a) {
        return eitherToErr(Data_Functor.map(Effect_Aff.functorAff)(function(v) {
          return Data_Functor.map(Data_Either.functorEither)(f)(v);
        })(a));
      };
    };
    var getAvailableModules = function() {
      var conv = function(v) {
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(primModules)(v);
      };
      var $26 = result(conv);
      return function($27) {
        return $26(PscIde.listAvailableModules($27));
      };
    }();
    var getLoadedModules = function() {
      var conv = function(v) {
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(primModules)(v);
      };
      var $28 = result(conv);
      return function($29) {
        return $28(PscIde.listLoadedModules($29));
      };
    }();
    var getModuleInfo = function(port) {
      return function(text) {
        var filters = [new PscIde_Command.DeclarationFilter([PscIde_Command.DeclModule.value])];
        return result(Data_Array.head)(PscIde["type'"](port)(text)(filters)(Data_Maybe.Nothing.value));
      };
    };
    var getTypeInfo = function(port) {
      return function(text) {
        return function(currentModule) {
          return function(modulePrefix) {
            return function(unqualModules) {
              return function(getQualifiedModule) {
                var moduleFilters = [PscIde_Command.ModuleFilter.create(Data_Maybe.maybe(unqualModules)(getQualifiedModule)(modulePrefix))];
                return result(Data_Array.head)(PscIde["type'"](port)(text)(moduleFilters)(currentModule));
              };
            };
          };
        };
      };
    };
    var getType = function(port) {
      return function(text) {
        return function(currentModule) {
          return function(modulePrefix) {
            return function(unqualModules) {
              return function(getQualifiedModule) {
                var getType$prime = function(v) {
                  return v["type'"];
                };
                return Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.maybe("")(getType$prime))(getTypeInfo(port)(text)(currentModule)(modulePrefix)(unqualModules)(getQualifiedModule));
              };
            };
          };
        };
      };
    };
    var loadDeps = function(port) {
      return function(main) {
        return result(runMsg)(PscIde.load(port)([])([main]));
      };
    };
    var typesInModule = function(port) {
      return function(moduleName) {
        return eitherToErr(PscIde.complete(port)([new PscIde_Command.ModuleFilter([moduleName])])(Data_Maybe.Nothing.value)(new Data_Maybe.Just(moduleName))(PscIde.defaultCompletionOptions));
      };
    };
    var decodeModuleCompletion = {
      decodeJson: function(json) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("module"))(function(module$prime) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(o)("package"))(function($$package) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new ModuleCompletion({
                "module'": module$prime,
                "package": $$package
              }));
            });
          });
        });
      }
    };
    var getPursuitModuleCompletion = function(port) {
      return function(str) {
        var convPursuitModuleCompletion = function(v) {
          return {
            "package": v["value0"]["package"],
            module: v["value0"]["module'"]
          };
        };
        var complete = function(q) {
          return PscIde.sendCommand(PscIde_Command.encodeCommand)(Data_Argonaut_Decode_Class.decodeArray(decodeModuleCompletion))(port)(new PscIde_Command.Pursuit(PscIde_Command.Package.value, q));
        };
        return result(Data_Functor.map(Data_Functor.functorArray)(convPursuitModuleCompletion))(complete(str));
      };
    };
    var cwd = function() {
      var $30 = result(runMsg);
      return function($31) {
        return $30(PscIde.cwd($31));
      };
    }();
    var convPursuitCompletion = function(v) {
      return {
        identifier: v.identifier,
        "package": v["package"],
        type: v["type'"],
        module: v["module'"],
        text: v.text
      };
    };
    var getPursuitCompletion = function(port) {
      return function(str) {
        return result(Data_Functor.map(Data_Functor.functorArray)(convPursuitCompletion))(PscIde.pursuitCompletion(port)(str));
      };
    };
    module2.exports = {
      getCompletion,
      "getCompletion'": getCompletion$prime,
      typesInModule,
      cwd,
      loadDeps,
      getType,
      eitherToErr,
      getPursuitModuleCompletion,
      getPursuitCompletion,
      getAvailableModules,
      getLoadedModules,
      getTypeInfo,
      getModuleInfo
    };
  }
});

// output/Node.Stream/foreign.js
var require_foreign77 = __commonJS({
  "output/Node.Stream/foreign.js"(exports2) {
    "use strict";
    exports2.undefined = void 0;
    exports2.setEncodingImpl = function(s) {
      return function(enc) {
        return function() {
          s.setEncoding(enc);
        };
      };
    };
    exports2.readChunkImpl = function(Left) {
      return function(Right) {
        return function(chunk) {
          if (chunk instanceof Buffer) {
            return Right(chunk);
          } else if (typeof chunk === "string") {
            return Left(chunk);
          } else {
            throw new Error("Node.Stream.readChunkImpl: Unrecognised chunk type; expected String or Buffer, got: " + chunk);
          }
        };
      };
    };
    exports2.onDataEitherImpl = function(readChunk) {
      return function(r) {
        return function(f) {
          return function() {
            r.on("data", function(data) {
              f(readChunk(data))();
            });
          };
        };
      };
    };
    exports2.onEnd = function(s) {
      return function(f) {
        return function() {
          s.on("end", f);
        };
      };
    };
    exports2.onFinish = function(s) {
      return function(f) {
        return function() {
          s.on("finish", f);
        };
      };
    };
    exports2.onReadable = function(s) {
      return function(f) {
        return function() {
          s.on("readable", f);
        };
      };
    };
    exports2.onError = function(s) {
      return function(f) {
        return function() {
          s.on("error", function(e) {
            f(e)();
          });
        };
      };
    };
    exports2.onClose = function(s) {
      return function(f) {
        return function() {
          s.on("close", f);
        };
      };
    };
    exports2.resume = function(s) {
      return function() {
        s.resume();
      };
    };
    exports2.pause = function(s) {
      return function() {
        s.pause();
      };
    };
    exports2.isPaused = function(s) {
      return function() {
        return s.isPaused();
      };
    };
    exports2.pipe = function(r) {
      return function(w) {
        return function() {
          return r.pipe(w);
        };
      };
    };
    exports2.unpipe = function(r) {
      return function(w) {
        return function() {
          return r.unpipe(w);
        };
      };
    };
    exports2.unpipeAll = function(r) {
      return function() {
        return r.unpipe();
      };
    };
    exports2.readImpl = function(readChunk) {
      return function(Nothing) {
        return function(Just) {
          return function(r) {
            return function(s) {
              return function() {
                var v = r.read(s);
                if (v === null) {
                  return Nothing;
                } else {
                  return Just(readChunk(v));
                }
              };
            };
          };
        };
      };
    };
    exports2.write = function(w) {
      return function(chunk) {
        return function(done) {
          return function() {
            return w.write(chunk, null, done);
          };
        };
      };
    };
    exports2.writeStringImpl = function(w) {
      return function(enc) {
        return function(s) {
          return function(done) {
            return function() {
              return w.write(s, enc, done);
            };
          };
        };
      };
    };
    exports2.cork = function(w) {
      return function() {
        return w.cork();
      };
    };
    exports2.uncork = function(w) {
      return function() {
        return w.uncork();
      };
    };
    exports2.setDefaultEncodingImpl = function(w) {
      return function(enc) {
        return function() {
          w.setDefaultEncoding(enc);
        };
      };
    };
    exports2.end = function(w) {
      return function(done) {
        return function() {
          w.end(null, null, function() {
            done();
          });
        };
      };
    };
    exports2.destroy = function(strm) {
      return function() {
        strm.destroy(null);
      };
    };
    exports2.destroyWithError = function(strm) {
      return function(e) {
        return function() {
          strm.destroy(e);
        };
      };
    };
  }
});

// output/Node.Stream/index.js
var require_Node9 = __commonJS({
  "output/Node.Stream/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign77();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Show = require_Data14();
    var Effect = require_Effect();
    var Effect_Exception = require_Effect2();
    var Node_Buffer = require_Node6();
    var Node_Buffer_Class = require_Node_Buffer();
    var Node_Encoding = require_Node5();
    var writeString = function(w) {
      return function(enc) {
        return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
    };
    var setEncoding = function(r) {
      return function(enc) {
        return $foreign.setEncodingImpl(r)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
    };
    var setDefaultEncoding = function(r) {
      return function(enc) {
        return $foreign.setDefaultEncodingImpl(r)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
    };
    var readChunk = $foreign.readChunkImpl(Data_Either.Left.create)(Data_Either.Right.create);
    var readEither = function(r) {
      return function(size) {
        return $foreign.readImpl(readChunk)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create)(r)(Data_Maybe.fromMaybe($foreign["undefined"])(size));
      };
    };
    var readString = function(r) {
      return function(size) {
        return function(enc) {
          return function __do() {
            var v = readEither(r)(size)();
            if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
            }
            ;
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
              return Effect_Exception["throw"]("Stream encoding should not be set")();
            }
            ;
            if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
              return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(enc)(v.value0.value0))();
            }
            ;
            throw new Error("Failed pattern match at Node.Stream (line 120, column 3 - line 123, column 60): " + [v.constructor.name]);
          };
        };
      };
    };
    var read = function(r) {
      return function(size) {
        return function __do() {
          var v = readEither(r)(size)();
          if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
          }
          ;
          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
            return Effect_Exception["throw"]("Stream encoding should not be set")();
          }
          ;
          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
            return new Data_Maybe.Just(v.value0.value0);
          }
          ;
          throw new Error("Failed pattern match at Node.Stream (line 107, column 3 - line 110, column 36): " + [v.constructor.name]);
        };
      };
    };
    var onDataEither = function(r) {
      return function(cb) {
        return $foreign.onDataEitherImpl(readChunk)(r)(cb);
      };
    };
    var onData = function(r) {
      return function(cb) {
        var fromEither = function(x) {
          if (x instanceof Data_Either.Left) {
            return Effect_Exception["throw"]("Stream encoding should not be set");
          }
          ;
          if (x instanceof Data_Either.Right) {
            return Control_Applicative.pure(Effect.applicativeEffect)(x.value0);
          }
          ;
          throw new Error("Failed pattern match at Node.Stream (line 94, column 5 - line 98, column 17): " + [x.constructor.name]);
        };
        return onDataEither(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(fromEither));
      };
    };
    var onDataString = function(r) {
      return function(enc) {
        return function(cb) {
          return onData(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(enc)));
        };
      };
    };
    module2.exports = {
      onData,
      onDataString,
      onDataEither,
      setEncoding,
      read,
      readString,
      readEither,
      writeString,
      setDefaultEncoding,
      onReadable: $foreign.onReadable,
      onEnd: $foreign.onEnd,
      onFinish: $foreign.onFinish,
      onClose: $foreign.onClose,
      onError: $foreign.onError,
      resume: $foreign.resume,
      pause: $foreign.pause,
      isPaused: $foreign.isPaused,
      pipe: $foreign.pipe,
      unpipe: $foreign.unpipe,
      unpipeAll: $foreign.unpipeAll,
      write: $foreign.write,
      cork: $foreign.cork,
      uncork: $foreign.uncork,
      end: $foreign.end,
      destroy: $foreign.destroy
    };
  }
});

// output/IdePurescript.PscIdeServer/index.js
var require_IdePurescript3 = __commonJS({
  "output/IdePurescript.PscIdeServer/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Show = require_Data14();
    var Data_String_Common = require_Data_String4();
    var Data_Traversable = require_Data29();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var IdePurescript_Exec = require_IdePurescript();
    var IdePurescript_PscIde = require_IdePurescript2();
    var Node_ChildProcess = require_Node7();
    var Node_Encoding = require_Node5();
    var Node_Path = require_Node();
    var Node_Platform = require_Node2();
    var Node_Process = require_Node3();
    var Node_Stream = require_Node9();
    var PscIde_Server = require_PscIde3();
    var Version = function() {
      function Version2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      Version2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new Version2(value0, value1, value2);
          };
        };
      };
      return Version2;
    }();
    var CorrectPath = function() {
      function CorrectPath2(value0) {
        this.value0 = value0;
      }
      ;
      CorrectPath2.create = function(value0) {
        return new CorrectPath2(value0);
      };
      return CorrectPath2;
    }();
    var WrongPath = function() {
      function WrongPath2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      WrongPath2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new WrongPath2(value0, value1, value2);
          };
        };
      };
      return WrongPath2;
    }();
    var Started = function() {
      function Started2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Started2.create = function(value0) {
        return function(value1) {
          return new Started2(value0, value1);
        };
      };
      return Started2;
    }();
    var Closed = function() {
      function Closed2() {
      }
      ;
      Closed2.value = new Closed2();
      return Closed2;
    }();
    var StartError = function() {
      function StartError2(value0) {
        this.value0 = value0;
      }
      ;
      StartError2.create = function(value0) {
        return new StartError2(value0);
      };
      return StartError2;
    }();
    var Success = function() {
      function Success2() {
      }
      ;
      Success2.value = new Success2();
      return Success2;
    }();
    var Info = function() {
      function Info2() {
      }
      ;
      Info2.value = new Info2();
      return Info2;
    }();
    var Warning = function() {
      function Warning2() {
      }
      ;
      Warning2.value = new Warning2();
      return Warning2;
    }();
    var $$Error = function() {
      function $$Error2() {
      }
      ;
      $$Error2.value = new $$Error2();
      return $$Error2;
    }();
    var stopServer = function(port) {
      return function(rootPath) {
        return function(_cp) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.getSavedPort(rootPath)))(function(oldPort) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Applicative.when(Effect.applicativeEffect)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(oldPort)(new Data_Maybe.Just(port)))(PscIde_Server.deleteSavedPort(rootPath)))))(function() {
              return PscIde_Server.stopServer(port);
            });
          });
        };
      };
    };
    var startServer = function(logCb) {
      return function(v) {
        return function(rootPath) {
          var normalizePath = function() {
            var $83 = function() {
              var $20 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
              if ($20) {
                return Data_String_Common.toLower;
              }
              ;
              return Control_Category.identity(Control_Category.categoryFn);
            }();
            return function($84) {
              return $83(Node_Path.normalize($84));
            };
          }();
          var launchServer = function(connectPort) {
            var r = function(v1) {
              return function(v2) {
                if (v2 instanceof PscIde_Server.Started) {
                  return new Started(v1, v2.value0);
                }
                ;
                if (v2 instanceof PscIde_Server.Closed) {
                  return Closed.value;
                }
                ;
                if (v2 instanceof PscIde_Server.StartError) {
                  return new StartError(v2.value0);
                }
                ;
                throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 184, column 5 - line 184, column 44): " + [v1.constructor.name, v2.constructor.name]);
              };
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe.maybe(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.pickFreshPort))(Control_Applicative.pure(Effect_Aff.applicativeAff))(connectPort))(function(port) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                logCb(Info.value)("Starting IDE server on port " + (Data_Show.show(Data_Show.showInt)(port) + (" with cwd " + rootPath)))();
                return Control_Applicative.when(Effect.applicativeEffect)(Data_Maybe.isNothing(connectPort))(PscIde_Server.savePort(port)(rootPath))();
              }))(function() {
                return Data_Functor.map(Effect_Aff.functorAff)(r(port))(PscIde_Server.startServer({
                  exe: v.exe,
                  combinedExe: v.combinedExe,
                  cwd: new Data_Maybe.Just(rootPath),
                  stdio: PscIde_Server.defaultServerArgs.stdio,
                  source: v.glob,
                  port: new Data_Maybe.Just(port),
                  directory: PscIde_Server.defaultServerArgs.directory,
                  outputDirectory: v.outputDirectory,
                  watch: PscIde_Server.defaultServerArgs.watch,
                  debug: PscIde_Server.defaultServerArgs.debug,
                  polling: PscIde_Server.defaultServerArgs.polling,
                  editorMode: PscIde_Server.defaultServerArgs.editorMode,
                  logLevel: v.logLevel
                }));
              });
            });
          };
          var gotPath = function(port) {
            return function(workingDir) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function() {
                var $25 = normalizePath(workingDir) === normalizePath(rootPath);
                if ($25) {
                  return function __do() {
                    logCb(Info.value)("Found IDE server on port " + (Data_Show.show(Data_Show.showInt)(port) + (" with correct path: " + workingDir)))();
                    return new CorrectPath(port);
                  };
                }
                ;
                return function __do() {
                  logCb(Info.value)("Found IDE server on port " + (Data_Show.show(Data_Show.showInt)(port) + (" with wrong path: " + (normalizePath(workingDir) + (" instead of " + normalizePath(rootPath))))))();
                  return new WrongPath(port, workingDir, rootPath);
                };
              }());
            };
          };
          var joinServer = function(port) {
            return function(launchPort) {
              return function(message) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(IdePurescript_PscIde.cwd(port)))(function(workingDir) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Info.value)(message + (": " + (Data_Show.show(Data_Show.showInt)(port) + Data_Either.either(Data_Function["const"](" (couldn't connect to existing server)"))(function(v1) {
                    return ", cwd: " + v1;
                  })(workingDir))))))(function() {
                    return Data_Either.either(Data_Function["const"](launchServer(launchPort)))(gotPath(port))(workingDir);
                  });
                });
              };
            };
          };
          if (v.port instanceof Data_Maybe.Just) {
            return joinServer(v.port.value0)(v.port)("Using configured port");
          }
          ;
          if (v.port instanceof Data_Maybe.Nothing) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(PscIde_Server.getSavedPort(rootPath)))(function(v1) {
              if (v1 instanceof Data_Maybe.Just) {
                return joinServer(v1.value0)(Data_Maybe.Nothing.value)("Found existing port from file");
              }
              ;
              if (v1 instanceof Data_Maybe.Nothing) {
                return launchServer(Data_Maybe.Nothing.value);
              }
              ;
              throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 150, column 13 - line 154, column 44): " + [v1.constructor.name]);
            });
          }
          ;
          throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 145, column 3 - line 154, column 44): " + [v.port.constructor.name]);
        };
      };
    };
    var startServer$prime = function(v) {
      return function(path) {
        return function(addNpmBin) {
          return function(cb) {
            return function(logCb) {
              var wireOutput = function(cp) {
                return function(log) {
                  return function __do() {
                    Node_Stream.onDataString(Node_ChildProcess.stderr(cp))(Node_Encoding.UTF8.value)(log(Warning.value))();
                    return Node_Stream.onDataString(Node_ChildProcess.stdout(cp))(Node_Encoding.UTF8.value)(log(Info.value))();
                  };
                };
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(IdePurescript_Exec.getPathVar(addNpmBin)(path)))(function(pathVar) {
                return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Exec.findBins(pathVar)(v.exe))(function(serverBins) {
                  var v1 = Data_Array.head(serverBins);
                  if (v1 instanceof Data_Maybe.Nothing) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(cb(Info.value)("Couldn't find IDE server, check PATH. Looked for: " + (v.exe + (" in PATH: " + Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(pathVar))))))(function() {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                        quit: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
                        port: Data_Maybe.Nothing.value
                      });
                    });
                  }
                  ;
                  if (v1 instanceof Data_Maybe.Just) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Info.value)("Resolved IDE server paths (npm-bin: " + (Data_Show.show(Data_Show.showBoolean)(addNpmBin) + (") from PATH of " + (Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(pathVar) + " (1st is used):"))))))(function() {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(function(v2) {
                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(Info.value)(v2.value0 + (": " + Data_Maybe.fromMaybe("ERROR")(v2.value1))));
                      })(serverBins))(function() {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Applicative.when(Effect.applicativeEffect)(Data_Array.length(serverBins) > 1)(cb(Warning.value)("Found multiple IDE server executables; using " + v1.value0.value0))))(function() {
                          return Control_Bind.bind(Effect_Aff.bindAff)(startServer(logCb)({
                            exe: v1.value0.value0,
                            combinedExe: v.combinedExe,
                            glob: v.glob,
                            logLevel: v.logLevel,
                            outputDirectory: v.outputDirectory,
                            port: v.port
                          })(path))(function(res) {
                            var noRes = {
                              quit: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
                              port: Data_Maybe.Nothing.value
                            };
                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function() {
                              if (res instanceof CorrectPath) {
                                return Data_Functor.voidRight(Effect.functorEffect)({
                                  quit: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
                                  port: new Data_Maybe.Just(res.value0)
                                })(cb(Info.value)("Found existing IDE server with correct path on port " + Data_Show.show(Data_Show.showInt)(res.value0)));
                              }
                              ;
                              if (res instanceof WrongPath) {
                                return function __do() {
                                  cb($$Error.value)("Found existing IDE server on port '" + (Data_Show.show(Data_Show.showInt)(res.value0) + ("' with wrong path: '" + (res.value1 + ("' instead of '" + (res.value2 + "'. Correct, kill or configure a different port, and restart."))))))();
                                  return noRes;
                                };
                              }
                              ;
                              if (res instanceof Started) {
                                return function __do() {
                                  cb(Success.value)("Started IDE server (port " + (Data_Show.show(Data_Show.showInt)(res.value0) + ")"))();
                                  wireOutput(res.value1)(logCb)();
                                  return {
                                    quit: stopServer(res.value0)(path)(res.value1),
                                    port: new Data_Maybe.Just(res.value0)
                                  };
                                };
                              }
                              ;
                              if (res instanceof Closed) {
                                return Data_Functor.voidRight(Effect.functorEffect)(noRes)(cb(Info.value)("IDE server exited with success code"));
                              }
                              ;
                              if (res instanceof StartError) {
                                return Data_Functor.voidRight(Effect.functorEffect)(noRes)(cb($$Error.value)("Could not start IDE server process. Check the configured port number is valid.\n" + res.value0));
                              }
                              ;
                              throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 115, column 11 - line 135, column 142): " + [res.constructor.name]);
                            }());
                          });
                        });
                      });
                    });
                  }
                  ;
                  throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 95, column 3 - line 135, column 142): " + [v1.constructor.name]);
                });
              });
            };
          };
        };
      };
    };
    var showErrorLevel = {
      show: function(v) {
        if (v instanceof Success) {
          return "Success";
        }
        ;
        if (v instanceof Info) {
          return "Info";
        }
        ;
        if (v instanceof Warning) {
          return "Warning";
        }
        ;
        if (v instanceof $$Error) {
          return "Error";
        }
        ;
        throw new Error("Failed pattern match at IdePurescript.PscIdeServer (line 47, column 1 - line 51, column 23): " + [v.constructor.name]);
      }
    };
    module2.exports = {
      startServer,
      "startServer'": startServer$prime,
      stopServer,
      CorrectPath,
      WrongPath,
      Started,
      Closed,
      StartError,
      Success,
      Info,
      Warning,
      "Error": $$Error,
      showErrorLevel
    };
  }
});

// output/IdePurescript.Regex/index.js
var require_IdePurescript4 = __commonJS({
  "output/IdePurescript.Regex/index.js"(exports2, module2) {
    "use strict";
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_String_Regex = require_Data_String5();
    var test$prime = function(v) {
      if (v instanceof Data_Either.Left) {
        return Data_Function["const"](false);
      }
      ;
      if (v instanceof Data_Either.Right) {
        return Data_String_Regex.test(v.value0);
      }
      ;
      throw new Error("Failed pattern match at IdePurescript.Regex (line 17, column 1 - line 17, column 57): " + [v.constructor.name]);
    };
    var replace$prime = function(v) {
      return function(v1) {
        return function(s) {
          if (v instanceof Data_Either.Left) {
            return s;
          }
          ;
          if (v instanceof Data_Either.Right) {
            return Data_String_Regex.replace(v.value0)(v1)(s);
          }
          ;
          throw new Error("Failed pattern match at IdePurescript.Regex (line 9, column 1 - line 9, column 69): " + [v.constructor.name, v1.constructor.name, s.constructor.name]);
        };
      };
    };
    var match$prime = function(v) {
      return function(v1) {
        if (v instanceof Data_Either.Left) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v instanceof Data_Either.Right) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.toArray)(Data_String_Regex.match(v.value0)(v1));
        }
        ;
        throw new Error("Failed pattern match at IdePurescript.Regex (line 13, column 1 - line 13, column 79): " + [v.constructor.name, v1.constructor.name]);
      };
    };
    module2.exports = {
      "replace'": replace$prime,
      "match'": match$prime,
      "test'": test$prime
    };
  }
});

// output/Node.FS.Async/foreign.js
var require_foreign78 = __commonJS({
  "output/Node.FS.Async/foreign.js"(exports2) {
    "use strict";
    exports2.handleCallbackImpl = function(left, right, f) {
      return function(err, value) {
        if (err) {
          f(left(err))();
        } else {
          f(right(value))();
        }
      };
    };
  }
});

// output/Node.FS.Async/index.js
var require_Node_FS5 = __commonJS({
  "output/Node.FS.Async/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign78();
    var Data_DateTime_Instant = require_Data_DateTime();
    var Data_Either = require_Data16();
    var Data_EuclideanRing = require_Data18();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Data_Show = require_Data14();
    var Effect_Unsafe = require_Effect5();
    var Node_Buffer = require_Node6();
    var Node_Buffer_Class = require_Node_Buffer();
    var Node_Encoding = require_Node5();
    var Node_FS = require_Node8();
    var Node_FS_Internal = require_Node_FS();
    var Node_FS_Perms = require_Node_FS2();
    var Node_FS_Stats = require_Node_FS3();
    var handleCallback = function(cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
    };
    var fs = Node_FS_Internal.unsafeRequireFS;
    var link = function(src) {
      return function(dst) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.link(src, dst, handleCallback(cb));
          });
        };
      };
    };
    var mkdir$prime = function(file) {
      return function(perms) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.mkdir(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
          });
        };
      };
    };
    var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));
    var readFile = function(file) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.readFile(file, {}, handleCallback(cb));
        });
      };
    };
    var readTextFile = function(encoding) {
      return function(file) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.readFile(file, {
              encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
            }, handleCallback(cb));
          });
        };
      };
    };
    var readdir = function(file) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.readdir(file, handleCallback(cb));
        });
      };
    };
    var readlink = function(path) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.readlink(path, handleCallback(cb));
        });
      };
    };
    var realpath = function(path) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.realpath(path, {}, handleCallback(cb));
        });
      };
    };
    var realpath$prime = function(path) {
      return function(cache) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.realpath(path, cache, handleCallback(cb));
          });
        };
      };
    };
    var rename = function(oldFile) {
      return function(newFile) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.rename(oldFile, newFile, handleCallback(cb));
          });
        };
      };
    };
    var rmdir = function(file) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.rmdir(file, handleCallback(cb));
        });
      };
    };
    var stat = function(file) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.stat(file, handleCallback(function() {
            var $28 = Data_Functor.map(Data_Either.functorEither)(Node_FS_Stats.Stats.create);
            return function($29) {
              return cb($28($29));
            };
          }()));
        });
      };
    };
    var symlink = function(src) {
      return function(dest) {
        return function(ty) {
          return function(cb) {
            return Node_FS_Internal.mkEffect(function(v) {
              return fs.symlink(src, dest, Node_FS.symlinkTypeToNode(ty), handleCallback(cb));
            });
          };
        };
      };
    };
    var truncate = function(file) {
      return function(len) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.truncate(file, len, handleCallback(cb));
          });
        };
      };
    };
    var unlink = function(file) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.unlink(file, handleCallback(cb));
        });
      };
    };
    var utimes = function(file) {
      return function(atime) {
        return function(mtime) {
          return function(cb) {
            var toEpochMilliseconds = function($30) {
              return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($30));
            };
            var ms = function(v) {
              return Data_Int.round(v);
            };
            var fromDate = function(date) {
              return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms(toEpochMilliseconds(date)))(1e3);
            };
            return Node_FS_Internal.mkEffect(function(v) {
              return fs.utimes(file, fromDate(atime), fromDate(mtime), handleCallback(cb));
            });
          };
        };
      };
    };
    var writeFile = function(file) {
      return function(buff) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.writeFile(file, buff, {}, handleCallback(cb));
          });
        };
      };
    };
    var writeTextFile = function(encoding) {
      return function(file) {
        return function(buff) {
          return function(cb) {
            return Node_FS_Internal.mkEffect(function(v) {
              return fs.writeFile(file, buff, {
                encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              }, handleCallback(cb));
            });
          };
        };
      };
    };
    var fdWrite = function(fd) {
      return function(buff) {
        return function(off) {
          return function(len) {
            return function(pos) {
              return function(cb) {
                return Node_FS_Internal.mkEffect(function(v) {
                  return fs.write(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                });
              };
            };
          };
        };
      };
    };
    var fdRead = function(fd) {
      return function(buff) {
        return function(off) {
          return function(len) {
            return function(pos) {
              return function(cb) {
                return Node_FS_Internal.mkEffect(function(v) {
                  return fs.read(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                });
              };
            };
          };
        };
      };
    };
    var fdOpen = function(file) {
      return function(flags) {
        return function(mode) {
          return function(cb) {
            return Node_FS_Internal.mkEffect(function(v) {
              return fs.open(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode), handleCallback(cb));
            });
          };
        };
      };
    };
    var fdNext = function(fd) {
      return function(buff) {
        return function(cb) {
          return function __do() {
            var sz = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
            return fdRead(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)(cb)();
          };
        };
      };
    };
    var fdClose = function(fd) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.close(fd, handleCallback(cb));
        });
      };
    };
    var fdAppend = function(fd) {
      return function(buff) {
        return function(cb) {
          return function __do() {
            var sz = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
            return fdWrite(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)(cb)();
          };
        };
      };
    };
    var exists = function(file) {
      return function(cb) {
        return Node_FS_Internal.mkEffect(function(v) {
          return fs.exists(file, function(b) {
            return Effect_Unsafe.unsafePerformEffect(cb(b));
          });
        });
      };
    };
    var chown = function(file) {
      return function(uid) {
        return function(gid) {
          return function(cb) {
            return Node_FS_Internal.mkEffect(function(v) {
              return fs.chown(file, uid, gid, handleCallback(cb));
            });
          };
        };
      };
    };
    var chmod = function(file) {
      return function(perms) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.chmod(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
          });
        };
      };
    };
    var appendTextFile = function(encoding) {
      return function(file) {
        return function(buff) {
          return function(cb) {
            return Node_FS_Internal.mkEffect(function(v) {
              return fs.appendFile(file, buff, {
                encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              }, handleCallback(cb));
            });
          };
        };
      };
    };
    var appendFile = function(file) {
      return function(buff) {
        return function(cb) {
          return Node_FS_Internal.mkEffect(function(v) {
            return fs.appendFile(file, buff, {}, handleCallback(cb));
          });
        };
      };
    };
    module2.exports = {
      rename,
      truncate,
      chown,
      chmod,
      stat,
      link,
      symlink,
      readlink,
      realpath,
      "realpath'": realpath$prime,
      unlink,
      rmdir,
      mkdir,
      "mkdir'": mkdir$prime,
      readdir,
      utimes,
      readFile,
      readTextFile,
      writeFile,
      writeTextFile,
      appendFile,
      appendTextFile,
      exists,
      fdOpen,
      fdRead,
      fdNext,
      fdWrite,
      fdAppend,
      fdClose
    };
  }
});

// output/Node.FS.Aff/index.js
var require_Node_FS6 = __commonJS({
  "output/Node.FS.Aff/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Node_FS_Async = require_Node_FS5();
    var toAff = function(p) {
      return Effect_Aff.makeAff(function(k) {
        return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
    };
    var toAff1 = function(f) {
      return function(a) {
        return toAff(f(a));
      };
    };
    var unlink = toAff1(Node_FS_Async.unlink);
    var toAff2 = function(f) {
      return function(a) {
        return function(b) {
          return toAff(f(a)(b));
        };
      };
    };
    var truncate = toAff2(Node_FS_Async.truncate);
    var writeFile = toAff2(Node_FS_Async.writeFile);
    var toAff3 = function(f) {
      return function(a) {
        return function(b) {
          return function(c) {
            return toAff(f(a)(b)(c));
          };
        };
      };
    };
    var utimes = toAff3(Node_FS_Async.utimes);
    var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
    var toAff5 = function(f) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return toAff(f(a)(b)(c)(d)(e));
              };
            };
          };
        };
      };
    };
    var symlink = toAff3(Node_FS_Async.symlink);
    var stat = toAff1(Node_FS_Async.stat);
    var rmdir = toAff1(Node_FS_Async.rmdir);
    var rename = toAff2(Node_FS_Async.rename);
    var realpath$prime = toAff2(Node_FS_Async["realpath'"]);
    var realpath = toAff1(Node_FS_Async.realpath);
    var readlink = toAff1(Node_FS_Async.readlink);
    var readdir = toAff1(Node_FS_Async.readdir);
    var readTextFile = toAff2(Node_FS_Async.readTextFile);
    var readFile = toAff1(Node_FS_Async.readFile);
    var mkdir$prime = toAff2(Node_FS_Async["mkdir'"]);
    var mkdir = toAff1(Node_FS_Async.mkdir);
    var link = toAff2(Node_FS_Async.link);
    var fdWrite = toAff5(Node_FS_Async.fdWrite);
    var fdRead = toAff5(Node_FS_Async.fdRead);
    var fdOpen = toAff3(Node_FS_Async.fdOpen);
    var fdNext = toAff2(Node_FS_Async.fdNext);
    var fdClose = toAff1(Node_FS_Async.fdClose);
    var fdAppend = toAff2(Node_FS_Async.fdAppend);
    var exists = function(file) {
      return Effect_Aff.makeAff(function(k) {
        return Data_Functor.voidLeft(Effect.functorEffect)(Node_FS_Async.exists(file)(function() {
          var $0 = Control_Applicative.pure(Data_Either.applicativeEither);
          return function($1) {
            return k($0($1));
          };
        }()))(Effect_Aff.nonCanceler);
      });
    };
    var chown = toAff3(Node_FS_Async.chown);
    var chmod = toAff2(Node_FS_Async.chmod);
    var appendTextFile = toAff3(Node_FS_Async.appendTextFile);
    var appendFile = toAff2(Node_FS_Async.appendFile);
    module2.exports = {
      rename,
      truncate,
      chown,
      chmod,
      stat,
      link,
      symlink,
      readlink,
      realpath,
      "realpath'": realpath$prime,
      unlink,
      rmdir,
      mkdir,
      "mkdir'": mkdir$prime,
      readdir,
      utimes,
      readFile,
      readTextFile,
      writeFile,
      writeTextFile,
      appendFile,
      appendTextFile,
      exists,
      fdOpen,
      fdRead,
      fdNext,
      fdWrite,
      fdAppend,
      fdClose
    };
  }
});

// output/IdePurescript.Modules/index.js
var require_IdePurescript5 = __commonJS({
  "output/IdePurescript.Modules/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign50();
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var Data_String_Regex = require_Data_String5();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var Data_String_Utils = require_Data_String7();
    var Data_Tuple = require_Data22();
    var Data_UUID = require_Data43();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Foreign_Object = require_Foreign3();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var IdePurescript_Regex = require_IdePurescript4();
    var Node_Encoding = require_Node5();
    var Node_FS_Aff = require_Node_FS6();
    var Node_Path = require_Node();
    var PscIde = require_PscIde2();
    var PscIde_Command = require_PscIde();
    var Module = function(x) {
      return x;
    };
    var UpdatedImports = function() {
      function UpdatedImports2(value0) {
        this.value0 = value0;
      }
      ;
      UpdatedImports2.create = function(value0) {
        return new UpdatedImports2(value0);
      };
      return UpdatedImports2;
    }();
    var AmbiguousImport = function() {
      function AmbiguousImport2(value0) {
        this.value0 = value0;
      }
      ;
      AmbiguousImport2.create = function(value0) {
        return new AmbiguousImport2(value0);
      };
      return AmbiguousImport2;
    }();
    var UnnecessaryImport = function() {
      function UnnecessaryImport2() {
      }
      ;
      UnnecessaryImport2.value = new UnnecessaryImport2();
      return UnnecessaryImport2;
    }();
    var FailedImport = function() {
      function FailedImport2(value0) {
        this.value0 = value0;
      }
      ;
      FailedImport2.create = function(value0) {
        return new FailedImport2(value0);
      };
      return FailedImport2;
    }();
    var moduleNewtype = {
      Coercible0: function() {
        return void 0;
      }
    };
    var mkImplicit = function(m) {
      return {
        qualifier: Data_Maybe.Nothing.value,
        importType: PscIde_Command.Implicit.value,
        moduleName: m
      };
    };
    var makeTempFile = function(fileName) {
      return function(text) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign.tmpDir))(function(dir) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_UUID.genUUID))(function(uuid) {
            var name = IdePurescript_Regex["replace'"](Data_String_Regex.regex("[\\/\\\\:]")(Data_String_Regex_Flags.global))("-")(fileName);
            var tmpFile = dir + (Node_Path.sep + ("ide-purescript-" + (Data_Show.show(Data_UUID.showUUID)(uuid) + ("-" + name))));
            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(tmpFile)(text))(function() {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(tmpFile);
            });
          });
        });
      };
    };
    var withTempFile = function(fileName) {
      return function(text) {
        return function(action) {
          return Control_Bind.bind(Effect_Aff.bindAff)(makeTempFile(fileName)(text))(function(tmpFile) {
            return Control_Bind.bind(Effect_Aff.bindAff)(action(tmpFile))(function(res) {
              return Control_Bind.bind(Effect_Aff.bindAff)(function() {
                if (res instanceof Data_Either.Right && res.value0 instanceof PscIde_Command.SuccessFile) {
                  return Data_Functor.map(Effect_Aff.functorAff)(UpdatedImports.create)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(tmpFile));
                }
                ;
                if (res instanceof Data_Either.Right && res.value0 instanceof PscIde_Command.MultipleResults) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new AmbiguousImport(res.value0.value0));
                }
                ;
                if (res instanceof Data_Either.Right && res.value0 instanceof PscIde_Command.SuccessText) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new FailedImport(Data_Array.intercalate(Data_Monoid.monoidString)("\n")(res.value0.value0)));
                }
                ;
                if (res instanceof Data_Either.Left) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new FailedImport(res.value0));
                }
                ;
                throw new Error("Failed pattern match at IdePurescript.Modules (line 182, column 13 - line 186, column 40): " + [res.constructor.name]);
              }())(function(answer) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Node_FS_Aff.unlink(tmpFile)))(function() {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(answer);
                });
              });
            });
          });
        };
      };
    };
    var reformatModuleImports = function(log) {
      return function(state) {
        return function(port) {
          return function(fileName) {
            return function(text) {
              var addBogusImport = function(tmpFile) {
                return PscIde.qualifiedImport(port)(tmpFile)(new Data_Maybe.Just(tmpFile))("Prim")("__IDE_IMPORT_HACK");
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(withTempFile(fileName)(text)(addBogusImport))(function(res) {
                if (res instanceof UpdatedImports) {
                  var result$prime = Data_Array.intercalate(Data_Monoid.monoidString)("\n")(Data_Array.filter(function() {
                    var $96 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                    var $97 = Data_String_CodeUnits.contains("__IDE_IMPORT_HACK");
                    return function($98) {
                      return $96($97($98));
                    };
                  }())(Data_String_Utils.lines(res.value0)));
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(IdePurescript_PscIdeServer.Info.value)(Data_Show.show(Data_Show.showArray(Data_Show.showString))(Data_String_Utils.lines(result$prime)))))(function() {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just({
                      state,
                      result: result$prime
                    }));
                  });
                }
                ;
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
              });
            };
          };
        };
      };
    };
    var initialModulesState = {
      main: Data_Maybe.Nothing.value,
      modules: [],
      identifiers: [],
      identToModule: Foreign_Object.empty
    };
    var getModuleName = function(v) {
      return v.moduleName;
    };
    var getModules = function(include) {
      return function(v) {
        return function(v1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(["Prim"])(v1);
        }(Data_Functor.map(Data_Functor.functorArray)(getModuleName)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Maybe.maybe([])(function($99) {
          return Data_Array.singleton(mkImplicit($99));
        })(v.main))(Data_Array.filter(include)(v.modules))));
      };
    };
    var getUnqualActiveModules = function(state) {
      return function(ident) {
        var include = function(v) {
          if (v.qualifier instanceof Data_Maybe.Just) {
            return false;
          }
          ;
          if (v.importType instanceof PscIde_Command.Explicit) {
            return Data_Maybe.maybe(false)(function(x) {
              return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(x)(v.importType.value0) || Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)("(" + (x + ")"))(v.importType.value0);
            })(ident);
          }
          ;
          if (v.importType instanceof PscIde_Command.Implicit) {
            return true;
          }
          ;
          if (v.importType instanceof PscIde_Command.Hiding) {
            return Data_Maybe.maybe(true)(function(v1) {
              return Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v1)(v.importType.value0);
            })(ident);
          }
          ;
          throw new Error("Failed pattern match at IdePurescript.Modules (line 121, column 3 - line 121, column 49): " + [v.constructor.name]);
        };
        return getModules(include)(state);
      };
    };
    var getQualModule = function(qualifier) {
      return function(v) {
        var qual = function(v1) {
          return function(v2) {
            if (v2.qualifier instanceof Data_Maybe.Just) {
              return v1 === v2.qualifier.value0;
            }
            ;
            return false;
          };
        };
        return Data_Functor.map(Data_Functor.functorArray)(getModuleName)(Data_Array.filter(qual(qualifier))(v.modules));
      };
    };
    var getModuleFromUnknownQualifier = function(qual) {
      return function(v) {
        return Control_Alt.alt(Data_Maybe.altMaybe)(Foreign_Object.lookup(qual)(v.identToModule))(Foreign_Object.lookup("class " + qual)(v.identToModule));
      };
    };
    var getMainModule = function(text) {
      var regex = Data_String_Regex.regex("module\\s+([\\w.]+)")(Data_String_Regex_Flags.multiline);
      var v = IdePurescript_Regex["match'"](regex)(text);
      if (v instanceof Data_Maybe.Just && (v.value0.length === 2 && v["value0"][1] instanceof Data_Maybe.Just)) {
        return new Data_Maybe.Just(v["value0"][1].value0);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var getModulesForFile = function(port) {
      return function(file) {
        return function(fullText) {
          var mod = function(v) {
            return v;
          };
          var idents = function(v) {
            if (v.importType instanceof PscIde_Command.Explicit) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Function.flip(Data_Tuple.Tuple.create)(v))(v.importType.value0);
            }
            ;
            return [];
          };
          var $$default = {
            moduleName: Data_Maybe.Nothing.value,
            imports: []
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"]($$default))(Control_Category.identity(Control_Category.categoryFn)))(PscIde.listImports(port)(file)))(function(v) {
            var modules = Data_Functor.map(Data_Functor.functorArray)(mod)(v.imports);
            var main = Data_Maybe.maybe(getMainModule(fullText))(Data_Maybe.Just.create)(v.moduleName);
            var identToModule = Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Array.concatMap(idents)(modules));
            var identifiers = Foreign_Object.keys(identToModule);
            return Control_Applicative.pure(Effect_Aff.applicativeAff)({
              main,
              modules,
              identifiers,
              identToModule
            });
          });
        };
      };
    };
    var getModulesForFileTemp = function(port) {
      return function(file) {
        return function(fullText) {
          return Control_Bind.bind(Effect_Aff.bindAff)(makeTempFile(file)(fullText))(function(tmpFile) {
            return Control_Bind.bind(Effect_Aff.bindAff)(getModulesForFile(port)(tmpFile)(fullText))(function(res) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Node_FS_Aff.unlink(tmpFile)))(function() {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(res);
              });
            });
          });
        };
      };
    };
    var getAllActiveModules = getModules(Data_Function["const"](true));
    var findImportInsertPos = function(text) {
      var regex = Data_String_Regex.regex("^(module|import) [A-Z][^(]*($|\\([^()]*\\))")(Data_String_Regex_Flags.noFlags);
      var lines = Data_String_Common.split("\n")(text);
      var res = Data_Maybe.fromMaybe(0)(Data_Array.findLastIndex(IdePurescript_Regex["test'"](regex))(lines));
      return res + 1 | 0;
    };
    var eqImportType = function(v) {
      return function(v1) {
        if (v instanceof PscIde_Command.Implicit && v1 instanceof PscIde_Command.Implicit) {
          return true;
        }
        ;
        if (v instanceof PscIde_Command.Explicit && v1 instanceof PscIde_Command.Explicit) {
          return Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(v.value0)(v1.value0);
        }
        ;
        if (v instanceof PscIde_Command.Hiding && v1 instanceof PscIde_Command.Hiding) {
          return Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(v.value0)(v1.value0);
        }
        ;
        return false;
      };
    };
    var moduleEq = {
      eq: function(v) {
        return function(v1) {
          return v.moduleName === v1.moduleName && (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v.qualifier)(v1.qualifier) && eqImportType(v.importType)(v1.importType));
        };
      }
    };
    var addQualifiedImport = function(state) {
      return function(port) {
        return function(fileName) {
          return function(text) {
            return function(moduleName) {
              return function(qualifier) {
                var isThisModule = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(new Data_Maybe.Just(moduleName))(state.main);
                var addImport = function(tmpFile) {
                  return PscIde.qualifiedImport(port)(tmpFile)(new Data_Maybe.Just(tmpFile))(moduleName)(qualifier);
                };
                var $76 = !isThisModule;
                if ($76) {
                  return Data_Functor.map(Effect_Aff.functorAff)(function(v) {
                    return {
                      state,
                      result: v
                    };
                  })(withTempFile(fileName)(text)(addImport));
                }
                ;
                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                  state,
                  result: UnnecessaryImport.value
                });
              };
            };
          };
        };
      };
    };
    var addModuleImport = function(state) {
      return function(port) {
        return function(fileName) {
          return function(text) {
            return function(moduleName) {
              var shouldAdd = Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(state.main)(new Data_Maybe.Just(moduleName)) && Data_Foldable.notElem(Data_Foldable.foldableArray)(moduleEq)(mkImplicit(moduleName))(state.modules);
              var addImport = function(tmpFile) {
                return PscIde.implicitImport(port)(tmpFile)(new Data_Maybe.Just(tmpFile))([])(moduleName);
              };
              if (!shouldAdd) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                  state,
                  result: UnnecessaryImport.value
                });
              }
              ;
              if (shouldAdd) {
                return Control_Bind.bind(Effect_Aff.bindAff)(withTempFile(fileName)(text)(addImport))(function(result) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                    state,
                    result
                  });
                });
              }
              ;
              throw new Error("Failed pattern match at IdePurescript.Modules (line 192, column 3 - line 196, column 29): " + [shouldAdd.constructor.name]);
            };
          };
        };
      };
    };
    var addExplicitImport = function(state) {
      return function(port) {
        return function(fileName) {
          return function(text) {
            return function(moduleName) {
              return function(qualifier) {
                return function(identifier) {
                  return function(ns) {
                    var shouldAddMatch = function(v) {
                      return function(v1) {
                        if (v1.qualifier instanceof Data_Maybe.Nothing && (v1.importType instanceof PscIde_Command.Implicit && v1.moduleName === v)) {
                          return false;
                        }
                        ;
                        if (v1.qualifier instanceof Data_Maybe.Nothing && (v1.importType instanceof PscIde_Command.Hiding && v1.moduleName === v)) {
                          return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(identifier)(v1.importType.value0);
                        }
                        ;
                        return true;
                      };
                    };
                    var namespaceFilters = Data_Maybe.maybe([])(function(n) {
                      return [new PscIde_Command.NamespaceFilter([n])];
                    })(ns);
                    var isThisModule = function() {
                      if (moduleName instanceof Data_Maybe.Just) {
                        return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(moduleName)(state.main);
                      }
                      ;
                      return false;
                    }();
                    var isExplicitPrim = function(v) {
                      if (v.moduleName === "Prim") {
                        if (v.importType instanceof PscIde_Command.Implicit) {
                          return false;
                        }
                        ;
                        return true;
                      }
                      ;
                      return false;
                    };
                    var isOpenPrim = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(moduleName)(new Data_Maybe.Just("Prim")) && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isExplicitPrim)(state.modules);
                    var shouldAdd = !isThisModule && (!isOpenPrim && Data_Maybe.maybe(true)(function(mn) {
                      return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(shouldAddMatch(mn))(state.modules);
                    })(moduleName));
                    var filters = Data_Maybe.maybe([])(function(m) {
                      return [new PscIde_Command.ModuleFilter([m])];
                    })(moduleName);
                    var addImport = function(tmpFile) {
                      return PscIde.explicitImport(port)(tmpFile)(new Data_Maybe.Just(tmpFile))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(filters)(namespaceFilters))(identifier)(qualifier);
                    };
                    if (!shouldAdd) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                        state,
                        result: UnnecessaryImport.value
                      });
                    }
                    ;
                    if (shouldAdd) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(withTempFile(fileName)(text)(addImport))(function(result) {
                        var state$prime = function() {
                          if (result instanceof UpdatedImports) {
                            return {
                              identifiers: Data_Array.cons(identifier)(state.identifiers),
                              identToModule: state.identToModule,
                              main: state.main,
                              modules: state.modules
                            };
                          }
                          ;
                          return state;
                        }();
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                          result,
                          state: state$prime
                        });
                      });
                    }
                    ;
                    throw new Error("Failed pattern match at IdePurescript.Modules (line 213, column 3 - line 221, column 37): " + [shouldAdd.constructor.name]);
                  };
                };
              };
            };
          };
        };
      };
    };
    module2.exports = {
      Module,
      initialModulesState,
      getMainModule,
      getModuleName,
      getModulesForFile,
      getModulesForFileTemp,
      getUnqualActiveModules,
      getAllActiveModules,
      getQualModule,
      getModuleFromUnknownQualifier,
      findImportInsertPos,
      addModuleImport,
      addExplicitImport,
      addQualifiedImport,
      UpdatedImports,
      AmbiguousImport,
      UnnecessaryImport,
      FailedImport,
      reformatModuleImports,
      moduleNewtype,
      moduleEq
    };
  }
});

// output/Foreign.Index/foreign.js
var require_foreign79 = __commonJS({
  "output/Foreign.Index/foreign.js"(exports2) {
    "use strict";
    exports2.unsafeReadPropImpl = function(f, s, key, value) {
      return value == null ? f : s(value[key]);
    };
    exports2.unsafeHasOwnProperty = function(prop, value) {
      return Object.prototype.hasOwnProperty.call(value, prop);
    };
    exports2.unsafeHasProperty = function(prop, value) {
      return prop in value;
    };
  }
});

// output/Foreign.Index/index.js
var require_Foreign4 = __commonJS({
  "output/Foreign.Index/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign79();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Function = require_Data2();
    var Foreign = require_Foreign();
    var unsafeReadProp = function(dictMonad) {
      return function(k) {
        return function(value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad)), k, value);
        };
      };
    };
    var readProp = function(dictMonad) {
      return unsafeReadProp(dictMonad);
    };
    var readIndex = function(dictMonad) {
      return unsafeReadProp(dictMonad);
    };
    var ix = function(dict) {
      return dict.ix;
    };
    var index = function(dict) {
      return dict.index;
    };
    var indexableExceptT = function(dictMonad) {
      return {
        ix: function(dictIndex) {
          return function(f) {
            return function(i) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(dictMonad))(Data_Function.flip(index(dictIndex))(i))(f);
            };
          };
        }
      };
    };
    var indexableForeign = function(dictMonad) {
      return {
        ix: function(dictIndex) {
          return index(dictIndex);
        }
      };
    };
    var hasPropertyImpl = function(v) {
      return function(v1) {
        if (Foreign.isNull(v1)) {
          return false;
        }
        ;
        if (Foreign.isUndefined(v1)) {
          return false;
        }
        ;
        if (Foreign.typeOf(v1) === "object" || Foreign.typeOf(v1) === "function") {
          return $foreign.unsafeHasProperty(v, v1);
        }
        ;
        return false;
      };
    };
    var hasProperty = function(dict) {
      return dict.hasProperty;
    };
    var hasOwnPropertyImpl = function(v) {
      return function(v1) {
        if (Foreign.isNull(v1)) {
          return false;
        }
        ;
        if (Foreign.isUndefined(v1)) {
          return false;
        }
        ;
        if (Foreign.typeOf(v1) === "object" || Foreign.typeOf(v1) === "function") {
          return $foreign.unsafeHasOwnProperty(v, v1);
        }
        ;
        return false;
      };
    };
    var indexInt = function(dictMonad) {
      return {
        index: Data_Function.flip(readIndex(dictMonad)),
        hasProperty: hasPropertyImpl,
        hasOwnProperty: hasOwnPropertyImpl,
        errorAt: Foreign.ErrorAtIndex.create
      };
    };
    var indexString = function(dictMonad) {
      return {
        index: Data_Function.flip(readProp(dictMonad)),
        hasProperty: hasPropertyImpl,
        hasOwnProperty: hasOwnPropertyImpl,
        errorAt: Foreign.ErrorAtProperty.create
      };
    };
    var hasOwnProperty2 = function(dict) {
      return dict.hasOwnProperty;
    };
    var errorAt = function(dict) {
      return dict.errorAt;
    };
    module2.exports = {
      readProp,
      readIndex,
      ix,
      index,
      hasProperty,
      hasOwnProperty: hasOwnProperty2,
      errorAt,
      indexString,
      indexInt,
      indexableForeign,
      indexableExceptT
    };
  }
});

// output/Foreign.NullOrUndefined/foreign.js
var require_foreign80 = __commonJS({
  "output/Foreign.NullOrUndefined/foreign.js"(exports2) {
    exports2["null"] = null;
    exports2["undefined"] = void 0;
  }
});

// output/Foreign.NullOrUndefined/index.js
var require_Foreign5 = __commonJS({
  "output/Foreign.NullOrUndefined/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign80();
    var Control_Applicative = require_Control4();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Maybe = require_Data15();
    var Foreign = require_Foreign();
    var readNullOrUndefined = function(v) {
      return function(value) {
        if (Foreign.isNull(value) || Foreign.isUndefined(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
        }
        ;
        return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(v(value));
      };
    };
    module2.exports = {
      readNullOrUndefined,
      "undefined": $foreign["undefined"],
      "null": $foreign["null"]
    };
  }
});

// output/Data.Char/index.js
var require_Data49 = __commonJS({
  "output/Data.Char/index.js"(exports2, module2) {
    "use strict";
    var Data_Enum = require_Data42();
    var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
    var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
    module2.exports = {
      toCharCode,
      fromCharCode
    };
  }
});

// output/PureScript.CST.Types/index.js
var require_PureScript_CST = __commonJS({
  "output/PureScript.CST.Types/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var ASCII = function() {
      function ASCII2() {
      }
      ;
      ASCII2.value = new ASCII2();
      return ASCII2;
    }();
    var Unicode = function() {
      function Unicode2() {
      }
      ;
      Unicode2.value = new Unicode2();
      return Unicode2;
    }();
    var Nominal = function() {
      function Nominal2() {
      }
      ;
      Nominal2.value = new Nominal2();
      return Nominal2;
    }();
    var Representational = function() {
      function Representational2() {
      }
      ;
      Representational2.value = new Representational2();
      return Representational2;
    }();
    var Phantom = function() {
      function Phantom2() {
      }
      ;
      Phantom2.value = new Phantom2();
      return Phantom2;
    }();
    var Proper = function(x) {
      return x;
    };
    var Operator = function(x) {
      return x;
    };
    var ModuleName = function(x) {
      return x;
    };
    var LF = function() {
      function LF2() {
      }
      ;
      LF2.value = new LF2();
      return LF2;
    }();
    var CRLF = function() {
      function CRLF2() {
      }
      ;
      CRLF2.value = new CRLF2();
      return CRLF2;
    }();
    var Label = function(x) {
      return x;
    };
    var SmallInt = function() {
      function SmallInt2(value0) {
        this.value0 = value0;
      }
      ;
      SmallInt2.create = function(value0) {
        return new SmallInt2(value0);
      };
      return SmallInt2;
    }();
    var BigInt = function() {
      function BigInt2(value0) {
        this.value0 = value0;
      }
      ;
      BigInt2.create = function(value0) {
        return new BigInt2(value0);
      };
      return BigInt2;
    }();
    var BigHex = function() {
      function BigHex2(value0) {
        this.value0 = value0;
      }
      ;
      BigHex2.create = function(value0) {
        return new BigHex2(value0);
      };
      return BigHex2;
    }();
    var TokLeftParen = function() {
      function TokLeftParen2() {
      }
      ;
      TokLeftParen2.value = new TokLeftParen2();
      return TokLeftParen2;
    }();
    var TokRightParen = function() {
      function TokRightParen2() {
      }
      ;
      TokRightParen2.value = new TokRightParen2();
      return TokRightParen2;
    }();
    var TokLeftBrace = function() {
      function TokLeftBrace2() {
      }
      ;
      TokLeftBrace2.value = new TokLeftBrace2();
      return TokLeftBrace2;
    }();
    var TokRightBrace = function() {
      function TokRightBrace2() {
      }
      ;
      TokRightBrace2.value = new TokRightBrace2();
      return TokRightBrace2;
    }();
    var TokLeftSquare = function() {
      function TokLeftSquare2() {
      }
      ;
      TokLeftSquare2.value = new TokLeftSquare2();
      return TokLeftSquare2;
    }();
    var TokRightSquare = function() {
      function TokRightSquare2() {
      }
      ;
      TokRightSquare2.value = new TokRightSquare2();
      return TokRightSquare2;
    }();
    var TokLeftArrow = function() {
      function TokLeftArrow2(value0) {
        this.value0 = value0;
      }
      ;
      TokLeftArrow2.create = function(value0) {
        return new TokLeftArrow2(value0);
      };
      return TokLeftArrow2;
    }();
    var TokRightArrow = function() {
      function TokRightArrow2(value0) {
        this.value0 = value0;
      }
      ;
      TokRightArrow2.create = function(value0) {
        return new TokRightArrow2(value0);
      };
      return TokRightArrow2;
    }();
    var TokRightFatArrow = function() {
      function TokRightFatArrow2(value0) {
        this.value0 = value0;
      }
      ;
      TokRightFatArrow2.create = function(value0) {
        return new TokRightFatArrow2(value0);
      };
      return TokRightFatArrow2;
    }();
    var TokDoubleColon = function() {
      function TokDoubleColon2(value0) {
        this.value0 = value0;
      }
      ;
      TokDoubleColon2.create = function(value0) {
        return new TokDoubleColon2(value0);
      };
      return TokDoubleColon2;
    }();
    var TokForall = function() {
      function TokForall2(value0) {
        this.value0 = value0;
      }
      ;
      TokForall2.create = function(value0) {
        return new TokForall2(value0);
      };
      return TokForall2;
    }();
    var TokEquals = function() {
      function TokEquals2() {
      }
      ;
      TokEquals2.value = new TokEquals2();
      return TokEquals2;
    }();
    var TokPipe = function() {
      function TokPipe2() {
      }
      ;
      TokPipe2.value = new TokPipe2();
      return TokPipe2;
    }();
    var TokTick = function() {
      function TokTick2() {
      }
      ;
      TokTick2.value = new TokTick2();
      return TokTick2;
    }();
    var TokDot = function() {
      function TokDot2() {
      }
      ;
      TokDot2.value = new TokDot2();
      return TokDot2;
    }();
    var TokComma = function() {
      function TokComma2() {
      }
      ;
      TokComma2.value = new TokComma2();
      return TokComma2;
    }();
    var TokUnderscore = function() {
      function TokUnderscore2() {
      }
      ;
      TokUnderscore2.value = new TokUnderscore2();
      return TokUnderscore2;
    }();
    var TokBackslash = function() {
      function TokBackslash2() {
      }
      ;
      TokBackslash2.value = new TokBackslash2();
      return TokBackslash2;
    }();
    var TokAt = function() {
      function TokAt2() {
      }
      ;
      TokAt2.value = new TokAt2();
      return TokAt2;
    }();
    var TokLowerName = function() {
      function TokLowerName2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokLowerName2.create = function(value0) {
        return function(value1) {
          return new TokLowerName2(value0, value1);
        };
      };
      return TokLowerName2;
    }();
    var TokUpperName = function() {
      function TokUpperName2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokUpperName2.create = function(value0) {
        return function(value1) {
          return new TokUpperName2(value0, value1);
        };
      };
      return TokUpperName2;
    }();
    var TokOperator = function() {
      function TokOperator2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokOperator2.create = function(value0) {
        return function(value1) {
          return new TokOperator2(value0, value1);
        };
      };
      return TokOperator2;
    }();
    var TokSymbolName = function() {
      function TokSymbolName2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokSymbolName2.create = function(value0) {
        return function(value1) {
          return new TokSymbolName2(value0, value1);
        };
      };
      return TokSymbolName2;
    }();
    var TokSymbolArrow = function() {
      function TokSymbolArrow2(value0) {
        this.value0 = value0;
      }
      ;
      TokSymbolArrow2.create = function(value0) {
        return new TokSymbolArrow2(value0);
      };
      return TokSymbolArrow2;
    }();
    var TokHole = function() {
      function TokHole2(value0) {
        this.value0 = value0;
      }
      ;
      TokHole2.create = function(value0) {
        return new TokHole2(value0);
      };
      return TokHole2;
    }();
    var TokChar = function() {
      function TokChar2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokChar2.create = function(value0) {
        return function(value1) {
          return new TokChar2(value0, value1);
        };
      };
      return TokChar2;
    }();
    var TokString = function() {
      function TokString2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokString2.create = function(value0) {
        return function(value1) {
          return new TokString2(value0, value1);
        };
      };
      return TokString2;
    }();
    var TokRawString = function() {
      function TokRawString2(value0) {
        this.value0 = value0;
      }
      ;
      TokRawString2.create = function(value0) {
        return new TokRawString2(value0);
      };
      return TokRawString2;
    }();
    var TokInt = function() {
      function TokInt2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokInt2.create = function(value0) {
        return function(value1) {
          return new TokInt2(value0, value1);
        };
      };
      return TokInt2;
    }();
    var TokNumber = function() {
      function TokNumber2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokNumber2.create = function(value0) {
        return function(value1) {
          return new TokNumber2(value0, value1);
        };
      };
      return TokNumber2;
    }();
    var TokLayoutStart = function() {
      function TokLayoutStart2(value0) {
        this.value0 = value0;
      }
      ;
      TokLayoutStart2.create = function(value0) {
        return new TokLayoutStart2(value0);
      };
      return TokLayoutStart2;
    }();
    var TokLayoutSep = function() {
      function TokLayoutSep2(value0) {
        this.value0 = value0;
      }
      ;
      TokLayoutSep2.create = function(value0) {
        return new TokLayoutSep2(value0);
      };
      return TokLayoutSep2;
    }();
    var TokLayoutEnd = function() {
      function TokLayoutEnd2(value0) {
        this.value0 = value0;
      }
      ;
      TokLayoutEnd2.create = function(value0) {
        return new TokLayoutEnd2(value0);
      };
      return TokLayoutEnd2;
    }();
    var Ident = function(x) {
      return x;
    };
    var Infix = function() {
      function Infix2() {
      }
      ;
      Infix2.value = new Infix2();
      return Infix2;
    }();
    var Infixl = function() {
      function Infixl2() {
      }
      ;
      Infixl2.value = new Infixl2();
      return Infixl2;
    }();
    var Infixr = function() {
      function Infixr2() {
      }
      ;
      Infixr2.value = new Infixr2();
      return Infixr2;
    }();
    var Comment = function() {
      function Comment2(value0) {
        this.value0 = value0;
      }
      ;
      Comment2.create = function(value0) {
        return new Comment2(value0);
      };
      return Comment2;
    }();
    var Space = function() {
      function Space2(value0) {
        this.value0 = value0;
      }
      ;
      Space2.create = function(value0) {
        return new Space2(value0);
      };
      return Space2;
    }();
    var Line = function() {
      function Line2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Line2.create = function(value0) {
        return function(value1) {
          return new Line2(value0, value1);
        };
      };
      return Line2;
    }();
    var Labeled = function(x) {
      return x;
    };
    var Name = function(x) {
      return x;
    };
    var QualifiedName = function(x) {
      return x;
    };
    var FixityValue = function() {
      function FixityValue2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      FixityValue2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new FixityValue2(value0, value1, value2);
          };
        };
      };
      return FixityValue2;
    }();
    var FixityType = function() {
      function FixityType2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      FixityType2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new FixityType2(value0, value1, value2, value3);
            };
          };
        };
      };
      return FixityType2;
    }();
    var RecordPun = function() {
      function RecordPun2(value0) {
        this.value0 = value0;
      }
      ;
      RecordPun2.create = function(value0) {
        return new RecordPun2(value0);
      };
      return RecordPun2;
    }();
    var RecordField = function() {
      function RecordField2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      RecordField2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new RecordField2(value0, value1, value2);
          };
        };
      };
      return RecordField2;
    }();
    var Separated = function(x) {
      return x;
    };
    var Wrapped = function(x) {
      return x;
    };
    var DataAll = function() {
      function DataAll2(value0) {
        this.value0 = value0;
      }
      ;
      DataAll2.create = function(value0) {
        return new DataAll2(value0);
      };
      return DataAll2;
    }();
    var DataEnumerated = function() {
      function DataEnumerated2(value0) {
        this.value0 = value0;
      }
      ;
      DataEnumerated2.create = function(value0) {
        return new DataEnumerated2(value0);
      };
      return DataEnumerated2;
    }();
    var ExportValue = function() {
      function ExportValue2(value0) {
        this.value0 = value0;
      }
      ;
      ExportValue2.create = function(value0) {
        return new ExportValue2(value0);
      };
      return ExportValue2;
    }();
    var ExportOp = function() {
      function ExportOp2(value0) {
        this.value0 = value0;
      }
      ;
      ExportOp2.create = function(value0) {
        return new ExportOp2(value0);
      };
      return ExportOp2;
    }();
    var ExportType = function() {
      function ExportType2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExportType2.create = function(value0) {
        return function(value1) {
          return new ExportType2(value0, value1);
        };
      };
      return ExportType2;
    }();
    var ExportTypeOp = function() {
      function ExportTypeOp2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExportTypeOp2.create = function(value0) {
        return function(value1) {
          return new ExportTypeOp2(value0, value1);
        };
      };
      return ExportTypeOp2;
    }();
    var ExportClass = function() {
      function ExportClass2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExportClass2.create = function(value0) {
        return function(value1) {
          return new ExportClass2(value0, value1);
        };
      };
      return ExportClass2;
    }();
    var ExportKind = function() {
      function ExportKind2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExportKind2.create = function(value0) {
        return function(value1) {
          return new ExportKind2(value0, value1);
        };
      };
      return ExportKind2;
    }();
    var ExportModule = function() {
      function ExportModule2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExportModule2.create = function(value0) {
        return function(value1) {
          return new ExportModule2(value0, value1);
        };
      };
      return ExportModule2;
    }();
    var ExportError = function() {
      function ExportError2(value0) {
        this.value0 = value0;
      }
      ;
      ExportError2.create = function(value0) {
        return new ExportError2(value0);
      };
      return ExportError2;
    }();
    var ImportValue = function() {
      function ImportValue2(value0) {
        this.value0 = value0;
      }
      ;
      ImportValue2.create = function(value0) {
        return new ImportValue2(value0);
      };
      return ImportValue2;
    }();
    var ImportOp = function() {
      function ImportOp2(value0) {
        this.value0 = value0;
      }
      ;
      ImportOp2.create = function(value0) {
        return new ImportOp2(value0);
      };
      return ImportOp2;
    }();
    var ImportType = function() {
      function ImportType2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ImportType2.create = function(value0) {
        return function(value1) {
          return new ImportType2(value0, value1);
        };
      };
      return ImportType2;
    }();
    var ImportTypeOp = function() {
      function ImportTypeOp2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ImportTypeOp2.create = function(value0) {
        return function(value1) {
          return new ImportTypeOp2(value0, value1);
        };
      };
      return ImportTypeOp2;
    }();
    var ImportClass = function() {
      function ImportClass2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ImportClass2.create = function(value0) {
        return function(value1) {
          return new ImportClass2(value0, value1);
        };
      };
      return ImportClass2;
    }();
    var ImportKind = function() {
      function ImportKind2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ImportKind2.create = function(value0) {
        return function(value1) {
          return new ImportKind2(value0, value1);
        };
      };
      return ImportKind2;
    }();
    var ImportError = function() {
      function ImportError2(value0) {
        this.value0 = value0;
      }
      ;
      ImportError2.create = function(value0) {
        return new ImportError2(value0);
      };
      return ImportError2;
    }();
    var ImportDecl = function(x) {
      return x;
    };
    var ModuleHeader = function(x) {
      return x;
    };
    var One = function() {
      function One2(value0) {
        this.value0 = value0;
      }
      ;
      One2.create = function(value0) {
        return new One2(value0);
      };
      return One2;
    }();
    var Many = function() {
      function Many2(value0) {
        this.value0 = value0;
      }
      ;
      Many2.create = function(value0) {
        return new Many2(value0);
      };
      return Many2;
    }();
    var TypeVarKinded = function() {
      function TypeVarKinded2(value0) {
        this.value0 = value0;
      }
      ;
      TypeVarKinded2.create = function(value0) {
        return new TypeVarKinded2(value0);
      };
      return TypeVarKinded2;
    }();
    var TypeVarName = function() {
      function TypeVarName2(value0) {
        this.value0 = value0;
      }
      ;
      TypeVarName2.create = function(value0) {
        return new TypeVarName2(value0);
      };
      return TypeVarName2;
    }();
    var TypeVar = function() {
      function TypeVar2(value0) {
        this.value0 = value0;
      }
      ;
      TypeVar2.create = function(value0) {
        return new TypeVar2(value0);
      };
      return TypeVar2;
    }();
    var TypeConstructor = function() {
      function TypeConstructor2(value0) {
        this.value0 = value0;
      }
      ;
      TypeConstructor2.create = function(value0) {
        return new TypeConstructor2(value0);
      };
      return TypeConstructor2;
    }();
    var TypeWildcard = function() {
      function TypeWildcard2(value0) {
        this.value0 = value0;
      }
      ;
      TypeWildcard2.create = function(value0) {
        return new TypeWildcard2(value0);
      };
      return TypeWildcard2;
    }();
    var TypeHole = function() {
      function TypeHole2(value0) {
        this.value0 = value0;
      }
      ;
      TypeHole2.create = function(value0) {
        return new TypeHole2(value0);
      };
      return TypeHole2;
    }();
    var TypeString = function() {
      function TypeString2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TypeString2.create = function(value0) {
        return function(value1) {
          return new TypeString2(value0, value1);
        };
      };
      return TypeString2;
    }();
    var TypeRow = function() {
      function TypeRow2(value0) {
        this.value0 = value0;
      }
      ;
      TypeRow2.create = function(value0) {
        return new TypeRow2(value0);
      };
      return TypeRow2;
    }();
    var TypeRecord = function() {
      function TypeRecord2(value0) {
        this.value0 = value0;
      }
      ;
      TypeRecord2.create = function(value0) {
        return new TypeRecord2(value0);
      };
      return TypeRecord2;
    }();
    var TypeForall = function() {
      function TypeForall2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      TypeForall2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new TypeForall2(value0, value1, value2, value3);
            };
          };
        };
      };
      return TypeForall2;
    }();
    var TypeKinded = function() {
      function TypeKinded2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TypeKinded2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TypeKinded2(value0, value1, value2);
          };
        };
      };
      return TypeKinded2;
    }();
    var TypeApp = function() {
      function TypeApp2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TypeApp2.create = function(value0) {
        return function(value1) {
          return new TypeApp2(value0, value1);
        };
      };
      return TypeApp2;
    }();
    var TypeOp = function() {
      function TypeOp2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TypeOp2.create = function(value0) {
        return function(value1) {
          return new TypeOp2(value0, value1);
        };
      };
      return TypeOp2;
    }();
    var TypeOpName = function() {
      function TypeOpName2(value0) {
        this.value0 = value0;
      }
      ;
      TypeOpName2.create = function(value0) {
        return new TypeOpName2(value0);
      };
      return TypeOpName2;
    }();
    var TypeArrow = function() {
      function TypeArrow2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TypeArrow2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TypeArrow2(value0, value1, value2);
          };
        };
      };
      return TypeArrow2;
    }();
    var TypeArrowName = function() {
      function TypeArrowName2(value0) {
        this.value0 = value0;
      }
      ;
      TypeArrowName2.create = function(value0) {
        return new TypeArrowName2(value0);
      };
      return TypeArrowName2;
    }();
    var TypeConstrained = function() {
      function TypeConstrained2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TypeConstrained2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TypeConstrained2(value0, value1, value2);
          };
        };
      };
      return TypeConstrained2;
    }();
    var TypeParens = function() {
      function TypeParens2(value0) {
        this.value0 = value0;
      }
      ;
      TypeParens2.create = function(value0) {
        return new TypeParens2(value0);
      };
      return TypeParens2;
    }();
    var TypeUnaryRow = function() {
      function TypeUnaryRow2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TypeUnaryRow2.create = function(value0) {
        return function(value1) {
          return new TypeUnaryRow2(value0, value1);
        };
      };
      return TypeUnaryRow2;
    }();
    var $$TypeError = function() {
      function $$TypeError2(value0) {
        this.value0 = value0;
      }
      ;
      $$TypeError2.create = function(value0) {
        return new $$TypeError2(value0);
      };
      return $$TypeError2;
    }();
    var Row = function(x) {
      return x;
    };
    var DataCtor = function(x) {
      return x;
    };
    var ForeignValue = function() {
      function ForeignValue2(value0) {
        this.value0 = value0;
      }
      ;
      ForeignValue2.create = function(value0) {
        return new ForeignValue2(value0);
      };
      return ForeignValue2;
    }();
    var ForeignData = function() {
      function ForeignData2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ForeignData2.create = function(value0) {
        return function(value1) {
          return new ForeignData2(value0, value1);
        };
      };
      return ForeignData2;
    }();
    var ForeignKind = function() {
      function ForeignKind2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ForeignKind2.create = function(value0) {
        return function(value1) {
          return new ForeignKind2(value0, value1);
        };
      };
      return ForeignKind2;
    }();
    var FundepDetermined = function() {
      function FundepDetermined2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      FundepDetermined2.create = function(value0) {
        return function(value1) {
          return new FundepDetermined2(value0, value1);
        };
      };
      return FundepDetermined2;
    }();
    var FundepDetermines = function() {
      function FundepDetermines2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      FundepDetermines2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new FundepDetermines2(value0, value1, value2);
          };
        };
      };
      return FundepDetermines2;
    }();
    var BinderWildcard = function() {
      function BinderWildcard2(value0) {
        this.value0 = value0;
      }
      ;
      BinderWildcard2.create = function(value0) {
        return new BinderWildcard2(value0);
      };
      return BinderWildcard2;
    }();
    var BinderVar = function() {
      function BinderVar2(value0) {
        this.value0 = value0;
      }
      ;
      BinderVar2.create = function(value0) {
        return new BinderVar2(value0);
      };
      return BinderVar2;
    }();
    var BinderNamed = function() {
      function BinderNamed2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      BinderNamed2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new BinderNamed2(value0, value1, value2);
          };
        };
      };
      return BinderNamed2;
    }();
    var BinderConstructor = function() {
      function BinderConstructor2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      BinderConstructor2.create = function(value0) {
        return function(value1) {
          return new BinderConstructor2(value0, value1);
        };
      };
      return BinderConstructor2;
    }();
    var BinderBoolean = function() {
      function BinderBoolean2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      BinderBoolean2.create = function(value0) {
        return function(value1) {
          return new BinderBoolean2(value0, value1);
        };
      };
      return BinderBoolean2;
    }();
    var BinderChar = function() {
      function BinderChar2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      BinderChar2.create = function(value0) {
        return function(value1) {
          return new BinderChar2(value0, value1);
        };
      };
      return BinderChar2;
    }();
    var BinderString = function() {
      function BinderString2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      BinderString2.create = function(value0) {
        return function(value1) {
          return new BinderString2(value0, value1);
        };
      };
      return BinderString2;
    }();
    var BinderInt = function() {
      function BinderInt2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      BinderInt2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new BinderInt2(value0, value1, value2);
          };
        };
      };
      return BinderInt2;
    }();
    var BinderNumber = function() {
      function BinderNumber2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      BinderNumber2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new BinderNumber2(value0, value1, value2);
          };
        };
      };
      return BinderNumber2;
    }();
    var BinderArray = function() {
      function BinderArray2(value0) {
        this.value0 = value0;
      }
      ;
      BinderArray2.create = function(value0) {
        return new BinderArray2(value0);
      };
      return BinderArray2;
    }();
    var BinderRecord = function() {
      function BinderRecord2(value0) {
        this.value0 = value0;
      }
      ;
      BinderRecord2.create = function(value0) {
        return new BinderRecord2(value0);
      };
      return BinderRecord2;
    }();
    var BinderParens = function() {
      function BinderParens2(value0) {
        this.value0 = value0;
      }
      ;
      BinderParens2.create = function(value0) {
        return new BinderParens2(value0);
      };
      return BinderParens2;
    }();
    var BinderTyped = function() {
      function BinderTyped2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      BinderTyped2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new BinderTyped2(value0, value1, value2);
          };
        };
      };
      return BinderTyped2;
    }();
    var BinderOp = function() {
      function BinderOp2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      BinderOp2.create = function(value0) {
        return function(value1) {
          return new BinderOp2(value0, value1);
        };
      };
      return BinderOp2;
    }();
    var BinderError = function() {
      function BinderError2(value0) {
        this.value0 = value0;
      }
      ;
      BinderError2.create = function(value0) {
        return new BinderError2(value0);
      };
      return BinderError2;
    }();
    var DoLet = function() {
      function DoLet2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      DoLet2.create = function(value0) {
        return function(value1) {
          return new DoLet2(value0, value1);
        };
      };
      return DoLet2;
    }();
    var DoDiscard = function() {
      function DoDiscard2(value0) {
        this.value0 = value0;
      }
      ;
      DoDiscard2.create = function(value0) {
        return new DoDiscard2(value0);
      };
      return DoDiscard2;
    }();
    var DoBind = function() {
      function DoBind2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      DoBind2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new DoBind2(value0, value1, value2);
          };
        };
      };
      return DoBind2;
    }();
    var DoError = function() {
      function DoError2(value0) {
        this.value0 = value0;
      }
      ;
      DoError2.create = function(value0) {
        return new DoError2(value0);
      };
      return DoError2;
    }();
    var LetBindingSignature = function() {
      function LetBindingSignature2(value0) {
        this.value0 = value0;
      }
      ;
      LetBindingSignature2.create = function(value0) {
        return new LetBindingSignature2(value0);
      };
      return LetBindingSignature2;
    }();
    var LetBindingName = function() {
      function LetBindingName2(value0) {
        this.value0 = value0;
      }
      ;
      LetBindingName2.create = function(value0) {
        return new LetBindingName2(value0);
      };
      return LetBindingName2;
    }();
    var LetBindingPattern = function() {
      function LetBindingPattern2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      LetBindingPattern2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new LetBindingPattern2(value0, value1, value2);
          };
        };
      };
      return LetBindingPattern2;
    }();
    var LetBindingError = function() {
      function LetBindingError2(value0) {
        this.value0 = value0;
      }
      ;
      LetBindingError2.create = function(value0) {
        return new LetBindingError2(value0);
      };
      return LetBindingError2;
    }();
    var Unconditional = function() {
      function Unconditional2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Unconditional2.create = function(value0) {
        return function(value1) {
          return new Unconditional2(value0, value1);
        };
      };
      return Unconditional2;
    }();
    var Guarded = function() {
      function Guarded2(value0) {
        this.value0 = value0;
      }
      ;
      Guarded2.create = function(value0) {
        return new Guarded2(value0);
      };
      return Guarded2;
    }();
    var Where = function(x) {
      return x;
    };
    var ExprHole = function() {
      function ExprHole2(value0) {
        this.value0 = value0;
      }
      ;
      ExprHole2.create = function(value0) {
        return new ExprHole2(value0);
      };
      return ExprHole2;
    }();
    var ExprSection = function() {
      function ExprSection2(value0) {
        this.value0 = value0;
      }
      ;
      ExprSection2.create = function(value0) {
        return new ExprSection2(value0);
      };
      return ExprSection2;
    }();
    var ExprIdent = function() {
      function ExprIdent2(value0) {
        this.value0 = value0;
      }
      ;
      ExprIdent2.create = function(value0) {
        return new ExprIdent2(value0);
      };
      return ExprIdent2;
    }();
    var ExprConstructor = function() {
      function ExprConstructor2(value0) {
        this.value0 = value0;
      }
      ;
      ExprConstructor2.create = function(value0) {
        return new ExprConstructor2(value0);
      };
      return ExprConstructor2;
    }();
    var ExprBoolean = function() {
      function ExprBoolean2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprBoolean2.create = function(value0) {
        return function(value1) {
          return new ExprBoolean2(value0, value1);
        };
      };
      return ExprBoolean2;
    }();
    var ExprChar = function() {
      function ExprChar2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprChar2.create = function(value0) {
        return function(value1) {
          return new ExprChar2(value0, value1);
        };
      };
      return ExprChar2;
    }();
    var ExprString = function() {
      function ExprString2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprString2.create = function(value0) {
        return function(value1) {
          return new ExprString2(value0, value1);
        };
      };
      return ExprString2;
    }();
    var ExprInt = function() {
      function ExprInt2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprInt2.create = function(value0) {
        return function(value1) {
          return new ExprInt2(value0, value1);
        };
      };
      return ExprInt2;
    }();
    var ExprNumber = function() {
      function ExprNumber2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprNumber2.create = function(value0) {
        return function(value1) {
          return new ExprNumber2(value0, value1);
        };
      };
      return ExprNumber2;
    }();
    var ExprArray = function() {
      function ExprArray2(value0) {
        this.value0 = value0;
      }
      ;
      ExprArray2.create = function(value0) {
        return new ExprArray2(value0);
      };
      return ExprArray2;
    }();
    var ExprRecord = function() {
      function ExprRecord2(value0) {
        this.value0 = value0;
      }
      ;
      ExprRecord2.create = function(value0) {
        return new ExprRecord2(value0);
      };
      return ExprRecord2;
    }();
    var ExprParens = function() {
      function ExprParens2(value0) {
        this.value0 = value0;
      }
      ;
      ExprParens2.create = function(value0) {
        return new ExprParens2(value0);
      };
      return ExprParens2;
    }();
    var ExprTyped = function() {
      function ExprTyped2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      ExprTyped2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new ExprTyped2(value0, value1, value2);
          };
        };
      };
      return ExprTyped2;
    }();
    var ExprInfix = function() {
      function ExprInfix2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprInfix2.create = function(value0) {
        return function(value1) {
          return new ExprInfix2(value0, value1);
        };
      };
      return ExprInfix2;
    }();
    var ExprOp = function() {
      function ExprOp2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprOp2.create = function(value0) {
        return function(value1) {
          return new ExprOp2(value0, value1);
        };
      };
      return ExprOp2;
    }();
    var ExprOpName = function() {
      function ExprOpName2(value0) {
        this.value0 = value0;
      }
      ;
      ExprOpName2.create = function(value0) {
        return new ExprOpName2(value0);
      };
      return ExprOpName2;
    }();
    var ExprNegate = function() {
      function ExprNegate2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprNegate2.create = function(value0) {
        return function(value1) {
          return new ExprNegate2(value0, value1);
        };
      };
      return ExprNegate2;
    }();
    var ExprRecordAccessor = function() {
      function ExprRecordAccessor2(value0) {
        this.value0 = value0;
      }
      ;
      ExprRecordAccessor2.create = function(value0) {
        return new ExprRecordAccessor2(value0);
      };
      return ExprRecordAccessor2;
    }();
    var ExprRecordUpdate = function() {
      function ExprRecordUpdate2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprRecordUpdate2.create = function(value0) {
        return function(value1) {
          return new ExprRecordUpdate2(value0, value1);
        };
      };
      return ExprRecordUpdate2;
    }();
    var ExprApp = function() {
      function ExprApp2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExprApp2.create = function(value0) {
        return function(value1) {
          return new ExprApp2(value0, value1);
        };
      };
      return ExprApp2;
    }();
    var ExprLambda = function() {
      function ExprLambda2(value0) {
        this.value0 = value0;
      }
      ;
      ExprLambda2.create = function(value0) {
        return new ExprLambda2(value0);
      };
      return ExprLambda2;
    }();
    var ExprIf = function() {
      function ExprIf2(value0) {
        this.value0 = value0;
      }
      ;
      ExprIf2.create = function(value0) {
        return new ExprIf2(value0);
      };
      return ExprIf2;
    }();
    var ExprCase = function() {
      function ExprCase2(value0) {
        this.value0 = value0;
      }
      ;
      ExprCase2.create = function(value0) {
        return new ExprCase2(value0);
      };
      return ExprCase2;
    }();
    var ExprLet = function() {
      function ExprLet2(value0) {
        this.value0 = value0;
      }
      ;
      ExprLet2.create = function(value0) {
        return new ExprLet2(value0);
      };
      return ExprLet2;
    }();
    var ExprDo = function() {
      function ExprDo2(value0) {
        this.value0 = value0;
      }
      ;
      ExprDo2.create = function(value0) {
        return new ExprDo2(value0);
      };
      return ExprDo2;
    }();
    var ExprAdo = function() {
      function ExprAdo2(value0) {
        this.value0 = value0;
      }
      ;
      ExprAdo2.create = function(value0) {
        return new ExprAdo2(value0);
      };
      return ExprAdo2;
    }();
    var ExprError = function() {
      function ExprError2(value0) {
        this.value0 = value0;
      }
      ;
      ExprError2.create = function(value0) {
        return new ExprError2(value0);
      };
      return ExprError2;
    }();
    var RecordUpdateLeaf = function() {
      function RecordUpdateLeaf2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      RecordUpdateLeaf2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new RecordUpdateLeaf2(value0, value1, value2);
          };
        };
      };
      return RecordUpdateLeaf2;
    }();
    var RecordUpdateBranch = function() {
      function RecordUpdateBranch2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      RecordUpdateBranch2.create = function(value0) {
        return function(value1) {
          return new RecordUpdateBranch2(value0, value1);
        };
      };
      return RecordUpdateBranch2;
    }();
    var GuardedExpr = function(x) {
      return x;
    };
    var PatternGuard = function(x) {
      return x;
    };
    var InstanceBindingSignature = function() {
      function InstanceBindingSignature2(value0) {
        this.value0 = value0;
      }
      ;
      InstanceBindingSignature2.create = function(value0) {
        return new InstanceBindingSignature2(value0);
      };
      return InstanceBindingSignature2;
    }();
    var InstanceBindingName = function() {
      function InstanceBindingName2(value0) {
        this.value0 = value0;
      }
      ;
      InstanceBindingName2.create = function(value0) {
        return new InstanceBindingName2(value0);
      };
      return InstanceBindingName2;
    }();
    var Instance = function(x) {
      return x;
    };
    var DeclData = function() {
      function DeclData2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      DeclData2.create = function(value0) {
        return function(value1) {
          return new DeclData2(value0, value1);
        };
      };
      return DeclData2;
    }();
    var DeclType = function() {
      function DeclType2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      DeclType2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new DeclType2(value0, value1, value2);
          };
        };
      };
      return DeclType2;
    }();
    var DeclNewtype = function() {
      function DeclNewtype2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      DeclNewtype2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new DeclNewtype2(value0, value1, value2, value3);
            };
          };
        };
      };
      return DeclNewtype2;
    }();
    var DeclClass = function() {
      function DeclClass2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      DeclClass2.create = function(value0) {
        return function(value1) {
          return new DeclClass2(value0, value1);
        };
      };
      return DeclClass2;
    }();
    var DeclInstanceChain = function() {
      function DeclInstanceChain2(value0) {
        this.value0 = value0;
      }
      ;
      DeclInstanceChain2.create = function(value0) {
        return new DeclInstanceChain2(value0);
      };
      return DeclInstanceChain2;
    }();
    var DeclDerive = function() {
      function DeclDerive2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      DeclDerive2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new DeclDerive2(value0, value1, value2);
          };
        };
      };
      return DeclDerive2;
    }();
    var DeclKindSignature = function() {
      function DeclKindSignature2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      DeclKindSignature2.create = function(value0) {
        return function(value1) {
          return new DeclKindSignature2(value0, value1);
        };
      };
      return DeclKindSignature2;
    }();
    var DeclSignature = function() {
      function DeclSignature2(value0) {
        this.value0 = value0;
      }
      ;
      DeclSignature2.create = function(value0) {
        return new DeclSignature2(value0);
      };
      return DeclSignature2;
    }();
    var DeclValue = function() {
      function DeclValue2(value0) {
        this.value0 = value0;
      }
      ;
      DeclValue2.create = function(value0) {
        return new DeclValue2(value0);
      };
      return DeclValue2;
    }();
    var DeclFixity = function() {
      function DeclFixity2(value0) {
        this.value0 = value0;
      }
      ;
      DeclFixity2.create = function(value0) {
        return new DeclFixity2(value0);
      };
      return DeclFixity2;
    }();
    var DeclForeign = function() {
      function DeclForeign2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      DeclForeign2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new DeclForeign2(value0, value1, value2);
          };
        };
      };
      return DeclForeign2;
    }();
    var DeclRole = function() {
      function DeclRole2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      DeclRole2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new DeclRole2(value0, value1, value2, value3);
            };
          };
        };
      };
      return DeclRole2;
    }();
    var DeclError = function() {
      function DeclError2(value0) {
        this.value0 = value0;
      }
      ;
      DeclError2.create = function(value0) {
        return new DeclError2(value0);
      };
      return DeclError2;
    }();
    var ModuleBody = function(x) {
      return x;
    };
    var Module = function(x) {
      return x;
    };
    var ordProper = Data_Ord.ordString;
    var ordOperator = Data_Ord.ordString;
    var ordModuleName = Data_Ord.ordString;
    var ordLabel = Data_Ord.ordString;
    var ordIdent = Data_Ord.ordString;
    var newtypeWrapped = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeWhere = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeSeparated = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeRow = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeQualifiedName = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeProper = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypePatternGuard = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeOperator = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeName = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeModuleName = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeModuleHeader = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeModuleBody = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeModule = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeLabeled = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeLabel = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeInstance = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeImportDecl = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeIdent = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeGuardedExpr = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeDataCtor = {
      Coercible0: function() {
        return void 0;
      }
    };
    var eqSourceStyle = {
      eq: function(x) {
        return function(y) {
          if (x instanceof ASCII && y instanceof ASCII) {
            return true;
          }
          ;
          if (x instanceof Unicode && y instanceof Unicode) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var eqProper = Data_Eq.eqString;
    var eqOperator = Data_Eq.eqString;
    var eqModuleName = Data_Eq.eqString;
    var eqLabel = Data_Eq.eqString;
    var eqIntValue = {
      eq: function(x) {
        return function(y) {
          if (x instanceof SmallInt && y instanceof SmallInt) {
            return x.value0 === y.value0;
          }
          ;
          if (x instanceof BigInt && y instanceof BigInt) {
            return x.value0 === y.value0;
          }
          ;
          if (x instanceof BigHex && y instanceof BigHex) {
            return x.value0 === y.value0;
          }
          ;
          return false;
        };
      }
    };
    var eqToken = {
      eq: function(x) {
        return function(y) {
          if (x instanceof TokLeftParen && y instanceof TokLeftParen) {
            return true;
          }
          ;
          if (x instanceof TokRightParen && y instanceof TokRightParen) {
            return true;
          }
          ;
          if (x instanceof TokLeftBrace && y instanceof TokLeftBrace) {
            return true;
          }
          ;
          if (x instanceof TokRightBrace && y instanceof TokRightBrace) {
            return true;
          }
          ;
          if (x instanceof TokLeftSquare && y instanceof TokLeftSquare) {
            return true;
          }
          ;
          if (x instanceof TokRightSquare && y instanceof TokRightSquare) {
            return true;
          }
          ;
          if (x instanceof TokLeftArrow && y instanceof TokLeftArrow) {
            return Data_Eq.eq(eqSourceStyle)(x.value0)(y.value0);
          }
          ;
          if (x instanceof TokRightArrow && y instanceof TokRightArrow) {
            return Data_Eq.eq(eqSourceStyle)(x.value0)(y.value0);
          }
          ;
          if (x instanceof TokRightFatArrow && y instanceof TokRightFatArrow) {
            return Data_Eq.eq(eqSourceStyle)(x.value0)(y.value0);
          }
          ;
          if (x instanceof TokDoubleColon && y instanceof TokDoubleColon) {
            return Data_Eq.eq(eqSourceStyle)(x.value0)(y.value0);
          }
          ;
          if (x instanceof TokForall && y instanceof TokForall) {
            return Data_Eq.eq(eqSourceStyle)(x.value0)(y.value0);
          }
          ;
          if (x instanceof TokEquals && y instanceof TokEquals) {
            return true;
          }
          ;
          if (x instanceof TokPipe && y instanceof TokPipe) {
            return true;
          }
          ;
          if (x instanceof TokTick && y instanceof TokTick) {
            return true;
          }
          ;
          if (x instanceof TokDot && y instanceof TokDot) {
            return true;
          }
          ;
          if (x instanceof TokComma && y instanceof TokComma) {
            return true;
          }
          ;
          if (x instanceof TokUnderscore && y instanceof TokUnderscore) {
            return true;
          }
          ;
          if (x instanceof TokBackslash && y instanceof TokBackslash) {
            return true;
          }
          ;
          if (x instanceof TokAt && y instanceof TokAt) {
            return true;
          }
          ;
          if (x instanceof TokLowerName && y instanceof TokLowerName) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(eqModuleName))(x.value0)(y.value0) && x.value1 === y.value1;
          }
          ;
          if (x instanceof TokUpperName && y instanceof TokUpperName) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(eqModuleName))(x.value0)(y.value0) && x.value1 === y.value1;
          }
          ;
          if (x instanceof TokOperator && y instanceof TokOperator) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(eqModuleName))(x.value0)(y.value0) && x.value1 === y.value1;
          }
          ;
          if (x instanceof TokSymbolName && y instanceof TokSymbolName) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(eqModuleName))(x.value0)(y.value0) && x.value1 === y.value1;
          }
          ;
          if (x instanceof TokSymbolArrow && y instanceof TokSymbolArrow) {
            return Data_Eq.eq(eqSourceStyle)(x.value0)(y.value0);
          }
          ;
          if (x instanceof TokHole && y instanceof TokHole) {
            return x.value0 === y.value0;
          }
          ;
          if (x instanceof TokChar && y instanceof TokChar) {
            return x.value0 === y.value0 && x.value1 === y.value1;
          }
          ;
          if (x instanceof TokString && y instanceof TokString) {
            return x.value0 === y.value0 && x.value1 === y.value1;
          }
          ;
          if (x instanceof TokRawString && y instanceof TokRawString) {
            return x.value0 === y.value0;
          }
          ;
          if (x instanceof TokInt && y instanceof TokInt) {
            return x.value0 === y.value0 && Data_Eq.eq(eqIntValue)(x.value1)(y.value1);
          }
          ;
          if (x instanceof TokNumber && y instanceof TokNumber) {
            return x.value0 === y.value0 && x.value1 === y.value1;
          }
          ;
          if (x instanceof TokLayoutStart && y instanceof TokLayoutStart) {
            return x.value0 === y.value0;
          }
          ;
          if (x instanceof TokLayoutSep && y instanceof TokLayoutSep) {
            return x.value0 === y.value0;
          }
          ;
          if (x instanceof TokLayoutEnd && y instanceof TokLayoutEnd) {
            return x.value0 === y.value0;
          }
          ;
          return false;
        };
      }
    };
    var eqIdent = Data_Eq.eqString;
    module2.exports = {
      ModuleName,
      Comment,
      Space,
      Line,
      LF,
      CRLF,
      ASCII,
      Unicode,
      SmallInt,
      BigInt,
      BigHex,
      TokLeftParen,
      TokRightParen,
      TokLeftBrace,
      TokRightBrace,
      TokLeftSquare,
      TokRightSquare,
      TokLeftArrow,
      TokRightArrow,
      TokRightFatArrow,
      TokDoubleColon,
      TokForall,
      TokEquals,
      TokPipe,
      TokTick,
      TokDot,
      TokComma,
      TokUnderscore,
      TokBackslash,
      TokAt,
      TokLowerName,
      TokUpperName,
      TokOperator,
      TokSymbolName,
      TokSymbolArrow,
      TokHole,
      TokChar,
      TokString,
      TokRawString,
      TokInt,
      TokNumber,
      TokLayoutStart,
      TokLayoutSep,
      TokLayoutEnd,
      Ident,
      Proper,
      Label,
      Operator,
      Name,
      QualifiedName,
      Wrapped,
      Separated,
      Labeled,
      One,
      Many,
      TypeVar,
      TypeConstructor,
      TypeWildcard,
      TypeHole,
      TypeString,
      TypeRow,
      TypeRecord,
      TypeForall,
      TypeKinded,
      TypeApp,
      TypeOp,
      TypeOpName,
      TypeArrow,
      TypeArrowName,
      TypeConstrained,
      TypeParens,
      TypeUnaryRow,
      "TypeError": $$TypeError,
      TypeVarKinded,
      TypeVarName,
      Row,
      Module,
      ModuleHeader,
      ModuleBody,
      ExportValue,
      ExportOp,
      ExportType,
      ExportTypeOp,
      ExportClass,
      ExportKind,
      ExportModule,
      ExportError,
      DataAll,
      DataEnumerated,
      DeclData,
      DeclType,
      DeclNewtype,
      DeclClass,
      DeclInstanceChain,
      DeclDerive,
      DeclKindSignature,
      DeclSignature,
      DeclValue,
      DeclFixity,
      DeclForeign,
      DeclRole,
      DeclError,
      Instance,
      InstanceBindingSignature,
      InstanceBindingName,
      ImportDecl,
      ImportValue,
      ImportOp,
      ImportType,
      ImportTypeOp,
      ImportClass,
      ImportKind,
      ImportError,
      DataCtor,
      FundepDetermined,
      FundepDetermines,
      Infix,
      Infixl,
      Infixr,
      FixityValue,
      FixityType,
      Unconditional,
      Guarded,
      GuardedExpr,
      PatternGuard,
      ForeignValue,
      ForeignData,
      ForeignKind,
      Nominal,
      Representational,
      Phantom,
      ExprHole,
      ExprSection,
      ExprIdent,
      ExprConstructor,
      ExprBoolean,
      ExprChar,
      ExprString,
      ExprInt,
      ExprNumber,
      ExprArray,
      ExprRecord,
      ExprParens,
      ExprTyped,
      ExprInfix,
      ExprOp,
      ExprOpName,
      ExprNegate,
      ExprRecordAccessor,
      ExprRecordUpdate,
      ExprApp,
      ExprLambda,
      ExprIf,
      ExprCase,
      ExprLet,
      ExprDo,
      ExprAdo,
      ExprError,
      RecordPun,
      RecordField,
      RecordUpdateLeaf,
      RecordUpdateBranch,
      Where,
      LetBindingSignature,
      LetBindingName,
      LetBindingPattern,
      LetBindingError,
      DoLet,
      DoDiscard,
      DoBind,
      DoError,
      BinderWildcard,
      BinderVar,
      BinderNamed,
      BinderConstructor,
      BinderBoolean,
      BinderChar,
      BinderString,
      BinderInt,
      BinderNumber,
      BinderArray,
      BinderRecord,
      BinderParens,
      BinderTyped,
      BinderOp,
      BinderError,
      eqModuleName,
      ordModuleName,
      newtypeModuleName,
      eqSourceStyle,
      eqIntValue,
      eqToken,
      eqIdent,
      ordIdent,
      newtypeIdent,
      eqProper,
      ordProper,
      newtypeProper,
      eqLabel,
      ordLabel,
      newtypeLabel,
      eqOperator,
      ordOperator,
      newtypeOperator,
      newtypeName,
      newtypeQualifiedName,
      newtypeWrapped,
      newtypeSeparated,
      newtypeLabeled,
      newtypeRow,
      newtypeModule,
      newtypeModuleHeader,
      newtypeModuleBody,
      newtypeInstance,
      newtypeImportDecl,
      newtypeDataCtor,
      newtypeGuardedExpr,
      newtypePatternGuard,
      newtypeWhere
    };
  }
});

// output/PureScript.CST.Print/index.js
var require_PureScript_CST2 = __commonJS({
  "output/PureScript.CST.Print/index.js"(exports2, module2) {
    "use strict";
    var Data_Foldable = require_Data25();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Void = require_Data6();
    var PureScript_CST_Types = require_PureScript_CST();
    var ShowLayout = function() {
      function ShowLayout2() {
      }
      ;
      ShowLayout2.value = new ShowLayout2();
      return ShowLayout2;
    }();
    var HideLayout = function() {
      function HideLayout2() {
      }
      ;
      HideLayout2.value = new HideLayout2();
      return HideLayout2;
    }();
    var printQualified = function(moduleName) {
      return function(name) {
        if (moduleName instanceof Data_Maybe.Nothing) {
          return name;
        }
        ;
        if (moduleName instanceof Data_Maybe.Just) {
          return Data_Newtype.unwrap()(moduleName.value0) + ("." + name);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Print (line 124, column 34 - line 126, column 38): " + [moduleName.constructor.name]);
      };
    };
    var printTokenWithOption = function(option) {
      return function(v) {
        if (v instanceof PureScript_CST_Types.TokLeftParen) {
          return "(";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokRightParen) {
          return ")";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokLeftBrace) {
          return "{";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokRightBrace) {
          return "}";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokLeftSquare) {
          return "[";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokRightSquare) {
          return "]";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokLeftArrow) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "<-";
          }
          ;
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "\u2190";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 51, column 5 - line 53, column 21): " + [v.value0.constructor.name]);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokRightArrow) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "->";
          }
          ;
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "\u2192";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 55, column 5 - line 57, column 21): " + [v.value0.constructor.name]);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "=>";
          }
          ;
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "\u21D2";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 59, column 5 - line 61, column 21): " + [v.value0.constructor.name]);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokDoubleColon) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "::";
          }
          ;
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "\u2237";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 63, column 5 - line 65, column 21): " + [v.value0.constructor.name]);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokForall) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "forall";
          }
          ;
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "\u2200";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 67, column 5 - line 69, column 21): " + [v.value0.constructor.name]);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokEquals) {
          return "=";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokPipe) {
          return "|";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokTick) {
          return "`";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokDot) {
          return ".";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokComma) {
          return ",";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokUnderscore) {
          return "_";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokBackslash) {
          return "\\";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokAt) {
          return "@";
        }
        ;
        if (v instanceof PureScript_CST_Types.TokLowerName) {
          return printQualified(v.value0)(v.value1);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokUpperName) {
          return printQualified(v.value0)(v.value1);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokOperator) {
          return printQualified(v.value0)(v.value1);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokSymbolName) {
          return printQualified(v.value0)("(" + (v.value1 + ")"));
        }
        ;
        if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
          if (v.value0 instanceof PureScript_CST_Types.ASCII) {
            return "(->)";
          }
          ;
          if (v.value0 instanceof PureScript_CST_Types.Unicode) {
            return "(\u2192)";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 95, column 5 - line 97, column 23): " + [v.value0.constructor.name]);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokHole) {
          return "?" + v.value0;
        }
        ;
        if (v instanceof PureScript_CST_Types.TokChar) {
          return "'" + (v.value0 + "'");
        }
        ;
        if (v instanceof PureScript_CST_Types.TokString) {
          return '"' + (v.value0 + '"');
        }
        ;
        if (v instanceof PureScript_CST_Types.TokRawString) {
          return '"""' + (v.value0 + '"""');
        }
        ;
        if (v instanceof PureScript_CST_Types.TokInt) {
          return v.value0;
        }
        ;
        if (v instanceof PureScript_CST_Types.TokNumber) {
          return v.value0;
        }
        ;
        if (v instanceof PureScript_CST_Types.TokLayoutStart) {
          if (option instanceof ShowLayout) {
            return "{";
          }
          ;
          if (option instanceof HideLayout) {
            return "";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 111, column 5 - line 113, column 23): " + [option.constructor.name]);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokLayoutSep) {
          if (option instanceof ShowLayout) {
            return ";";
          }
          ;
          if (option instanceof HideLayout) {
            return "";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 115, column 5 - line 117, column 23): " + [option.constructor.name]);
        }
        ;
        if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
          if (option instanceof ShowLayout) {
            return "}";
          }
          ;
          if (option instanceof HideLayout) {
            return "";
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Print (line 119, column 5 - line 121, column 23): " + [option.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Print (line 37, column 31 - line 121, column 23): " + [v.constructor.name]);
      };
    };
    var printToken = printTokenWithOption(HideLayout.value);
    var printLineFeed = function(v) {
      if (v instanceof PureScript_CST_Types.LF) {
        return "\n";
      }
      ;
      if (v instanceof PureScript_CST_Types.CRLF) {
        return "\r\n";
      }
      ;
      throw new Error("Failed pattern match at PureScript.CST.Print (line 135, column 17 - line 137, column 17): " + [v.constructor.name]);
    };
    var printComment = function(k) {
      return function(v) {
        if (v instanceof PureScript_CST_Types.Comment) {
          return v.value0;
        }
        ;
        if (v instanceof PureScript_CST_Types.Space) {
          return Data_Monoid.power(Data_Monoid.monoidString)(" ")(v.value0);
        }
        ;
        if (v instanceof PureScript_CST_Types.Line) {
          return Data_Monoid.power(Data_Monoid.monoidString)(k(v.value0))(v.value1);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Print (line 129, column 18 - line 132, column 28): " + [v.constructor.name]);
      };
    };
    var printSourceTokenWithOption = function(option) {
      return function(tok) {
        return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(printComment(printLineFeed))(tok.leadingComments) + (printTokenWithOption(option)(tok.value) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(printComment(Data_Void.absurd))(tok.trailingComments));
      };
    };
    var printSourceToken = printSourceTokenWithOption(HideLayout.value);
    module2.exports = {
      printToken,
      printSourceToken,
      ShowLayout,
      HideLayout,
      printTokenWithOption,
      printSourceTokenWithOption,
      printComment,
      printLineFeed,
      printQualified
    };
  }
});

// output/PureScript.CST.Errors/index.js
var require_PureScript_CST3 = __commonJS({
  "output/PureScript.CST.Errors/index.js"(exports2, module2) {
    "use strict";
    var PureScript_CST_Print = require_PureScript_CST2();
    var PureScript_CST_Types = require_PureScript_CST();
    var UnexpectedEof = function() {
      function UnexpectedEof2() {
      }
      ;
      UnexpectedEof2.value = new UnexpectedEof2();
      return UnexpectedEof2;
    }();
    var ExpectedEof = function() {
      function ExpectedEof2(value0) {
        this.value0 = value0;
      }
      ;
      ExpectedEof2.create = function(value0) {
        return new ExpectedEof2(value0);
      };
      return ExpectedEof2;
    }();
    var UnexpectedToken = function() {
      function UnexpectedToken2(value0) {
        this.value0 = value0;
      }
      ;
      UnexpectedToken2.create = function(value0) {
        return new UnexpectedToken2(value0);
      };
      return UnexpectedToken2;
    }();
    var ExpectedToken = function() {
      function ExpectedToken2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExpectedToken2.create = function(value0) {
        return function(value1) {
          return new ExpectedToken2(value0, value1);
        };
      };
      return ExpectedToken2;
    }();
    var ExpectedClass = function() {
      function ExpectedClass2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExpectedClass2.create = function(value0) {
        return function(value1) {
          return new ExpectedClass2(value0, value1);
        };
      };
      return ExpectedClass2;
    }();
    var LexExpected = function() {
      function LexExpected2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LexExpected2.create = function(value0) {
        return function(value1) {
          return new LexExpected2(value0, value1);
        };
      };
      return LexExpected2;
    }();
    var LexInvalidCharEscape = function() {
      function LexInvalidCharEscape2(value0) {
        this.value0 = value0;
      }
      ;
      LexInvalidCharEscape2.create = function(value0) {
        return new LexInvalidCharEscape2(value0);
      };
      return LexInvalidCharEscape2;
    }();
    var LexCharEscapeOutOfRange = function() {
      function LexCharEscapeOutOfRange2(value0) {
        this.value0 = value0;
      }
      ;
      LexCharEscapeOutOfRange2.create = function(value0) {
        return new LexCharEscapeOutOfRange2(value0);
      };
      return LexCharEscapeOutOfRange2;
    }();
    var LexHexOutOfRange = function() {
      function LexHexOutOfRange2(value0) {
        this.value0 = value0;
      }
      ;
      LexHexOutOfRange2.create = function(value0) {
        return new LexHexOutOfRange2(value0);
      };
      return LexHexOutOfRange2;
    }();
    var LexIntOutOfRange = function() {
      function LexIntOutOfRange2(value0) {
        this.value0 = value0;
      }
      ;
      LexIntOutOfRange2.create = function(value0) {
        return new LexIntOutOfRange2(value0);
      };
      return LexIntOutOfRange2;
    }();
    var LexNumberOutOfRange = function() {
      function LexNumberOutOfRange2(value0) {
        this.value0 = value0;
      }
      ;
      LexNumberOutOfRange2.create = function(value0) {
        return new LexNumberOutOfRange2(value0);
      };
      return LexNumberOutOfRange2;
    }();
    var RecoveredError = function(x) {
      return x;
    };
    var printTokenError = function(v) {
      if (v instanceof PureScript_CST_Types.TokLeftParen) {
        return "'('";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokRightParen) {
        return "')'";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokLeftBrace) {
        return "'{'";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokRightBrace) {
        return "'}'";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokLeftSquare) {
        return "'['";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokRightSquare) {
        return "']'";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokLeftArrow) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
          return "'<-'";
        }
        ;
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
          return "'\u2190'";
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 72, column 5 - line 74, column 23): " + [v.value0.constructor.name]);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokRightArrow) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
          return "'->'";
        }
        ;
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
          return "'\u2192'";
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 76, column 5 - line 78, column 23): " + [v.value0.constructor.name]);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
          return "'=>'";
        }
        ;
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
          return "'\u21D2'";
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 80, column 5 - line 82, column 23): " + [v.value0.constructor.name]);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokDoubleColon) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
          return "'::'";
        }
        ;
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
          return "'\u2237'";
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 84, column 5 - line 86, column 23): " + [v.value0.constructor.name]);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokForall) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
          return "forall";
        }
        ;
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
          return "'\u2200'";
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 88, column 5 - line 90, column 23): " + [v.value0.constructor.name]);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokEquals) {
        return "'='";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokPipe) {
        return "'|'";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokTick) {
        return "`";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokDot) {
        return ".";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokComma) {
        return "','";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokUnderscore) {
        return "'_'";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokBackslash) {
        return "'\\'";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokAt) {
        return "'@'";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokLowerName) {
        return "identifier " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokUpperName) {
        return "proper identifier " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokOperator) {
        return "operator " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokSymbolName) {
        return "symbol " + PureScript_CST_Print.printQualified(v.value0)(v.value1);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
        if (v.value0 instanceof PureScript_CST_Types.ASCII) {
          return "(->)";
        }
        ;
        if (v.value0 instanceof PureScript_CST_Types.Unicode) {
          return "(\u2192)";
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Errors (line 116, column 5 - line 118, column 23): " + [v.value0.constructor.name]);
      }
      ;
      if (v instanceof PureScript_CST_Types.TokHole) {
        return "hole ?" + v.value0;
      }
      ;
      if (v instanceof PureScript_CST_Types.TokChar) {
        return "char literal '" + (v.value0 + "'");
      }
      ;
      if (v instanceof PureScript_CST_Types.TokString) {
        return "string literal";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokRawString) {
        return "raw string literal";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokInt) {
        return "int literal " + v.value0;
      }
      ;
      if (v instanceof PureScript_CST_Types.TokNumber) {
        return "number literal " + v.value0;
      }
      ;
      if (v instanceof PureScript_CST_Types.TokLayoutStart) {
        return "start of indented block";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokLayoutSep) {
        return "new indented block item";
      }
      ;
      if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
        return "end of indented block";
      }
      ;
      throw new Error("Failed pattern match at PureScript.CST.Errors (line 58, column 19 - line 136, column 28): " + [v.constructor.name]);
    };
    var printParseError = function(v) {
      if (v instanceof UnexpectedEof) {
        return "Unexpected end of file";
      }
      ;
      if (v instanceof ExpectedEof) {
        return "Expected end of file, saw " + printTokenError(v.value0);
      }
      ;
      if (v instanceof UnexpectedToken) {
        return "Unexpected " + printTokenError(v.value0);
      }
      ;
      if (v instanceof ExpectedToken) {
        return "Expected " + (printTokenError(v.value0) + (", saw " + printTokenError(v.value1)));
      }
      ;
      if (v instanceof ExpectedClass) {
        return "Expected " + (v.value0 + (", saw " + printTokenError(v.value1)));
      }
      ;
      if (v instanceof LexExpected) {
        return "Expected " + (v.value0 + (", saw " + v.value1));
      }
      ;
      if (v instanceof LexInvalidCharEscape) {
        return "Invalid character escape \\" + v.value0;
      }
      ;
      if (v instanceof LexCharEscapeOutOfRange) {
        return "Character escape out of range \\" + v.value0;
      }
      ;
      if (v instanceof LexHexOutOfRange) {
        return "Hex integer out of range 0x" + v.value0;
      }
      ;
      if (v instanceof LexIntOutOfRange) {
        return "Int out of range " + v.value0;
      }
      ;
      if (v instanceof LexNumberOutOfRange) {
        return "Number out of range " + v.value0;
      }
      ;
      throw new Error("Failed pattern match at PureScript.CST.Errors (line 33, column 19 - line 55, column 34): " + [v.constructor.name]);
    };
    module2.exports = {
      RecoveredError,
      UnexpectedEof,
      ExpectedEof,
      UnexpectedToken,
      ExpectedToken,
      ExpectedClass,
      LexExpected,
      LexInvalidCharEscape,
      LexCharEscapeOutOfRange,
      LexHexOutOfRange,
      LexIntOutOfRange,
      LexNumberOutOfRange,
      printParseError,
      printTokenError
    };
  }
});

// output/PureScript.CST.Layout/index.js
var require_PureScript_CST4 = __commonJS({
  "output/PureScript.CST.Layout/index.js"(exports2, module2) {
    "use strict";
    var Data_Array = require_Data39();
    var Data_Boolean = require_Data();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_Ordering = require_Data9();
    var Data_Tuple = require_Data22();
    var PureScript_CST_Types = require_PureScript_CST();
    var LytRoot = function() {
      function LytRoot2() {
      }
      ;
      LytRoot2.value = new LytRoot2();
      return LytRoot2;
    }();
    var LytTopDecl = function() {
      function LytTopDecl2() {
      }
      ;
      LytTopDecl2.value = new LytTopDecl2();
      return LytTopDecl2;
    }();
    var LytTopDeclHead = function() {
      function LytTopDeclHead2() {
      }
      ;
      LytTopDeclHead2.value = new LytTopDeclHead2();
      return LytTopDeclHead2;
    }();
    var LytDeclGuard = function() {
      function LytDeclGuard2() {
      }
      ;
      LytDeclGuard2.value = new LytDeclGuard2();
      return LytDeclGuard2;
    }();
    var LytCase = function() {
      function LytCase2() {
      }
      ;
      LytCase2.value = new LytCase2();
      return LytCase2;
    }();
    var LytCaseBinders = function() {
      function LytCaseBinders2() {
      }
      ;
      LytCaseBinders2.value = new LytCaseBinders2();
      return LytCaseBinders2;
    }();
    var LytCaseGuard = function() {
      function LytCaseGuard2() {
      }
      ;
      LytCaseGuard2.value = new LytCaseGuard2();
      return LytCaseGuard2;
    }();
    var LytLambdaBinders = function() {
      function LytLambdaBinders2() {
      }
      ;
      LytLambdaBinders2.value = new LytLambdaBinders2();
      return LytLambdaBinders2;
    }();
    var LytParen = function() {
      function LytParen2() {
      }
      ;
      LytParen2.value = new LytParen2();
      return LytParen2;
    }();
    var LytBrace = function() {
      function LytBrace2() {
      }
      ;
      LytBrace2.value = new LytBrace2();
      return LytBrace2;
    }();
    var LytSquare = function() {
      function LytSquare2() {
      }
      ;
      LytSquare2.value = new LytSquare2();
      return LytSquare2;
    }();
    var LytIf = function() {
      function LytIf2() {
      }
      ;
      LytIf2.value = new LytIf2();
      return LytIf2;
    }();
    var LytThen = function() {
      function LytThen2() {
      }
      ;
      LytThen2.value = new LytThen2();
      return LytThen2;
    }();
    var LytProperty = function() {
      function LytProperty2() {
      }
      ;
      LytProperty2.value = new LytProperty2();
      return LytProperty2;
    }();
    var LytForall = function() {
      function LytForall2() {
      }
      ;
      LytForall2.value = new LytForall2();
      return LytForall2;
    }();
    var LytTick = function() {
      function LytTick2() {
      }
      ;
      LytTick2.value = new LytTick2();
      return LytTick2;
    }();
    var LytLet = function() {
      function LytLet2() {
      }
      ;
      LytLet2.value = new LytLet2();
      return LytLet2;
    }();
    var LytLetStmt = function() {
      function LytLetStmt2() {
      }
      ;
      LytLetStmt2.value = new LytLetStmt2();
      return LytLetStmt2;
    }();
    var LytWhere = function() {
      function LytWhere2() {
      }
      ;
      LytWhere2.value = new LytWhere2();
      return LytWhere2;
    }();
    var LytOf = function() {
      function LytOf2() {
      }
      ;
      LytOf2.value = new LytOf2();
      return LytOf2;
    }();
    var LytDo = function() {
      function LytDo2() {
      }
      ;
      LytDo2.value = new LytDo2();
      return LytDo2;
    }();
    var LytAdo = function() {
      function LytAdo2() {
      }
      ;
      LytAdo2.value = new LytAdo2();
      return LytAdo2;
    }();
    var lytToken = function(pos) {
      return function(value) {
        return {
          range: {
            start: pos,
            end: pos
          },
          leadingComments: [],
          trailingComments: [],
          value
        };
      };
    };
    var isTopDecl = function(tokPos) {
      return function(v) {
        if (v instanceof Data_List_Types.Cons && (v.value0.value1 instanceof LytWhere && (v.value1 instanceof Data_List_Types.Cons && (v.value1.value0.value1 instanceof LytRoot && (v.value1.value1 instanceof Data_List_Types.Nil && tokPos.column === v.value0.value0.column))))) {
          return true;
        }
        ;
        return false;
      };
    };
    var isIndented = function(v) {
      if (v instanceof LytLet) {
        return true;
      }
      ;
      if (v instanceof LytLetStmt) {
        return true;
      }
      ;
      if (v instanceof LytWhere) {
        return true;
      }
      ;
      if (v instanceof LytOf) {
        return true;
      }
      ;
      if (v instanceof LytDo) {
        return true;
      }
      ;
      if (v instanceof LytAdo) {
        return true;
      }
      ;
      return false;
    };
    var eqLayoutDelim = {
      eq: function(x) {
        return function(y) {
          if (x instanceof LytRoot && y instanceof LytRoot) {
            return true;
          }
          ;
          if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
            return true;
          }
          ;
          if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
            return true;
          }
          ;
          if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
            return true;
          }
          ;
          if (x instanceof LytCase && y instanceof LytCase) {
            return true;
          }
          ;
          if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
            return true;
          }
          ;
          if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
            return true;
          }
          ;
          if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
            return true;
          }
          ;
          if (x instanceof LytParen && y instanceof LytParen) {
            return true;
          }
          ;
          if (x instanceof LytBrace && y instanceof LytBrace) {
            return true;
          }
          ;
          if (x instanceof LytSquare && y instanceof LytSquare) {
            return true;
          }
          ;
          if (x instanceof LytIf && y instanceof LytIf) {
            return true;
          }
          ;
          if (x instanceof LytThen && y instanceof LytThen) {
            return true;
          }
          ;
          if (x instanceof LytProperty && y instanceof LytProperty) {
            return true;
          }
          ;
          if (x instanceof LytForall && y instanceof LytForall) {
            return true;
          }
          ;
          if (x instanceof LytTick && y instanceof LytTick) {
            return true;
          }
          ;
          if (x instanceof LytLet && y instanceof LytLet) {
            return true;
          }
          ;
          if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
            return true;
          }
          ;
          if (x instanceof LytWhere && y instanceof LytWhere) {
            return true;
          }
          ;
          if (x instanceof LytOf && y instanceof LytOf) {
            return true;
          }
          ;
          if (x instanceof LytDo && y instanceof LytDo) {
            return true;
          }
          ;
          if (x instanceof LytAdo && y instanceof LytAdo) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var insertLayout = function(v) {
      return function(nextPos) {
        return function(stack) {
          var sepP = function(lytPos) {
            return v.range.start.column === lytPos.column && v.range.start.line !== lytPos.line;
          };
          var pushStack = function(lytPos) {
            return function(lyt) {
              return function(v1) {
                return new Data_Tuple.Tuple(new Data_List_Types.Cons(new Data_Tuple.Tuple(lytPos, lyt), v1.value0), v1.value1);
              };
            };
          };
          var popStack = function(v1) {
            return function(v2) {
              if (v2.value0 instanceof Data_List_Types.Cons && v1(v2.value0.value0.value1)) {
                return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
              }
              ;
              return v2;
            };
          };
          var offsideP = function(lytPos) {
            return function(lyt) {
              return isIndented(lyt) && v.range.start.column < lytPos.column;
            };
          };
          var offsideEndP = function(lytPos) {
            return function(lyt) {
              return isIndented(lyt) && v.range.start.column <= lytPos.column;
            };
          };
          var insertToken = function(token) {
            return function(v1) {
              return new Data_Tuple.Tuple(v1.value0, Data_Array.snoc(v1.value1)(new Data_Tuple.Tuple(token, v1.value0)));
            };
          };
          var insertStart = function(lyt) {
            return function(v1) {
              var v2 = Data_Foldable.find(Data_List_Types.foldableList)(function($298) {
                return isIndented(Data_Tuple.snd($298));
              })(v1.value0);
              if (v2 instanceof Data_Maybe.Just && nextPos.column <= v2.value0.value0.column) {
                return v1;
              }
              ;
              return insertToken(lytToken(nextPos)(new PureScript_CST_Types.TokLayoutStart(nextPos.column)))(pushStack(nextPos)(lyt)(v1));
            };
          };
          var insertEnd = function(indent) {
            return insertToken(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(indent)));
          };
          var indentedP = Data_Function["const"](isIndented);
          var indentSepP = function(lytPos) {
            return function(lyt) {
              return isIndented(lyt) && sepP(lytPos);
            };
          };
          var insertSep = function(v1) {
            var sepTok = lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutSep(v.range.start.column));
            if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDecl && sepP(v1.value0.value0.value0))) {
              return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
            }
            ;
            if (v1.value0 instanceof Data_List_Types.Cons && (v1.value0.value0.value1 instanceof LytTopDeclHead && sepP(v1.value0.value0.value0))) {
              return insertToken(sepTok)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
            }
            ;
            if (v1.value0 instanceof Data_List_Types.Cons && indentSepP(v1.value0.value0.value0)(v1.value0.value0.value1)) {
              if (v1.value0.value0.value1 instanceof LytOf) {
                return pushStack(v.range.start)(LytCaseBinders.value)(insertToken(sepTok)(v1));
              }
              ;
              return insertToken(sepTok)(v1);
            }
            ;
            return v1;
          };
          var collapse = function(p) {
            var go = function($copy_v1) {
              return function($copy_acc) {
                var $tco_var_v1 = $copy_v1;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v1, acc) {
                  if (v1 instanceof Data_List_Types.Cons && p(v1.value0.value0)(v1.value0.value1)) {
                    $tco_var_v1 = v1.value1;
                    $copy_acc = function() {
                      var $111 = isIndented(v1.value0.value1);
                      if ($111) {
                        return Data_Array.snoc(acc)(new Data_Tuple.Tuple(lytToken(v.range.start)(new PureScript_CST_Types.TokLayoutEnd(v1.value0.value0.column)), v1.value1));
                      }
                      ;
                      return acc;
                    }();
                    return;
                  }
                  ;
                  $tco_done = true;
                  return new Data_Tuple.Tuple(v1, acc);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                }
                ;
                return $tco_result;
              };
            };
            return Data_Tuple.uncurry(go);
          };
          var insertDefault = function(state) {
            return insertToken(v)(insertSep(collapse(offsideP)(state)));
          };
          var insertKwProperty = function(k) {
            return function(state) {
              var v1 = insertDefault(state);
              if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                return new Data_Tuple.Tuple(v1.value0.value1, v1.value1);
              }
              ;
              return k(v1);
            };
          };
          var insert = function(v1) {
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "data")) {
              var v2 = insertDefault(v1);
              if (isTopDecl(v.range.start)(v2.value0)) {
                return pushStack(v.range.start)(LytTopDecl.value)(v2);
              }
              ;
              return popStack(function(v32) {
                return Data_Eq.eq(eqLayoutDelim)(v32)(LytProperty.value);
              })(v2);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "class")) {
              var v2 = insertDefault(v1);
              if (isTopDecl(v.range.start)(v2.value0)) {
                return pushStack(v.range.start)(LytTopDeclHead.value)(v2);
              }
              ;
              return popStack(function(v32) {
                return Data_Eq.eq(eqLayoutDelim)(v32)(LytProperty.value);
              })(v2);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "where")) {
              var whereP = function(v22) {
                return function(v32) {
                  if (v32 instanceof LytDo) {
                    return true;
                  }
                  ;
                  return offsideEndP(v22)(v32);
                };
              };
              if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytTopDeclHead) {
                return insertStart(LytWhere.value)(insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1)));
              }
              ;
              if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value0.value1 instanceof LytProperty) {
                return insertToken(v)(new Data_Tuple.Tuple(v1.value0.value1, v1.value1));
              }
              ;
              return insertStart(LytWhere.value)(insertToken(v)(collapse(whereP)(v1)));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "in")) {
              var inP = function(v22) {
                return function(v32) {
                  if (v32 instanceof LytLet) {
                    return false;
                  }
                  ;
                  if (v32 instanceof LytAdo) {
                    return false;
                  }
                  ;
                  return isIndented(v32);
                };
              };
              var v2 = collapse(inP)(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && (v2.value0.value0.value1 instanceof LytLetStmt && (v2.value0.value1 instanceof Data_List_Types.Cons && v2.value0.value1.value0.value1 instanceof LytAdo))) {
                return insertToken(v)(insertEnd(v2.value0.value1.value0.value0.column)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1.value1, v2.value1))));
              }
              ;
              if (v2.value0 instanceof Data_List_Types.Cons && isIndented(v2.value0.value0.value1)) {
                return insertToken(v)(insertEnd(v2.value0.value0.value0.column)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
              }
              ;
              return popStack(function(v32) {
                return Data_Eq.eq(eqLayoutDelim)(v32)(LytProperty.value);
              })(insertDefault(v1));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "let")) {
              var next = function(v22) {
                if (v22.value0 instanceof Data_List_Types.Cons && (v22.value0.value0.value1 instanceof LytDo && v22.value0.value0.value0.column === v.range.start.column)) {
                  return insertStart(LytLetStmt.value)(v22);
                }
                ;
                if (v22.value0 instanceof Data_List_Types.Cons && (v22.value0.value0.value1 instanceof LytAdo && v22.value0.value0.value0.column === v.range.start.column)) {
                  return insertStart(LytLetStmt.value)(v22);
                }
                ;
                return insertStart(LytLet.value)(v22);
              };
              return insertKwProperty(next)(v1);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "do") {
              return insertKwProperty(insertStart(LytDo.value))(v1);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value1 === "ado") {
              return insertKwProperty(insertStart(LytAdo.value))(v1);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "case")) {
              return insertKwProperty(pushStack(v.range.start)(LytCase.value))(v1);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "of")) {
              var v2 = collapse(indentedP)(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytCase) {
                return pushStack(nextPos)(LytCaseBinders.value)(insertStart(LytOf.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1))));
              }
              ;
              return popStack(function(v32) {
                return Data_Eq.eq(eqLayoutDelim)(v32)(LytProperty.value);
              })(insertDefault(v2));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "if")) {
              return insertKwProperty(pushStack(v.range.start)(LytIf.value))(v1);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "then")) {
              var v2 = collapse(indentedP)(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytIf) {
                return pushStack(v.range.start)(LytThen.value)(insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1)));
              }
              ;
              return popStack(function(v32) {
                return Data_Eq.eq(eqLayoutDelim)(v32)(LytProperty.value);
              })(insertDefault(v1));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "else")) {
              var v2 = collapse(indentedP)(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytThen) {
                return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
              }
              ;
              var v3 = collapse(offsideP)(v1);
              if (isTopDecl(v.range.start)(v3.value0)) {
                return insertToken(v)(v3);
              }
              ;
              return popStack(function(v4) {
                return Data_Eq.eq(eqLayoutDelim)(v4)(LytProperty.value);
              })(insertToken(v)(insertSep(v3)));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokForall) {
              return insertKwProperty(pushStack(v.range.start)(LytForall.value))(v1);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokBackslash) {
              return pushStack(v.range.start)(LytLambdaBinders.value)(insertDefault(v1));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokRightArrow) {
              var guardP = function(v22) {
                if (v22 instanceof LytCaseBinders) {
                  return true;
                }
                ;
                if (v22 instanceof LytCaseGuard) {
                  return true;
                }
                ;
                if (v22 instanceof LytLambdaBinders) {
                  return true;
                }
                ;
                return false;
              };
              var arrowP = function(v22) {
                return function(v32) {
                  if (v32 instanceof LytDo) {
                    return true;
                  }
                  ;
                  if (v32 instanceof LytOf) {
                    return false;
                  }
                  ;
                  return offsideEndP(v22)(v32);
                };
              };
              return insertToken(v)(popStack(guardP)(collapse(arrowP)(v1)));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokEquals) {
              var equalsP = function(v22) {
                return function(v32) {
                  if (v32 instanceof LytWhere) {
                    return true;
                  }
                  ;
                  if (v32 instanceof LytLet) {
                    return true;
                  }
                  ;
                  if (v32 instanceof LytLetStmt) {
                    return true;
                  }
                  ;
                  return false;
                };
              };
              var v2 = collapse(equalsP)(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytDeclGuard) {
                return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
              }
              ;
              return insertDefault(v1);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokPipe) {
              var v2 = collapse(offsideEndP)(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytOf) {
                return insertToken(v)(pushStack(v.range.start)(LytCaseGuard.value)(v2));
              }
              ;
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLet) {
                return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
              }
              ;
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytLetStmt) {
                return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
              }
              ;
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytWhere) {
                return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
              }
              ;
              return insertDefault(v1);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokTick) {
              var v2 = collapse(indentedP)(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytTick) {
                return insertToken(v)(new Data_Tuple.Tuple(v2.value0.value1, v2.value1));
              }
              ;
              return pushStack(v.range.start)(LytTick.value)(insertToken(v)(insertSep(collapse(offsideEndP)(v1))));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokComma) {
              var v2 = collapse(indentedP)(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytBrace) {
                return pushStack(v.range.start)(LytProperty.value)(insertToken(v)(v2));
              }
              ;
              return insertToken(v)(v2);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokDot) {
              var v2 = insertDefault(v1);
              if (v2.value0 instanceof Data_List_Types.Cons && v2.value0.value0.value1 instanceof LytForall) {
                return new Data_Tuple.Tuple(v2.value0.value1, v2.value1);
              }
              ;
              return pushStack(v.range.start)(LytProperty.value)(v2);
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLeftParen) {
              return pushStack(v.range.start)(LytParen.value)(insertDefault(v1));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLeftBrace) {
              return pushStack(v.range.start)(LytProperty.value)(pushStack(v.range.start)(LytBrace.value)(insertDefault(v1)));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLeftSquare) {
              return pushStack(v.range.start)(LytSquare.value)(insertDefault(v1));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokRightParen) {
              return insertToken(v)(popStack(function(v22) {
                return Data_Eq.eq(eqLayoutDelim)(v22)(LytParen.value);
              })(collapse(indentedP)(v1)));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokRightBrace) {
              return insertToken(v)(popStack(function(v22) {
                return Data_Eq.eq(eqLayoutDelim)(v22)(LytBrace.value);
              })(popStack(function(v22) {
                return Data_Eq.eq(eqLayoutDelim)(v22)(LytProperty.value);
              })(collapse(indentedP)(v1))));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokRightSquare) {
              return insertToken(v)(popStack(function(v22) {
                return Data_Eq.eq(eqLayoutDelim)(v22)(LytSquare.value);
              })(collapse(indentedP)(v1)));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokString) {
              return popStack(function(v22) {
                return Data_Eq.eq(eqLayoutDelim)(v22)(LytProperty.value);
              })(insertDefault(v1));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
              return popStack(function(v22) {
                return Data_Eq.eq(eqLayoutDelim)(v22)(LytProperty.value);
              })(insertDefault(v1));
            }
            ;
            if (v.value instanceof PureScript_CST_Types.TokOperator) {
              return insertToken(v)(insertSep(collapse(offsideEndP)(v1)));
            }
            ;
            return insertDefault(v1);
          };
          return insert(new Data_Tuple.Tuple(stack, []));
        };
      };
    };
    var ordLayoutDelim = {
      compare: function(x) {
        return function(y) {
          if (x instanceof LytRoot && y instanceof LytRoot) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytRoot) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytRoot) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytTopDecl) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytTopDecl) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytTopDeclHead) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytTopDeclHead) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytDeclGuard) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytDeclGuard) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytCase && y instanceof LytCase) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytCase) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytCase) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytCaseBinders) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytCaseBinders) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytCaseGuard) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytCaseGuard) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytLambdaBinders) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytLambdaBinders) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytParen && y instanceof LytParen) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytParen) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytParen) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytBrace && y instanceof LytBrace) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytBrace) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytBrace) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytSquare && y instanceof LytSquare) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytSquare) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytSquare) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytIf && y instanceof LytIf) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytIf) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytIf) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytThen && y instanceof LytThen) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytThen) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytThen) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytProperty && y instanceof LytProperty) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytProperty) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytProperty) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytForall && y instanceof LytForall) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytForall) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytForall) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytTick && y instanceof LytTick) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytTick) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytTick) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytLet && y instanceof LytLet) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytLet) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytLet) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytLetStmt) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytLetStmt) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytWhere && y instanceof LytWhere) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytWhere) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytWhere) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytOf && y instanceof LytOf) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytOf) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytOf) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytDo && y instanceof LytDo) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (x instanceof LytDo) {
            return Data_Ordering.LT.value;
          }
          ;
          if (y instanceof LytDo) {
            return Data_Ordering.GT.value;
          }
          ;
          if (x instanceof LytAdo && y instanceof LytAdo) {
            return Data_Ordering.EQ.value;
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Layout (line 46, column 1 - line 46, column 50): " + [x.constructor.name, y.constructor.name]);
        };
      },
      Eq0: function() {
        return eqLayoutDelim;
      }
    };
    var currentIndent = function() {
      var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons) {
            if (isIndented(v.value0.value1)) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0.value0);
            }
            ;
            if (Data_Boolean.otherwise) {
              $copy_v = v.value1;
              return;
            }
            ;
          }
          ;
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return go;
    }();
    module2.exports = {
      LytRoot,
      LytTopDecl,
      LytTopDeclHead,
      LytDeclGuard,
      LytCase,
      LytCaseBinders,
      LytCaseGuard,
      LytLambdaBinders,
      LytParen,
      LytBrace,
      LytSquare,
      LytIf,
      LytThen,
      LytProperty,
      LytForall,
      LytTick,
      LytLet,
      LytLetStmt,
      LytWhere,
      LytOf,
      LytDo,
      LytAdo,
      currentIndent,
      isIndented,
      insertLayout,
      lytToken,
      eqLayoutDelim,
      ordLayoutDelim
    };
  }
});

// output/PureScript.CST.TokenStream/index.js
var require_PureScript_CST5 = __commonJS({
  "output/PureScript.CST.TokenStream/index.js"(exports2, module2) {
    "use strict";
    var Data_Boolean = require_Data();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Lazy = require_Data40();
    var Data_List_Types = require_Data_List();
    var Data_Newtype = require_Data23();
    var Data_Tuple = require_Data22();
    var PureScript_CST_Layout = require_PureScript_CST4();
    var PureScript_CST_Types = require_PureScript_CST();
    var TokenEOF = function() {
      function TokenEOF2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokenEOF2.create = function(value0) {
        return function(value1) {
          return new TokenEOF2(value0, value1);
        };
      };
      return TokenEOF2;
    }();
    var TokenError = function() {
      function TokenError2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      TokenError2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new TokenError2(value0, value1, value2, value3);
            };
          };
        };
      };
      return TokenError2;
    }();
    var TokenCons = function() {
      function TokenCons2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      TokenCons2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new TokenCons2(value0, value1, value2, value3);
            };
          };
        };
      };
      return TokenCons2;
    }();
    var TokenStream = function(x) {
      return x;
    };
    var newtypeTokenStream = {
      Coercible0: function() {
        return void 0;
      }
    };
    var step = function() {
      var $29 = Data_Newtype.unwrap();
      return function($30) {
        return Data_Lazy.force($29($30));
      };
    }();
    var unwindLayout = function(pos) {
      return function(eof) {
        var go = function(stk) {
          return TokenStream(Data_Lazy.defer(function(v) {
            if (stk instanceof Data_List_Types.Nil) {
              return step(eof);
            }
            ;
            if (stk instanceof Data_List_Types.Cons) {
              if (stk.value0.value1 instanceof PureScript_CST_Layout.LytRoot) {
                return step(eof);
              }
              ;
              if (PureScript_CST_Layout.isIndented(stk.value0.value1)) {
                return new TokenCons(PureScript_CST_Layout.lytToken(pos)(new PureScript_CST_Types.TokLayoutEnd(stk.value0.value0.column)), pos, go(stk.value1), stk.value1);
              }
              ;
              if (Data_Boolean.otherwise) {
                return step(go(stk.value1));
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 59, column 7 - line 66, column 27): " + [stk.value0.value1.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 56, column 43 - line 66, column 27): " + [stk.constructor.name]);
          }));
        };
        return go;
      };
    };
    var layoutStack = function(stream) {
      var v = step(stream);
      if (v instanceof TokenEOF) {
        return Data_List_Types.Nil.value;
      }
      ;
      if (v instanceof TokenError) {
        return v.value3;
      }
      ;
      if (v instanceof TokenCons) {
        return v.value3;
      }
      ;
      throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 48, column 22 - line 51, column 29): " + [v.constructor.name]);
    };
    var consTokens = function(dictFoldable) {
      var go = function(v) {
        return function(v1) {
          return Data_Tuple.Tuple.create(v.value0.range.start)(TokenStream(Data_Lazy.defer(function(v2) {
            return new TokenCons(v.value0, v1.value0, v1.value1, v.value1);
          })));
        };
      };
      return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(go));
    };
    module2.exports = {
      TokenStream,
      TokenEOF,
      TokenError,
      TokenCons,
      step,
      consTokens,
      layoutStack,
      unwindLayout,
      newtypeTokenStream
    };
  }
});

// output/PureScript.CST.Lexer/index.js
var require_PureScript_CST6 = __commonJS({
  "output/PureScript.CST.Lexer/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Boolean = require_Data();
    var Data_Char = require_Data49();
    var Data_Either = require_Data16();
    var Data_EuclideanRing = require_Data18();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Int = require_Data37();
    var Data_Lazy = require_Data40();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Number = require_Data36();
    var Data_Semiring = require_Data10();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var Data_String_Regex = require_Data_String5();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var Data_String_Regex_Unsafe = require_Data_String_Regex2();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var Partial_Unsafe = require_Partial2();
    var PureScript_CST_Errors = require_PureScript_CST3();
    var PureScript_CST_Layout = require_PureScript_CST4();
    var PureScript_CST_TokenStream = require_PureScript_CST5();
    var PureScript_CST_Types = require_PureScript_CST();
    var LexFail = function() {
      function LexFail2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LexFail2.create = function(value0) {
        return function(value1) {
          return new LexFail2(value0, value1);
        };
      };
      return LexFail2;
    }();
    var LexSucc = function() {
      function LexSucc2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LexSucc2.create = function(value0) {
        return function(value1) {
          return new LexSucc2(value0, value1);
        };
      };
      return LexSucc2;
    }();
    var Lex = function(x) {
      return x;
    };
    var $$try = function(v) {
      return function(str) {
        var v1 = v(str);
        if (v1 instanceof LexFail) {
          return new LexFail(v1.value0, str);
        }
        ;
        if (v1 instanceof LexSucc) {
          return new LexSucc(v1.value0, v1.value1);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 83, column 3 - line 85, column 31): " + [v1.constructor.name]);
      };
    };
    var toModuleName = function(v) {
      if (v.length === 0) {
        return Data_Maybe.Nothing.value;
      }
      ;
      return Data_Maybe.Just.create(PureScript_CST_Types.ModuleName(Data_String_Common.joinWith(".")(v)));
    };
    var qualLength = Data_Maybe.maybe(0)(function() {
      var $248 = Data_Semiring.add(Data_Semiring.semiringInt)(1);
      var $249 = Data_Newtype.unwrap();
      return function($250) {
        return $248(Data_String_CodePoints.length($249($250)));
      };
    }());
    var optional = function(v) {
      return function(str) {
        var v1 = v(str);
        if (v1 instanceof LexFail) {
          if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v1.value1)) {
            return new LexSucc(Data_Maybe.Nothing.value, str);
          }
          ;
          if (Data_Boolean.otherwise) {
            return new LexFail(v1.value0, v1.value1);
          }
          ;
        }
        ;
        if (v1 instanceof LexSucc) {
          return new LexSucc(new Data_Maybe.Just(v1.value0), v1.value1);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 132, column 3 - line 139, column 25): " + [v1.constructor.name]);
      };
    };
    var mkUnexpected = function(str) {
      var start = Data_String_CodePoints.take(6)(str);
      var len = Data_String_CodePoints.length(start);
      var $87 = len === 0;
      if ($87) {
        return "end of file";
      }
      ;
      var $88 = len < 6;
      if ($88) {
        return start;
      }
      ;
      return start + "...";
    };
    var regex = function(mkErr) {
      return function(regexStr) {
        var matchRegex = Data_String_Regex_Unsafe.unsafeRegex("^(?:" + (regexStr + ")"))(Data_String_Regex_Flags.unicode);
        return function(str) {
          var v = Data_String_Regex.match(matchRegex)(str);
          var v1 = function(v2) {
            return new LexFail(function(v3) {
              return mkErr(mkUnexpected(str));
            }, str);
          };
          if (v instanceof Data_Maybe.Just) {
            var $90 = Data_Array_NonEmpty.head(v.value0);
            if ($90 instanceof Data_Maybe.Just) {
              return new LexSucc($90.value0, Data_String_CodeUnits.drop(Data_String_CodeUnits.length($90.value0))(str));
            }
            ;
            return v1(true);
          }
          ;
          return v1(true);
        };
      };
    };
    var satisfy = function(mkErr) {
      return function(p) {
        return function(str) {
          var v = Data_String_CodeUnits.charAt(0)(str);
          if (v instanceof Data_Maybe.Just && p(v.value0)) {
            return new LexSucc(v.value0, Data_String_CodeUnits.drop(1)(str));
          }
          ;
          return new LexFail(function(v1) {
            return mkErr(mkUnexpected(str));
          }, str);
        };
      };
    };
    var string = function(mkErr) {
      return function(match) {
        return function(str) {
          var $95 = Data_String_CodeUnits.take(Data_String_CodeUnits.length(match))(str) === match;
          if ($95) {
            return new LexSucc(match, Data_String_CodeUnits.drop(Data_String_CodeUnits.length(match))(str));
          }
          ;
          return new LexFail(function(v) {
            return mkErr(mkUnexpected(str));
          }, str);
        };
      };
    };
    var many = function(v) {
      return function(str) {
        var go = function($copy_acc) {
          return function($copy_str$prime) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, str$prime) {
              var v1 = v(str$prime);
              if (v1 instanceof LexFail) {
                if (Data_String_CodeUnits.length(str$prime) === Data_String_CodeUnits.length(v1.value1)) {
                  $tco_done = true;
                  return new LexSucc(acc, str$prime);
                }
                ;
                if (Data_Boolean.otherwise) {
                  $tco_done = true;
                  return new LexFail(v1.value0, v1.value1);
                }
                ;
              }
              ;
              if (v1 instanceof LexSucc) {
                $tco_var_acc = Data_Array.snoc(acc)(v1.value0);
                $copy_str$prime = v1.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 153, column 7 - line 160, column 38): " + [v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_str$prime);
            }
            ;
            return $tco_result;
          };
        };
        return go([])(str);
      };
    };
    var functorLex = {
      map: function(f) {
        return function(v) {
          return function(str) {
            var v1 = v(str);
            if (v1 instanceof LexFail) {
              return new LexFail(v1.value0, v1.value1);
            }
            ;
            if (v1 instanceof LexSucc) {
              return new LexSucc(f(v1.value0), v1.value1);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Lexer (line 45, column 5 - line 47, column 37): " + [v1.constructor.name]);
          };
        };
      }
    };
    var spaceComment = Data_Functor.map(functorLex)(Data_String_CodeUnits.length)(regex(PureScript_CST_Errors.LexExpected.create("spaces"))(" +"));
    var fail = function($251) {
      return Lex(LexFail.create(Data_Function["const"]($251)));
    };
    var char$prime = function(mkErr) {
      return function(res) {
        return function(match) {
          return function(str) {
            var $109 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
            if ($109) {
              return new LexSucc(res, Data_String_CodeUnits.drop(1)(str));
            }
            ;
            return new LexFail(function(v) {
              return mkErr(mkUnexpected(str));
            }, str);
          };
        };
      };
    };
    var $$char = function(mkErr) {
      return function(match) {
        return function(str) {
          var $110 = Data_String_CodeUnits.singleton(match) === Data_String_CodeUnits.take(1)(str);
          if ($110) {
            return new LexSucc(match, Data_String_CodeUnits.drop(1)(str));
          }
          ;
          return new LexFail(function(v) {
            return mkErr(mkUnexpected(str));
          }, str);
        };
      };
    };
    var bumpText = function(v) {
      return function(colOffset) {
        return function(str) {
          var go = function($copy_n) {
            return function($copy_ix) {
              var $tco_var_n = $copy_n;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(n, ix) {
                var v1 = Data_String_CodeUnits["indexOf'"]("\n")(ix)(str);
                if (v1 instanceof Data_Maybe.Just) {
                  $tco_var_n = n + 1 | 0;
                  $copy_ix = v1.value0 + 1 | 0;
                  return;
                }
                ;
                if (v1 instanceof Data_Maybe.Nothing) {
                  if (n === 0) {
                    $tco_done = true;
                    return {
                      line: v.line,
                      column: (v.column + Data_String_CodePoints.length(str) | 0) + (colOffset * 2 | 0) | 0
                    };
                  }
                  ;
                  if (Data_Boolean.otherwise) {
                    $tco_done = true;
                    return {
                      line: v.line + n | 0,
                      column: Data_String_CodePoints.length(Data_String_CodeUnits.drop(ix)(str)) + colOffset | 0
                    };
                  }
                  ;
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Lexer (line 308, column 13 - line 317, column 12): " + [v1.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_n, $copy_ix);
              }
              ;
              return $tco_result;
            };
          };
          return go(0)(0);
        };
      };
    };
    var bumpToken = function(v) {
      return function(v1) {
        if (v1 instanceof PureScript_CST_Types.TokLeftParen) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokRightParen) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokLeftBrace) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokRightBrace) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokLeftSquare) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokRightSquare) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
          return {
            line: v.line,
            column: v.column + 2 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokLeftArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
          return {
            line: v.line,
            column: v.column + 2 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokRightArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
          return {
            line: v.line,
            column: v.column + 2 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokRightFatArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.ASCII) {
          return {
            line: v.line,
            column: v.column + 2 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokDoubleColon && v1.value0 instanceof PureScript_CST_Types.Unicode) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.ASCII) {
          return {
            line: v.line,
            column: v.column + 6 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokForall && v1.value0 instanceof PureScript_CST_Types.Unicode) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokEquals) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokPipe) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokTick) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokDot) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokComma) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokUnderscore) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokBackslash) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokAt) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokLowerName) {
          return {
            line: v.line,
            column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokUpperName) {
          return {
            line: v.line,
            column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokOperator) {
          return {
            line: v.line,
            column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokSymbolName) {
          return {
            line: v.line,
            column: (v.column + qualLength(v1.value0) | 0) + Data_String_CodePoints.length(v1.value1) | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.Unicode) {
          return {
            line: v.line,
            column: v.column + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokSymbolArrow && v1.value0 instanceof PureScript_CST_Types.ASCII) {
          return {
            line: v.line,
            column: v.column + 4 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokHole) {
          return {
            line: v.line,
            column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 1 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokChar) {
          return {
            line: v.line,
            column: (v.column + Data_String_CodePoints.length(v1.value0) | 0) + 2 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokInt) {
          return {
            line: v.line,
            column: v.column + Data_String_CodePoints.length(v1.value0) | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokNumber) {
          return {
            line: v.line,
            column: v.column + Data_String_CodePoints.length(v1.value0) | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokString) {
          return bumpText(v)(1)(v1.value0);
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokRawString) {
          return bumpText(v)(3)(v1.value0);
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokLayoutStart) {
          return v;
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokLayoutSep) {
          return v;
        }
        ;
        if (v1 instanceof PureScript_CST_Types.TokLayoutEnd) {
          return v;
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 225, column 34 - line 303, column 8): " + [v1.constructor.name]);
      };
    };
    var bumpComment = function(v) {
      return function(v1) {
        if (v1 instanceof PureScript_CST_Types.Comment) {
          return bumpText(v)(0)(v1.value0);
        }
        ;
        if (v1 instanceof PureScript_CST_Types.Space) {
          return {
            line: v.line,
            column: v.column + v1.value0 | 0
          };
        }
        ;
        if (v1 instanceof PureScript_CST_Types.Line) {
          return {
            line: v.line + v1.value1 | 0,
            column: 0
          };
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 320, column 36 - line 326, column 34): " + [v1.constructor.name]);
      };
    };
    var applyLex = {
      apply: function(v) {
        return function(v1) {
          return function(str) {
            var v2 = v(str);
            if (v2 instanceof LexFail) {
              return new LexFail(v2.value0, v2.value1);
            }
            ;
            if (v2 instanceof LexSucc) {
              var v3 = v1(v2.value1);
              if (v3 instanceof LexFail) {
                return new LexFail(v3.value0, v3.value1);
              }
              ;
              if (v3 instanceof LexSucc) {
                return new LexSucc(v2.value0(v3.value0), v3.value1);
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 54, column 9 - line 57, column 32): " + [v3.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Lexer (line 51, column 5 - line 57, column 32): " + [v2.constructor.name]);
          };
        };
      },
      Functor0: function() {
        return functorLex;
      }
    };
    var bindLex = {
      bind: function(v) {
        return function(k) {
          return function(str) {
            var v1 = v(str);
            if (v1 instanceof LexFail) {
              return new LexFail(v1.value0, v1.value1);
            }
            ;
            if (v1 instanceof LexSucc) {
              var v2 = k(v1.value0);
              return v2(v1.value1);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Lexer (line 64, column 5 - line 68, column 16): " + [v1.constructor.name]);
          };
        };
      },
      Apply0: function() {
        return applyLex;
      }
    };
    var applicativeLex = {
      pure: function($252) {
        return Lex(LexSucc.create($252));
      },
      Apply0: function() {
        return applyLex;
      }
    };
    var altLex = {
      alt: function(v) {
        return function(v1) {
          return function(str) {
            var v2 = v(str);
            if (v2 instanceof LexFail) {
              if (Data_String_CodeUnits.length(str) === Data_String_CodeUnits.length(v2.value1)) {
                return v1(str);
              }
              ;
              if (Data_Boolean.otherwise) {
                return new LexFail(v2.value0, v2.value1);
              }
              ;
            }
            ;
            if (v2 instanceof LexSucc) {
              return new LexSucc(v2.value0, v2.value1);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Lexer (line 72, column 5 - line 79, column 20): " + [v2.constructor.name]);
          };
        };
      },
      Functor0: function() {
        return functorLex;
      }
    };
    var comment = Control_Alt.alt(altLex)(regex(PureScript_CST_Errors.LexExpected.create("block comment"))("\\{-(-(?!\\})|[^-]+)*(-\\}|$)"))(regex(PureScript_CST_Errors.LexExpected.create("line comment"))("--[^\\r\\n]*"));
    var lineComment = Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(function() {
      var $253 = PureScript_CST_Types.Line.create(PureScript_CST_Types.LF.value);
      return function($254) {
        return $253(Data_String_CodePoints.length($254));
      };
    }())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("\n+")))(Data_Functor.map(functorLex)(function() {
      var $255 = PureScript_CST_Types.Line.create(PureScript_CST_Types.CRLF.value);
      return function($256) {
        return $255(function(v) {
          return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v)(2);
        }(Data_String_CodePoints.length($256)));
      };
    }())(regex(PureScript_CST_Errors.LexExpected.create("newline"))("(?:\r\n)+")));
    var leadingComments = many(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)))(lineComment));
    var token = function() {
      var tokenTick = char$prime(PureScript_CST_Errors.LexExpected.create("backtick"))(PureScript_CST_Types.TokTick.value)("`");
      var tokenRightSquare = char$prime(PureScript_CST_Errors.LexExpected.create("right square"))(PureScript_CST_Types.TokRightSquare.value)("]");
      var tokenRightParen = char$prime(PureScript_CST_Errors.LexExpected.create("right paren"))(PureScript_CST_Types.TokRightParen.value)(")");
      var tokenRightBrace = char$prime(PureScript_CST_Errors.LexExpected.create("right brace"))(PureScript_CST_Types.TokRightBrace.value)("}");
      var tokenLeftSquare = char$prime(PureScript_CST_Errors.LexExpected.create("left square"))(PureScript_CST_Types.TokLeftSquare.value)("[");
      var tokenLeftParen = char$prime(PureScript_CST_Errors.LexExpected.create("left paren"))(PureScript_CST_Types.TokLeftParen.value)("(");
      var tokenLeftBrace = char$prime(PureScript_CST_Errors.LexExpected.create("left brace"))(PureScript_CST_Types.TokLeftBrace.value)("{");
      var tokenComma = char$prime(PureScript_CST_Errors.LexExpected.create("comma"))(PureScript_CST_Types.TokComma.value)(",");
      var stripUnderscores = Data_String_Common.replaceAll("_")("");
      var stringSpaceEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("whitespace escape"))("\\\\[ \\r\\n]+\\\\");
      var stringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("string characters"))('[^"\\\\]+');
      var rawStringCharsRegex = regex(PureScript_CST_Errors.LexExpected.create("raw string characters"))('""""{0,2}([^"]+"{1,2})*[^"]*"""');
      var parseSymbolIdent = regex(PureScript_CST_Errors.LexExpected.create("symbol"))("(?:[:!#$%&*+./<=>?@\\\\^|~-]|(?!\\p{P})\\p{S})+");
      var parseSymbol = Data_Functor.map(functorLex)(function(v) {
        return function(v1) {
          if (v1 instanceof Data_Maybe.Nothing) {
            if (v === "->") {
              return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.ASCII.value);
            }
            ;
            if (v === "\u2192") {
              return new PureScript_CST_Types.TokSymbolArrow(PureScript_CST_Types.Unicode.value);
            }
            ;
            return new PureScript_CST_Types.TokSymbolName(Data_Maybe.Nothing.value, v);
          }
          ;
          return new PureScript_CST_Types.TokSymbolName(v1, v);
        };
      })($$try(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(tokenLeftParen)(parseSymbolIdent))(tokenRightParen)));
      var parseStringSpaceEscape = Data_Functor.map(functorLex)(function(v) {
        return {
          raw: v,
          string: ""
        };
      })(stringSpaceEscapeRegex);
      var parseStringChars = Data_Functor.map(functorLex)(function(v) {
        return {
          raw: v,
          string: v
        };
      })(stringCharsRegex);
      var parseRawString = Data_Functor.map(functorLex)(function(v) {
        return PureScript_CST_Types.TokRawString.create(Data_String_CodeUnits.dropRight(3)(Data_String_CodeUnits.drop(3)(v)));
      })(rawStringCharsRegex);
      var parseProper = regex(PureScript_CST_Errors.LexExpected.create("proper name"))("\\p{Lu}[\\p{L}0-9_']*");
      var parseUpper = Data_Functor.map(functorLex)(Data_Function.flip(PureScript_CST_Types.TokUpperName.create))(parseProper);
      var parseOperator = Data_Functor.map(functorLex)(function(v) {
        return function(v1) {
          if (v1 instanceof Data_Maybe.Nothing) {
            if (v === "<-") {
              return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.ASCII.value);
            }
            ;
            if (v === "\u2190") {
              return new PureScript_CST_Types.TokLeftArrow(PureScript_CST_Types.Unicode.value);
            }
            ;
            if (v === "->") {
              return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.ASCII.value);
            }
            ;
            if (v === "\u2192") {
              return new PureScript_CST_Types.TokRightArrow(PureScript_CST_Types.Unicode.value);
            }
            ;
            if (v === "=>") {
              return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.ASCII.value);
            }
            ;
            if (v === "\u21D2") {
              return new PureScript_CST_Types.TokRightFatArrow(PureScript_CST_Types.Unicode.value);
            }
            ;
            if (v === "::") {
              return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.ASCII.value);
            }
            ;
            if (v === "\u2237") {
              return new PureScript_CST_Types.TokDoubleColon(PureScript_CST_Types.Unicode.value);
            }
            ;
            if (v === "\u2200") {
              return new PureScript_CST_Types.TokForall(PureScript_CST_Types.Unicode.value);
            }
            ;
            if (v === "=") {
              return PureScript_CST_Types.TokEquals.value;
            }
            ;
            if (v === ".") {
              return PureScript_CST_Types.TokDot.value;
            }
            ;
            if (v === "\\") {
              return PureScript_CST_Types.TokBackslash.value;
            }
            ;
            if (v === "|") {
              return PureScript_CST_Types.TokPipe.value;
            }
            ;
            if (v === "@") {
              return PureScript_CST_Types.TokAt.value;
            }
            ;
            if (v === "`") {
              return PureScript_CST_Types.TokTick.value;
            }
            ;
            return new PureScript_CST_Types.TokOperator(Data_Maybe.Nothing.value, v);
          }
          ;
          return new PureScript_CST_Types.TokOperator(v1, v);
        };
      })(parseSymbolIdent);
      var parseIdent = regex(PureScript_CST_Errors.LexExpected.create("ident"))("[\\p{Ll}_][\\p{L}0-9_']*");
      var parseLower = Data_Functor.map(functorLex)(function(v) {
        return function(v1) {
          if (v1 instanceof Data_Maybe.Nothing) {
            if (v === "forall") {
              return new PureScript_CST_Types.TokForall(PureScript_CST_Types.ASCII.value);
            }
            ;
            if (v === "_") {
              return PureScript_CST_Types.TokUnderscore.value;
            }
            ;
            return new PureScript_CST_Types.TokLowerName(Data_Maybe.Nothing.value, v);
          }
          ;
          return new PureScript_CST_Types.TokLowerName(v1, v);
        };
      })(parseIdent);
      var parseName = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseLower)(parseUpper))(parseOperator))(parseSymbol);
      var parseExponentSign = Control_Alt.alt(altLex)(string(PureScript_CST_Errors.LexExpected.create("negative"))("-"))(string(PureScript_CST_Errors.LexExpected.create("positive"))("+"));
      var intPartRegex = regex(PureScript_CST_Errors.LexExpected.create("int part"))("(0|[1-9][0-9_]*)");
      var parseExponentPart = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function(v) {
        return function(v1) {
          return {
            sign: v,
            exponent: v1
          };
        };
      })(optional(parseExponentSign)))(intPartRegex);
      var hexIntRegex = regex(PureScript_CST_Errors.LexExpected.create("hex int"))("[a-fA-F0-9]+");
      var hexIntPrefix = string(PureScript_CST_Errors.LexExpected.create("hex int prefix"))("0x");
      var parseHexInt = Control_Bind.bind(bindLex)(Control_Apply.applySecond(applyLex)(hexIntPrefix)(hexIntRegex))(function(raw) {
        var v = Data_Int.fromStringAs(Data_Int.hexadecimal)(raw);
        if (v instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt("0x" + raw, new PureScript_CST_Types.SmallInt(v.value0)));
        }
        ;
        if (v instanceof Data_Maybe.Nothing) {
          return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt("0x" + raw, new PureScript_CST_Types.BigHex(raw)));
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 561, column 5 - line 565, column 49): " + [v.constructor.name]);
      });
      var hexEscapeRegex = regex(PureScript_CST_Errors.LexExpected.create("hex"))("[a-fA-F0-9]{1,6}");
      var parseHexEscape = Control_Bind.bind(bindLex)(hexEscapeRegex)(function(esc) {
        var v = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Data_Char.fromCharCode)(Data_Int.fromStringAs(Data_Int.hexadecimal)(esc));
        if (v instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(applicativeLex)({
            raw: "\\x" + esc,
            "char": v.value0
          });
        }
        ;
        if (v instanceof Data_Maybe.Nothing) {
          return fail(new PureScript_CST_Errors.LexCharEscapeOutOfRange(esc));
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 509, column 5 - line 513, column 43): " + [v.constructor.name]);
      });
      var fractionPartRegex = regex(PureScript_CST_Errors.LexExpected.create("fraction part"))("[0-9_]+");
      var charSingleQuote = $$char(PureScript_CST_Errors.LexExpected.create("single quote"))("'");
      var charQuote = $$char(PureScript_CST_Errors.LexExpected.create("quote"))('"');
      var charQuestionMark = $$char(PureScript_CST_Errors.LexExpected.create("question mark"))("?");
      var parseHole = Data_Functor.map(functorLex)(function(v) {
        return new PureScript_CST_Types.TokHole(v);
      })($$try(Control_Apply.applySecond(applyLex)(charQuestionMark)(Control_Alt.alt(altLex)(parseIdent)(parseProper))));
      var charExponent = $$char(PureScript_CST_Errors.LexExpected.create("exponent"))("e");
      var charDot = $$char(PureScript_CST_Errors.LexExpected.create("dot"))(".");
      var parseModuleName = Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function(v) {
        return function(v1) {
          return v1(toModuleName(v));
        };
      })(many($$try(Control_Apply.applyFirst(applyLex)(parseProper)(charDot)))))(parseName);
      var parseNumber = Control_Bind.bind(bindLex)(intPartRegex)(function(intPart) {
        return Control_Bind.bind(bindLex)(optional($$try(Control_Apply.applySecond(applyLex)(charDot)(fractionPartRegex))))(function(fractionPart) {
          return Control_Bind.bind(bindLex)(optional(Control_Apply.applySecond(applyLex)(charExponent)(parseExponentPart)))(function(exponentPart) {
            var $211 = Data_Maybe.isNothing(fractionPart) && Data_Maybe.isNothing(exponentPart);
            if ($211) {
              var intVal = stripUnderscores(intPart);
              var v = Data_Int.fromString(intVal);
              if (v instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt(intPart, new PureScript_CST_Types.SmallInt(v.value0)));
              }
              ;
              if (v instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokInt(intPart, new PureScript_CST_Types.BigInt(intVal)));
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 573, column 7 - line 577, column 48): " + [v.constructor.name]);
            }
            ;
            var raw = intPart + (Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function(fr) {
              return "." + fr;
            })(fractionPart) + Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function(ex) {
              return "e" + (Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(ex.sign) + ex.exponent);
            })(exponentPart));
            var v = Data_Number.fromString(stripUnderscores(raw));
            if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(applicativeLex)(new PureScript_CST_Types.TokNumber(raw, v.value0));
            }
            ;
            if (v instanceof Data_Maybe.Nothing) {
              return fail(new PureScript_CST_Errors.LexNumberOutOfRange(raw));
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Lexer (line 584, column 7 - line 588, column 41): " + [v.constructor.name]);
          });
        });
      });
      var parseNumericLiteral = Control_Alt.alt(altLex)(parseHexInt)(parseNumber);
      var charBackslash = $$char(PureScript_CST_Errors.LexExpected.create("backslash"))("\\");
      var charAny = satisfy(PureScript_CST_Errors.LexExpected.create("char"))(Data_Function["const"](true));
      var parseEscape = Control_Bind.bind(bindLex)(charAny)(function(ch) {
        if (ch === "t") {
          return Control_Applicative.pure(applicativeLex)({
            raw: "\\t",
            "char": "	"
          });
        }
        ;
        if (ch === "r") {
          return Control_Applicative.pure(applicativeLex)({
            raw: "\\r",
            "char": "\r"
          });
        }
        ;
        if (ch === "n") {
          return Control_Applicative.pure(applicativeLex)({
            raw: "\\n",
            "char": "\n"
          });
        }
        ;
        if (ch === '"') {
          return Control_Applicative.pure(applicativeLex)({
            raw: '\\"',
            "char": '"'
          });
        }
        ;
        if (ch === "'") {
          return Control_Applicative.pure(applicativeLex)({
            raw: "\\'",
            "char": "'"
          });
        }
        ;
        if (ch === "\\") {
          return Control_Applicative.pure(applicativeLex)({
            raw: "\\\\",
            "char": "\\"
          });
        }
        ;
        if (ch === "x") {
          return parseHexEscape;
        }
        ;
        return fail(PureScript_CST_Errors.LexInvalidCharEscape.create(Data_String_CodeUnits.singleton(ch)));
      });
      var parseChar = Control_Bind.bind(bindLex)(charAny)(function(ch) {
        if (ch === "\\") {
          return parseEscape;
        }
        ;
        if (ch === "'") {
          return fail(new PureScript_CST_Errors.LexExpected("character", "empty character literal"));
        }
        ;
        return Control_Applicative.pure(applicativeLex)({
          raw: Data_String_CodeUnits.singleton(ch),
          "char": ch
        });
      });
      var parseCharLiteral = Data_Functor.map(functorLex)(function(v) {
        return new PureScript_CST_Types.TokChar(v.raw, v["char"]);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charSingleQuote)(parseChar))(charSingleQuote));
      var parseStringEscape = Data_Functor.map(functorLex)(function(v) {
        return {
          raw: v.raw,
          string: Data_String_CodeUnits.singleton(v["char"])
        };
      })(Control_Apply.applySecond(applyLex)(charBackslash)(parseEscape));
      var parseStringPart = Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseStringChars)(parseStringSpaceEscape))(parseStringEscape);
      var parseString = Data_Functor.map(functorLex)(function(v) {
        var v1 = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons({
          reflectSymbol: function() {
            return "raw";
          }
        })(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordCons({
          reflectSymbol: function() {
            return "string";
          }
        })(Data_Monoid.monoidString)()(Data_Monoid.monoidRecordNil))))(v);
        return new PureScript_CST_Types.TokString(v1.raw, v1.string);
      })(Control_Apply.applyFirst(applyLex)(Control_Apply.applySecond(applyLex)(charQuote)(many(parseStringPart)))(charQuote));
      var parseStringLiteral = Control_Alt.alt(altLex)(parseRawString)(parseString);
      return Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(Control_Alt.alt(altLex)(parseHole)(parseModuleName))(parseCharLiteral))(parseStringLiteral))(parseNumericLiteral))(tokenLeftParen))(tokenRightParen))(tokenLeftBrace))(tokenRightBrace))(tokenLeftSquare))(tokenRightSquare))(tokenTick))(tokenComma);
    }();
    var lexToken = function($257) {
      return function(v) {
        if (v instanceof LexSucc && v.value1 === "") {
          return new Data_Either.Right(v.value0);
        }
        ;
        if (v instanceof LexSucc) {
          return new Data_Either.Left(function(v1) {
            return new PureScript_CST_Errors.ExpectedEof(v.value0);
          });
        }
        ;
        if (v instanceof LexFail) {
          return new Data_Either.Left(v.value0);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 217, column 18 - line 220, column 28): " + [v.constructor.name]);
      }(token($257));
    };
    var trailingComments = many(Control_Alt.alt(altLex)(Data_Functor.map(functorLex)(PureScript_CST_Types.Comment.create)(comment))(Data_Functor.map(functorLex)(PureScript_CST_Types.Space.create)(spaceComment)));
    var lexWithState = function() {
      var token$prime = Control_Apply.apply(applyLex)(Control_Apply.apply(applyLex)(Data_Functor.map(functorLex)(function(v) {
        return function(v1) {
          return function(v2) {
            return {
              token: v,
              trailing: v1,
              nextLeading: v2
            };
          };
        };
      })(token))(trailingComments))(leadingComments);
      var go = function(stack) {
        return function(startPos) {
          return function(leading) {
            return function(str) {
              return PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function(v) {
                var $232 = str === "";
                if ($232) {
                  return PureScript_CST_TokenStream.step(PureScript_CST_TokenStream.unwindLayout(startPos)(PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function(v12) {
                    return new PureScript_CST_TokenStream.TokenEOF(startPos, leading);
                  })))(stack));
                }
                ;
                var v1 = token$prime(str);
                if (v1 instanceof LexFail) {
                  var errPos = bumpText(startPos)(0)(Data_String_CodeUnits.take(Data_String_CodeUnits.length(str) - Data_String_CodeUnits.length(v1.value1) | 0)(str));
                  return new PureScript_CST_TokenStream.TokenError(errPos, v1.value0(Data_Unit.unit), Data_Maybe.Nothing.value, stack);
                }
                ;
                if (v1 instanceof LexSucc) {
                  var endPos = bumpToken(startPos)(v1.value0.token);
                  var nextStart = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(endPos)(v1.value0.trailing))(v1.value0.nextLeading);
                  var posToken = {
                    range: {
                      start: startPos,
                      end: endPos
                    },
                    leadingComments: leading,
                    trailingComments: v1.value0.trailing,
                    value: v1.value0.token
                  };
                  var v2 = PureScript_CST_Layout.insertLayout(posToken)(nextStart)(stack);
                  return PureScript_CST_TokenStream.step(Data_Tuple.snd(PureScript_CST_TokenStream.consTokens(Data_Foldable.foldableArray)(v2.value1)(Data_Tuple.Tuple.create(nextStart)(go(v2.value0)(nextStart)(v1.value0.nextLeading)(v1.value1)))));
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Lexer (line 188, column 7 - line 207, column 63): " + [v1.constructor.name]);
              }));
            };
          };
        };
      };
      var init = function(initStack) {
        return function(initPos) {
          return function(str) {
            return PureScript_CST_TokenStream.TokenStream(Data_Lazy.defer(function(v) {
              var v1 = leadingComments(str);
              if (v1 instanceof LexFail) {
                return Partial_Unsafe.unsafeCrashWith("Leading comments can't fail.");
              }
              ;
              if (v1 instanceof LexSucc) {
                var nextPos = Data_Foldable.foldl(Data_Foldable.foldableArray)(bumpComment)(initPos)(v1.value0);
                return PureScript_CST_TokenStream.step(go(initStack)(nextPos)(v1.value0)(v1.value1));
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Lexer (line 175, column 5 - line 180, column 51): " + [v1.constructor.name]);
            }));
          };
        };
      };
      return init;
    }();
    var lex = lexWithState(new Data_List_Types.Cons(new Data_Tuple.Tuple({
      line: 0,
      column: 0
    }, PureScript_CST_Layout.LytRoot.value), Data_List_Types.Nil.value))({
      line: 0,
      column: 0
    });
    module2.exports = {
      lex,
      lexWithState,
      lexToken
    };
  }
});

// output/IdePurescript.Tokens/index.js
var require_IdePurescript6 = __commonJS({
  "output/IdePurescript.Tokens/index.js"(exports2, module2) {
    "use strict";
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Regex = require_Data_String5();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var IdePurescript_Regex = require_IdePurescript4();
    var PureScript_CST_Lexer = require_PureScript_CST6();
    var PureScript_CST_TokenStream = require_PureScript_CST5();
    var PureScript_CST_Types = require_PureScript_CST();
    var startsWithCapitalLetter = IdePurescript_Regex["test'"](Data_String_Regex.regex("^[A-Z]")(Data_String_Regex_Flags.noFlags));
    var modulePart = "((?:[A-Z][A-Za-z0-9]*\\.)*(?:[A-Z][A-Za-z0-9]*))";
    var identifierAtPoint = function(line) {
      return function(column) {
        var go = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof PureScript_CST_TokenStream.TokenCons) {
              var $2 = column < v.value0.range.start.column;
              if ($2) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
              }
              ;
              var $3 = column >= v.value0.range.end.column;
              if ($3) {
                $copy_v = PureScript_CST_TokenStream.step(v.value2);
                return;
              }
              ;
              var range = {
                left: v.value0.range.start.column,
                right: v.value0.range.end.column
              };
              var res = function(mn) {
                return function(word) {
                  return new Data_Maybe.Just({
                    range,
                    word,
                    qualifier: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.un()(PureScript_CST_Types.ModuleName))(mn)
                  });
                };
              };
              if (v.value0.value instanceof PureScript_CST_Types.TokLowerName) {
                $tco_done = true;
                return res(v.value0.value.value0)(v.value0.value.value1);
              }
              ;
              if (v.value0.value instanceof PureScript_CST_Types.TokUpperName) {
                $tco_done = true;
                return res(v.value0.value.value0)(v.value0.value.value1);
              }
              ;
              if (v.value0.value instanceof PureScript_CST_Types.TokOperator) {
                $tco_done = true;
                return res(v.value0.value.value0)(v.value0.value.value1);
              }
              ;
              if (v.value0.value instanceof PureScript_CST_Types.TokSymbolName) {
                $tco_done = true;
                return res(v.value0.value.value0)(v.value0.value.value1);
              }
              ;
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            $tco_done = true;
            return Data_Maybe.Nothing.value;
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return go(PureScript_CST_TokenStream.step(PureScript_CST_Lexer.lex(line)));
      };
    };
    var identPart = "((?:[a-zA-Z_][a-zA-Z0-9_']*)|[:!#$%&*+./<=>?@\\^|~\\\\-]+)";
    var moduleRegex = function() {
      var modulePrefix = "(?:^|[^A-Za-z_.])(?:" + (modulePart + "\\.)");
      return Data_String_Regex.regex(modulePrefix + ("?" + (identPart + "?$")))(Data_String_Regex_Flags.noFlags);
    }();
    var containsArrow = function(type$prime) {
      return Data_String_CodeUnits.contains("->")(type$prime) || Data_String_CodeUnits.contains("\u2192")(type$prime);
    };
    module2.exports = {
      modulePart,
      identPart,
      moduleRegex,
      identifierAtPoint,
      startsWithCapitalLetter,
      containsArrow
    };
  }
});

// output/IdePurescript.Completion/index.js
var require_IdePurescript7 = __commonJS({
  "output/IdePurescript.Completion/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Set = require_Data48();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_Regex = require_Data_String5();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var Data_String_Utils = require_Data_String7();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Effect_Aff = require_Effect6();
    var IdePurescript_PscIde = require_IdePurescript2();
    var IdePurescript_Regex = require_IdePurescript4();
    var IdePurescript_Tokens = require_IdePurescript6();
    var PscIde_Command = require_PscIde();
    var Module = function() {
      function Module2() {
      }
      ;
      Module2.value = new Module2();
      return Module2;
    }();
    var Type = function() {
      function Type2() {
      }
      ;
      Type2.value = new Type2();
      return Type2;
    }();
    var DCtor = function() {
      function DCtor2() {
      }
      ;
      DCtor2.value = new DCtor2();
      return DCtor2;
    }();
    var $$Function = function() {
      function $$Function2() {
      }
      ;
      $$Function2.value = new $$Function2();
      return $$Function2;
    }();
    var Value = function() {
      function Value2() {
      }
      ;
      Value2.value = new Value2();
      return Value2;
    }();
    var Kind = function() {
      function Kind2() {
      }
      ;
      Kind2.value = new Kind2();
      return Kind2;
    }();
    var ModuleSuggestion = function() {
      function ModuleSuggestion2(value0) {
        this.value0 = value0;
      }
      ;
      ModuleSuggestion2.create = function(value0) {
        return new ModuleSuggestion2(value0);
      };
      return ModuleSuggestion2;
    }();
    var IdentSuggestion = function() {
      function IdentSuggestion2(value0) {
        this.value0 = value0;
      }
      ;
      IdentSuggestion2.create = function(value0) {
        return new IdentSuggestion2(value0);
      };
      return IdentSuggestion2;
    }();
    var QualifierSuggestion = function() {
      function QualifierSuggestion2(value0) {
        this.value0 = value0;
      }
      ;
      QualifierSuggestion2.create = function(value0) {
        return new QualifierSuggestion2(value0);
      };
      return QualifierSuggestion2;
    }();
    var simplifyImportChoice = function(f) {
      return function(before) {
        var isType = function(v) {
          if (v.declarationType instanceof Data_Maybe.Just && v.declarationType.value0 instanceof PscIde_Command.DeclType) {
            return true;
          }
          ;
          return false;
        };
        var isDataConstructor = function(v) {
          if (v.declarationType instanceof Data_Maybe.Just && v.declarationType.value0 instanceof PscIde_Command.DeclDataConstructor) {
            return true;
          }
          ;
          if (v.declarationType instanceof Data_Maybe.Just && (v.declarationType.value0 instanceof PscIde_Command.DeclValue && IdePurescript_Tokens.startsWithCapitalLetter(v.identifier))) {
            return true;
          }
          ;
          return false;
        };
        var dctorMatchesType = function(typeName) {
          return function(v) {
            return Data_String_Utils.endsWith("-> " + typeName)(v["type'"]) || (Data_String_Utils.endsWith("\u2192 " + typeName)(v["type'"]) || typeName === v["type'"]);
          };
        };
        var isTheSameButDataConstructor = function(v) {
          return function(v1) {
            return v.identifier === v1.identifier && (v["module'"] === v1["module'"] && (isDataConstructor(v1) && dctorMatchesType(v.identifier)(v1)));
          };
        };
        var go = function(acc) {
          return function(info) {
            var $39 = isType(f(info)) && Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function() {
              var $135 = isTheSameButDataConstructor(f(info));
              return function($136) {
                return $135(f($136));
              };
            }())(before);
            if ($39) {
              return acc;
            }
            ;
            return Data_Array.snoc(acc)(info);
          };
        };
        return Data_Array.foldl(go)([])(before);
      };
    };
    var showSuggestionType = {
      show: function(v) {
        if (v instanceof Module) {
          return "Module";
        }
        ;
        if (v instanceof Type) {
          return "Type";
        }
        ;
        if (v instanceof DCtor) {
          return "DCtor";
        }
        ;
        if (v instanceof $$Function) {
          return "Function";
        }
        ;
        if (v instanceof Value) {
          return "Value";
        }
        ;
        if (v instanceof Kind) {
          return "Kind";
        }
        ;
        throw new Error("Failed pattern match at IdePurescript.Completion (line 44, column 1 - line 50, column 21): " + [v.constructor.name]);
      }
    };
    var parseSuggestionType = function(v) {
      if (v === "Module") {
        return new Data_Maybe.Just(Module.value);
      }
      ;
      if (v === "Type") {
        return new Data_Maybe.Just(Type.value);
      }
      ;
      if (v === "DCtor") {
        return new Data_Maybe.Just(DCtor.value);
      }
      ;
      if (v === "Function") {
        return new Data_Maybe.Just($$Function.value);
      }
      ;
      if (v === "Value") {
        return new Data_Maybe.Just(Value.value);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var getModuleSuggestions = function(port) {
      return function(prefix) {
        return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getAvailableModules(port))(function(list) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.filter(function(m) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(prefix)(m))(new Data_Maybe.Just(0));
          })(list));
        });
      };
    };
    var explicitImportRegex = Data_String_Regex.regex("^import\\s+" + (IdePurescript_Tokens.modulePart + ("\\s+\\([^)]*?" + (IdePurescript_Tokens.identPart + "$"))))(Data_String_Regex_Flags.noFlags);
    var declarationTypeToNamespace = function(v) {
      if (v instanceof PscIde_Command.DeclValue) {
        return new Data_Maybe.Just(PscIde_Command.NSValue.value);
      }
      ;
      if (v instanceof PscIde_Command.DeclType) {
        return new Data_Maybe.Just(PscIde_Command.NSType.value);
      }
      ;
      if (v instanceof PscIde_Command.DeclTypeSynonym) {
        return new Data_Maybe.Just(PscIde_Command.NSType.value);
      }
      ;
      if (v instanceof PscIde_Command.DeclDataConstructor) {
        return new Data_Maybe.Just(PscIde_Command.NSValue.value);
      }
      ;
      if (v instanceof PscIde_Command.DeclTypeClass) {
        return new Data_Maybe.Just(PscIde_Command.NSType.value);
      }
      ;
      if (v instanceof PscIde_Command.DeclValueOperator) {
        return new Data_Maybe.Just(PscIde_Command.NSValue.value);
      }
      ;
      if (v instanceof PscIde_Command.DeclTypeOperator) {
        return new Data_Maybe.Just(PscIde_Command.NSType.value);
      }
      ;
      if (v instanceof PscIde_Command.DeclModule) {
        return Data_Maybe.Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at IdePurescript.Completion (line 214, column 30 - line 222, column 24): " + [v.constructor.name]);
    };
    var getSuggestions = function(_notify) {
      return function(port) {
        return function(v) {
          var takeExisting = function(v12) {
            return function(_token) {
              return function(completions) {
                if (v12 instanceof Data_Maybe.Just) {
                  return completions;
                }
                ;
                if (v12 instanceof Data_Maybe.Nothing) {
                  var ident = function(v2) {
                    return v2.value1.identifier;
                  };
                  var candidateModules$prime = Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function(x) {
                    return new Data_Tuple.Tuple(x, Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)(v.moduleInfo.candidateModules(x)));
                  })(Data_Array.nub(Data_Ord.ordString)(Data_Functor.map(Data_Functor.functorArray)(ident)(completions))));
                  var existingIdents = Data_Map_Internal.filter(Data_Ord.ordString)(function() {
                    var $137 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                    return function($138) {
                      return $137(Data_Set.isEmpty($138));
                    };
                  }())(Data_Map_Internal.fromFoldableWith(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Set.union(Data_Ord.ordString))(Data_Functor.map(Data_Functor.functorArray)(function(v2) {
                    var exportedModules = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)(Data_Array.cons(v2["value1"]["module'"])(v2.value1.exportedFrom));
                    var candidates = Data_Maybe.fromMaybe(Data_Set.empty)(Data_Map_Internal.lookup(Data_Ord.ordString)(v2.value1.identifier)(candidateModules$prime));
                    var matches = Data_Set.intersection(Data_Ord.ordString)(candidates)(exportedModules);
                    return new Data_Tuple.Tuple(v2.value1.identifier, matches);
                  })(completions)));
                  var filterCompletion = function(v2) {
                    var resolvedNS = Control_Alt.alt(Data_Maybe.altMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(v2.value1.declarationType)(declarationTypeToNamespace))(new Data_Maybe.Just(v2.value0));
                    var isDctor = function() {
                      if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSValue) {
                        return IdePurescript_Tokens.startsWithCapitalLetter(v2.value1.identifier);
                      }
                      ;
                      return false;
                    }();
                    var v3 = Data_Map_Internal.lookup(Data_Ord.ordString)(v2.value1.identifier)(existingIdents);
                    if (v3 instanceof Data_Maybe.Nothing) {
                      return true;
                    }
                    ;
                    if (isDctor) {
                      return true;
                    }
                    ;
                    if (v3 instanceof Data_Maybe.Just) {
                      var exportedModules = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)(Data_Array.cons(v2["value1"]["module'"])(v2.value1.exportedFrom));
                      return !Data_Set.isEmpty(Data_Set.intersection(Data_Ord.ordString)(v3.value0)(exportedModules));
                    }
                    ;
                    throw new Error("Failed pattern match at IdePurescript.Completion (line 171, column 9 - line 181, column 83): " + [v3.constructor.name]);
                  };
                  return Data_Array.filter(filterCompletion)(completions);
                }
                ;
                throw new Error("Failed pattern match at IdePurescript.Completion (line 141, column 3 - line 141, column 57): " + [v12.constructor.name, _token.constructor.name, completions.constructor.name]);
              };
            };
          };
          var result = function(qualifier) {
            return function(prefix2) {
              return function(ns) {
                return function(v12) {
                  var resolvedNS = Control_Alt.alt(Data_Maybe.altMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(v12.declarationType)(declarationTypeToNamespace))(ns);
                  var suggestType = function() {
                    if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSKind) {
                      return Kind.value;
                    }
                    ;
                    if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSType) {
                      return Type.value;
                    }
                    ;
                    if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSValue) {
                      if (IdePurescript_Tokens.startsWithCapitalLetter(v12.identifier)) {
                        return DCtor.value;
                      }
                      ;
                      if (IdePurescript_Tokens.containsArrow(v12["type'"])) {
                        return $$Function.value;
                      }
                      ;
                    }
                    ;
                    if (resolvedNS instanceof Data_Maybe.Just && resolvedNS.value0 instanceof PscIde_Command.NSValue) {
                      return Value.value;
                    }
                    ;
                    if (resolvedNS instanceof Data_Maybe.Nothing) {
                      return Value.value;
                    }
                    ;
                    throw new Error("Failed pattern match at IdePurescript.Completion (line 190, column 7 - line 197, column 25): " + [resolvedNS.constructor.name]);
                  }();
                  var prefixModule = Data_Array.head(Data_Array.sortBy(function(a) {
                    return function(b) {
                      return Data_Ord.compare(Data_Ord.ordInt)(Data_String_CodePoints.length(a))(Data_String_CodePoints.length(b));
                    };
                  })(Data_Array.filter(function(m) {
                    return Data_String_Utils.startsWith(m + ".")(v12["module'"]);
                  })(v12.exportedFrom)));
                  var preferredModule = Data_Array.head(Data_Array.intersect(Data_Eq.eqString)(v.preferredModules)(v12.exportedFrom));
                  var existingModule = Data_Array.head(Data_Array.intersect(Data_Eq.eqString)(v.moduleInfo.importedModules)(v12.exportedFrom));
                  var exportMod = Data_Maybe.fromMaybe(v12["module'"])(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(preferredModule)(existingModule))(prefixModule));
                  return new IdentSuggestion({
                    origMod: v12["module'"],
                    exportMod,
                    identifier: v12.identifier,
                    qualifier,
                    suggestType,
                    prefix: prefix2,
                    valueType: v12["type'"],
                    namespace: ns,
                    exportedFrom: v12.exportedFrom,
                    documentation: v12.documentation
                  });
                };
              };
            };
          };
          var parsed = function() {
            var v12 = IdePurescript_Regex["match'"](IdePurescript_Tokens.moduleRegex)(v.line);
            if (v12 instanceof Data_Maybe.Just && (v12.value0.length === 3 && (v12["value0"][0] instanceof Data_Maybe.Just && (Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v12["value0"][1])(Data_Maybe.Nothing.value) || Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v12["value0"][2])(Data_Maybe.Nothing.value))))) {
              return new Data_Maybe.Just({
                mod: v12["value0"][1],
                token: Data_Maybe.fromMaybe("")(v12["value0"][2])
              });
            }
            ;
            return Data_Maybe.Nothing.value;
          }();
          var opts = {
            maxResults: v.maxResults,
            groupReexports: v.groupCompletions
          };
          var modResult = function(prefix2) {
            return function(moduleName) {
              return new ModuleSuggestion({
                text: moduleName,
                suggestType: Module.value,
                prefix: prefix2
              });
            };
          };
          var matchingQualifiers = function(v12) {
            return function(v2) {
              if (v12 instanceof Data_Maybe.Just) {
                return [];
              }
              ;
              if (v12 instanceof Data_Maybe.Nothing) {
                var convQ = function(v3) {
                  return new QualifierSuggestion({
                    text: v3.qualifier,
                    mod: v3.moduleName
                  });
                };
                return Data_Functor.map(Data_Functor.functorArray)(convQ)(Data_Array.filter(function(v3) {
                  return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(v2)(v3.qualifier))(new Data_Maybe.Just(0));
                })(v.qualifiers));
              }
              ;
              throw new Error("Failed pattern match at IdePurescript.Completion (line 122, column 3 - line 122, column 37): " + [v12.constructor.name, v2.constructor.name]);
            };
          };
          var isImport = Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf("import ")(v.line))(new Data_Maybe.Just(0));
          var hasBracket = Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf("(")(v.line))(Data_Maybe.Nothing.value);
          var moduleCompletion = isImport && !hasBracket;
          var moduleExplicit = isImport && hasBracket;
          var getModuleName = function(v12) {
            return function(token) {
              if (v12 === "") {
                return token;
              }
              ;
              return v12 + ("." + token);
            };
          };
          var complete = function(results) {
            return {
              results,
              isIncomplete: false
            };
          };
          if (moduleExplicit) {
            var v1 = IdePurescript_Regex["match'"](explicitImportRegex)(v.line);
            if (v1 instanceof Data_Maybe.Just && (v1.value0.length === 3 && (v1["value0"][0] instanceof Data_Maybe.Just && (v1["value0"][1] instanceof Data_Maybe.Just && v1["value0"][2] instanceof Data_Maybe.Just)))) {
              var cc = function(ns) {
                return Data_Functor.map(Effect_Aff.functorAff)(Data_Tuple.Tuple.create(ns))(IdePurescript_PscIde["getCompletion'"](Data_Maybe.Nothing.value)([new PscIde_Command.PrefixFilter(v1["value0"][2].value0), new PscIde_Command.NamespaceFilter([ns])])(port)(v.moduleInfo.mainModule)(Data_Maybe.Nothing.value)([v1["value0"][1].value0])(v.moduleInfo.getQualifiedModule)(opts));
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(cc)([PscIde_Command.NSValue.value, PscIde_Command.NSType.value]))(function(completions) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(complete(Data_Array.concatMap(function(v2) {
                  return Data_Functor.map(Data_Functor.functorArray)(result(Data_Maybe.Nothing.value)(v1["value0"][2].value0)(new Data_Maybe.Just(v2.value0)))(v2.value1);
                })(completions)));
              });
            }
            ;
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(complete([]));
          }
          ;
          if (parsed instanceof Data_Maybe.Just) {
            if (moduleCompletion) {
              var prefix = getModuleName(Data_Maybe.fromMaybe("")(parsed.value0.mod))(parsed.value0.token);
              return Control_Bind.bind(Effect_Aff.bindAff)(getModuleSuggestions(port)(prefix))(function(completions) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(complete(Data_Functor.map(Data_Functor.functorArray)(modResult(prefix))(completions)));
              });
            }
            ;
            var cc = function(ns) {
              return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.Tuple.create(ns)))(IdePurescript_PscIde["getCompletion'"](Data_Maybe.Nothing.value)([new PscIde_Command.PrefixFilter(parsed.value0.token), new PscIde_Command.NamespaceFilter([ns])])(port)(v.moduleInfo.mainModule)(parsed.value0.mod)(Data_Array.cons("Prim")(v.moduleInfo.modules))(v.moduleInfo.getQualifiedModule)(opts));
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(cc)([PscIde_Command.NSValue.value, PscIde_Command.NSType.value]))(function(v12) {
              var isIncomplete = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function(list) {
                return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(new Data_Maybe.Just(Data_Array.length(list)))(v.maxResults);
              })(v12);
              var completions$prime = simplifyImportChoice(Data_Tuple.snd)(Data_Array.concat(v12));
              var results = Data_Semigroup.append(Data_Semigroup.semigroupArray)(matchingQualifiers(parsed.value0.mod)(parsed.value0.token))(Data_Functor.map(Data_Functor.functorArray)(function(v2) {
                return result(parsed.value0.mod)(parsed.value0.token)(new Data_Maybe.Just(v2.value0))(v2.value1);
              })(takeExisting(parsed.value0.mod)(parsed.value0.token)(completions$prime)));
              return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                results,
                isIncomplete
              });
            });
          }
          ;
          if (parsed instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(complete([]));
          }
          ;
          throw new Error("Failed pattern match at IdePurescript.Completion (line 101, column 5 - line 117, column 36): " + [parsed.constructor.name]);
        };
      };
    };
    module2.exports = {
      Module,
      Type,
      DCtor,
      "Function": $$Function,
      Value,
      Kind,
      parseSuggestionType,
      explicitImportRegex,
      getModuleSuggestions,
      ModuleSuggestion,
      IdentSuggestion,
      QualifierSuggestion,
      getSuggestions,
      declarationTypeToNamespace,
      simplifyImportChoice,
      showSuggestionType
    };
  }
});

// output/LanguageServer.IdePurescript.Commands/index.js
var require_LanguageServer_IdePurescript = __commonJS({
  "output/LanguageServer.IdePurescript.Commands/index.js"(exports2, module2) {
    "use strict";
    var Data_Array = require_Data39();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Foreign = require_Foreign();
    var CommandInfo = function() {
      function CommandInfo2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      CommandInfo2.create = function(value0) {
        return function(value1) {
          return new CommandInfo2(value0, value1);
        };
      };
      return CommandInfo2;
    }();
    var typedHoleExplicitCmd = new CommandInfo("Insert typed hole suggestion", "typedHole-explicit");
    var typedHoleCmd = new CommandInfo("Insert typed hole suggestion", "typedHole");
    var stopPscIdeCmd = new CommandInfo("Stop Psc-Ide-Server", "stopPscIde");
    var startPscIdeCmd = new CommandInfo("Start Psc-Ide-Server", "startPscIde");
    var sortImportsCmd = new CommandInfo("Sort/reformat imports", "sortImports");
    var searchCmd = new CommandInfo("Search identifiers", "search");
    var restartPscIdeCmd = new CommandInfo("Restart Psc-Ide-Server", "restartPscIde");
    var replaceSuggestionCmd = new CommandInfo("Apply Suggestion", "replaceSuggestion");
    var replaceAllSuggestionsCmd = new CommandInfo("Replace all suggestions", "replaceAllSuggestions");
    var getAvailableModulesCmd = new CommandInfo("Get available modules", "getAvailableModules");
    var fixTypoCmd = new CommandInfo("Fix typo/add import", "fixTypo");
    var cmdName = function(v) {
      return "purescript." + v.value1;
    };
    var cleanCmd = new CommandInfo("Clean compiled output", "clean");
    var caseSplitCmd = new CommandInfo("Case split (explicit position)", "caseSplit-explicit");
    var c = function(v) {
      return function(args) {
        return {
          title: v.value0,
          command: cmdName(v),
          "arguments": Data_Nullable.toNullable(args)
        };
      };
    };
    var clean = c(cleanCmd)(Data_Maybe.Nothing.value);
    var fixTypo = function(uri) {
      return function(row) {
        return function($$char) {
          return c(fixTypoCmd)(Data_Maybe.Just.create([Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(row), Foreign.unsafeToForeign($$char)]));
        };
      };
    };
    var fixTypo$prime = function(x) {
      return function(uri) {
        return function(row) {
          return function($$char) {
            return function(tinfo) {
              return c(new CommandInfo(x, "fixTypo"))(Data_Maybe.Just.create([Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(row), Foreign.unsafeToForeign($$char), tinfo]));
            };
          };
        };
      };
    };
    var replaceAllSuggestions = function(text) {
      return function(uri) {
        return function(replacements) {
          return c(new CommandInfo(text, "replaceAllSuggestions"))(Data_Maybe.Just.create([Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(replacements)]));
        };
      };
    };
    var replaceSuggestion = function(title) {
      return function(uri) {
        return function(replacement) {
          return function(fixRange) {
            return c(new CommandInfo(title, "replaceSuggestion"))(Data_Maybe.Just.create([Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(replacement), Foreign.unsafeToForeign(fixRange)]));
          };
        };
      };
    };
    var sortImports = function(uri) {
      return c(sortImportsCmd)(Data_Maybe.Just.create([Foreign.unsafeToForeign(uri)]));
    };
    var typedHole = function(name) {
      return function(url) {
        return function(range) {
          return function(options) {
            return c(typedHoleCmd)(Data_Maybe.Just.create(Data_Array.cons(Foreign.unsafeToForeign(name))(Data_Array.cons(Foreign.unsafeToForeign(url))(Data_Array.cons(Foreign.unsafeToForeign(range))(Data_Functor.map(Data_Functor.functorArray)(Foreign.unsafeToForeign)(options))))));
          };
        };
      };
    };
    var buildCmd = new CommandInfo("Build", "build");
    var build = c(buildCmd)(Data_Maybe.Nothing.value);
    var addModuleImportCmd = new CommandInfo("Add module import", "addModuleImport");
    var addCompletionImportCmd = new CommandInfo("Add completion import", "addCompletionImport");
    var addCompletionImport = function(ident) {
      return function(mod) {
        return function(qual) {
          return function(uri) {
            return function(ns) {
              return c(addCompletionImportCmd)(new Data_Maybe.Just([Foreign.unsafeToForeign(ident), Foreign.unsafeToForeign(Data_Nullable.toNullable(mod)), Foreign.unsafeToForeign(Data_Nullable.toNullable(qual)), Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(ns)]));
            };
          };
        };
      };
    };
    var addClauseCmd = new CommandInfo("Add clause (explicit position/cmd)", "addClause-explicit");
    var commands = Data_Functor.map(Data_Functor.functorArray)(cmdName)([addCompletionImportCmd, caseSplitCmd, addClauseCmd, replaceSuggestionCmd, buildCmd, cleanCmd, startPscIdeCmd, stopPscIdeCmd, restartPscIdeCmd, typedHoleExplicitCmd, replaceAllSuggestionsCmd, fixTypoCmd]);
    module2.exports = {
      cmdName,
      c,
      CommandInfo,
      caseSplitCmd,
      addClauseCmd,
      addCompletionImportCmd,
      addCompletionImport,
      addModuleImportCmd,
      sortImportsCmd,
      replaceSuggestionCmd,
      replaceSuggestion,
      replaceAllSuggestionsCmd,
      replaceAllSuggestions,
      buildCmd,
      build,
      cleanCmd,
      clean,
      typedHoleCmd,
      typedHole,
      typedHoleExplicitCmd,
      startPscIdeCmd,
      stopPscIdeCmd,
      restartPscIdeCmd,
      getAvailableModulesCmd,
      searchCmd,
      fixTypoCmd,
      fixTypo,
      "fixTypo'": fixTypo$prime,
      sortImports,
      commands
    };
  }
});

// output/Control.Error.Util/index.js
var require_Control_Error = __commonJS({
  "output/Control.Error.Util/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Monad = require_Control7();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Control_Monad_Maybe_Trans = require_Control_Monad_Maybe();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var note = function(a) {
      return Data_Maybe.maybe(new Data_Either.Left(a))(Data_Either.Right.create);
    };
    var noteT = function(dictMonad) {
      return function(a) {
        var $6 = Control_Monad.liftM1(dictMonad)(note(a));
        return function($7) {
          return Control_Monad_Except_Trans.ExceptT($6(Control_Monad_Maybe_Trans.runMaybeT($7)));
        };
      };
    };
    var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
    var hushT = function(dictMonad) {
      var $8 = Control_Monad.liftM1(dictMonad)(hush);
      return function($9) {
        return Control_Monad_Maybe_Trans.MaybeT($8(Control_Monad_Except_Trans.runExceptT($9)));
      };
    };
    var hoistMaybe = function(dictMonad) {
      var $10 = Control_Applicative.pure(dictMonad.Applicative0());
      return function($11) {
        return Control_Monad_Maybe_Trans.MaybeT($10($11));
      };
    };
    var fromMaybe$prime = Data_Function.flip(Data_Maybe.fromMaybe);
    var exceptNoteM = function(dictApplicative) {
      return function(a) {
        return function(e) {
          return Control_Applicative.pure(dictApplicative)(note(e)(a));
        };
      };
    };
    var exceptNoteA = function(dictApply) {
      return function(a) {
        return function(e) {
          return Data_Functor.map(dictApply.Functor0())(note(e))(a);
        };
      };
    };
    var bool = function(a) {
      return function(b) {
        return function(c) {
          if (c) {
            return b;
          }
          ;
          return a;
        };
      };
    };
    module2.exports = {
      hush,
      hushT,
      note,
      noteT,
      hoistMaybe,
      "fromMaybe'": fromMaybe$prime,
      exceptNoteA,
      exceptNoteM,
      bool
    };
  }
});

// output/LanguageServer.IdePurescript.Config/index.js
var require_LanguageServer_IdePurescript2 = __commonJS({
  "output/LanguageServer.IdePurescript.Config/index.js"(exports2, module2) {
    "use strict";
    var Control_Bind = require_Control5();
    var Control_Monad_Except = require_Control_Monad();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Maybe = require_Data15();
    var Data_Traversable = require_Data29();
    var Foreign = require_Foreign();
    var Foreign_Index = require_Foreign4();
    var PscIde_Command = require_PscIde();
    var PscIde_Server = require_PscIde3();
    var NoFormatter = function() {
      function NoFormatter2() {
      }
      ;
      NoFormatter2.value = new NoFormatter2();
      return NoFormatter2;
    }();
    var Purty = function() {
      function Purty2() {
      }
      ;
      Purty2.value = new Purty2();
      return Purty2;
    }();
    var PursTidy = function() {
      function PursTidy2() {
      }
      ;
      PursTidy2.value = new PursTidy2();
      return PursTidy2;
    }();
    var Pose = function() {
      function Pose2() {
      }
      ;
      Pose2.value = new Pose2();
      return Pose2;
    }();
    var ignoreEmpty = function(v) {
      if (v instanceof Data_Maybe.Just && v.value0 === "") {
        return Data_Maybe.Nothing.value;
      }
      ;
      return v;
    };
    var getConfigMaybe = function(readValue) {
      return function(key) {
        return function(settings) {
          var val = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(settings)("purescript"))(function(ps) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(ps)(key))(function(res) {
              return readValue(res);
            });
          });
          return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(val));
        };
      };
    };
    var outputDirectory = getConfigMaybe(Foreign.readString(Data_Identity.monadIdentity))("outputDirectory");
    var pscIdePort = getConfigMaybe(Foreign.readInt(Data_Identity.monadIdentity))("pscIdePort");
    var getConfig = function(readValue) {
      return function(key) {
        return function($$default) {
          return function(settings) {
            return Data_Maybe.fromMaybe($$default)(getConfigMaybe(readValue)(key)(settings));
          };
        };
      };
    };
    var getInt = getConfig(Foreign.readInt(Data_Identity.monadIdentity));
    var getString = getConfig(Foreign.readString(Data_Identity.monadIdentity));
    var logLevel = function() {
      var $7 = getString("pscIdelogLevel")("");
      return function($8) {
        return function(v) {
          if (v === "all") {
            return new Data_Maybe.Just(PscIde_Server.All.value);
          }
          ;
          if (v === "none") {
            return new Data_Maybe.Just(PscIde_Server.None.value);
          }
          ;
          if (v === "debug") {
            return new Data_Maybe.Just(PscIde_Server.Debug.value);
          }
          ;
          if (v === "perf") {
            return new Data_Maybe.Just(PscIde_Server.Perf.value);
          }
          ;
          return Data_Maybe.Nothing.value;
        }($7($8));
      };
    }();
    var packagePath = getString("packagePath")("");
    var preludeModule = getString("preludeModule")("Prelude");
    var pursExe = getString("pursExe")("purs");
    var srcPath = getString("sourcePath")("src");
    var importsPreferredModules = getConfig(Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))("importsPreferredModules")([]);
    var sourceGlobs = getConfig(Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))("sourceGlobs")([]);
    var getBoolean = getConfig(Foreign.readBoolean(Data_Identity.monadIdentity));
    var fullBuildOnSave = getBoolean("fullBuildOnSave")(false);
    var formatter = function() {
      var $9 = getString("formatter")("");
      return function($10) {
        return function(v) {
          if (v === "none") {
            return NoFormatter.value;
          }
          ;
          if (v === "purty") {
            return Purty.value;
          }
          ;
          if (v === "purs-tidy") {
            return PursTidy.value;
          }
          ;
          if (v === "pose") {
            return Pose.value;
          }
          ;
          return Purty.value;
        }($9($10));
      };
    }();
    var fastRebuild = getBoolean("fastRebuild")(true);
    var exportsCodeLens = getBoolean("exportsCodeLens")(true);
    var effectiveOutputDirectory = function() {
      var $11 = Data_Maybe.fromMaybe("output");
      return function($12) {
        return $11(ignoreEmpty(outputDirectory($12)));
      };
    }();
    var declarationTypeCodeLens = getBoolean("declarationTypeCodeLens")(true);
    var codegenTargets = function() {
      var $13 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorArray)(PscIde_Command.Other.create));
      var $14 = getConfigMaybe(Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))("codegenTargets");
      return function($15) {
        return $13($14($15));
      };
    }();
    var censorCodes = getConfig(Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))("censorWarnings")([]);
    var buildOpenedFiles = getBoolean("buildOpenedFiles")(false);
    var buildCommand = getString("buildCommand")("spago build --purs-args --json-errors");
    var autocompleteLimit = getConfigMaybe(Foreign.readInt(Data_Identity.monadIdentity))("autocompleteLimit");
    var autocompleteGrouped = getBoolean("autocompleteGrouped")(false);
    var autocompleteAddImport = getBoolean("autocompleteAddImport")(true);
    var autoStartPscIde = getBoolean("autoStartPscIde")(true);
    var autoCompleteAllModules = getBoolean("autocompleteAllModules")(true);
    var addSpagoSources = getBoolean("addSpagoSources")(true);
    var addPscPackageSources = getBoolean("addPscPackageSources")(false);
    var addNpmPath = getBoolean("addNpmPath")(false);
    module2.exports = {
      getConfigMaybe,
      getConfig,
      getBoolean,
      getString,
      getInt,
      pursExe,
      pscIdePort,
      autoCompleteAllModules,
      buildCommand,
      addNpmPath,
      packagePath,
      srcPath,
      sourceGlobs,
      censorCodes,
      autoStartPscIde,
      autocompleteAddImport,
      autocompleteGrouped,
      autocompleteLimit,
      importsPreferredModules,
      preludeModule,
      fastRebuild,
      buildOpenedFiles,
      outputDirectory,
      effectiveOutputDirectory,
      addPscPackageSources,
      addSpagoSources,
      fullBuildOnSave,
      logLevel,
      NoFormatter,
      Purty,
      PursTidy,
      Pose,
      formatter,
      codegenTargets,
      ignoreEmpty,
      exportsCodeLens,
      declarationTypeCodeLens
    };
  }
});

// output/LanguageServer.Protocol.DocumentStore/foreign.js
var require_foreign81 = __commonJS({
  "output/LanguageServer.Protocol.DocumentStore/foreign.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.onDidChangeContent = exports2.onDidCloseDocument = exports2.onDidOpenDocument = exports2.onDidSaveDocument = exports2.getDocument = exports2.getDocuments = void 0;
    var getDocuments = function(documents) {
      return function() {
        return documents.all();
      };
    };
    exports2.getDocuments = getDocuments;
    var getDocument = function(documents) {
      return function(uri) {
        return function() {
          return documents.get(uri);
        };
      };
    };
    exports2.getDocument = getDocument;
    var onDidSaveDocument = function(documents) {
      return function(f) {
        return function() {
          return documents.onDidSave(function(p) {
            return f(p)();
          });
        };
      };
    };
    exports2.onDidSaveDocument = onDidSaveDocument;
    var onDidOpenDocument = function(documents) {
      return function(f) {
        return function() {
          return documents.onDidOpen(function(p) {
            return f(p)();
          });
        };
      };
    };
    exports2.onDidOpenDocument = onDidOpenDocument;
    var onDidCloseDocument = function(documents) {
      return function(f) {
        return function() {
          return documents.onDidClose(function(p) {
            return f(p)();
          });
        };
      };
    };
    exports2.onDidCloseDocument = onDidCloseDocument;
    var onDidChangeContent = function(documents) {
      return function(f) {
        return function() {
          return documents.onDidChangeContent(function(p) {
            return f(p)();
          });
        };
      };
    };
    exports2.onDidChangeContent = onDidChangeContent;
  }
});

// output/LanguageServer.Protocol.DocumentStore/index.js
var require_LanguageServer_Protocol = __commonJS({
  "output/LanguageServer.Protocol.DocumentStore/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign81();
    module2.exports = {
      getDocuments: $foreign.getDocuments,
      getDocument: $foreign.getDocument,
      onDidSaveDocument: $foreign.onDidSaveDocument,
      onDidOpenDocument: $foreign.onDidOpenDocument,
      onDidCloseDocument: $foreign.onDidCloseDocument,
      onDidChangeContent: $foreign.onDidChangeContent
    };
  }
});

// output/LanguageServer.Protocol.Handlers/foreign.js
var require_foreign82 = __commonJS({
  "output/LanguageServer.Protocol.Handlers/foreign.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.onShutdown = exports2.onExit = exports2.onDidChangeWatchedFiles = exports2.onExecuteCommand = exports2.sendCleanEnd = exports2.sendCleanBegin = exports2.sendDiagnosticsEnd = exports2.sendDiagnosticsBegin = exports2.applyEditImpl = exports2.publishDiagnostics = exports2.onDidChangeConfiguration = exports2.onDocumentFormatting = exports2.onFoldingRanges = exports2.onCodeLens = exports2.onCodeAction = exports2.onReferences = exports2.onWorkspaceSymbol = exports2.onDocumentSymbol = exports2.onHover = exports2.onCompletion = exports2.onDefinition = exports2.registerHandler0 = void 0;
    var vscode_jsonrpc_1 = require("vscode-jsonrpc");
    var registerHandler = function(registerF) {
      return function(f) {
        return function() {
          return registerF(function(x) {
            return f(x)();
          });
        };
      };
    };
    var registerHandler0 = function(registerF) {
      return function(f) {
        return function() {
          return registerF(f);
        };
      };
    };
    exports2.registerHandler0 = registerHandler0;
    var registerNotificationHandler = function(registerF) {
      return function(f) {
        return function() {
          return registerF(function(x) {
            return f(x)();
          });
        };
      };
    };
    var registerNotificationHandler0 = function(registerF) {
      return function(f) {
        return function() {
          return registerF(f);
        };
      };
    };
    var onDefinition = function(conn) {
      return registerHandler(conn.onDefinition);
    };
    exports2.onDefinition = onDefinition;
    var onCompletion = function(conn) {
      return registerHandler(conn.onCompletion);
    };
    exports2.onCompletion = onCompletion;
    var onHover = function(conn) {
      return registerHandler(conn.onHover);
    };
    exports2.onHover = onHover;
    var onDocumentSymbol = function(conn) {
      return registerHandler(conn.onDocumentSymbol);
    };
    exports2.onDocumentSymbol = onDocumentSymbol;
    var onWorkspaceSymbol = function(conn) {
      return registerHandler(conn.onWorkspaceSymbol);
    };
    exports2.onWorkspaceSymbol = onWorkspaceSymbol;
    var onReferences = function(conn) {
      return registerHandler(conn.onReferences);
    };
    exports2.onReferences = onReferences;
    var onCodeAction = function(conn) {
      return registerHandler(conn.onCodeAction);
    };
    exports2.onCodeAction = onCodeAction;
    var onCodeLens = function(conn) {
      return registerHandler(conn.onCodeLens);
    };
    exports2.onCodeLens = onCodeLens;
    var onFoldingRanges = function(conn) {
      return registerHandler(conn.onFoldingRanges);
    };
    exports2.onFoldingRanges = onFoldingRanges;
    var onDocumentFormatting = function(conn) {
      return registerHandler(conn.onDocumentFormatting);
    };
    exports2.onDocumentFormatting = onDocumentFormatting;
    var onDidChangeConfiguration = function(conn) {
      return registerNotificationHandler(conn.onDidChangeConfiguration);
    };
    exports2.onDidChangeConfiguration = onDidChangeConfiguration;
    var publishDiagnostics = function(conn) {
      return function(params) {
        return function() {
          return conn.sendDiagnostics(params);
        };
      };
    };
    exports2.publishDiagnostics = publishDiagnostics;
    var applyEditImpl = function(conn) {
      return function(edit) {
        return function() {
          return conn.workspace.applyEdit(edit).then(function(x) {
            return x.applied;
          });
        };
      };
    };
    exports2.applyEditImpl = applyEditImpl;
    var sendDiagnosticsBegin = function(conn) {
      return function() {
        return conn.sendNotification(new vscode_jsonrpc_1.NotificationType0("textDocument/diagnosticsBegin"));
      };
    };
    exports2.sendDiagnosticsBegin = sendDiagnosticsBegin;
    var sendDiagnosticsEnd = function(conn) {
      return function() {
        return conn.sendNotification(new vscode_jsonrpc_1.NotificationType0("textDocument/diagnosticsEnd"));
      };
    };
    exports2.sendDiagnosticsEnd = sendDiagnosticsEnd;
    var sendCleanBegin = function(conn) {
      return function() {
        return conn.sendNotification(new vscode_jsonrpc_1.NotificationType0("textDocument/cleanBegin"));
      };
    };
    exports2.sendCleanBegin = sendCleanBegin;
    var sendCleanEnd = function(conn) {
      return function() {
        return conn.sendNotification(new vscode_jsonrpc_1.NotificationType0("textDocument/cleanEnd"));
      };
    };
    exports2.sendCleanEnd = sendCleanEnd;
    var onExecuteCommand = function(conn) {
      return registerHandler(conn.onExecuteCommand);
    };
    exports2.onExecuteCommand = onExecuteCommand;
    var onDidChangeWatchedFiles = function(conn) {
      return registerNotificationHandler(conn.onDidChangeWatchedFiles);
    };
    exports2.onDidChangeWatchedFiles = onDidChangeWatchedFiles;
    var onExit = function(conn) {
      return registerNotificationHandler0(conn.onExit);
    };
    exports2.onExit = onExit;
    var onShutdown = function(conn) {
      return (0, exports2.registerHandler0)(conn.onShutdown);
    };
    exports2.onShutdown = onShutdown;
  }
});

// output/LanguageServer.Protocol.Handlers/index.js
var require_LanguageServer_Protocol2 = __commonJS({
  "output/LanguageServer.Protocol.Handlers/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign82();
    var Control_Promise = require_Control13();
    var applyEdit = function(conn) {
      return function(edit) {
        return Control_Promise.toAffE($foreign.applyEditImpl(conn)(edit));
      };
    };
    module2.exports = {
      applyEdit,
      onDefinition: $foreign.onDefinition,
      onCompletion: $foreign.onCompletion,
      onHover: $foreign.onHover,
      onDocumentSymbol: $foreign.onDocumentSymbol,
      onWorkspaceSymbol: $foreign.onWorkspaceSymbol,
      onReferences: $foreign.onReferences,
      onCodeAction: $foreign.onCodeAction,
      onCodeLens: $foreign.onCodeLens,
      onFoldingRanges: $foreign.onFoldingRanges,
      onDocumentFormatting: $foreign.onDocumentFormatting,
      onDidChangeConfiguration: $foreign.onDidChangeConfiguration,
      onDidChangeWatchedFiles: $foreign.onDidChangeWatchedFiles,
      onExecuteCommand: $foreign.onExecuteCommand,
      publishDiagnostics: $foreign.publishDiagnostics,
      applyEditImpl: $foreign.applyEditImpl,
      sendDiagnosticsBegin: $foreign.sendDiagnosticsBegin,
      sendDiagnosticsEnd: $foreign.sendDiagnosticsEnd,
      sendCleanBegin: $foreign.sendCleanBegin,
      sendCleanEnd: $foreign.sendCleanEnd,
      onExit: $foreign.onExit,
      onShutdown: $foreign.onShutdown
    };
  }
});

// output/LanguageServer.Protocol.Types/index.js
var require_LanguageServer_Protocol3 = __commonJS({
  "output/LanguageServer.Protocol.Types/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Array = require_Data39();
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Boolean = require_Data();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_NonEmpty = require_Data33();
    var Data_Nullable = require_Data41();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Semigroup_Foldable = require_Data_Semigroup();
    var Data_Show = require_Data14();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Foreign = require_Foreign();
    var Foreign_Index = require_Foreign4();
    var Foreign_Object = require_Foreign3();
    var Unsafe_Coerce = require_Unsafe();
    var FileSymbolKind = function() {
      function FileSymbolKind2() {
      }
      ;
      FileSymbolKind2.value = new FileSymbolKind2();
      return FileSymbolKind2;
    }();
    var ModuleSymbolKind = function() {
      function ModuleSymbolKind2() {
      }
      ;
      ModuleSymbolKind2.value = new ModuleSymbolKind2();
      return ModuleSymbolKind2;
    }();
    var NamespaceSymbolKind = function() {
      function NamespaceSymbolKind2() {
      }
      ;
      NamespaceSymbolKind2.value = new NamespaceSymbolKind2();
      return NamespaceSymbolKind2;
    }();
    var PackageSymbolKind = function() {
      function PackageSymbolKind2() {
      }
      ;
      PackageSymbolKind2.value = new PackageSymbolKind2();
      return PackageSymbolKind2;
    }();
    var ClassSymbolKind = function() {
      function ClassSymbolKind2() {
      }
      ;
      ClassSymbolKind2.value = new ClassSymbolKind2();
      return ClassSymbolKind2;
    }();
    var MethodSymbolKind = function() {
      function MethodSymbolKind2() {
      }
      ;
      MethodSymbolKind2.value = new MethodSymbolKind2();
      return MethodSymbolKind2;
    }();
    var PropertySymbolKind = function() {
      function PropertySymbolKind2() {
      }
      ;
      PropertySymbolKind2.value = new PropertySymbolKind2();
      return PropertySymbolKind2;
    }();
    var FieldSymbolKind = function() {
      function FieldSymbolKind2() {
      }
      ;
      FieldSymbolKind2.value = new FieldSymbolKind2();
      return FieldSymbolKind2;
    }();
    var ConstructorSymbolKind = function() {
      function ConstructorSymbolKind2() {
      }
      ;
      ConstructorSymbolKind2.value = new ConstructorSymbolKind2();
      return ConstructorSymbolKind2;
    }();
    var EnumSymbolKind = function() {
      function EnumSymbolKind2() {
      }
      ;
      EnumSymbolKind2.value = new EnumSymbolKind2();
      return EnumSymbolKind2;
    }();
    var InterfaceSymbolKind = function() {
      function InterfaceSymbolKind2() {
      }
      ;
      InterfaceSymbolKind2.value = new InterfaceSymbolKind2();
      return InterfaceSymbolKind2;
    }();
    var FunctionSymbolKind = function() {
      function FunctionSymbolKind2() {
      }
      ;
      FunctionSymbolKind2.value = new FunctionSymbolKind2();
      return FunctionSymbolKind2;
    }();
    var VariableSymbolKind = function() {
      function VariableSymbolKind2() {
      }
      ;
      VariableSymbolKind2.value = new VariableSymbolKind2();
      return VariableSymbolKind2;
    }();
    var ConstantSymbolKind = function() {
      function ConstantSymbolKind2() {
      }
      ;
      ConstantSymbolKind2.value = new ConstantSymbolKind2();
      return ConstantSymbolKind2;
    }();
    var StringSymbolKind = function() {
      function StringSymbolKind2() {
      }
      ;
      StringSymbolKind2.value = new StringSymbolKind2();
      return StringSymbolKind2;
    }();
    var NumberSymbolKind = function() {
      function NumberSymbolKind2() {
      }
      ;
      NumberSymbolKind2.value = new NumberSymbolKind2();
      return NumberSymbolKind2;
    }();
    var BooleanSymbolKind = function() {
      function BooleanSymbolKind2() {
      }
      ;
      BooleanSymbolKind2.value = new BooleanSymbolKind2();
      return BooleanSymbolKind2;
    }();
    var ArraySymbolKind = function() {
      function ArraySymbolKind2() {
      }
      ;
      ArraySymbolKind2.value = new ArraySymbolKind2();
      return ArraySymbolKind2;
    }();
    var Position = function(x) {
      return x;
    };
    var Range = function(x) {
      return x;
    };
    var TextEdit = function(x) {
      return x;
    };
    var Hover = function(x) {
      return x;
    };
    var FoldingRange = function(x) {
      return x;
    };
    var FileChangeTypeCode = function(x) {
      return x;
    };
    var CreatedChangeType = function() {
      function CreatedChangeType2() {
      }
      ;
      CreatedChangeType2.value = new CreatedChangeType2();
      return CreatedChangeType2;
    }();
    var ChangedChangeType = function() {
      function ChangedChangeType2() {
      }
      ;
      ChangedChangeType2.value = new ChangedChangeType2();
      return ChangedChangeType2;
    }();
    var DeletedChangeType = function() {
      function DeletedChangeType2() {
      }
      ;
      DeletedChangeType2.value = new DeletedChangeType2();
      return DeletedChangeType2;
    }();
    var DocumentUri = function(x) {
      return x;
    };
    var FileEvent = function(x) {
      return x;
    };
    var Location = function(x) {
      return x;
    };
    var SymbolInformation = function(x) {
      return x;
    };
    var LocationLink = function(x) {
      return x;
    };
    var OptionalVersionedTextDocumentIdentifier = function(x) {
      return x;
    };
    var TextDocumentEdit = function(x) {
      return x;
    };
    var WorkspaceEdit = function(x) {
      return x;
    };
    var TextDocumentIdentifier = function(x) {
      return x;
    };
    var Diagnostic = function(x) {
      return x;
    };
    var CompletionItemLabelDetails = function(x) {
      return x;
    };
    var Text = function() {
      function Text2() {
      }
      ;
      Text2.value = new Text2();
      return Text2;
    }();
    var Method = function() {
      function Method2() {
      }
      ;
      Method2.value = new Method2();
      return Method2;
    }();
    var $$Function = function() {
      function $$Function2() {
      }
      ;
      $$Function2.value = new $$Function2();
      return $$Function2;
    }();
    var Constructor = function() {
      function Constructor2() {
      }
      ;
      Constructor2.value = new Constructor2();
      return Constructor2;
    }();
    var Field = function() {
      function Field2() {
      }
      ;
      Field2.value = new Field2();
      return Field2;
    }();
    var Variable = function() {
      function Variable2() {
      }
      ;
      Variable2.value = new Variable2();
      return Variable2;
    }();
    var Class = function() {
      function Class2() {
      }
      ;
      Class2.value = new Class2();
      return Class2;
    }();
    var Interface = function() {
      function Interface2() {
      }
      ;
      Interface2.value = new Interface2();
      return Interface2;
    }();
    var Module = function() {
      function Module2() {
      }
      ;
      Module2.value = new Module2();
      return Module2;
    }();
    var Property = function() {
      function Property2() {
      }
      ;
      Property2.value = new Property2();
      return Property2;
    }();
    var Unit = function() {
      function Unit2() {
      }
      ;
      Unit2.value = new Unit2();
      return Unit2;
    }();
    var Value = function() {
      function Value2() {
      }
      ;
      Value2.value = new Value2();
      return Value2;
    }();
    var Enum = function() {
      function Enum2() {
      }
      ;
      Enum2.value = new Enum2();
      return Enum2;
    }();
    var Keyword = function() {
      function Keyword2() {
      }
      ;
      Keyword2.value = new Keyword2();
      return Keyword2;
    }();
    var Snippet = function() {
      function Snippet2() {
      }
      ;
      Snippet2.value = new Snippet2();
      return Snippet2;
    }();
    var Color = function() {
      function Color2() {
      }
      ;
      Color2.value = new Color2();
      return Color2;
    }();
    var File = function() {
      function File2() {
      }
      ;
      File2.value = new File2();
      return File2;
    }();
    var Reference = function() {
      function Reference2() {
      }
      ;
      Reference2.value = new Reference2();
      return Reference2;
    }();
    var Command = function(x) {
      return x;
    };
    var CompletionItem = function(x) {
      return x;
    };
    var CompletionItemList = function(x) {
      return x;
    };
    var CodeActionKind = function(x) {
      return x;
    };
    var CodeAction = function(x) {
      return x;
    };
    var ordDocumentUri = Data_Ord.ordString;
    var newtypeTextDocumentIdenti = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeOptionalVersionedT = {
      Coercible0: function() {
        return void 0;
      }
    };
    var symbolKindToInt = function(v) {
      if (v instanceof FileSymbolKind) {
        return 1;
      }
      ;
      if (v instanceof ModuleSymbolKind) {
        return 2;
      }
      ;
      if (v instanceof NamespaceSymbolKind) {
        return 3;
      }
      ;
      if (v instanceof PackageSymbolKind) {
        return 4;
      }
      ;
      if (v instanceof ClassSymbolKind) {
        return 5;
      }
      ;
      if (v instanceof MethodSymbolKind) {
        return 6;
      }
      ;
      if (v instanceof PropertySymbolKind) {
        return 7;
      }
      ;
      if (v instanceof FieldSymbolKind) {
        return 8;
      }
      ;
      if (v instanceof ConstructorSymbolKind) {
        return 9;
      }
      ;
      if (v instanceof EnumSymbolKind) {
        return 10;
      }
      ;
      if (v instanceof InterfaceSymbolKind) {
        return 11;
      }
      ;
      if (v instanceof FunctionSymbolKind) {
        return 12;
      }
      ;
      if (v instanceof VariableSymbolKind) {
        return 13;
      }
      ;
      if (v instanceof ConstantSymbolKind) {
        return 14;
      }
      ;
      if (v instanceof StringSymbolKind) {
        return 15;
      }
      ;
      if (v instanceof NumberSymbolKind) {
        return 16;
      }
      ;
      if (v instanceof BooleanSymbolKind) {
        return 17;
      }
      ;
      if (v instanceof ArraySymbolKind) {
        return 18;
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 231, column 19 - line 249, column 24): " + [v.constructor.name]);
    };
    var supportsDocumentChanges = function(v) {
      if (v instanceof Data_Maybe.Nothing) {
        return false;
      }
      ;
      if (v instanceof Data_Maybe.Just) {
        return Data_Maybe.fromMaybe(false)(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe(v.value0.workspace))(function($133) {
          return Data_Nullable.toMaybe(function(v1) {
            return v1.workspaceEdit;
          }($133));
        }))(function($134) {
          return Data_Nullable.toMaybe(function(v1) {
            return v1.documentChanges;
          }($134));
        }));
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 346, column 1 - line 346, column 63): " + [v.constructor.name]);
    };
    var workspaceEdit = function(capabilities) {
      return function(edits) {
        var useDocumentChanges = supportsDocumentChanges(capabilities);
        var uri = function(v) {
          return v.textDocument.uri;
        };
        var edit = function(v) {
          return v.edits;
        };
        return {
          documentChanges: Data_Nullable.toNullable(function() {
            if (useDocumentChanges) {
              return new Data_Maybe.Just(edits);
            }
            ;
            return Data_Maybe.Nothing.value;
          }()),
          changes: Data_Nullable.toNullable(function() {
            if (useDocumentChanges) {
              return Data_Maybe.Nothing.value;
            }
            ;
            return Data_Maybe.Just.create(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function(v) {
              return new Data_Tuple.Tuple(uri(v.value0), Data_Array.concat(Data_Array.cons(edit(v.value0))(Data_Functor.map(Data_Functor.functorArray)(edit)(v.value1))));
            })(Data_Functor.map(Data_Functor.functorArray)(Data_Array_NonEmpty.toNonEmpty)(Data_Array.groupBy(function(a) {
              return function(b) {
                return uri(a) === uri(b);
              };
            })(Data_Array.sortWith(Data_Ord.ordString)(uri)(edits))))));
          }())
        };
      };
    };
    var showPosition = {
      show: function(v) {
        return "Position(" + (Data_Show.show(Data_Show.showInt)(v.line) + ("," + (Data_Show.show(Data_Show.showInt)(v.character) + ")")));
      }
    };
    var showRange = {
      show: function(v) {
        return "Range(" + (Data_Show.show(showPosition)(v.start) + ("," + (Data_Show.show(showPosition)(v.end) + ")")));
      }
    };
    var showTextEdit = {
      show: function(v) {
        return "TextEdit(" + (Data_Show.show(showRange)(v.range) + (", " + (Data_Show.show(Data_Show.showString)(v.newText) + ")")));
      }
    };
    var showDocumentUri = {
      show: function(v) {
        return "DocumentUri " + Data_Show.show(Data_Show.showString)(v);
      }
    };
    var showDiagnostic = Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
      reflectSymbol: function() {
        return "code";
      }
    })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function() {
        return "message";
      }
    })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function() {
        return "range";
      }
    })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function() {
        return "severity";
      }
    })(Data_Show.showRecordFieldsCons({
      reflectSymbol: function() {
        return "source";
      }
    })(Data_Show.showRecordFieldsNil)(Data_Nullable.showNullable(Data_Show.showString)))(Data_Nullable.showNullable(Data_Show.showInt)))(showRange))(Data_Show.showString))(Data_Nullable.showNullable(Data_Show.showString)));
    var showCodeActionKind = {
      show: function(v) {
        return "CodeActionKind " + v;
      }
    };
    var readRange = function(r) {
      var readPosition = function(p) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(p)("line"))(Foreign.readInt(Data_Identity.monadIdentity)))(function(line) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(p)("character"))(Foreign.readInt(Data_Identity.monadIdentity)))(function(character) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
              line,
              character
            });
          });
        });
      };
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(r)("start"))(readPosition))(function(start) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(r)("end"))(readPosition))(function(end) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
            start,
            end
          });
        });
      });
    };
    var newtypeTextEdit = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeRange = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypePosition = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeLocation = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeDocumentUri = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeDiagnostic = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeCompletionList = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeCompletionItem = {
      Coercible0: function() {
        return void 0;
      }
    };
    var newtypeCommand = {
      Coercible0: function() {
        return void 0;
      }
    };
    var markupContent = function(s) {
      return {
        kind: "markdown",
        value: s
      };
    };
    var markedString = function(s) {
      return {
        language: "purescript",
        value: s
      };
    };
    var intToFileChangeType = function(v) {
      if (v === 1) {
        return new Data_Maybe.Just(CreatedChangeType.value);
      }
      ;
      if (v === 2) {
        return new Data_Maybe.Just(ChangedChangeType.value);
      }
      ;
      if (v === 3) {
        return new Data_Maybe.Just(DeletedChangeType.value);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var gotoDefinitionResult = Data_Either.either(Unsafe_Coerce.unsafeCoerce)(Unsafe_Coerce.unsafeCoerce);
    var fromFileChangeTypeCode = function(v) {
      if (v === 1) {
        return new Data_Maybe.Just(CreatedChangeType.value);
      }
      ;
      if (v === 2) {
        return new Data_Maybe.Just(ChangedChangeType.value);
      }
      ;
      if (v === 3) {
        return new Data_Maybe.Just(DeletedChangeType.value);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var fileChangeTypeToInt = function(v) {
      if (v instanceof CreatedChangeType) {
        return 1;
      }
      ;
      if (v instanceof ChangedChangeType) {
        return 2;
      }
      ;
      if (v instanceof DeletedChangeType) {
        return 3;
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 378, column 23 - line 381, column 25): " + [v.constructor.name]);
    };
    var eqPosition = {
      eq: function(v) {
        return function(v1) {
          return v.line === v1.line && v.character === v1.character;
        };
      }
    };
    var eqRange = {
      eq: function(v) {
        return function(v1) {
          return Data_Eq.eq(eqPosition)(v.start)(v1.start) && Data_Eq.eq(eqPosition)(v.end)(v1.end);
        };
      }
    };
    var eqTextEdit = {
      eq: function(v) {
        return function(v1) {
          return Data_Eq.eq(eqRange)(v.range)(v1.range) && v.newText === v1.newText;
        };
      }
    };
    var positionOrd = {
      compare: function(v) {
        return function(v1) {
          if (v.line < v1.line) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v.line === v1.line && v.character < v1.character) {
            return Data_Ordering.LT.value;
          }
          ;
          if (v.line === v1.line && v.character === v1.character) {
            return Data_Ordering.EQ.value;
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_Ordering.GT.value;
          }
          ;
          throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 51, column 1 - line 56, column 21): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Eq0: function() {
        return eqPosition;
      }
    };
    var ordRange = {
      compare: function(v) {
        return function(v1) {
          return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(Data_Ord.compare(positionOrd)(v.start)(v1.start))(Data_Ord.compare(positionOrd)(v.end)(v1.end));
        };
      },
      Eq0: function() {
        return eqRange;
      }
    };
    var eqDocumentUri = Data_Eq.eqString;
    var eqOptionalVersionedTextDo = {
      eq: function(x) {
        return function(y) {
          return Data_Eq.eq(eqDocumentUri)(x.uri)(y.uri) && Data_Eq.eq(Data_Nullable.eqNullable(Data_Eq.eqNumber))(x.version)(y.version);
        };
      }
    };
    var semigroupWorkspaceEdit = {
      append: function(v) {
        return function(v1) {
          var goStrMap = function(a) {
            return Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Maybe.fromMaybe(Foreign_Object.empty)(Data_Nullable.toMaybe(a)));
          };
          var fromNullableArray = function(a) {
            return Data_Maybe.fromMaybe([])(Data_Nullable.toMaybe(a));
          };
          var docId = function(v2) {
            return v2.textDocument;
          };
          var combine = function(v2) {
            return function(v3) {
              return {
                textDocument: v2.textDocument,
                edits: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v2.edits)(v3.edits)
              };
            };
          };
          return {
            documentChanges: Data_Nullable.toNullable(function() {
              var v2 = Data_Maybe.isNothing(Data_Nullable.toMaybe(v1.documentChanges));
              var v3 = Data_Maybe.isNothing(Data_Nullable.toMaybe(v.documentChanges));
              if (v3 && v2) {
                return Data_Maybe.Nothing.value;
              }
              ;
              return Data_Maybe.Just.create(Data_Functor.map(Data_Functor.functorArray)(Data_Semigroup_Foldable.foldl1(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(combine))(Data_Functor.map(Data_Functor.functorArray)(Data_Array_NonEmpty.toNonEmpty)(Data_Array.groupBy(function(d1) {
                return function(d2) {
                  return Data_Eq.eq(eqOptionalVersionedTextDo)(docId(d1))(docId(d2));
                };
              })(Data_Semigroup.append(Data_Semigroup.semigroupArray)(fromNullableArray(v.documentChanges))(fromNullableArray(v1.documentChanges))))));
            }()),
            changes: Data_Nullable.toNullable(function() {
              var v2 = Data_Maybe.isNothing(Data_Nullable.toMaybe(v1.changes));
              var v3 = Data_Maybe.isNothing(Data_Nullable.toMaybe(v.changes));
              if (v3 && v2) {
                return Data_Maybe.Nothing.value;
              }
              ;
              return Data_Maybe.Just.create(Foreign_Object.fromFoldableWith(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(goStrMap(v.changes))(goStrMap(v1.changes))));
            }())
          };
        };
      }
    };
    var monoidWorkspaceEdit = {
      mempty: {
        documentChanges: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        changes: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
      },
      Semigroup0: function() {
        return semigroupWorkspaceEdit;
      }
    };
    var eqTextDocumentIdentifier = {
      eq: function(x) {
        return function(y) {
          return Data_Eq.eq(eqDocumentUri)(x.uri)(y.uri);
        };
      }
    };
    var defaultCompletionItem = function(label) {
      return {
        label,
        kind: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        detail: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        labelDetails: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        documentation: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        sortText: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        filterText: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        insertText: Data_Nullable.toNullable(new Data_Maybe.Just(label)),
        textEdit: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        additionalTextEdits: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
        command: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
      };
    };
    var completionItemKindToInt = function(v) {
      if (v instanceof Text) {
        return 1;
      }
      ;
      if (v instanceof Method) {
        return 2;
      }
      ;
      if (v instanceof $$Function) {
        return 3;
      }
      ;
      if (v instanceof Constructor) {
        return 4;
      }
      ;
      if (v instanceof Field) {
        return 5;
      }
      ;
      if (v instanceof Variable) {
        return 6;
      }
      ;
      if (v instanceof Class) {
        return 7;
      }
      ;
      if (v instanceof Interface) {
        return 8;
      }
      ;
      if (v instanceof Module) {
        return 9;
      }
      ;
      if (v instanceof Property) {
        return 10;
      }
      ;
      if (v instanceof Unit) {
        return 11;
      }
      ;
      if (v instanceof Value) {
        return 12;
      }
      ;
      if (v instanceof Enum) {
        return 13;
      }
      ;
      if (v instanceof Keyword) {
        return 14;
      }
      ;
      if (v instanceof Snippet) {
        return 15;
      }
      ;
      if (v instanceof Color) {
        return 16;
      }
      ;
      if (v instanceof File) {
        return 17;
      }
      ;
      if (v instanceof Reference) {
        return 18;
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.Protocol.Types (line 175, column 27 - line 193, column 18): " + [v.constructor.name]);
    };
    var completionItem = function(label) {
      return function(k) {
        return Data_Newtype.over()()(CompletionItem)(function(v) {
          return {
            kind: Data_Nullable.toNullable(Data_Maybe.Just.create(completionItemKindToInt(k))),
            additionalTextEdits: v.additionalTextEdits,
            command: v.command,
            detail: v.detail,
            documentation: v.documentation,
            filterText: v.filterText,
            insertText: v.insertText,
            label: v.label,
            labelDetails: v.labelDetails,
            sortText: v.sortText,
            textEdit: v.textEdit
          };
        })(defaultCompletionItem(label));
      };
    };
    var codeActionSourceSortImports = "source.sortImports";
    var codeActionSourceOrganizeImports = "source.organizeImports";
    var codeActionSource = "source";
    var codeActionResult = Data_Either.either(Unsafe_Coerce.unsafeCoerce)(Unsafe_Coerce.unsafeCoerce);
    var codeActionRefactorRewrite = "refactor.rewrite";
    var codeActionRefactorInline = "refactor.inline";
    var codeActionRefactorExtract = "refactor.extract";
    var codeActionRefactor = "refactor";
    var codeActionQuickFix = "quickfix";
    var codeActionEmpty = "";
    module2.exports = {
      markedString,
      markupContent,
      DocumentUri,
      Position,
      Range,
      readRange,
      Location,
      LocationLink,
      gotoDefinitionResult,
      Diagnostic,
      CompletionItemLabelDetails,
      CompletionItem,
      Text,
      Method,
      "Function": $$Function,
      Constructor,
      Field,
      Variable,
      Class,
      Interface,
      Module,
      Property,
      Unit,
      Value,
      Enum,
      Keyword,
      Snippet,
      Color,
      File,
      Reference,
      defaultCompletionItem,
      completionItem,
      completionItemKindToInt,
      CompletionItemList,
      SymbolInformation,
      FileSymbolKind,
      ModuleSymbolKind,
      NamespaceSymbolKind,
      PackageSymbolKind,
      ClassSymbolKind,
      MethodSymbolKind,
      PropertySymbolKind,
      FieldSymbolKind,
      ConstructorSymbolKind,
      EnumSymbolKind,
      InterfaceSymbolKind,
      FunctionSymbolKind,
      VariableSymbolKind,
      ConstantSymbolKind,
      StringSymbolKind,
      NumberSymbolKind,
      BooleanSymbolKind,
      ArraySymbolKind,
      symbolKindToInt,
      Hover,
      Command,
      CodeAction,
      codeActionResult,
      TextEdit,
      WorkspaceEdit,
      workspaceEdit,
      supportsDocumentChanges,
      TextDocumentEdit,
      TextDocumentIdentifier,
      OptionalVersionedTextDocumentIdentifier,
      FileChangeTypeCode,
      CreatedChangeType,
      ChangedChangeType,
      DeletedChangeType,
      fileChangeTypeToInt,
      intToFileChangeType,
      fromFileChangeTypeCode,
      FileEvent,
      FoldingRange,
      CodeActionKind,
      codeActionEmpty,
      codeActionQuickFix,
      codeActionRefactor,
      codeActionRefactorExtract,
      codeActionRefactorInline,
      codeActionRefactorRewrite,
      codeActionSource,
      codeActionSourceSortImports,
      codeActionSourceOrganizeImports,
      newtypeDocumentUri,
      showDocumentUri,
      eqDocumentUri,
      ordDocumentUri,
      eqPosition,
      positionOrd,
      newtypePosition,
      showPosition,
      eqRange,
      ordRange,
      showRange,
      newtypeRange,
      newtypeLocation,
      newtypeDiagnostic,
      showDiagnostic,
      newtypeCompletionItem,
      newtypeCompletionList,
      newtypeCommand,
      newtypeTextEdit,
      eqTextEdit,
      showTextEdit,
      semigroupWorkspaceEdit,
      monoidWorkspaceEdit,
      newtypeTextDocumentIdenti,
      eqTextDocumentIdentifier,
      newtypeOptionalVersionedT,
      eqOptionalVersionedTextDo,
      showCodeActionKind
    };
  }
});

// output/LanguageServer.Protocol.Text/index.js
var require_LanguageServer_Protocol4 = __commonJS({
  "output/LanguageServer.Protocol.Text/index.js"(exports2, module2) {
    "use strict";
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_String_Common = require_Data_String4();
    var Data_String_Regex = require_Data_String5();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var Data_Tuple = require_Data22();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var makeWorkspaceEdit = function(capabilities) {
      return function(uri) {
        return function(version) {
          return function(range) {
            return function(newText) {
              var textEdit = {
                range,
                newText
              };
              var docid = {
                uri,
                version: Data_Nullable.notNull(version)
              };
              var edit = {
                textDocument: docid,
                edits: [textEdit]
              };
              return LanguageServer_Protocol_Types.workspaceEdit(capabilities)([edit]);
            };
          };
        };
      };
    };
    var makeMinimalWorkspaceEdit = function(clientCapabilities) {
      return function(uri) {
        return function(version) {
          return function(oldText) {
            return function(newText) {
              var splitLines = function(t) {
                return Data_Either.either(Data_Function["const"]([t]))(function(r) {
                  return Data_String_Regex.split(r)(t);
                })(Data_String_Regex.regex("\r?\n")(Data_String_Regex_Flags.noFlags));
              };
              var range = function(text) {
                return function(l1) {
                  return function(l2) {
                    return {
                      start: {
                        line: l1,
                        character: 0
                      },
                      end: {
                        line: Data_Array.length(text) - l2 | 0,
                        character: 0
                      }
                    };
                  };
                };
              };
              var newLines = splitLines(newText);
              var oldLines = function() {
                var v = splitLines(oldText);
                if (Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(Data_Array.last(v))(new Data_Maybe.Just("")) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(Data_Array.last(newLines))(new Data_Maybe.Just(""))) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v)([""]);
                }
                ;
                return v;
              }();
              var oldLen = Data_Array.length(oldLines);
              var newLen = Data_Array.length(newLines);
              var lines = function(text) {
                return function(l1) {
                  return function(l2) {
                    return Data_Array.slice(l1)(Data_Array.length(text) - l2 | 0)(text);
                  };
                };
              };
              var lastDiff = Data_Array.findIndex(Data_Tuple.uncurry(Data_Eq.notEq(Data_Eq.eqString)))(Data_Array.zip(Data_Array.reverse(oldLines))(Data_Array.reverse(newLines)));
              var firstDiff = Data_Array.findIndex(Data_Tuple.uncurry(Data_Eq.notEq(Data_Eq.eqString)))(Data_Array.zip(oldLines)(newLines));
              var e = function(a) {
                return function(b) {
                  return Data_Maybe.Just.create(makeWorkspaceEdit(clientCapabilities)(uri)(version)(a)(b));
                };
              };
              if (firstDiff instanceof Data_Maybe.Just && (lastDiff instanceof Data_Maybe.Just && (newLen - lastDiff.value0 | 0) >= firstDiff.value0)) {
                var m$prime = Data_Ord.min(Data_Ord.ordInt)(lastDiff.value0)(oldLen - firstDiff.value0 | 0);
                return e(range(oldLines)(firstDiff.value0)(m$prime))(Data_String_Common.joinWith("\n")(lines(newLines)(firstDiff.value0)(m$prime)) + function() {
                  var $4 = Data_Array["null"](newLines);
                  if ($4) {
                    return "";
                  }
                  ;
                  return "\n";
                }());
              }
              ;
              if (firstDiff instanceof Data_Maybe.Nothing && (lastDiff instanceof Data_Maybe.Nothing && oldLen === newLen)) {
                return Data_Maybe.Nothing.value;
              }
              ;
              return e(range(oldLines)(0)(0))(newText);
            };
          };
        };
      };
    };
    module2.exports = {
      makeWorkspaceEdit,
      makeMinimalWorkspaceEdit
    };
  }
});

// output/LanguageServer.Protocol.TextDocument/foreign.js
var require_foreign83 = __commonJS({
  "output/LanguageServer.Protocol.TextDocument/foreign.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.positionAtOffset = exports2.offsetAtPosition = exports2.getLineCount = exports2.getVersion = exports2.getLanguageId = exports2.getUri = exports2.getTextAtRange = exports2.getText = void 0;
    var getText = function(document) {
      return function() {
        return document.getText();
      };
    };
    exports2.getText = getText;
    var getTextAtRange = function(document) {
      return function(range) {
        return function() {
          return document.getText(range);
        };
      };
    };
    exports2.getTextAtRange = getTextAtRange;
    var getUri = function(document) {
      return document.uri;
    };
    exports2.getUri = getUri;
    var getLanguageId = function(document) {
      return document.languageId;
    };
    exports2.getLanguageId = getLanguageId;
    var getVersion = function(document) {
      return function() {
        return document.version;
      };
    };
    exports2.getVersion = getVersion;
    var getLineCount = function(document) {
      return function() {
        return document.lineCount;
      };
    };
    exports2.getLineCount = getLineCount;
    var offsetAtPosition = function(document) {
      return function(pos) {
        return function() {
          return document.offsetAt(pos);
        };
      };
    };
    exports2.offsetAtPosition = offsetAtPosition;
    var positionAtOffset = function(document) {
      return function(offset) {
        return function() {
          return document.positionAt(offset);
        };
      };
    };
    exports2.positionAtOffset = positionAtOffset;
  }
});

// output/LanguageServer.Protocol.TextDocument/index.js
var require_LanguageServer_Protocol5 = __commonJS({
  "output/LanguageServer.Protocol.TextDocument/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign83();
    var getTextAtVersion = function(doc) {
      return function __do() {
        var text = $foreign.getText(doc)();
        var version = $foreign.getVersion(doc)();
        return {
          text,
          version
        };
      };
    };
    module2.exports = {
      getTextAtVersion,
      offsetAtPosition: $foreign.offsetAtPosition,
      positionAtOffset: $foreign.positionAtOffset,
      getText: $foreign.getText,
      getUri: $foreign.getUri,
      getLanguageId: $foreign.getLanguageId,
      getVersion: $foreign.getVersion,
      getLineCount: $foreign.getLineCount,
      getTextAtRange: $foreign.getTextAtRange
    };
  }
});

// output/LanguageServer.Protocol.Uri/foreign.js
var require_foreign84 = __commonJS({
  "output/LanguageServer.Protocol.Uri/foreign.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filenameToUri = exports2.uriToFilename = void 0;
    var vscode_uri_1 = require("vscode-uri");
    var uriToFilename = function(uri) {
      return function() {
        return vscode_uri_1.URI.parse(uri).fsPath;
      };
    };
    exports2.uriToFilename = uriToFilename;
    var filenameToUri = function(filename) {
      return function() {
        return vscode_uri_1.URI.file(filename).toString();
      };
    };
    exports2.filenameToUri = filenameToUri;
  }
});

// output/LanguageServer.Protocol.Uri/index.js
var require_LanguageServer_Protocol6 = __commonJS({
  "output/LanguageServer.Protocol.Uri/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign84();
    module2.exports = {
      uriToFilename: $foreign.uriToFilename,
      filenameToUri: $foreign.filenameToUri
    };
  }
});

// output/LanguageServer.Protocol.Window/foreign.js
var require_foreign85 = __commonJS({
  "output/LanguageServer.Protocol.Window/foreign.js"(exports2) {
    "use strict";
    var __spreadArray = exports2 && exports2.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.report2 = exports2.reportMsg = exports2.report = exports2.workBegin = exports2.workDone = exports2.createWorkDoneProgressImpl = exports2.showInformationWithActionsImpl = exports2.showInformation = exports2.showWarningWithActionsImpl = exports2.showWarning = exports2.showErrorWithActionsImpl = exports2.showError = void 0;
    var showError = function(conn) {
      return function(s) {
        return function() {
          return conn.window.showErrorMessage(s);
        };
      };
    };
    exports2.showError = showError;
    var showErrorWithActionsImpl = function(conn) {
      return function(s) {
        return function(actions) {
          return function() {
            var _a;
            return (_a = conn.window).showErrorMessage.apply(_a, __spreadArray([s], actions, false));
          };
        };
      };
    };
    exports2.showErrorWithActionsImpl = showErrorWithActionsImpl;
    var showWarning = function(conn) {
      return function(s) {
        return function() {
          return conn.window.showWarningMessage(s);
        };
      };
    };
    exports2.showWarning = showWarning;
    var showWarningWithActionsImpl = function(conn) {
      return function(s) {
        return function(actions) {
          return function() {
            var _a;
            return (_a = conn.window).showWarningMessage.apply(_a, __spreadArray([s], actions, false));
          };
        };
      };
    };
    exports2.showWarningWithActionsImpl = showWarningWithActionsImpl;
    var showInformation = function(conn) {
      return function(s) {
        return function() {
          return conn.window.showInformationMessage(s);
        };
      };
    };
    exports2.showInformation = showInformation;
    var showInformationWithActionsImpl = function(conn) {
      return function(s) {
        return function(actions) {
          return function() {
            var _a;
            return (_a = conn.window).showInformationMessage.apply(_a, __spreadArray([s], actions, false));
          };
        };
      };
    };
    exports2.showInformationWithActionsImpl = showInformationWithActionsImpl;
    var createWorkDoneProgressImpl = function(conn) {
      return function() {
        return conn.window.createWorkDoneProgress();
      };
    };
    exports2.createWorkDoneProgressImpl = createWorkDoneProgressImpl;
    var workDone = function(reporter) {
      return function() {
        return reporter.done();
      };
    };
    exports2.workDone = workDone;
    var workBegin = function(reporter) {
      return function(_a) {
        var title = _a.title;
        return function() {
          return reporter.begin(title, void 0, void 0, true);
        };
      };
    };
    exports2.workBegin = workBegin;
    var report = function(reporter) {
      return function(percentage) {
        return function() {
          return reporter.report(percentage);
        };
      };
    };
    exports2.report = report;
    var reportMsg = function(reporter) {
      return function(msg) {
        return function() {
          return reporter.report(msg);
        };
      };
    };
    exports2.reportMsg = reportMsg;
    var report2 = function(reporter) {
      return function(percentage) {
        return function(msg) {
          return function() {
            return reporter.report(percentage, msg);
          };
        };
      };
    };
    exports2.report2 = report2;
  }
});

// output/LanguageServer.Protocol.Window/index.js
var require_LanguageServer_Protocol7 = __commonJS({
  "output/LanguageServer.Protocol.Window/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign85();
    var Control_Promise = require_Control13();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Effect_Aff = require_Effect6();
    var createWorkDoneProgress = function(conn) {
      return Control_Promise.toAffE($foreign.createWorkDoneProgressImpl(conn));
    };
    var convertMessageAction = function(act) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
        return v.title;
      })(Data_Nullable.toMaybe(act));
    };
    var showErrorWithActions = function(conn) {
      return function(msg) {
        return function(acts) {
          return Data_Functor.map(Effect_Aff.functorAff)(convertMessageAction)(Control_Promise.toAffE($foreign.showErrorWithActionsImpl(conn)(msg)(Data_Functor.map(Data_Functor.functorArray)(function(title) {
            return {
              title
            };
          })(acts))));
        };
      };
    };
    var showInformationWithActions = function(conn) {
      return function(msg) {
        return function(acts) {
          return Data_Functor.map(Effect_Aff.functorAff)(convertMessageAction)(Control_Promise.toAffE($foreign.showInformationWithActionsImpl(conn)(msg)(Data_Functor.map(Data_Functor.functorArray)(function(title) {
            return {
              title
            };
          })(acts))));
        };
      };
    };
    var showWarningWithActions = function(conn) {
      return function(msg) {
        return function(acts) {
          return Data_Functor.map(Effect_Aff.functorAff)(convertMessageAction)(Control_Promise.toAffE($foreign.showWarningWithActionsImpl(conn)(msg)(Data_Functor.map(Data_Functor.functorArray)(function(title) {
            return {
              title
            };
          })(acts))));
        };
      };
    };
    module2.exports = {
      showErrorWithActions,
      showWarningWithActions,
      showInformationWithActions,
      createWorkDoneProgress,
      showError: $foreign.showError,
      showWarning: $foreign.showWarning,
      showInformation: $foreign.showInformation,
      workDone: $foreign.workDone,
      workBegin: $foreign.workBegin,
      report: $foreign.report,
      report2: $foreign.report2,
      reportMsg: $foreign.reportMsg
    };
  }
});

// output/LanguageServer.IdePurescript.Imports/index.js
var require_LanguageServer_IdePurescript3 = __commonJS({
  "output/LanguageServer.IdePurescript.Imports/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Error_Util = require_Control_Error();
    var Control_Monad_Except = require_Control_Monad();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Identity = require_Data20();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_Show = require_Data14();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Foreign = require_Foreign();
    var IdePurescript_Modules = require_IdePurescript5();
    var IdePurescript_PscIde = require_IdePurescript2();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_Handlers = require_LanguageServer_Protocol2();
    var LanguageServer_Protocol_Text = require_LanguageServer_Protocol4();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var LanguageServer_Protocol_Uri = require_LanguageServer_Protocol6();
    var LanguageServer_Protocol_Window = require_LanguageServer_Protocol7();
    var PscIde_Command = require_PscIde();
    var showNS = function(v) {
      if (v instanceof PscIde_Command.NSValue) {
        return "NSValue";
      }
      ;
      if (v instanceof PscIde_Command.NSKind) {
        return "NSKind";
      }
      ;
      if (v instanceof PscIde_Command.NSType) {
        return "NSType";
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 80, column 1 - line 80, column 32): " + [v.constructor.name]);
    };
    var reformatImports = function(log) {
      return function(docs) {
        return function(v) {
          return function(state) {
            return function(args) {
              var successResult = Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
              var v1 = Data_Functor.map(Data_Functor.functorArray)(function() {
                var $154 = Foreign.readString(Data_Identity.monadIdentity);
                return function($155) {
                  return Control_Monad_Except.runExcept($154($155));
                };
              }())(args);
              if (state.port instanceof Data_Maybe.Just && (v1.length === 1 && v1[0] instanceof Data_Either.Right)) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v1[0].value0)))(function(maybeDoc) {
                  var v3 = Data_Nullable.toMaybe(maybeDoc);
                  if (v3 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
                  }
                  ;
                  if (v3 instanceof Data_Maybe.Just) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtVersion(v3.value0)))(function(v4) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(v1[0].value0)))(function(fileName) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Modules.reformatModuleImports(log)(state.modules)(state.port.value0)(fileName)(v4.text))(function(res) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(function() {
                            if (res instanceof Data_Maybe.Just) {
                              var edit = LanguageServer_Protocol_Text.makeMinimalWorkspaceEdit(state.clientCapabilities)(v1[0].value0)(v4.version)(v4.text)(res.value0.result);
                              if (state.conn instanceof Data_Maybe.Just && edit instanceof Data_Maybe.Just) {
                                return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(state.conn.value0)(edit.value0));
                              }
                              ;
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                            }
                            ;
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                          }())(function() {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
                          });
                        });
                      });
                    });
                  }
                  ;
                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 203, column 7 - line 216, column 29): " + [v3.constructor.name]);
                });
              }
              ;
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(IdePurescript_PscIdeServer.Info.value)(Data_Show.show(Data_Show.showArray(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showString)))(v1))))(function() {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
              });
            };
          };
        };
      };
    };
    var parseNS = function(v) {
      if (v === "NSValue") {
        return new Data_Maybe.Just(PscIde_Command.NSValue.value);
      }
      ;
      if (v === "NSKind") {
        return new Data_Maybe.Just(PscIde_Command.NSKind.value);
      }
      ;
      if (v === "NSType") {
        return new Data_Maybe.Just(PscIde_Command.NSType.value);
      }
      ;
      return Data_Maybe.Nothing.value;
    };
    var getAllModules = function(log) {
      return function(v) {
        return function(v1) {
          return function(state) {
            return function(v2) {
              if (state.port instanceof Data_Maybe.Just) {
                return Data_Functor.map(Effect_Aff.functorAff)(Foreign.unsafeToForeign)(IdePurescript_PscIde.getAvailableModules(state.port.value0));
              }
              ;
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(IdePurescript_PscIdeServer["Error"].value)("Fail case")))(function() {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign([]));
              });
            };
          };
        };
      };
    };
    var addCompletionImportEdit = function(log) {
      return function(v) {
        return function(config) {
          return function(v1) {
            return function(v2) {
              return function(v3) {
                return function(version) {
                  return function(text) {
                    return function(ns) {
                      var noModule = function(f) {
                        return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function() {
                          var $156 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(f);
                          var $157 = Data_Newtype.unwrap();
                          return function($158) {
                            return $156($157($158));
                          };
                        }())(v1.modules.modules);
                      };
                      var isSameUnqualified = function(mod$prime) {
                        return function(v4) {
                          if (v4.qualifier instanceof Data_Maybe.Nothing) {
                            return mod$prime === v4.moduleName;
                          }
                          ;
                          return false;
                        };
                      };
                      var isSameQualified = function(mod$prime) {
                        return function(qual$prime) {
                          return function(v4) {
                            if (v4.qualifier instanceof Data_Maybe.Just) {
                              return mod$prime === v4.moduleName && qual$prime === v4.qualifier.value0;
                            }
                            ;
                            return false;
                          };
                        };
                      };
                      var prelude = LanguageServer_IdePurescript_Config.preludeModule(config);
                      if (v1.port instanceof Data_Maybe.Just) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(function() {
                          if (v2.mod instanceof Data_Maybe.Just && (v2.qual instanceof Data_Maybe.Just && noModule(isSameQualified(v2.mod.value0)(v2.qual.value0)))) {
                            return IdePurescript_Modules.addQualifiedImport(v1.modules)(v1.port.value0)(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(v2.uri))(text)(v2.mod.value0)(v2.qual.value0);
                          }
                          ;
                          if (v2.mod instanceof Data_Maybe.Just && (v2.qual instanceof Data_Maybe.Nothing && (v2.mod.value0 === prelude && noModule(isSameUnqualified(prelude))))) {
                            return IdePurescript_Modules.addModuleImport(v1.modules)(v1.port.value0)(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(v2.uri))(text)(v2.mod.value0);
                          }
                          ;
                          return IdePurescript_Modules.addExplicitImport(v1.modules)(v1.port.value0)(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(v2.uri))(text)(v2.mod)(v2.qual)(v2.identifier)(ns);
                        }())(function(v4) {
                          if (v4.result instanceof IdePurescript_Modules.UpdatedImports) {
                            var edit = LanguageServer_Protocol_Text.makeMinimalWorkspaceEdit(v1.clientCapabilities)(v2.uri)(version)(text)(v4.result.value0);
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Right.create(Data_Maybe.maybe([])(Data_Array.singleton)(edit)));
                          }
                          ;
                          if (v4.result instanceof IdePurescript_Modules.AmbiguousImport) {
                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                              Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v1.conn)(function(v5) {
                                return LanguageServer_Protocol_Window.showError(v5)("Could not import " + (text + " because there is more than one option"));
                              }))();
                              log(IdePurescript_PscIdeServer.Warning.value)("Found ambiguous imports")();
                              return Data_Either.Left.create(Foreign.unsafeToForeign(Data_Functor.map(Data_Functor.functorArray)(function(v5) {
                                return v5["module'"];
                              })(v4.result.value0)));
                            });
                          }
                          ;
                          if (v4.result instanceof IdePurescript_Modules.UnnecessaryImport) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right([]));
                          }
                          ;
                          if (v4.result instanceof IdePurescript_Modules.FailedImport) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v1.conn)(function(v5) {
                              return LanguageServer_Protocol_Window.showError(v5)("Failed to import: `" + (v2.identifier + ("`. Error: " + v4.result.value0)));
                            })))(function() {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right([]));
                            });
                          }
                          ;
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 110, column 7 - line 132, column 26): " + [v4.result.constructor.name]);
                        });
                      }
                      ;
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right([]));
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
    var addModuleImport$prime = function(log) {
      return function(docs) {
        return function(config) {
          return function(state) {
            return function(args) {
              var successResult = Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
              var v = Data_Functor.map(Data_Functor.functorArray)(function() {
                var $159 = Foreign.readString(Data_Identity.monadIdentity);
                return function($160) {
                  return Control_Monad_Except.runExcept($159($160));
                };
              }())(args);
              if (state.port instanceof Data_Maybe.Just && (v.length === 3 && (v[0] instanceof Data_Either.Right && v[2] instanceof Data_Either.Right))) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v[2].value0)))(function(maybeDoc) {
                  var v2 = Data_Nullable.toMaybe(maybeDoc);
                  if (v2 instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
                  }
                  ;
                  if (v2 instanceof Data_Maybe.Just) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtVersion(v2.value0)))(function(v3) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(v[2].value0)))(function(fileName) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(function() {
                          if (v[1] instanceof Data_Either.Right) {
                            return addCompletionImportEdit(log)(docs)(config)(state)({
                              identifier: "",
                              qual: Control_Error_Util.hush(v[1]),
                              mod: new Data_Maybe.Just(v[0].value0),
                              uri: v[2].value0
                            })(v2.value0)(v3.version)(v3.text)(Data_Maybe.Nothing.value);
                          }
                          ;
                          if (v[1] instanceof Data_Either.Left) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Modules.addModuleImport(state.modules)(state.port.value0)(fileName)(v3.text)(v[0].value0))(function(v4) {
                              if (v4.result instanceof IdePurescript_Modules.UpdatedImports) {
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Right.create(Data_Array.fromFoldable(Data_Foldable.foldableMaybe)(LanguageServer_Protocol_Text.makeMinimalWorkspaceEdit(state.clientCapabilities)(v[2].value0)(v3.version)(v3.text)(v4.result.value0))));
                              }
                              ;
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right([]));
                            });
                          }
                          ;
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 157, column 19 - line 174, column 37): " + [v[1].constructor.name]);
                        }())(function(edit) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(function() {
                            if (state.conn instanceof Data_Maybe.Just && edit instanceof Data_Either.Right) {
                              return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(state.conn.value0)(Data_Array.fold(LanguageServer_Protocol_Types.monoidWorkspaceEdit)(edit.value0)));
                            }
                            ;
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                          }())(function() {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
                          });
                        });
                      });
                    });
                  }
                  ;
                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 152, column 7 - line 179, column 29): " + [v2.constructor.name]);
                });
              }
              ;
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(log(IdePurescript_PscIdeServer.Info.value)(Data_Show.show(Data_Show.showArray(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showString)))(v))))(function() {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(successResult);
              });
            };
          };
        };
      };
    };
    var addCompletionImport$prime = function(existingEdit) {
      return function(log) {
        return function(docs) {
          return function(config) {
            return function(v) {
              return function(args) {
                var shouldAddImport = LanguageServer_IdePurescript_Config.autocompleteAddImport(config);
                var v2 = Data_Functor.map(Data_Functor.functorArray)(function() {
                  var $161 = Foreign.readString(Data_Identity.monadIdentity);
                  return function($162) {
                    return Control_Monad_Except.runExcept($161($162));
                  };
                }())(args);
                if (v.conn instanceof Data_Maybe.Just && (v2.length === 5 && (v2[0] instanceof Data_Either.Right && (v2[3] instanceof Data_Either.Right && (v2[4] instanceof Data_Either.Right && shouldAddImport))))) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v2[3].value0)))(function(maybeDoc) {
                    var v4 = Data_Nullable.toMaybe(maybeDoc);
                    if (v4 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)));
                    }
                    ;
                    if (v4 instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtVersion(v4.value0)))(function(v5) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(addCompletionImportEdit(log)(docs)(config)(v)({
                          identifier: v2[0].value0,
                          mod: Control_Error_Util.hush(v2[1]),
                          qual: Control_Error_Util.hush(v2[2]),
                          uri: v2[3].value0
                        })(v4.value0)(v5.version)(v5.text)(parseNS(v2[4].value0)))(function(edit) {
                          if (edit instanceof Data_Either.Right) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v.conn.value0)(Data_Array.fold(LanguageServer_Protocol_Types.monoidWorkspaceEdit)(Data_Array.cons(existingEdit)(edit.value0)))))(function() {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)));
                            });
                          }
                          ;
                          if (edit instanceof Data_Either.Left) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v.conn.value0)(existingEdit)))(function() {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(edit.value0);
                            });
                          }
                          ;
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 55, column 11 - line 61, column 23): " + [edit.constructor.name]);
                        });
                      });
                    }
                    ;
                    throw new Error("Failed pattern match at LanguageServer.IdePurescript.Imports (line 50, column 7 - line 61, column 23): " + [v4.constructor.name]);
                  });
                }
                ;
                if (v.conn instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v.conn.value0)(existingEdit)))(function() {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)));
                  });
                }
                ;
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value)));
              };
            };
          };
        };
      };
    };
    var addCompletionImport = addCompletionImport$prime(Data_Monoid.mempty(LanguageServer_Protocol_Types.monoidWorkspaceEdit));
    module2.exports = {
      addCompletionImport,
      "addCompletionImport'": addCompletionImport$prime,
      addCompletionImportEdit,
      "addModuleImport'": addModuleImport$prime,
      getAllModules,
      reformatImports,
      showNS
    };
  }
});

// output/LanguageServer.Protocol.Console/foreign.js
var require_foreign86 = __commonJS({
  "output/LanguageServer.Protocol.Console/foreign.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.error = exports2.warn = exports2.info = exports2.log = void 0;
    var log = function(conn) {
      return function(s) {
        return function() {
          return conn.console.log(s);
        };
      };
    };
    exports2.log = log;
    var info = function(conn) {
      return function(s) {
        return function() {
          return conn.console.info(s);
        };
      };
    };
    exports2.info = info;
    var warn = function(conn) {
      return function(s) {
        return function() {
          return conn.console.warn(s);
        };
      };
    };
    exports2.warn = warn;
    var error = function(conn) {
      return function(s) {
        return function() {
          return conn.console.error(s);
        };
      };
    };
    exports2.error = error;
  }
});

// output/LanguageServer.Protocol.Console/index.js
var require_LanguageServer_Protocol8 = __commonJS({
  "output/LanguageServer.Protocol.Console/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign86();
    module2.exports = {
      log: $foreign.log,
      info: $foreign.info,
      warn: $foreign.warn,
      error: $foreign.error
    };
  }
});

// output/LanguageServer.IdePurescript.Assist/index.js
var require_LanguageServer_IdePurescript4 = __commonJS({
  "output/LanguageServer.IdePurescript.Assist/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad_Except = require_Control_Monad();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Array = require_Data39();
    var Data_Bounded = require_Data13();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_String_Common = require_Data_String4();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Foreign = require_Foreign();
    var Foreign_Index = require_Foreign4();
    var Foreign_NullOrUndefined = require_Foreign5();
    var IdePurescript_Completion = require_IdePurescript7();
    var IdePurescript_PscIde = require_IdePurescript2();
    var IdePurescript_Tokens = require_IdePurescript6();
    var LanguageServer_IdePurescript_Commands = require_LanguageServer_IdePurescript();
    var LanguageServer_IdePurescript_Imports = require_LanguageServer_IdePurescript3();
    var LanguageServer_Protocol_Console = require_LanguageServer_Protocol8();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_Handlers = require_LanguageServer_Protocol2();
    var LanguageServer_Protocol_Text = require_LanguageServer_Protocol4();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var PscIde = require_PscIde2();
    var PscIde_Command = require_PscIde();
    var lineRange = function(pos) {
      return {
        start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(v) {
          return {
            character: 0,
            line: v.line
          };
        })(pos),
        end: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(v) {
          return {
            character: Data_Bounded.top(Data_Bounded.boundedInt),
            line: v.line
          };
        })(pos)
      };
    };
    var lineRange$prime = function(line) {
      return function(character) {
        return lineRange({
          line,
          character
        });
      };
    };
    var fillTypedHole = function(logFn) {
      return function(docs) {
        return function(settings) {
          return function(state) {
            return function(args) {
              var readTypeInfo = function(obj) {
                return Foreign.unsafeFromForeign(obj);
              };
              var v = function(v1) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Data_Function.flip(LanguageServer_Protocol_Console.log)("fail match"))(state.conn)))(function() {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                });
              };
              if (state.port instanceof Data_Maybe.Just && (state.conn instanceof Data_Maybe.Just && args.length === 4)) {
                var $36 = Control_Monad_Except.runExcept(LanguageServer_Protocol_Types.readRange(args[2]));
                if ($36 instanceof Data_Either.Right) {
                  var $37 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[1]));
                  if ($37 instanceof Data_Either.Right) {
                    var $38 = readTypeInfo(args[3]);
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($37.value0)))(function(doc) {
                      return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Data_Nullable.toMaybe(doc))(function(doc1) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtVersion(doc1)))(function(v1) {
                          var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(state.clientCapabilities)($37.value0)(v1.version)($36.value0)($38.identifier);
                          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Function["const"]([]))(Control_Category.identity(Control_Category.categoryFn)))(LanguageServer_IdePurescript_Imports.addCompletionImportEdit(logFn)(docs)(settings)(state)({
                            identifier: $38.identifier,
                            mod: new Data_Maybe.Just($38["module'"]),
                            qual: Data_Maybe.Nothing.value,
                            uri: $37.value0
                          })(doc1)(v1.version)(v1.text)(Data_Maybe.Nothing.value)))(function(edit$prime) {
                            var edit2 = Data_Semigroup.append(LanguageServer_Protocol_Types.semigroupWorkspaceEdit)(edit)(Data_Array.fold(LanguageServer_Protocol_Types.monoidWorkspaceEdit)(edit$prime));
                            return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_Protocol_Handlers.applyEdit(state.conn.value0)(edit2))(function(applyRes) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(state.conn.value0)("Applied: " + Data_Show.show(Data_Show.showBoolean)(applyRes))))(function() {
                                return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Imports.addCompletionImport(logFn)(docs)(settings)(state)([Foreign.unsafeToForeign($38.identifier), Foreign.unsafeToForeign($38["module'"]), Foreign.unsafeToForeign(Data_Maybe.Nothing.value), Foreign.unsafeToForeign($37.value0)]))(function() {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  }
                  ;
                  return v(true);
                }
                ;
                return v(true);
              }
              ;
              return v(true);
            };
          };
        };
      };
    };
    var encodeTypoResult = function(v) {
      return Foreign.unsafeToForeign({
        qualifier: Data_Nullable.toNullable(v.qualifier),
        declarationType: v.declarationType,
        identifier: v.identifier,
        mod: v.mod
      });
    };
    var fixTypoActions = function(docs) {
      return function(v) {
        return function(v1) {
          return function(docUri) {
            return function(line) {
              return function($$char) {
                var renderDeclarationType = function(type$prime) {
                  return function(identifier) {
                    return function(v2) {
                      if (v2 instanceof Data_Maybe.Nothing) {
                        return " : ";
                      }
                      ;
                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclTypeOperator) {
                        return " type-level operator: ";
                      }
                      ;
                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclType) {
                        return " type: ";
                      }
                      ;
                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclTypeSynonym) {
                        return " type synonym: ";
                      }
                      ;
                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclDataConstructor) {
                        return " data constructor: ";
                      }
                      ;
                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclTypeClass) {
                        return " type class: ";
                      }
                      ;
                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclValueOperator) {
                        return " operator: ";
                      }
                      ;
                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclModule) {
                        return " module: ";
                      }
                      ;
                      if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof PscIde_Command.DeclValue) {
                        var $70 = IdePurescript_Tokens.startsWithCapitalLetter(identifier);
                        if ($70) {
                          return " data constructor: ";
                        }
                        ;
                        var $71 = IdePurescript_Tokens.containsArrow(type$prime);
                        if ($71) {
                          return " function: ";
                        }
                        ;
                        return " value: ";
                      }
                      ;
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 156, column 44 - line 171, column 19): " + [v2.constructor.name]);
                    };
                  };
                };
                if (v1.port instanceof Data_Maybe.Just && v1.conn instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(docUri)))(function(doc) {
                    return Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)([]))(function(doc1) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(doc1)(lineRange$prime(line)($$char))))(function(lineText) {
                        var v2 = IdePurescript_Tokens.identifierAtPoint(lineText)($$char);
                        if (v2 instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(PscIde.suggestTypos(v1.port.value0)(v2.value0.word)(2)(v1.modules.main)(PscIde.defaultCompletionOptions))(function(res) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(function() {
                              if (res instanceof Data_Either.Left) {
                                return [];
                              }
                              ;
                              if (res instanceof Data_Either.Right) {
                                return Data_Array.take(10)(Data_Functor.mapFlipped(Data_Functor.functorArray)(IdePurescript_Completion.simplifyImportChoice(Control_Category.identity(Control_Category.categoryFn))(res.value0))(function(v3) {
                                  return LanguageServer_IdePurescript_Commands["fixTypo'"](function() {
                                    var decTypeString = renderDeclarationType(v3["type'"])(v3.identifier)(v3.declarationType);
                                    var $79 = v3.identifier === v2.value0.word;
                                    if ($79) {
                                      return "Import" + (decTypeString + (v3.identifier + (" (" + (v3["module'"] + ")"))));
                                    }
                                    ;
                                    return "Replace with " + (v3.identifier + (" (" + (v3["module'"] + ")")));
                                  }())(docUri)(line)($$char)(encodeTypoResult({
                                    identifier: v3.identifier,
                                    qualifier: v2.value0.qualifier,
                                    mod: v3["module'"],
                                    declarationType: Data_Maybe.maybe("")(PscIde_Command.declarationTypeToString)(v3.declarationType)
                                  }));
                                }));
                              }
                              ;
                              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 134, column 17 - line 152, column 32): " + [res.constructor.name]);
                            }());
                          });
                        }
                        ;
                        if (v2 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                        }
                        ;
                        throw new Error("Failed pattern match at LanguageServer.IdePurescript.Assist (line 130, column 9 - line 153, column 29): " + [v2.constructor.name]);
                      });
                    })(Data_Nullable.toMaybe(doc));
                  });
                }
                ;
                return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
              };
            };
          };
        };
      };
    };
    var decodeTypoResult = function(obj) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("identifier"))(Foreign.readString(Data_Identity.monadIdentity)))(function(identifier) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("mod"))(Foreign.readString(Data_Identity.monadIdentity)))(function(mod) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.fromMaybe(""))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("declarationType"))(Foreign_NullOrUndefined.readNullOrUndefined(Foreign.readString(Data_Identity.monadIdentity)))))(function(declarationType) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("qualifier"))(Foreign_NullOrUndefined.readNullOrUndefined(Foreign.readString(Data_Identity.monadIdentity))))(function(qualifier) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                identifier,
                qualifier,
                mod,
                declarationType
              });
            });
          });
        });
      });
    };
    var fixTypo = function(log) {
      return function(docs) {
        return function(settings) {
          return function(v) {
            return function(args) {
              var replace = function(uri) {
                return function(version) {
                  return function(line) {
                    return function(v1) {
                      return function(word) {
                        return function(qualifier) {
                          return function(mod) {
                            return function(declarationType) {
                              var range = {
                                start: {
                                  line,
                                  character: v1.left
                                },
                                end: {
                                  line,
                                  character: v1.right
                                }
                              };
                              var namespace = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(IdePurescript_Completion.declarationTypeToNamespace)(PscIde_Command.declarationTypeFromString(declarationType));
                              var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(v.clientCapabilities)(uri)(version)(range)(Data_Maybe.maybe("")(function(v2) {
                                return v2 + ".";
                              })(qualifier) + word);
                              return LanguageServer_IdePurescript_Imports["addCompletionImport'"](edit)(log)(docs)(settings)(v)([Foreign.unsafeToForeign(word), Foreign.unsafeToForeign(mod), Foreign.unsafeToForeign(Data_Nullable.toNullable(qualifier)), Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(Data_Maybe.maybe("")(LanguageServer_IdePurescript_Imports.showNS)(namespace))]);
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
              return Data_Functor.map(Effect_Aff.functorAff)(Foreign.unsafeToForeign)(function() {
                var v1 = Data_Array.index(args)(2);
                var v2 = Data_Array.index(args)(1);
                var v3 = Data_Array.index(args)(0);
                var v6 = function(v7) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                };
                if (v.port instanceof Data_Maybe.Just && (v.conn instanceof Data_Maybe.Just && (v3 instanceof Data_Maybe.Just && (v2 instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just)))) {
                  var $113 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(v3.value0));
                  if ($113 instanceof Data_Either.Right) {
                    var $114 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(v2.value0));
                    if ($114 instanceof Data_Either.Right) {
                      var $115 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(v1.value0));
                      if ($115 instanceof Data_Either.Right) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($113.value0)))(function(doc) {
                          return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Data_Nullable.toMaybe(doc))(function(doc1) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(doc1)(lineRange$prime($114.value0)($115.value0))))(function(lineText) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(doc1)))(function(version) {
                                var v7 = Data_Functor.map(Data_Maybe.functorMaybe)(function($191) {
                                  return Control_Monad_Except.runExcept(decodeTypoResult($191));
                                })(Data_Array.index(args)(3));
                                var v8 = IdePurescript_Tokens.identifierAtPoint(lineText)($115.value0);
                                if (v8 instanceof Data_Maybe.Just && (v7 instanceof Data_Maybe.Just && v7.value0 instanceof Data_Either.Right)) {
                                  return Data_Functor["void"](Effect_Aff.functorAff)(replace($113.value0)(version)($114.value0)(v8.value0.range)(v7.value0.value0.identifier)(v7.value0.value0.qualifier)(v7.value0.value0.mod)(v7.value0.value0.declarationType));
                                }
                                ;
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                              });
                            });
                          });
                        });
                      }
                      ;
                      return v6(true);
                    }
                    ;
                    return v6(true);
                  }
                  ;
                  return v6(true);
                }
                ;
                return v6(true);
              }());
            };
          };
        };
      };
    };
    var caseSplit = function(docs) {
      return function(v) {
        return function(state) {
          return function(args) {
            var v1 = function(v2) {
              if (state.conn instanceof Data_Maybe.Just && args.length === 4) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(state.conn.value0)(Data_Show.show(Data_Show.showArray(Data_Show.showString))([Data_Show.show(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showString))(Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]))), Data_Show.show(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showInt))(Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[1]))), Data_Show.show(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showInt))(Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[2]))), Data_Show.show(Data_Either.showEither(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(Data_Show.showString))(Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[3])))])));
              }
              ;
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Data_Function.flip(LanguageServer_Protocol_Console.log)("fail match"))(state.conn)))(function() {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
              });
            };
            if (state.port instanceof Data_Maybe.Just && (state.conn instanceof Data_Maybe.Just && args.length === 4)) {
              var $149 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]));
              if ($149 instanceof Data_Either.Right) {
                var $150 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[1]));
                if ($150 instanceof Data_Either.Right) {
                  var $151 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[2]));
                  if ($151 instanceof Data_Either.Right) {
                    var $152 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[3]));
                    if ($152 instanceof Data_Either.Right) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($149.value0)))(function(doc) {
                        return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Data_Nullable.toMaybe(doc))(function(doc1) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(doc1)(lineRange$prime($150.value0)($151.value0))))(function(lineText) {
                            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(doc1)))(function(version) {
                              var v2 = IdePurescript_Tokens.identifierAtPoint(lineText)($151.value0);
                              if (v2 instanceof Data_Maybe.Just) {
                                return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.eitherToErr(PscIde.caseSplit(state.port.value0)(lineText)(v2.value0.range.left)(v2.value0.range.right)(false)($152.value0)))(function(lines) {
                                  var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(state.clientCapabilities)($149.value0)(version)(lineRange$prime($150.value0)($151.value0))(Data_Array.intercalate(Data_Monoid.monoidString)("\n")(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.trim)(lines)));
                                  return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(state.conn.value0)(edit));
                                });
                              }
                              ;
                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(state.conn.value0)("fail identifier"));
                            });
                          });
                        });
                      });
                    }
                    ;
                    return v1(true);
                  }
                  ;
                  return v1(true);
                }
                ;
                return v1(true);
              }
              ;
              return v1(true);
            }
            ;
            return v1(true);
          };
        };
      };
    };
    var addClause = function(docs) {
      return function(v) {
        return function(state) {
          return function(args) {
            var v1 = function(v2) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
            };
            if (state.port instanceof Data_Maybe.Just && (state.conn instanceof Data_Maybe.Just && args.length === 3)) {
              var $175 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]));
              if ($175 instanceof Data_Either.Right) {
                var $176 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[1]));
                if ($176 instanceof Data_Either.Right) {
                  var $177 = Control_Monad_Except.runExcept(Foreign.readInt(Data_Identity.monadIdentity)(args[2]));
                  if ($177 instanceof Data_Either.Right) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($175.value0)))(function(doc) {
                      return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Data_Nullable.toMaybe(doc))(function(doc1) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(doc1)(lineRange$prime($176.value0)($177.value0))))(function(lineText) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(doc1)))(function(version) {
                            var v2 = IdePurescript_Tokens.identifierAtPoint(lineText)($177.value0);
                            if (v2 instanceof Data_Maybe.Just) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.eitherToErr(PscIde.addClause(state.port.value0)(lineText)(false)))(function(lines) {
                                var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(state.clientCapabilities)($175.value0)(version)(lineRange$prime($176.value0)($177.value0))(Data_Array.intercalate(Data_Monoid.monoidString)("\n")(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.trim)(lines)));
                                return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(state.conn.value0)(edit));
                              });
                            }
                            ;
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                          });
                        });
                      });
                    });
                  }
                  ;
                  return v1(true);
                }
                ;
                return v1(true);
              }
              ;
              return v1(true);
            }
            ;
            return v1(true);
          };
        };
      };
    };
    module2.exports = {
      addClause,
      caseSplit,
      decodeTypoResult,
      encodeTypoResult,
      fillTypedHole,
      fixTypo,
      fixTypoActions,
      "lineRange'": lineRange$prime
    };
  }
});

// output/LanguageServer.IdePurescript.Build/foreign.js
var require_foreign87 = __commonJS({
  "output/LanguageServer.IdePurescript.Build/foreign.js"(exports2) {
    exports2.parseShellQuote = function(str) {
      return require("shell-quote").parse(str);
    };
  }
});

// output/IdePurescript.PscErrors/index.js
var require_IdePurescript8 = __commonJS({
  "output/IdePurescript.PscErrors/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Argonaut_Decode_Class = require_Data_Argonaut_Decode3();
    var Data_Argonaut_Decode_Combinators = require_Data_Argonaut_Decode4();
    var Data_Argonaut_Decode_Error = require_Data_Argonaut_Decode();
    var Data_Argonaut_Parser = require_Data_Argonaut2();
    var Data_Bifunctor = require_Data24();
    var Data_Either = require_Data16();
    var Data_Show = require_Data14();
    var PscIde_Command = require_PscIde();
    var PscResult = function(x) {
      return x;
    };
    var decodePscResult = {
      decodeJson: function(json) {
        return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))(json))(function(o) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeRebuildError))(o)("warnings"))(function(warnings) {
            return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeArray(PscIde_Command.decodeRebuildError))(o)("errors"))(function(errors) {
              return Control_Applicative.pure(Data_Either.applicativeEither)({
                warnings,
                errors
              });
            });
          });
        });
      }
    };
    var parsePscOutput = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function() {
      var $0 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError));
      var $1 = Data_Argonaut_Decode_Class.decodeJson(decodePscResult);
      return function($2) {
        return $0($1($2));
      };
    }())(Data_Argonaut_Parser.jsonParser);
    module2.exports = {
      PscResult,
      parsePscOutput,
      decodePscResult
    };
  }
});

// output/IdePurescript.Build/index.js
var require_IdePurescript9 = __commonJS({
  "output/IdePurescript.Build/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Data_Array = require_Data39();
    var Data_Bifunctor = require_Data24();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_Common = require_Data_String4();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Effect_Exception = require_Effect2();
    var Effect_Ref = require_Effect3();
    var Foreign_Object = require_Foreign3();
    var IdePurescript_Exec = require_IdePurescript();
    var IdePurescript_PscErrors = require_IdePurescript8();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var Node_Buffer = require_Node6();
    var Node_Buffer_Class = require_Node_Buffer();
    var Node_ChildProcess = require_Node7();
    var Node_Encoding = require_Node5();
    var Node_Process = require_Node3();
    var Node_Stream = require_Node9();
    var PscIde = require_PscIde2();
    var Command = function() {
      function Command2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Command2.create = function(value0) {
        return function(value1) {
          return new Command2(value0, value1);
        };
      };
      return Command2;
    }();
    var rebuild = function(port) {
      return function(file) {
        return function(targets) {
          var onResult = function() {
            var unwrap = function(v) {
              return v;
            };
            var $61 = Data_Either.either(function(errors) {
              return {
                errors: {
                  errors,
                  warnings: []
                },
                success: true
              };
            })(function(warnings) {
              return {
                errors: {
                  errors: [],
                  warnings
                },
                success: true
              };
            });
            var $62 = Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(unwrap)(unwrap);
            return function($63) {
              return $61($62($63));
            };
          }();
          return Control_Bind.bind(Effect_Aff.bindAff)(PscIde.rebuild(port)(file)(new Data_Maybe.Just(file))(targets))(function(res) {
            return Data_Either.either(function() {
              var $64 = Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff);
              return function($65) {
                return $64(Effect_Exception.error($65));
              };
            }())(function() {
              var $66 = Control_Applicative.pure(Effect_Aff.applicativeAff);
              return function($67) {
                return $66(onResult($67));
              };
            }())(res);
          });
        };
      };
    };
    var getPathProp = function(env) {
      var $15 = Foreign_Object.member("PATH")(env);
      if ($15) {
        return "PATH";
      }
      ;
      return "Path";
    };
    var spawn = function(v) {
      return function __do() {
        var v1 = function() {
          if (v.useNpmDir) {
            var pathVar = IdePurescript_Exec.getPathVar(v.useNpmDir)(v.directory)();
            var env = Node_Process.getEnv();
            return {
              env: Data_Maybe.Just.create(Foreign_Object.insert(getPathProp(env))(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(pathVar))(env)),
              path: Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(pathVar)
            };
          }
          ;
          return {
            env: Data_Maybe.Nothing.value,
            path: Data_Maybe.Nothing.value
          };
        }();
        var cmd$prime = Data_Functor.map(Effect.functorEffect)(function() {
          var $68 = Data_Maybe.fromMaybe(v.command.value0);
          return function($69) {
            return $68(Data_Array.head($69));
          };
        }())(IdePurescript_Exec.whichSync({
          path: v1.path,
          pathExt: Data_Maybe.Nothing.value
        })(v.command.value0))();
        return Node_ChildProcess.spawn(cmd$prime)(v.command.value1)({
          cwd: new Data_Maybe.Just(v.directory),
          stdio: Node_ChildProcess.defaultSpawnOptions.stdio,
          env: v1.env,
          detached: Node_ChildProcess.defaultSpawnOptions.detached,
          uid: Node_ChildProcess.defaultSpawnOptions.uid,
          gid: Node_ChildProcess.defaultSpawnOptions.gid
        })();
      };
    };
    var spawnWithVersion = function(v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(IdePurescript_Exec.getPathVar(v.useNpmDir)(v.directory)))(function(pathVar) {
        return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Exec.findBins(pathVar)(v.command.value0))(function(cmdBins) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function() {
            var v1 = Data_Array.uncons(cmdBins);
            if (v1 instanceof Data_Maybe.Just) {
              return function __do() {
                var env = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Node_Process.getEnv)();
                var childEnv = Foreign_Object.insert(getPathProp(env))(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(pathVar))(env);
                return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(Node_ChildProcess.spawn(v1.value0.head.value0)(v.command.value1)({
                  cwd: new Data_Maybe.Just(v.directory),
                  stdio: Node_ChildProcess.defaultSpawnOptions.stdio,
                  env: new Data_Maybe.Just(childEnv),
                  detached: Node_ChildProcess.defaultSpawnOptions.detached,
                  uid: Node_ChildProcess.defaultSpawnOptions.uid,
                  gid: Node_ChildProcess.defaultSpawnOptions.gid
                }))();
              };
            }
            ;
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
          }()))(function(cp) {
            return Control_Applicative.pure(Effect_Aff.applicativeAff)({
              cmdBins,
              cp
            });
          });
        });
      });
    };
    var build = function(logCb) {
      return function(v) {
        return Control_Bind.bind(Effect_Aff.bindAff)(spawnWithVersion(v))(function(v1) {
          return Effect_Aff.makeAff(function(cb) {
            var succ = function($70) {
              return cb(Data_Either.Right.create($70));
            };
            var err = function($71) {
              return cb(Data_Either.Left.create($71));
            };
            return function __do() {
              logCb(IdePurescript_PscIdeServer.Info.value)("Resolved build command (1st is used): ")();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function(v2) {
                return logCb(IdePurescript_PscIdeServer.Info.value)(v2.value0 + Data_Maybe.maybe("")(function(v3) {
                  return ": " + v3;
                })(v2.value1));
              })(v1.cmdBins)();
              (function() {
                if (v1.cp instanceof Data_Maybe.Nothing) {
                  return succ(Data_Either.Left.create("Didn't find command in PATH: " + v.command.value0))();
                }
                ;
                if (v1.cp instanceof Data_Maybe.Just) {
                  logCb(IdePurescript_PscIdeServer.Info.value)("Running build command: " + Data_Array.intercalate(Data_Monoid.monoidString)(" ")(Data_Array.cons(v.command.value0)(v.command.value1)))();
                  Node_ChildProcess.onError(v1.cp.value0)(function($72) {
                    return cb(Data_Either.Left.create(Node_ChildProcess.toStandardError($72)));
                  })();
                  var errOutput = Effect_Ref["new"]([])();
                  var outOutput = Effect_Ref["new"]([])();
                  var res = function(r) {
                    return function(s) {
                      return Effect_Ref.modify_(function(v2) {
                        return Data_Array.snoc(v2)(s);
                      })(r);
                    };
                  };
                  Effect_Exception.catchException(err)(Node_Stream.onData(Node_ChildProcess.stderr(v1.cp.value0))(res(errOutput)))();
                  Effect_Exception.catchException(err)(Node_Stream.onData(Node_ChildProcess.stdout(v1.cp.value0))(res(outOutput)))();
                  return Node_ChildProcess.onClose(v1.cp.value0)(function(exit) {
                    if (exit instanceof Node_ChildProcess.Normally && (exit.value0 === 0 || exit.value0 === 1)) {
                      return function __do2() {
                        var pursError = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(errOutput))(Node_Buffer_Class.concat(Node_Buffer.mutableBufferEffect)))(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value))();
                        var pursOutput = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(outOutput))(Node_Buffer_Class.concat(Node_Buffer.mutableBufferEffect)))(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value))();
                        var lines = Data_String_Common.split("\n")(pursError + pursOutput);
                        var v2 = Data_Array.partition(function(s) {
                          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf('{"')(s))(new Data_Maybe.Just(0));
                        })(lines);
                        logCb(IdePurescript_PscIdeServer.Info.value)(Data_String_Common.joinWith("\n")(v2.no))();
                        var v3 = Data_Functor.map(Data_Functor.functorArray)(IdePurescript_PscErrors.parsePscOutput)(v2.yes);
                        if (v3.length === 1 && v3[0] instanceof Data_Either.Left) {
                          return succ(Data_Either.Left.create("Couldn't parse build output: " + v3[0].value0))();
                        }
                        ;
                        if (v3.length === 1 && v3[0] instanceof Data_Either.Right) {
                          return succ(new Data_Either.Right({
                            errors: v3[0].value0,
                            success: exit.value0 === 0
                          }))();
                        }
                        ;
                        if (v3.length === 0) {
                          return succ(Data_Either.Left.create("Problem running build: " + function() {
                            var $51 = Data_String_CodePoints.length(pursError) > 0;
                            if ($51) {
                              return Data_String_CodePoints.take(500)(pursError);
                            }
                            ;
                            return "didn't find JSON output";
                          }()))();
                        }
                        ;
                        return succ(new Data_Either.Left("Found multiple lines of JSON output, don't know what to do"))();
                      };
                    }
                    ;
                    return succ(new Data_Either.Left("Build process exited abnormally"));
                  })();
                }
                ;
                throw new Error("Failed pattern match at IdePurescript.Build (line 97, column 9 - line 132, column 16): " + [v1.cp.constructor.name]);
              })();
              return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
            };
          });
        });
      };
    };
    module2.exports = {
      Command,
      getPathProp,
      spawn,
      spawnWithVersion,
      build,
      rebuild
    };
  }
});

// output/LanguageServer.IdePurescript.Server/index.js
var require_LanguageServer_IdePurescript5 = __commonJS({
  "output/LanguageServer.IdePurescript.Server/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_String_Common = require_Data_String4();
    var Data_String_Regex = require_Data_String5();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var Data_String_Regex_Unsafe = require_Data_String_Regex2();
    var Data_String_Utils = require_Data_String7();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Effect_Exception = require_Effect2();
    var IdePurescript_Exec = require_IdePurescript();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var Node_Buffer = require_Node6();
    var Node_Buffer_Class = require_Node_Buffer();
    var Node_ChildProcess = require_Node7();
    var Node_Encoding = require_Node5();
    var Node_Process = require_Node3();
    var PscIde = require_PscIde2();
    var retry = function(v) {
      return function(v1) {
        return function(a) {
          if (v1 > 0) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(a))(function(res) {
              if (res instanceof Data_Either.Right) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(res.value0);
              }
              ;
              if (res instanceof Data_Either.Left) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(v(IdePurescript_PscIdeServer.Info.value)("Retrying starting server after 500ms: " + Data_Show.show(Effect_Exception.showError)(res.value0))))(function() {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(500))(function() {
                    return retry(v)(v1 - 1 | 0)(a);
                  });
                });
              }
              ;
              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Server (line 43, column 5 - line 48, column 33): " + [res.constructor.name]);
            });
          }
          ;
          return a;
        };
      };
    };
    var loadAll = function(port) {
      return Data_Functor.map(Effect_Aff.functorAff)(Data_Either.either(Data_Either.Left.create)(Data_Function["const"](new Data_Either.Right(Data_Unit.unit))))(PscIde.load(port)([])([]));
    };
    var getPackagerPaths = function(enabled) {
      return function(binName) {
        return function(settings) {
          return function(root) {
            var $13 = !enabled(settings);
            if ($13) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
            }
            ;
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(IdePurescript_Exec.getPathVar(LanguageServer_IdePurescript_Config.addNpmPath(settings))(root)))(function(pathVar) {
              return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Exec.findBins(pathVar)(binName))(function(serverBins) {
                var v = Data_Array.head(serverBins);
                if (v instanceof Data_Maybe.Just) {
                  return Effect_Aff.makeAff(function(cb) {
                    return function __do() {
                      Data_Functor["void"](Effect.functorEffect)(Node_ChildProcess.execFile(v.value0.value0)(["sources"])({
                        cwd: new Data_Maybe.Just(root),
                        env: Node_ChildProcess.defaultExecOptions.env,
                        timeout: Node_ChildProcess.defaultExecOptions.timeout,
                        maxBuffer: Node_ChildProcess.defaultExecOptions.maxBuffer,
                        killSignal: Node_ChildProcess.defaultExecOptions.killSignal,
                        uid: Node_ChildProcess.defaultExecOptions.uid,
                        gid: Node_ChildProcess.defaultExecOptions.gid
                      })(function(v1) {
                        return function __do2() {
                          var text = Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value)(v1.stdout)();
                          return cb(Control_Applicative.pure(Data_Either.applicativeEither)(Data_String_Utils.lines(text)))();
                        };
                      }))();
                      return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
                    };
                  });
                }
                ;
                return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
              });
            });
          };
        };
      };
    };
    var getEnvPursIdeSources = function(dictMonadEffect) {
      return Effect_Class.liftEffect(dictMonadEffect)(Node_Process.lookupEnv("PURS_IDE_SOURCES"));
    };
    var startServer$prime = function(settings) {
      return function(root) {
        return function(cb) {
          return function(logCb) {
            var getGlob = function(fn) {
              return function(v) {
                if (!Data_String_Common["null"](v)) {
                  return [v + "/**/*.purs"];
                }
                ;
                return [];
              }(fn(settings));
            };
            var globs = Data_Semigroup.append(Data_Semigroup.semigroupArray)(getGlob(LanguageServer_IdePurescript_Config.srcPath))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(getGlob(LanguageServer_IdePurescript_Config.packagePath))(LanguageServer_IdePurescript_Config.sourceGlobs(settings)));
            var exe = LanguageServer_IdePurescript_Config.pursExe(settings);
            return Control_Bind.bind(Effect_Aff.bindAff)(getEnvPursIdeSources(Effect_Aff.monadEffectAff))(function(envIdeSources) {
              return Control_Bind.bind(Effect_Aff.bindAff)(function() {
                if (envIdeSources instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(IdePurescript_PscIdeServer.Info.value)("Using sources from PURS_IDE_SOURCES")))(function() {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_String_Regex.split(Data_String_Regex_Unsafe.unsafeRegex("[\\r\\n\\s]+")(Data_String_Regex_Flags.noFlags))(envIdeSources.value0));
                  });
                }
                ;
                if (envIdeSources instanceof Data_Maybe.Nothing) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(IdePurescript_PscIdeServer.Info.value)("Using sources from psc-package/spago packages (PURS_IDE_SOURCES not set)")))(function() {
                    return Control_Bind.bind(Effect_Aff.bindAff)(getPackagerPaths(LanguageServer_IdePurescript_Config.addPscPackageSources)("psc-package")(settings)(root))(function(pscpGlob) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(getPackagerPaths(LanguageServer_IdePurescript_Config.addSpagoSources)("spago")(settings)(root))(function(spagoGlob) {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(pscpGlob)(spagoGlob));
                      });
                    });
                  });
                }
                ;
                throw new Error("Failed pattern match at LanguageServer.IdePurescript.Server (line 57, column 19 - line 65, column 35): " + [envIdeSources.constructor.name]);
              }())(function(packageGlobs) {
                return IdePurescript_PscIdeServer["startServer'"]({
                  exe,
                  combinedExe: true,
                  glob: Data_Array.filter(function() {
                    var $23 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                    return function($24) {
                      return $23(Data_String_Common["null"]($24));
                    };
                  }())(Data_Semigroup.append(Data_Semigroup.semigroupArray)(globs)(packageGlobs)),
                  logLevel: LanguageServer_IdePurescript_Config.logLevel(settings),
                  outputDirectory: Data_Maybe.Just.create(LanguageServer_IdePurescript_Config.effectiveOutputDirectory(settings)),
                  port: LanguageServer_IdePurescript_Config.pscIdePort(settings)
                })(root)(LanguageServer_IdePurescript_Config.addNpmPath(settings))(cb)(logCb);
              });
            });
          };
        };
      };
    };
    module2.exports = {
      getEnvPursIdeSources,
      loadAll,
      retry,
      "startServer'": startServer$prime
    };
  }
});

// output/LanguageServer.IdePurescript.Types/index.js
var require_LanguageServer_IdePurescript6 = __commonJS({
  "output/LanguageServer.IdePurescript.Types/index.js"(exports2, module2) {
    "use strict";
    var ServerState = function(x) {
      return x;
    };
    var newtypeServerState = {
      Coercible0: function() {
        return void 0;
      }
    };
    module2.exports = {
      ServerState,
      newtypeServerState
    };
  }
});

// output/Control.Monad.ST.Global/index.js
var require_Control_Monad_ST2 = __commonJS({
  "output/Control.Monad.ST.Global/index.js"(exports2, module2) {
    "use strict";
    var Unsafe_Coerce = require_Unsafe();
    var toEffect = Unsafe_Coerce.unsafeCoerce;
    module2.exports = {
      toEffect
    };
  }
});

// output/Control.Monad.ST.Class/index.js
var require_Control_Monad_ST3 = __commonJS({
  "output/Control.Monad.ST.Class/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Control_Monad_ST_Global = require_Control_Monad_ST2();
    var monadSTST = {
      liftST: Control_Category.identity(Control_Category.categoryFn)
    };
    var monadSTEffect = {
      liftST: Control_Monad_ST_Global.toEffect
    };
    var liftST = function(dict) {
      return dict.liftST;
    };
    module2.exports = {
      liftST,
      monadSTEffect,
      monadSTST
    };
  }
});

// output/PureScript.CST.Parser.Monad/index.js
var require_PureScript_CST_Parser = __commonJS({
  "output/PureScript.CST.Parser.Monad/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad_ST_Class = require_Control_Monad_ST3();
    var Data_Array = require_Data39();
    var Data_Array_ST = require_Data_Array();
    var Data_Boolean = require_Data();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Lazy = require_Data40();
    var Data_Maybe = require_Data15();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var Effect_Unsafe = require_Effect5();
    var PureScript_CST_Errors = require_PureScript_CST3();
    var PureScript_CST_TokenStream = require_PureScript_CST5();
    var Unsafe_Coerce = require_Unsafe();
    var Recovery = function() {
      function Recovery2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      Recovery2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new Recovery2(value0, value1, value2);
          };
        };
      };
      return Recovery2;
    }();
    var Leaf = function() {
      function Leaf2(value0) {
        this.value0 = value0;
      }
      ;
      Leaf2.create = function(value0) {
        return new Leaf2(value0);
      };
      return Leaf2;
    }();
    var Node = function() {
      function Node2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Node2.create = function(value0) {
        return function(value1) {
          return new Node2(value0, value1);
        };
      };
      return Node2;
    }();
    var UnconsDone = function() {
      function UnconsDone2(value0) {
        this.value0 = value0;
      }
      ;
      UnconsDone2.create = function(value0) {
        return new UnconsDone2(value0);
      };
      return UnconsDone2;
    }();
    var UnconsMore = function() {
      function UnconsMore2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      UnconsMore2.create = function(value0) {
        return function(value1) {
          return new UnconsMore2(value0, value1);
        };
      };
      return UnconsMore2;
    }();
    var ParseFail = function() {
      function ParseFail2(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
      }
      ;
      ParseFail2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return new ParseFail2(value0, value1, value2, value3);
            };
          };
        };
      };
      return ParseFail2;
    }();
    var ParseSucc = function() {
      function ParseSucc2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ParseSucc2.create = function(value0) {
        return function(value1) {
          return new ParseSucc2(value0, value1);
        };
      };
      return ParseSucc2;
    }();
    var Take = function() {
      function Take2(value0) {
        this.value0 = value0;
      }
      ;
      Take2.create = function(value0) {
        return new Take2(value0);
      };
      return Take2;
    }();
    var Eof = function() {
      function Eof2(value0) {
        this.value0 = value0;
      }
      ;
      Eof2.create = function(value0) {
        return new Eof2(value0);
      };
      return Eof2;
    }();
    var Fail = function() {
      function Fail2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Fail2.create = function(value0) {
        return function(value1) {
          return new Fail2(value0, value1);
        };
      };
      return Fail2;
    }();
    var Alt = function() {
      function Alt2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Alt2.create = function(value0) {
        return function(value1) {
          return new Alt2(value0, value1);
        };
      };
      return Alt2;
    }();
    var Try = function() {
      function Try2(value0) {
        this.value0 = value0;
      }
      ;
      Try2.create = function(value0) {
        return new Try2(value0);
      };
      return Try2;
    }();
    var LookAhead = function() {
      function LookAhead2(value0) {
        this.value0 = value0;
      }
      ;
      LookAhead2.create = function(value0) {
        return new LookAhead2(value0);
      };
      return LookAhead2;
    }();
    var Defer = function() {
      function Defer2(value0) {
        this.value0 = value0;
      }
      ;
      Defer2.create = function(value0) {
        return new Defer2(value0);
      };
      return Defer2;
    }();
    var Recover = function() {
      function Recover2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Recover2.create = function(value0) {
        return function(value1) {
          return new Recover2(value0, value1);
        };
      };
      return Recover2;
    }();
    var Iter = function() {
      function Iter2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Iter2.create = function(value0) {
        return function(value1) {
          return new Iter2(value0, value1);
        };
      };
      return Iter2;
    }();
    var Pure = function() {
      function Pure2(value0) {
        this.value0 = value0;
      }
      ;
      Pure2.create = function(value0) {
        return new Pure2(value0);
      };
      return Pure2;
    }();
    var Bind = function() {
      function Bind2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Bind2.create = function(value0) {
        return function(value1) {
          return new Bind2(value0, value1);
        };
      };
      return Bind2;
    }();
    var StkNil = function() {
      function StkNil2() {
      }
      ;
      StkNil2.value = new StkNil2();
      return StkNil2;
    }();
    var StkAlt = function() {
      function StkAlt2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      StkAlt2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new StkAlt2(value0, value1, value2);
          };
        };
      };
      return StkAlt2;
    }();
    var StkTry = function() {
      function StkTry2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      StkTry2.create = function(value0) {
        return function(value1) {
          return new StkTry2(value0, value1);
        };
      };
      return StkTry2;
    }();
    var StkLookAhead = function() {
      function StkLookAhead2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      StkLookAhead2.create = function(value0) {
        return function(value1) {
          return new StkLookAhead2(value0, value1);
        };
      };
      return StkLookAhead2;
    }();
    var StkBinds = function() {
      function StkBinds2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      StkBinds2.create = function(value0) {
        return function(value1) {
          return new StkBinds2(value0, value1);
        };
      };
      return StkBinds2;
    }();
    var StkRecover = function() {
      function StkRecover2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      StkRecover2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new StkRecover2(value0, value1, value2);
          };
        };
      };
      return StkRecover2;
    }();
    var SuccStop = function() {
      function SuccStop2(value0) {
        this.value0 = value0;
      }
      ;
      SuccStop2.create = function(value0) {
        return new SuccStop2(value0);
      };
      return SuccStop2;
    }();
    var SuccBinds = function() {
      function SuccBinds2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      SuccBinds2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new SuccBinds2(value0, value1, value2);
          };
        };
      };
      return SuccBinds2;
    }();
    var FailStop = function() {
      function FailStop2(value0) {
        this.value0 = value0;
      }
      ;
      FailStop2.create = function(value0) {
        return new FailStop2(value0);
      };
      return FailStop2;
    }();
    var FailAlt = function() {
      function FailAlt2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      FailAlt2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new FailAlt2(value0, value1, value2);
          };
        };
      };
      return FailAlt2;
    }();
    var FailRecover = function() {
      function FailRecover2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      FailRecover2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new FailRecover2(value0, value1, value2);
          };
        };
      };
      return FailRecover2;
    }();
    var uncons$prime = function($copy_cons) {
      return function($copy_l) {
        return function($copy_r) {
          var $tco_var_cons = $copy_cons;
          var $tco_var_l = $copy_l;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(cons, l, r) {
            if (l instanceof Leaf) {
              $tco_done = true;
              return cons(l.value0)(r);
            }
            ;
            if (l instanceof Node) {
              $tco_var_cons = cons;
              $tco_var_l = l.value0;
              $copy_r = new Node(l.value1, r);
              return;
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 74, column 20 - line 76, column 74): " + [l.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_cons, $tco_var_l, $copy_r);
          }
          ;
          return $tco_result;
        };
      };
    };
    var uncons = function(done) {
      return function(more) {
        return function(v) {
          if (v instanceof Leaf) {
            return done(v.value0);
          }
          ;
          if (v instanceof Node) {
            return uncons$prime(more)(v.value0)(v.value1);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 64, column 20 - line 66, column 31): " + [v.constructor.name]);
        };
      };
    };
    var unconsView = uncons(UnconsDone.create)(UnconsMore.create);
    var unFold = Unsafe_Coerce.unsafeCoerce;
    var $$try = Try.create;
    var take = Take.create;
    var runParser$prime = function() {
      var unwindSucc = function($copy_a) {
        return function($copy_state) {
          return function($copy_v) {
            var $tco_var_a = $copy_a;
            var $tco_var_state = $copy_state;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(a, state, v) {
              if (v instanceof StkNil) {
                $tco_done = true;
                return new SuccStop(new ParseSucc(a, state));
              }
              ;
              if (v instanceof StkAlt) {
                $tco_var_a = a;
                $tco_var_state = state;
                $copy_v = v.value0;
                return;
              }
              ;
              if (v instanceof StkTry) {
                $tco_var_a = a;
                $tco_var_state = state;
                $copy_v = v.value0;
                return;
              }
              ;
              if (v instanceof StkRecover) {
                $tco_var_a = a;
                $tco_var_state = {
                  consumed: state.consumed || v.value1.consumed,
                  errors: state.errors,
                  position: state.position,
                  stream: state.stream
                };
                $copy_v = v.value0;
                return;
              }
              ;
              if (v instanceof StkLookAhead) {
                $tco_var_a = a;
                $tco_var_state = v.value1;
                $copy_v = v.value0;
                return;
              }
              ;
              if (v instanceof StkBinds) {
                $tco_done = true;
                return new SuccBinds(v.value0, state, v.value1);
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 345, column 24 - line 357, column 38): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_a, $tco_var_state, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
      };
      var unwindFail = function($copy_error) {
        return function($copy_position) {
          return function($copy_v) {
            return function($copy_v1) {
              var $tco_var_error = $copy_error;
              var $tco_var_position = $copy_position;
              var $tco_var_v = $copy_v;
              var $tco_done1 = false;
              var $tco_result;
              function $tco_loop(error, position, v, v1) {
                if (v1 instanceof StkNil) {
                  $tco_done1 = true;
                  return new FailStop(new ParseFail(error, position, v, new Data_Maybe.Just(v.stream)));
                }
                ;
                if (v1 instanceof StkAlt) {
                  if (v.consumed) {
                    $tco_var_error = error;
                    $tco_var_position = position;
                    $tco_var_v = v;
                    $copy_v1 = v1.value0;
                    return;
                  }
                  ;
                  $tco_done1 = true;
                  return new FailAlt(v1.value0, v1.value1, v1.value2);
                }
                ;
                if (v1 instanceof StkTry) {
                  $tco_var_error = error;
                  $tco_var_position = position;
                  $tco_var_v = {
                    consumed: v1.value1.consumed,
                    errors: v.errors,
                    position: v.position,
                    stream: v.stream
                  };
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                if (v1 instanceof StkRecover) {
                  if (v.consumed) {
                    var posError = {
                      error,
                      position
                    };
                    var nextErrors = Data_Array.snoc(v.errors)(posError);
                    var v2 = v1.value2(posError)(v1.value1.stream);
                    $tco_done1 = true;
                    return new FailRecover(v1.value0, {
                      consumed: true,
                      errors: nextErrors,
                      position: v2.value1,
                      stream: v2.value2
                    }, v2.value0);
                  }
                  ;
                  $tco_var_error = error;
                  $tco_var_position = position;
                  $tco_var_v = {
                    consumed: v.consumed || v1.value1.consumed,
                    errors: v.errors,
                    position: v.position,
                    stream: v.stream
                  };
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                if (v1 instanceof StkLookAhead) {
                  $tco_var_error = error;
                  $tco_var_position = position;
                  $tco_var_v = v1.value1;
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                if (v1 instanceof StkBinds) {
                  $tco_var_error = error;
                  $tco_var_position = position;
                  $tco_var_v = v;
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 315, column 48 - line 342, column 48): " + [v1.constructor.name]);
              }
              ;
              while (!$tco_done1) {
                $tco_result = $tco_loop($tco_var_error, $tco_var_position, $tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
        };
      };
      var go = function($copy_stack) {
        return function($copy_v) {
          return function($copy_v1) {
            var $tco_var_stack = $copy_stack;
            var $tco_var_v = $copy_v;
            var $tco_done2 = false;
            var $tco_result;
            function $tco_loop(stack, v, v1) {
              if (v1 instanceof Alt) {
                $tco_var_stack = new StkAlt(stack, v, v1.value1);
                $tco_var_v = {
                  consumed: false,
                  errors: v.errors,
                  position: v.position,
                  stream: v.stream
                };
                $copy_v1 = v1.value0;
                return;
              }
              ;
              if (v1 instanceof Try) {
                $tco_var_stack = new StkTry(stack, v);
                $tco_var_v = v;
                $copy_v1 = v1.value0;
                return;
              }
              ;
              if (v1 instanceof LookAhead) {
                $tco_var_stack = new StkLookAhead(stack, v);
                $tco_var_v = v;
                $copy_v1 = v1.value0;
                return;
              }
              ;
              if (v1 instanceof Bind) {
                $tco_var_stack = new StkBinds(stack, v1.value1);
                $tco_var_v = v;
                $copy_v1 = v1.value0;
                return;
              }
              ;
              if (v1 instanceof Pure) {
                var v2 = unwindSucc(v1.value0)(v)(stack);
                if (v2 instanceof SuccBinds) {
                  var v3 = unconsView(v2.value2);
                  if (v3 instanceof UnconsDone) {
                    $tco_var_stack = v2.value0;
                    $tco_var_v = v2.value1;
                    $copy_v1 = v3.value0(v1.value0);
                    return;
                  }
                  ;
                  if (v3 instanceof UnconsMore) {
                    $tco_var_stack = new StkBinds(v2.value0, v3.value1);
                    $tco_var_v = v2.value1;
                    $copy_v1 = v3.value0(v1.value0);
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 260, column 11 - line 264, column 64): " + [v3.constructor.name]);
                }
                ;
                if (v2 instanceof SuccStop) {
                  $tco_done2 = true;
                  return v2.value0;
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 258, column 7 - line 266, column 14): " + [v2.constructor.name]);
              }
              ;
              if (v1 instanceof Fail) {
                var v2 = unwindFail(v1.value1)(v1.value0)(v)(stack);
                if (v2 instanceof FailAlt) {
                  $tco_var_stack = v2.value0;
                  $tco_var_v = v2.value1;
                  $copy_v1 = v2.value2;
                  return;
                }
                ;
                if (v2 instanceof FailRecover) {
                  $tco_var_stack = v2.value0;
                  $tco_var_v = v2.value1;
                  $copy_v1 = new Pure(v2.value2);
                  return;
                }
                ;
                if (v2 instanceof FailStop) {
                  $tco_done2 = true;
                  return v2.value0;
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 268, column 7 - line 274, column 14): " + [v2.constructor.name]);
              }
              ;
              if (v1 instanceof Take) {
                var v2 = PureScript_CST_TokenStream.step(v.stream);
                if (v2 instanceof PureScript_CST_TokenStream.TokenError) {
                  $tco_done2 = true;
                  return new ParseFail(v2.value1, v2.value0, v, v2.value2);
                }
                ;
                if (v2 instanceof PureScript_CST_TokenStream.TokenEOF) {
                  $tco_var_stack = stack;
                  $tco_var_v = v;
                  $copy_v1 = new Fail(v2.value0, PureScript_CST_Errors.UnexpectedEof.value);
                  return;
                }
                ;
                if (v2 instanceof PureScript_CST_TokenStream.TokenCons) {
                  var v3 = v1.value0(v2.value0);
                  if (v3 instanceof Data_Either.Left) {
                    $tco_var_stack = stack;
                    $tco_var_v = v;
                    $copy_v1 = new Fail(v2.value0.range.start, v3.value0);
                    return;
                  }
                  ;
                  if (v3 instanceof Data_Either.Right) {
                    $tco_var_stack = stack;
                    $tco_var_v = {
                      consumed: true,
                      errors: v.errors,
                      position: v2.value1,
                      stream: v2.value2
                    };
                    $copy_v1 = new Pure(v3.value0);
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 282, column 11 - line 286, column 98): " + [v3.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 276, column 7 - line 286, column 98): " + [v2.constructor.name]);
              }
              ;
              if (v1 instanceof Eof) {
                var v2 = PureScript_CST_TokenStream.step(v.stream);
                if (v2 instanceof PureScript_CST_TokenStream.TokenError) {
                  $tco_done2 = true;
                  return new ParseFail(v2.value1, v2.value0, v, v2.value2);
                }
                ;
                if (v2 instanceof PureScript_CST_TokenStream.TokenEOF) {
                  $tco_var_stack = stack;
                  $tco_var_v = {
                    consumed: true,
                    errors: v.errors,
                    position: v2.value0,
                    stream: v.stream
                  };
                  $copy_v1 = new Pure(v1.value0(new Data_Tuple.Tuple(v2.value0, v2.value1)));
                  return;
                }
                ;
                if (v2 instanceof PureScript_CST_TokenStream.TokenCons) {
                  $tco_var_stack = stack;
                  $tco_var_v = v;
                  $copy_v1 = new Fail(v2.value0.range.start, new PureScript_CST_Errors.ExpectedEof(v2.value0.value));
                  return;
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 288, column 7 - line 294, column 72): " + [v2.constructor.name]);
              }
              ;
              if (v1 instanceof Iter) {
                var v2 = unFold(function(v32) {
                  var iter1 = function($copy_acc) {
                    return function($copy_state$prime) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done3 = false;
                      var $tco_result2;
                      function $tco_loop2(acc, state$prime) {
                        var v4 = runParser$prime({
                          consumed: false,
                          errors: state$prime.errors,
                          position: state$prime.position,
                          stream: state$prime.stream
                        })(v1.value1);
                        if (v4 instanceof ParseSucc) {
                          $tco_var_acc = v32.step(acc)(v4.value0);
                          $copy_state$prime = v4.value1;
                          return;
                        }
                        ;
                        if (v4 instanceof ParseFail) {
                          if (v4.value2.consumed) {
                            $tco_done3 = true;
                            return new Data_Tuple.Tuple(v4.value2, new Fail(v4.value1, v4.value0));
                          }
                          ;
                          if (Data_Boolean.otherwise) {
                            $tco_done3 = true;
                            return new Data_Tuple.Tuple(state$prime, new Pure(v32.done(acc)));
                          }
                          ;
                        }
                        ;
                        throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 299, column 31 - line 306, column 51): " + [v4.constructor.name]);
                      }
                      ;
                      while (!$tco_done3) {
                        $tco_result2 = $tco_loop2($tco_var_acc, $copy_state$prime);
                      }
                      ;
                      return $tco_result2;
                    };
                  };
                  return iter1(v32.init(Data_Unit.unit))(v);
                })(v1.value0);
                $tco_var_stack = stack;
                $tco_var_v = v2.value0;
                $copy_v1 = v2.value1;
                return;
              }
              ;
              if (v1 instanceof Defer) {
                $tco_var_stack = stack;
                $tco_var_v = v;
                $copy_v1 = Data_Lazy.force(v1.value0);
                return;
              }
              ;
              if (v1 instanceof Recover) {
                $tco_var_stack = new StkRecover(stack, v, v1.value0);
                $tco_var_v = {
                  consumed: false,
                  errors: v.errors,
                  position: v.position,
                  stream: v.stream
                };
                $copy_v1 = v1.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 248, column 31 - line 312, column 67): " + [v1.constructor.name]);
            }
            ;
            while (!$tco_done2) {
              $tco_result = $tco_loop($tco_var_stack, $tco_var_v, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
      };
      return function(state) {
        return function(parser) {
          return go(StkNil.value)(state)(parser);
        };
      };
    }();
    var recover = Recover.create;
    var qsingleton = Leaf.create;
    var qappend = Node.create;
    var mkFold = Unsafe_Coerce.unsafeCoerce;
    var lookAhead = LookAhead.create;
    var lazyParser = {
      defer: function($169) {
        return Defer.create(Data_Lazy.defer($169));
      }
    };
    var iter = function(a) {
      return function(b) {
        return new Iter(a, b);
      };
    };
    var initialParserState = function(stream) {
      return {
        consumed: false,
        errors: [],
        position: {
          line: 0,
          column: 0
        },
        stream
      };
    };
    var functorRecovery = {
      map: function(f) {
        return function(m) {
          return new Recovery(f(m.value0), m.value1, m.value2);
        };
      }
    };
    var functorParser = {
      map: function(f) {
        return function(v) {
          if (v instanceof Bind) {
            return new Bind(v.value0, qappend(v.value1)(qsingleton(function($170) {
              return Pure.create(f($170));
            })));
          }
          ;
          return new Bind(v, qsingleton(function($171) {
            return Pure.create(f($171));
          }));
        };
      }
    };
    var fromParserResult = function(v) {
      if (v instanceof ParseFail) {
        return new Data_Either.Left({
          position: v.value1,
          error: v.value0
        });
      }
      ;
      if (v instanceof ParseSucc) {
        return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v.value1.errors));
      }
      ;
      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 197, column 20 - line 201, column 29): " + [v.constructor.name]);
    };
    var runParser = function(stream) {
      var $172 = runParser$prime(initialParserState(stream));
      return function($173) {
        return fromParserResult($172($173));
      };
    };
    var foldMaybe = mkFold({
      init: Data_Function["const"](Data_Maybe.Nothing.value),
      step: Data_Function["const"](Data_Maybe.Just.create),
      done: Control_Category.identity(Control_Category.categoryFn)
    });
    var optional = iter(foldMaybe);
    var foldArray = mkFold({
      init: function(v) {
        return Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect)(Data_Array_ST["new"]));
      },
      step: function(arr) {
        return function(a) {
          return Effect_Unsafe.unsafePerformEffect(Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect)(function __do() {
            Data_Array_ST.push(a)(arr)();
            return arr;
          }));
        };
      },
      done: function() {
        var $174 = Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect);
        return function($175) {
          return Effect_Unsafe.unsafePerformEffect($174(Data_Array_ST.unsafeFreeze($175)));
        };
      }()
    });
    var many = iter(foldArray);
    var fail = Fail.create;
    var eof = new Eof(Control_Category.identity(Control_Category.categoryFn));
    var bindParser = {
      bind: function(p) {
        return function(k) {
          if (p instanceof Bind) {
            return new Bind(p.value0, qappend(p.value1)(qsingleton(k)));
          }
          ;
          return new Bind(p, qsingleton(k));
        };
      },
      Apply0: function() {
        return applyParser;
      }
    };
    var applyParser = {
      apply: function(p1) {
        return function(p2) {
          return Control_Bind.bind(bindParser)(p1)(function(f) {
            return Control_Bind.bind(bindParser)(p2)(function(a) {
              return Control_Applicative.pure(applicativeParser)(f(a));
            });
          });
        };
      },
      Functor0: function() {
        return functorParser;
      }
    };
    var applicativeParser = {
      pure: Pure.create,
      Apply0: function() {
        return applyParser;
      }
    };
    var monadParser = {
      Applicative0: function() {
        return applicativeParser;
      },
      Bind1: function() {
        return bindParser;
      }
    };
    var altParser = {
      alt: Alt.create,
      Functor0: function() {
        return functorParser;
      }
    };
    module2.exports = {
      ParseFail,
      ParseSucc,
      Recovery,
      initialParserState,
      fromParserResult,
      runParser,
      "runParser'": runParser$prime,
      take,
      fail,
      "try": $$try,
      lookAhead,
      many,
      optional,
      eof,
      recover,
      functorRecovery,
      functorParser,
      applyParser,
      applicativeParser,
      bindParser,
      monadParser,
      altParser,
      lazyParser
    };
  }
});

// output/PureScript.CST.Parser/index.js
var require_PureScript_CST7 = __commonJS({
  "output/PureScript.CST.Parser/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Lazy = require_Control8();
    var Data_Array = require_Data39();
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Set = require_Data48();
    var Data_Tuple = require_Data22();
    var PureScript_CST_Errors = require_PureScript_CST3();
    var PureScript_CST_Layout = require_PureScript_CST4();
    var PureScript_CST_Parser_Monad = require_PureScript_CST_Parser();
    var PureScript_CST_TokenStream = require_PureScript_CST5();
    var PureScript_CST_Types = require_PureScript_CST();
    var wrapped = function(openTok) {
      return function(closeTok) {
        return function(valueParser) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function(open) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(valueParser)(function(value) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(closeTok)(function(close) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  open,
                  value,
                  close
                });
              });
            });
          });
        };
      };
    };
    var separated = function(sepParser) {
      return function(valueParser) {
        return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function(v) {
          return function(v1) {
            return {
              head: v,
              tail: v1
            };
          };
        })(valueParser))(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(sepParser))(valueParser)));
      };
    };
    var reservedKeywords = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)(["ado", "case", "class", "data", "derive", "do", "else", "false", "foreign", "if", "import", "in", "infix", "infixl", "infixr", "instance", "let", "module", "newtype", "of", "then", "true", "type", "where"]);
    var recoverTokensWhile = function(p) {
      return function(initStream) {
        var indent = Data_Maybe.maybe(0)(function(v) {
          return v.column;
        })(PureScript_CST_Layout.currentIndent(PureScript_CST_TokenStream.layoutStack(initStream)));
        var go = function($copy_acc) {
          return function($copy_stream) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, stream) {
              var v = PureScript_CST_TokenStream.step(stream);
              if (v instanceof PureScript_CST_TokenStream.TokenError) {
                $tco_done = true;
                return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0, stream);
              }
              ;
              if (v instanceof PureScript_CST_TokenStream.TokenEOF) {
                $tco_done = true;
                return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0, stream);
              }
              ;
              if (v instanceof PureScript_CST_TokenStream.TokenCons) {
                var $114 = p(v.value0)(indent);
                if ($114) {
                  $tco_var_acc = Data_Array.snoc(acc)(v.value0);
                  $copy_stream = v.value2;
                  return;
                }
                ;
                $tco_done = true;
                return new PureScript_CST_Parser_Monad.Recovery(acc, v.value0.range.start, stream);
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Parser (line 1163, column 19 - line 1172, column 44): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_stream);
            }
            ;
            return $tco_result;
          };
        };
        return go([])(initStream);
      };
    };
    var recoverIndent = function(mkNode) {
      return PureScript_CST_Parser_Monad.recover(function(v) {
        var $304 = Data_Functor.map(PureScript_CST_Parser_Monad.functorRecovery)(function(tokens) {
          return mkNode({
            position: v.position,
            error: v.error,
            tokens
          });
        });
        var $305 = recoverTokensWhile(function(tok) {
          return function(indent) {
            if (tok.value instanceof PureScript_CST_Types.TokLayoutEnd) {
              return tok.value.value0 > indent;
            }
            ;
            if (tok.value instanceof PureScript_CST_Types.TokLayoutSep) {
              return tok.value.value0 > indent;
            }
            ;
            return true;
          };
        });
        return function($306) {
          return $304($305($306));
        };
      });
    };
    var recoverLetBinding = recoverIndent(PureScript_CST_Types.LetBindingError.create);
    var recoverDoStatement = recoverIndent(PureScript_CST_Types.DoError.create);
    var recoverDecl = recoverIndent(PureScript_CST_Types.DeclError.create);
    var parseSmallInt = PureScript_CST_Parser_Monad.take(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokInt && v.value.value1 instanceof PureScript_CST_Types.SmallInt) {
        return Data_Either.Right.create(new Data_Tuple.Tuple(v, v.value.value1.value0));
      }
      ;
      if (v.value instanceof PureScript_CST_Types.TokInt) {
        return Data_Either.Left.create(new PureScript_CST_Errors.LexIntOutOfRange(v.value.value0));
      }
      ;
      return Data_Either.Left.create(new PureScript_CST_Errors.UnexpectedToken(v.value));
    });
    var many1 = function(parser) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array_NonEmpty["cons'"])(parser))(PureScript_CST_Parser_Monad.many(parser));
    };
    var expectMap = function(k) {
      return PureScript_CST_Parser_Monad.take(function(tok) {
        var v = k(tok);
        if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
        }
        ;
        if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create(new PureScript_CST_Errors.UnexpectedToken(tok.value));
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Parser (line 46, column 3 - line 50, column 39): " + [v.constructor.name]);
      });
    };
    var parseBoolean = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "true")) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, true));
      }
      ;
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && v.value.value1 === "false")) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, false));
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseChar = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokChar) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseHole = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokHole) {
        return Data_Maybe.Just.create({
          token: v,
          name: v.value.value0
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseIdent = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && (v.value.value0 instanceof Data_Maybe.Nothing && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords))) {
        return Data_Maybe.Just.create({
          token: v,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var $$parseInt = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokInt) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseLabel = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokString) {
        return Data_Maybe.Just.create({
          token: v,
          name: v.value.value1
        });
      }
      ;
      if (v.value instanceof PureScript_CST_Types.TokLowerName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Just.create({
          token: v,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseModuleName = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Just) {
        return Data_Maybe.Just.create({
          token: v,
          name: PureScript_CST_Types.ModuleName(v.value.value0.value0 + ("." + v.value.value1))
        });
      }
      ;
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Just.create({
          token: v,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseNumber = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokNumber) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseOperator = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokOperator && v.value.value0 instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Just.create({
          token: v,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseProper = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Just.create({
          token: v,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseQualifiedIdent = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName && !Data_Set.member(Data_Ord.ordString)(v.value.value1)(reservedKeywords)) {
        return Data_Maybe.Just.create({
          token: v,
          module: v.value.value0,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseQualifiedIdentOrProper = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokLowerName) {
        return Data_Maybe.Just.create({
          token: v,
          module: v.value.value0,
          name: Data_Either.Left.create(v.value.value1)
        });
      }
      ;
      if (v.value instanceof PureScript_CST_Types.TokUpperName) {
        return Data_Maybe.Just.create({
          token: v,
          module: v.value.value0,
          name: Data_Either.Right.create(v.value.value1)
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseQualifiedOperator = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokOperator) {
        return Data_Maybe.Just.create({
          token: v,
          module: v.value.value0,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseQualifiedProper = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokUpperName) {
        return Data_Maybe.Just.create({
          token: v,
          module: v.value.value0,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseQualifiedSymbol = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokSymbolName) {
        return Data_Maybe.Just.create({
          token: v,
          module: v.value.value0,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseString = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokString) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value1));
      }
      ;
      if (v.value instanceof PureScript_CST_Types.TokRawString) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(v, v.value.value0));
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var parseSymbol = expectMap(function(v) {
      if (v.value instanceof PureScript_CST_Types.TokSymbolName && v.value.value0 instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Just.create({
          token: v,
          name: v.value.value1
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var expect = function(pred) {
      return expectMap(function(tok) {
        var $217 = pred(tok.value);
        if ($217) {
          return new Data_Maybe.Just(tok);
        }
        ;
        return Data_Maybe.Nothing.value;
      });
    };
    var tokAt = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokAt) {
        return true;
      }
      ;
      return false;
    });
    var tokBackslash = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokBackslash) {
        return true;
      }
      ;
      return false;
    });
    var tokComma = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokComma) {
        return true;
      }
      ;
      return false;
    });
    var tokDot = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokDot) {
        return true;
      }
      ;
      return false;
    });
    var parseRecordAccessor = function(expr) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDot)(function(dot) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokDot)(parseLabel))(function(path) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprRecordAccessor({
            expr,
            dot,
            path
          }));
        });
      });
    };
    var tokDoubleColon = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokDoubleColon) {
        return true;
      }
      ;
      return false;
    });
    var parseInstanceName = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseIdent))(tokDoubleColon);
    var tokEquals = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokEquals) {
        return true;
      }
      ;
      return false;
    });
    var tokForall = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokForall) {
        return true;
      }
      ;
      return false;
    });
    var tokKeyOperator = function(sym) {
      return expect(function(v) {
        if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
          return sym === v.value1;
        }
        ;
        return false;
      });
    };
    var parseBinderNegative = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyOperator("-"))(function(negative) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(new Data_Maybe.Just(negative))))($$parseInt))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(new Data_Maybe.Just(negative))))(parseNumber));
    });
    var parseRecordLabeled = function(valueParser) {
      var parseRecordField = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.RecordField.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokKeyOperator(":")))))(valueParser);
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordField)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordPun.create)(parseIdent));
    };
    var tokKeySymbol = function(sym) {
      return expect(function(v) {
        if (v instanceof PureScript_CST_Types.TokSymbolName && v.value0 instanceof Data_Maybe.Nothing) {
          return sym === v.value1;
        }
        ;
        return false;
      });
    };
    var tokKeyword = function(kw) {
      return expect(function(v) {
        if (v instanceof PureScript_CST_Types.TokLowerName && v.value0 instanceof Data_Maybe.Nothing) {
          return kw === v.value1;
        }
        ;
        return false;
      });
    };
    var parseFixityKeyword = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infix.value))(tokKeyword("infix")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixl.value))(tokKeyword("infixl")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Infixr.value))(tokKeyword("infixr"))));
    var parseFixityOp = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityType.create)(tokKeyword("type")))(parseQualifiedProper))(tokKeyword("as")))(parseOperator))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FixityValue.create)(parseQualifiedIdentOrProper))(tokKeyword("as")))(parseOperator));
    var parseDeclFixity = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityKeyword)(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseSmallInt)(function(prec) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseFixityOp)(function(operator) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclFixity({
            keyword,
            prec,
            operator
          }));
        });
      });
    });
    var parseForeignKind = PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ForeignKind.create)(tokKeyword("kind")))(parseProper));
    var parseRole = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Representational.value))(tokKeyword("representational")))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Nominal.value))(tokKeyword("nominal")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(Data_Tuple.Tuple.create)(PureScript_CST_Types.Phantom.value))(tokKeyword("phantom"))));
    var parseDeclRole = function(keyword1) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("role"))(function(keyword2) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function(name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseRole))(function(roles) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclRole(keyword1, keyword2, name, roles));
          });
        });
      });
    };
    var tokLayoutEnd = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
        return true;
      }
      ;
      return false;
    });
    var tokLayoutSep = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokLayoutSep) {
        return true;
      }
      ;
      return false;
    });
    var parseInstanceChainSeparator = Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokKeyword("else"))(PureScript_CST_Parser_Monad.optional(tokLayoutSep));
    var tokLayoutStart = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokLayoutStart) {
        return true;
      }
      ;
      return false;
    });
    var layout = function(valueParser) {
      var tail = PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser));
      var go = function(head) {
        return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Array.cons(head))(tail);
      };
      var values = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Bind.bindFlipped(PureScript_CST_Parser_Monad.bindParser)(go)(valueParser))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)([]));
      return Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(values))(tokLayoutEnd);
    };
    var layoutNonEmpty = function(valueParser) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function(v) {
        return function(v1) {
          return Data_Array_NonEmpty["cons'"](v)(v1);
        };
      })(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(valueParser)))(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(PureScript_CST_Parser_Monad.many(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutSep)(valueParser)))(tokLayoutEnd));
    };
    var tokLeftArrow = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokLeftArrow) {
        return true;
      }
      ;
      return false;
    });
    var tokLeftBrace = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokLeftBrace) {
        return true;
      }
      ;
      return false;
    });
    var tokLeftFatArrow = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokOperator && v.value0 instanceof Data_Maybe.Nothing) {
        return v.value1 === "<=" || v.value1 === "\u21D0";
      }
      ;
      return false;
    });
    var tokLeftParen = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokLeftParen) {
        return true;
      }
      ;
      return false;
    });
    var tokLeftSquare = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokLeftSquare) {
        return true;
      }
      ;
      return false;
    });
    var tokPipe = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokPipe) {
        return true;
      }
      ;
      return false;
    });
    var tokQualifiedKeyword = function(kw) {
      return expect(function(v) {
        if (v instanceof PureScript_CST_Types.TokLowerName) {
          return kw === v.value1;
        }
        ;
        return false;
      });
    };
    var tokRightArrow = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokRightArrow) {
        return true;
      }
      ;
      return false;
    });
    var parseFundep = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermined.create)(tokRightArrow))(many1(parseIdent)))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.FundepDetermines.create)(many1(parseIdent)))(tokRightArrow))(many1(parseIdent)));
    var tokRightBrace = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokRightBrace) {
        return true;
      }
      ;
      return false;
    });
    var tokRightFatArrow = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
        return true;
      }
      ;
      return false;
    });
    var tokRightParen = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokRightParen) {
        return true;
      }
      ;
      return false;
    });
    var parens = wrapped(tokLeftParen)(tokRightParen);
    var parseEmptyRow = function(open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function(close) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
          open,
          value: {
            labels: Data_Maybe.Nothing.value,
            tail: Data_Maybe.Nothing.value
          },
          close
        }));
      });
    };
    var tokRightSquare = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokRightSquare) {
        return true;
      }
      ;
      return false;
    });
    var tokSymbolArrow = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
        return true;
      }
      ;
      return false;
    });
    var tokTick = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokTick) {
        return true;
      }
      ;
      return false;
    });
    var tokUnderscore = expect(function(v) {
      if (v instanceof PureScript_CST_Types.TokUnderscore) {
        return true;
      }
      ;
      return false;
    });
    var delimited = function(openTok) {
      return function(closeTok) {
        return function(sepTok) {
          return function(valueParser) {
            var parseNonEmpty = function(open) {
              return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function(v) {
                return function(v1) {
                  return {
                    open,
                    value: new Data_Maybe.Just(v),
                    close: v1
                  };
                };
              })(separated(sepTok)(valueParser)))(closeTok);
            };
            var parseEmpty = function(open) {
              return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function(v) {
                return {
                  open,
                  value: Data_Maybe.Nothing.value,
                  close: v
                };
              })(closeTok);
            };
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(openTok)(function(open) {
              return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseEmpty(open))(parseNonEmpty(open));
            });
          };
        };
      };
    };
    var parseDataMembers = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataAll.create)(tokKeySymbol("..")))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DataEnumerated.create)(delimited(tokLeftParen)(tokRightParen)(tokComma)(parseProper)));
    var parseExport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportModule.create)(tokKeyword("module")))(parseModuleName))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportKind.create)(tokKeyword("kind")))(parseProper)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportValue.create)(parseIdent))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers))))))));
    var parseImport = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportOp.create)(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportType.create)(parseProper))(PureScript_CST_Parser_Monad.optional(parseDataMembers)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportTypeOp.create)(tokKeyword("type")))(parseSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportClass.create)(tokKeyword("class")))(parseProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportKind.create)(tokKeyword("kind")))(parseProper))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ImportValue.create)(parseIdent))))));
    var parseImportDecl = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function(module_) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(PureScript_CST_Parser_Monad.optional(tokKeyword("hiding"))))(parens(separated(tokComma)(parseImport)))))(function(names) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("as")))(parseModuleName)))(function(qualified) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
              keyword,
              module: module_,
              names,
              qualified
            });
          });
        });
      });
    });
    var parseModuleImportDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseImportDecl)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
    var parseModuleHeader = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("module"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleName)(function(name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parens(separated(tokComma)(parseExport))))(function(exports3) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("where"))(function(where_) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseModuleImportDecls))(function(imports) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                keyword,
                name,
                exports: exports3,
                where: where_,
                imports
              });
            });
          });
        });
      });
    });
    var braces = wrapped(tokLeftBrace)(tokRightBrace);
    var parseTypeVarKinded = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarKinded.create)(parens(Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function(label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
            label,
            separator,
            value
          });
        });
      });
    })));
    var parseTypeVarBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeVarKinded)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVarName.create)(parseIdent));
    });
    var parseTypeParens = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokLeftParen)(function(open) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRowTailParen(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseKindedVar(open))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParen(open))(parseEmptyRow(open)))));
    });
    var parseTypeParen = function(open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function(close) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeParens.create({
            open,
            value,
            close
          }));
        });
      });
    };
    var parseTypeAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.TypeString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseTypeParens)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeRecord.create)(braces(parseRow)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeWildcard.create)(tokUnderscore))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrowName.create)(tokSymbolArrow)))))))));
    });
    var parseType5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function(ty) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function(args) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(function() {
            var v1 = Data_Array_NonEmpty.fromArray(args);
            if (v1 instanceof Data_Maybe.Nothing) {
              return ty;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new PureScript_CST_Types.TypeApp(ty, v1.value0);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Parser (line 436, column 8 - line 438, column 29): " + [v1.constructor.name]);
          }());
        });
      });
    });
    var parseType4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeUnaryRow.create)(tokKeyOperator("#")))(parseType4))(parseType5);
    });
    var parseType3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType4)(function(ty) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseType4)))(function(ops) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(function() {
            var v1 = Data_Array_NonEmpty.fromArray(ops);
            if (v1 instanceof Data_Maybe.Nothing) {
              return ty;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new PureScript_CST_Types.TypeOp(ty, v1.value0);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Parser (line 423, column 8 - line 425, column 28): " + [v1.constructor.name]);
          }());
        });
      });
    });
    var parseType2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType3)(function(ty) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeArrow.create(ty))(tokRightArrow))(parseType1))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeConstrained.create(ty))(tokRightFatArrow))(parseType1))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty)));
      });
    });
    var parseType1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForall)(parseType2);
    });
    var parseType = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType1)(function(ty) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeKinded.create(ty))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(ty));
      });
    });
    var parseRowTailParen = function(open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType))(function(tail) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function(close) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
            open,
            value: {
              labels: Data_Maybe.Nothing.value,
              tail: new Data_Maybe.Just(tail)
            },
            close
          }));
        });
      });
    };
    var parseRowParen = function(open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseLabel))(tokDoubleColon)))(function(v) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokComma))(parseRowLabel)))(function(rest) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function(tail) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function(close) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeRow.create({
                  open,
                  value: {
                    labels: Data_Maybe.Just.create({
                      head: {
                        label: v.value0,
                        separator: v.value1,
                        value
                      },
                      tail: rest
                    }),
                    tail
                  },
                  close
                }));
              });
            });
          });
        });
      });
    };
    var parseRowLabel = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function(label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
            label,
            separator,
            value
          });
        });
      });
    });
    var parseRow = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(separated(tokComma)(parseRowLabel)))(function(labels) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(parseType)))(function(tail) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
            labels,
            tail
          });
        });
      });
    });
    var parseKindedVar = function(open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parens(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeVar.create)(parseIdent))))(tokDoubleColon)))(function(v) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(kind) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightParen)(function(close) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.TypeParens.create({
              open,
              value: new PureScript_CST_Types.TypeKinded(new PureScript_CST_Types.TypeParens(v.value0), v.value1, kind),
              close
            }));
          });
        });
      });
    };
    var parseForall = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.TypeForall.create)(tokForall))(many1(parseTypeVarBinding)))(tokDot))(parseType1);
    });
    var parseDataCtor = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function(v) {
      return function(v1) {
        return {
          name: v,
          fields: v1
        };
      };
    })(parseProper))(PureScript_CST_Parser_Monad.many(parseTypeAtom));
    var parseIdentBinder = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function(ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderNamed.create(ident))(tokAt))(parseBinderAtom))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderVar(ident)));
    });
    var parseBinderConstructor = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function(name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function(apps) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.BinderConstructor(name, apps));
        });
      });
    });
    var parseBinderAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIdentBinder)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Function.flip(PureScript_CST_Types.BinderConstructor.create)([]))(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderWildcard.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderInt.create(Data_Maybe.Nothing.value)))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.BinderNumber.create(Data_Maybe.Nothing.value)))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseBinder)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseBinder))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderParens.create)(parens(parseBinder))))))))))));
    });
    var parseBinder2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderNegative)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBinderConstructor)(parseBinderAtom));
    });
    var parseBinder1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder2)(function(binder) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseBinder2)))(function(ops) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(function() {
            var v1 = Data_Array_NonEmpty.fromArray(ops);
            if (v1 instanceof Data_Maybe.Nothing) {
              return binder;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new PureScript_CST_Types.BinderOp(binder, v1.value0);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Parser (line 811, column 8 - line 813, column 34): " + [v1.constructor.name]);
          }());
        });
      });
    });
    var parseBinder = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseBinder1)(function(binder) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.BinderTyped.create(binder))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(binder));
      });
    });
    var parseClassConstraints = function(parseOneConstraint) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Many.create)(parens(separated(tokComma)(parseType))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.One.create)(parseOneConstraint));
    };
    var parseDeclDerive = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("derive"))(function(derive_) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(tokKeyword("newtype")))(function(newtype_) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function(keyword) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parseInstanceName))(function(name) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function(constraints) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function(className) {
                return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function(types) {
                  return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclDerive(derive_, newtype_, {
                    keyword,
                    name,
                    constraints,
                    className,
                    types
                  }));
                });
              });
            });
          });
        });
      });
    });
    var parseClassMember = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function(label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
            label,
            separator,
            value
          });
        });
      });
    });
    var parseDeclClassSignature = function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseProper))(tokDoubleColon)))(function(v) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclKindSignature.create(keyword)({
            label: v.value0,
            separator: v.value1,
            value
          }));
        });
      });
    };
    var parseDeclKindSignature = function(keyword) {
      return function(label) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclKindSignature.create(keyword)({
              label,
              separator,
              value
            }));
          });
        });
      };
    };
    var parseDeclSignature = function(label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.DeclSignature.create({
            label,
            separator,
            value
          }));
        });
      });
    };
    var parseForeignData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function(label) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ForeignData.create(keyword)({
              label,
              separator,
              value
            }));
          });
        });
      });
    });
    var parseForeignValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function(label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ForeignValue.create({
            label,
            separator,
            value
          }));
        });
      });
    });
    var parseDeclForeign = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("foreign"))(function(keyword1) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("import"))(function(keyword2) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseForeignKind)(parseForeignValue)))(function(foreign_) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclForeign(keyword1, keyword2, foreign_));
        });
      });
    });
    var parseInstanceBindingSignature = function(label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.InstanceBindingSignature.create({
            label,
            separator,
            value
          }));
        });
      });
    };
    var parseLetBindingSignature = function(label) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokDoubleColon)(function(separator) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(value) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.LetBindingSignature.create({
            label,
            separator,
            value
          }));
        });
      });
    };
    var parseWhere = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function(expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(recoverLetBinding(parseLetBinding)))))(function(bindings) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
            expr,
            bindings
          });
        });
      });
    });
    var parseTickExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function(expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr3)))(function(ops) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(function() {
            var v1 = Data_Array_NonEmpty.fromArray(ops);
            if (v1 instanceof Data_Maybe.Nothing) {
              return expr;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new PureScript_CST_Types.ExprOp(expr, v1.value0);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Parser (line 582, column 8 - line 584, column 30): " + [v1.constructor.name]);
          }());
        });
      });
    });
    var parseTickExpr = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function(open) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTickExpr1)(function(value) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokTick)(function(close) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
            open,
            value,
            close
          });
        });
      });
    });
    var parseRecordUpdates = function(expr) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad["try"](Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(tokLeftBrace)(PureScript_CST_Parser_Monad.lookAhead(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(parseLabel)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokEquals)(tokLeftBrace))))))(function(open) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseRecordUpdate))(function(value) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightBrace)(function(close) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(PureScript_CST_Types.ExprRecordUpdate.create(expr)({
              open,
              value,
              close
            }));
          });
        });
      });
    };
    var parseRecordUpdateLeaf = function(label) {
      return Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateLeaf.create(label))(tokEquals))(parseExpr);
    };
    var parseRecordUpdateBranch = function(label) {
      return Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.RecordUpdateBranch.create(label))(braces(separated(tokComma)(parseRecordUpdate)));
    };
    var parseRecordUpdate = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseLabel)(function(label) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdateLeaf(label))(parseRecordUpdateBranch(label));
    });
    var parseLetIn = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("let"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverLetBinding(parseLetBinding)))(function(bindings) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function(in_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function(body) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLet({
              keyword,
              bindings,
              "in": in_,
              body
            }));
          });
        });
      });
    });
    var parseLetBindingName = function(name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function(binders) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function(guarded) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.LetBindingName({
            name,
            binders,
            guarded
          }));
        });
      });
    };
    var parseLetBinding = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseIdentBinding))(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.LetBindingPattern.create)(parseBinder1))(tokEquals))(parseWhere));
    });
    var parseLambda = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokBackslash)(function(symbol) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(many1(parseBinderAtom))(function(binders) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function(arrow) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function(body) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprLambda({
              symbol,
              binders,
              arrow,
              body
            }));
          });
        });
      });
    });
    var parseIf = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("if"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function(cond) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("then"))(function(then_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function(true_) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("else"))(function(else_) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function(false_) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprIf({
                  keyword,
                  cond,
                  then: then_,
                  "true": true_,
                  "else": else_,
                  "false": false_
                }));
              });
            });
          });
        });
      });
    });
    var parseIdentBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function(ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetBindingSignature(ident))(parseLetBindingName(ident));
    });
    var parseGuarded = function(sepParser) {
      var parsePatternGuard = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function(v) {
        return function(v1) {
          return {
            binder: v,
            expr: v1
          };
        };
      })(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow)))))(parseExpr);
      var parseGuardedExpr = Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(function(v) {
        return function(v1) {
          return function(v2) {
            return function(v3) {
              return {
                bar: v,
                patterns: v1,
                separator: v2,
                where: v3
              };
            };
          };
        };
      })(tokPipe))(separated(tokComma)(parsePatternGuard)))(sepParser))(parseWhere);
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Unconditional.create)(sepParser))(parseWhere))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.Guarded.create)(many1(parseGuardedExpr)));
    };
    var parseExprAtom = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprIdent.create)(parseQualifiedIdent))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprConstructor.create)(parseQualifiedProper))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprOpName.create)(parseQualifiedSymbol))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprSection.create)(tokUnderscore))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprHole.create)(parseHole))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprString.create))(parseString))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprChar.create))(parseChar))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprBoolean.create))(parseBoolean))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprInt.create))($$parseInt))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.ExprNumber.create))(parseNumber))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)(parseExpr)))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled(parseExpr))))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprParens.create)(parens(parseExpr))))))))))))));
    });
    var parseExpr7 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExprAtom)(function(expr) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordAccessor(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
    });
    var parseExpr6 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr7)(function(expr) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseRecordUpdates(expr))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
    });
    var parseExpr5 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseIf)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLetIn)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseLambda)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseCase)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDo)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseAdo)(parseExpr6))))));
    });
    var parseExpr4 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr5)(function(expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseExpr5))(function(args) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(function() {
            var v1 = Data_Array_NonEmpty.fromArray(args);
            if (v1 instanceof Data_Maybe.Nothing) {
              return expr;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new PureScript_CST_Types.ExprApp(expr, v1.value0);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Parser (line 595, column 8 - line 597, column 31): " + [v1.constructor.name]);
          }());
        });
      });
    });
    var parseExpr3 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprNegate.create)(tokKeyOperator("-")))(parseExpr3))(parseExpr4);
    });
    var parseExpr2 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr3)(function(expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseTickExpr))(parseExpr3)))(function(ops) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(function() {
            var v1 = Data_Array_NonEmpty.fromArray(ops);
            if (v1 instanceof Data_Maybe.Nothing) {
              return expr;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new PureScript_CST_Types.ExprInfix(expr, v1.value0);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Parser (line 567, column 8 - line 569, column 33): " + [v1.constructor.name]);
          }());
        });
      });
    });
    var parseExpr1 = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr2)(function(expr) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseQualifiedOperator))(parseExpr2)))(function(ops) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(function() {
            var v1 = Data_Array_NonEmpty.fromArray(ops);
            if (v1 instanceof Data_Maybe.Nothing) {
              return expr;
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new PureScript_CST_Types.ExprOp(expr, v1.value0);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Parser (line 559, column 8 - line 561, column 30): " + [v1.constructor.name]);
          }());
        });
      });
    });
    var parseExpr = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr1)(function(expr) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.ExprTyped.create(expr))(tokDoubleColon))(parseType))(Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(expr));
      });
    });
    var parseDoStatement = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoLet.create)(tokKeyword("let")))(layoutNonEmpty(recoverLetBinding(parseLetBinding))))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.uncurry(PureScript_CST_Types.DoBind.create))(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseBinder))(tokLeftArrow))))(parseExpr))(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DoDiscard.create)(parseExpr)));
    });
    var parseDo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("do"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layoutNonEmpty(recoverDoStatement(parseDoStatement)))(function(statements) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprDo({
          keyword,
          statements
        }));
      });
    });
    var parseCaseBranches = Control_Lazy.defer(PureScript_CST_Parser_Monad.lazyParser)(function(v) {
      return layoutNonEmpty(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(separated(tokComma)(parseBinder1)))(parseGuarded(tokRightArrow)));
    });
    var parseCase = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("case"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(separated(tokComma)(parseExpr))(function(head) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("of"))(function(of_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(PureScript_CST_Parser_Monad["try"](parseBadSingleCaseBranch))(parseCaseBranches))(function(branches) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprCase({
              keyword,
              head,
              of: of_,
              branches
            }));
          });
        });
      });
    });
    var parseBadSingleCaseWhere = function(binder) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokRightArrow)(function(arrow) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseWhere))(function(body) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(Data_Tuple.Tuple.create({
            head: binder,
            tail: []
          })(new PureScript_CST_Types.Unconditional(arrow, body))));
        });
      });
    };
    var parseBadSingleCaseGuarded = function(binder) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutEnd)(parseGuarded(tokRightArrow)))(function(body) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(Data_Array_NonEmpty.singleton(new Data_Tuple.Tuple({
          head: binder,
          tail: []
        }, body)));
      });
    };
    var parseBadSingleCaseBranch = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applySecond(PureScript_CST_Parser_Monad.applyParser)(tokLayoutStart)(parseBinder1))(function(binder) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseBadSingleCaseWhere(binder))(parseBadSingleCaseGuarded(binder));
    });
    var parseAdo = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokQualifiedKeyword("ado"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(layout(recoverDoStatement(parseDoStatement)))(function(statements) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("in"))(function(in_) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseExpr)(function(result) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.ExprAdo({
              keyword,
              statements,
              "in": in_,
              result
            }));
          });
        });
      });
    });
    var parseDeclValue1 = function(name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function(binders) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function(guarded) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclValue({
            name,
            binders,
            guarded
          }));
        });
      });
    };
    var parseDeclValue = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function(ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclSignature(ident))(parseDeclValue1(ident));
    });
    var parseInstanceBindingName = function(name) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseBinderAtom))(function(binders) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseGuarded(tokEquals))(function(guarded) {
          return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.InstanceBindingName({
            name,
            binders,
            guarded
          }));
        });
      });
    };
    var parseInstanceBinding = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseIdent)(function(ident) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseInstanceBindingSignature(ident))(parseInstanceBindingName(ident));
    });
    var parseInstance = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("instance"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(parseInstanceName))(function(name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function(constraints) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseQualifiedProper)(function(className) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeAtom))(function(types) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseInstanceBinding))))(function(body) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  head: {
                    keyword,
                    name,
                    constraints,
                    className,
                    types
                  },
                  body
                });
              });
            });
          });
        });
      });
    });
    var parseDeclInstanceChain = Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(PureScript_CST_Types.DeclInstanceChain.create)(separated(parseInstanceChainSeparator)(parseInstance));
    var parseDeclClass1 = function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(PureScript_CST_Parser_Monad["try"](Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(parseClassConstraints(parseType5)))(tokLeftFatArrow))))(function($$super) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function(name) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function(vars) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokPipe))(separated(tokComma)(parseFundep))))(function(fundeps) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseClassMember))))(function(members) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclClass({
                  keyword,
                  "super": $$super,
                  name,
                  vars,
                  fundeps
                }, members));
              });
            });
          });
        });
      });
    };
    var parseDeclClass = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("class"))(function(keyword) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClassSignature(keyword))(parseDeclClass1(keyword));
    });
    var parseDeclData1 = function(keyword) {
      return function(name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function(vars) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.optional(Control_Apply.apply(PureScript_CST_Parser_Monad.applyParser)(Data_Functor.map(PureScript_CST_Parser_Monad.functorParser)(Data_Tuple.Tuple.create)(tokEquals))(separated(tokPipe)(parseDataCtor))))(function(ctors) {
            return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclData({
              keyword,
              name,
              vars
            }, ctors));
          });
        });
      };
    };
    var parseDeclData = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("data"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function(name) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclData1(keyword)(name));
      });
    });
    var parseDeclNewtype1 = function(keyword) {
      return function(name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function(vars) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function(tok) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function(wrapper) {
              return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseTypeAtom)(function(body) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclNewtype({
                  keyword,
                  name,
                  vars
                }, tok, wrapper, body));
              });
            });
          });
        });
      };
    };
    var parseDeclNewtype = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("newtype"))(function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function(name) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclNewtype1(keyword)(name));
      });
    });
    var parseDeclType2 = function(keyword) {
      return function(name) {
        return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.many(parseTypeVarBinding))(function(vars) {
          return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokEquals)(function(tok) {
            return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseType)(function(body) {
              return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)(new PureScript_CST_Types.DeclType({
                keyword,
                name,
                vars
              }, tok, body));
            });
          });
        });
      };
    };
    var parseDeclType1 = function(keyword) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseProper)(function(name) {
        return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclKindSignature(keyword)(name))(parseDeclType2(keyword)(name));
      });
    };
    var parseDeclType = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(tokKeyword("type"))(function(keyword) {
      return Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclRole(keyword))(parseDeclType1(keyword));
    });
    var parseDecl = Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclData)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclNewtype)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclType)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclClass)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclInstanceChain)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclDerive)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclValue)(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(parseDeclForeign)(parseDeclFixity))))))));
    var parseModuleDecls = PureScript_CST_Parser_Monad.many(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(recoverDecl(parseDecl))(Control_Alt.alt(PureScript_CST_Parser_Monad.altParser)(tokLayoutSep)(PureScript_CST_Parser_Monad.lookAhead(tokLayoutEnd))));
    var parseModuleBody = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(Control_Apply.applyFirst(PureScript_CST_Parser_Monad.applyParser)(parseModuleDecls)(tokLayoutEnd))(function(decls) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser_Monad.eof)(function(v) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
          decls,
          trailingComments: v.value1,
          end: v.value0
        });
      });
    });
    var parseModule = Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleHeader)(function(header) {
      return Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(parseModuleBody)(function(body) {
        return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
          header,
          body
        });
      });
    });
    module2.exports = {
      parseModule,
      parseModuleHeader,
      parseModuleBody,
      parseImportDecl,
      parseDecl,
      parseType,
      parseExpr,
      parseBinder
    };
  }
});

// output/PureScript.CST.Range.TokenList/index.js
var require_PureScript_CST_Range = __commonJS({
  "output/PureScript.CST.Range.TokenList/index.js"(exports2, module2) {
    "use strict";
    var Data_Array = require_Data39();
    var Data_Array_ST = require_Data_Array();
    var Data_Boolean = require_Data();
    var Data_Maybe = require_Data15();
    var Data_Semigroup = require_Data7();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Data_Unit = require_Data3();
    var TokenEmpty = function() {
      function TokenEmpty2() {
      }
      ;
      TokenEmpty2.value = new TokenEmpty2();
      return TokenEmpty2;
    }();
    var TokenCons = function() {
      function TokenCons2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokenCons2.create = function(value0) {
        return function(value1) {
          return new TokenCons2(value0, value1);
        };
      };
      return TokenCons2;
    }();
    var TokenWrap = function() {
      function TokenWrap2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TokenWrap2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TokenWrap2(value0, value1, value2);
          };
        };
      };
      return TokenWrap2;
    }();
    var TokenAppend = function() {
      function TokenAppend2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TokenAppend2.create = function(value0) {
        return function(value1) {
          return new TokenAppend2(value0, value1);
        };
      };
      return TokenAppend2;
    }();
    var TokenDefer = function() {
      function TokenDefer2(value0) {
        this.value0 = value0;
      }
      ;
      TokenDefer2.create = function(value0) {
        return new TokenDefer2(value0);
      };
      return TokenDefer2;
    }();
    var TokenArray = function() {
      function TokenArray2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TokenArray2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TokenArray2(value0, value1, value2);
          };
        };
      };
      return TokenArray2;
    }();
    var UnconsDone = function() {
      function UnconsDone2() {
      }
      ;
      UnconsDone2.value = new UnconsDone2();
      return UnconsDone2;
    }();
    var UnconsMore = function() {
      function UnconsMore2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      UnconsMore2.create = function(value0) {
        return function(value1) {
          return new UnconsMore2(value0, value1);
        };
      };
      return UnconsMore2;
    }();
    var wrap = TokenWrap.create;
    var singleton = function(a) {
      return new TokenCons(a, TokenEmpty.value);
    };
    var semigroupTokenList = {
      append: function(v) {
        return function(v1) {
          if (v1 instanceof TokenEmpty) {
            return v;
          }
          ;
          if (v instanceof TokenEmpty) {
            return v1;
          }
          ;
          return new TokenAppend(v, v1);
        };
      }
    };
    var uncons2 = function($copy_done) {
      return function($copy_more) {
        return function($copy_l) {
          return function($copy_r) {
            var $tco_var_done = $copy_done;
            var $tco_var_more = $copy_more;
            var $tco_var_l = $copy_l;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(done, more, l, r) {
              if (l instanceof TokenEmpty) {
                $tco_done = true;
                return uncons$prime(done)(more)(r);
              }
              ;
              if (l instanceof TokenCons) {
                $tco_done = true;
                return more(l.value0)(Data_Semigroup.append(semigroupTokenList)(l.value1)(r));
              }
              ;
              if (l instanceof TokenWrap) {
                $tco_done = true;
                return more(l.value0)(Data_Semigroup.append(semigroupTokenList)(l.value1)(new TokenCons(l.value2, r)));
              }
              ;
              if (l instanceof TokenAppend) {
                $tco_var_done = done;
                $tco_var_more = more;
                $tco_var_l = l.value0;
                $copy_r = Data_Semigroup.append(semigroupTokenList)(l.value1)(r);
                return;
              }
              ;
              if (l instanceof TokenDefer) {
                $tco_var_done = done;
                $tco_var_more = more;
                $tco_var_l = l.value0(Data_Unit.unit);
                $copy_r = r;
                return;
              }
              ;
              if (l instanceof TokenArray) {
                var next = function() {
                  if (l.value0 === l.value1) {
                    return r;
                  }
                  ;
                  if (Data_Boolean.otherwise) {
                    return Data_Semigroup.append(semigroupTokenList)(new TokenArray(l.value0 + 1 | 0, l.value1, l.value2))(r);
                  }
                  ;
                  throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 102, column 7 - line 104, column 56): " + []);
                }();
                $tco_done = true;
                return more(l["value2"][l.value0])(next);
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 94, column 25 - line 105, column 52): " + [l.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_done, $tco_var_more, $tco_var_l, $copy_r);
            }
            ;
            return $tco_result;
          };
        };
      };
    };
    var uncons$prime = function($copy_done) {
      return function($copy_more) {
        return function($copy_v) {
          var $tco_var_done = $copy_done;
          var $tco_var_more = $copy_more;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(done, more, v) {
            if (v instanceof TokenEmpty) {
              $tco_done = true;
              return done;
            }
            ;
            if (v instanceof TokenCons) {
              $tco_done = true;
              return more(v.value0)(v.value1);
            }
            ;
            if (v instanceof TokenWrap) {
              $tco_done = true;
              return more(v.value0)(Data_Semigroup.append(semigroupTokenList)(v.value1)(singleton(v.value2)));
            }
            ;
            if (v instanceof TokenAppend) {
              $tco_done = true;
              return uncons2(done)(more)(v.value0)(v.value1);
            }
            ;
            if (v instanceof TokenDefer) {
              $tco_var_done = done;
              $tco_var_more = more;
              $copy_v = v.value0(Data_Unit.unit);
              return;
            }
            ;
            if (v instanceof TokenArray) {
              var next = function() {
                if (v.value0 === v.value1) {
                  return TokenEmpty.value;
                }
                ;
                if (Data_Boolean.otherwise) {
                  return new TokenArray(v.value0 + 1 | 0, v.value1, v.value2);
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 88, column 7 - line 90, column 51): " + []);
              }();
              $tco_done = true;
              return more(v["value2"][v.value0])(next);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 80, column 21 - line 91, column 52): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_done, $tco_var_more, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
    };
    var toUnfoldable = function(dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(uncons$prime(Data_Maybe.Nothing.value)(function(a) {
        return function(b) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(a, b));
        };
      }));
    };
    var uncons = uncons$prime(UnconsDone.value)(UnconsMore.create);
    var toArray = function(init) {
      return function __do() {
        var arr = Data_Array_ST["new"]();
        var cur = init;
        var $$continue = true;
        (function() {
          while ($$continue) {
            (function __do2() {
              var tree = cur;
              var v = uncons(tree);
              if (v instanceof UnconsDone) {
                $$continue = false;
                return Data_Unit.unit;
              }
              ;
              if (v instanceof UnconsMore) {
                cur = v.value1;
                Data_Array_ST.push(v.value0)(arr)();
                return Data_Unit.unit;
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 117, column 5 - line 124, column 18): " + [v.constructor.name]);
            })();
          }
          ;
          return {};
        })();
        return Data_Array_ST.unsafeFreeze(arr)();
      }();
    };
    var monoidTokenList = {
      mempty: TokenEmpty.value,
      Semigroup0: function() {
        return semigroupTokenList;
      }
    };
    var lazyTokenList = {
      defer: TokenDefer.create
    };
    var head = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v instanceof TokenEmpty) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v instanceof TokenCons) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0);
        }
        ;
        if (v instanceof TokenDefer) {
          $copy_v = v.value0(Data_Unit.unit);
          return;
        }
        ;
        if (v instanceof TokenWrap) {
          $tco_done = true;
          return new Data_Maybe.Just(v.value0);
        }
        ;
        if (v instanceof TokenAppend) {
          $copy_v = v.value0;
          return;
        }
        ;
        if (v instanceof TokenArray) {
          $tco_done = true;
          return new Data_Maybe.Just(v["value2"][v.value0]);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range.TokenList (line 64, column 8 - line 70, column 67): " + [v.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    var fromArray = function(arr) {
      var len = Data_Array.length(arr);
      var $50 = len === 0;
      if ($50) {
        return TokenEmpty.value;
      }
      ;
      return new TokenArray(0, len - 1 | 0, arr);
    };
    var cons = TokenCons.create;
    module2.exports = {
      singleton,
      cons,
      wrap,
      head,
      UnconsDone,
      UnconsMore,
      uncons,
      "uncons'": uncons$prime,
      toUnfoldable,
      toArray,
      fromArray,
      lazyTokenList,
      semigroupTokenList,
      monoidTokenList
    };
  }
});

// output/PureScript.CST.Range/index.js
var require_PureScript_CST8 = __commonJS({
  "output/PureScript.CST.Range/index.js"(exports2, module2) {
    "use strict";
    var Control_Lazy = require_Control8();
    var Data_Array = require_Data39();
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Array_NonEmpty_Internal = require_Data_Array_NonEmpty();
    var Data_Foldable = require_Data25();
    var Data_Maybe = require_Data15();
    var Data_Semigroup = require_Data7();
    var Data_Tuple = require_Data22();
    var Data_Void = require_Data6();
    var PureScript_CST_Range_TokenList = require_PureScript_CST_Range();
    var PureScript_CST_Types = require_PureScript_CST();
    var tokensOfVoid = {
      tokensOf: Data_Void.absurd
    };
    var tokensOfRecoveredError = {
      tokensOf: function(v) {
        return PureScript_CST_Range_TokenList.fromArray(v.tokens);
      }
    };
    var tokensOfQualifiedName = {
      tokensOf: function(v) {
        return PureScript_CST_Range_TokenList.singleton(v.token);
      }
    };
    var tokensOfName = {
      tokensOf: function(v) {
        return PureScript_CST_Range_TokenList.singleton(v.token);
      }
    };
    var tokensOf = function(dict) {
      return dict.tokensOf;
    };
    var tokensOfArray = function(dictTokensOf) {
      return {
        tokensOf: Data_Foldable.foldMap(Data_Foldable.foldableArray)(PureScript_CST_Range_TokenList.monoidTokenList)(function(a) {
          return Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v) {
            return tokensOf(dictTokensOf)(a);
          });
        })
      };
    };
    var tokensOfFixityOp = {
      tokensOf: function(v) {
        if (v instanceof PureScript_CST_Types.FixityValue) {
          return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfQualifiedName)(v.value0))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(tokensOf(tokensOfName)(v.value2)));
        }
        ;
        if (v instanceof PureScript_CST_Types.FixityType) {
          return PureScript_CST_Range_TokenList.cons(v.value0)(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfQualifiedName)(v.value1))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value2))(tokensOf(tokensOfName)(v.value3))));
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range (line 633, column 14 - line 637, column 59): " + [v.constructor.name]);
      }
    };
    var tokensOfLabeled = function(dictTokensOf) {
      return function(dictTokensOf1) {
        return {
          tokensOf: function(v) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(dictTokensOf)(v.label))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.separator))(tokensOf(dictTokensOf1)(v.value)));
          }
        };
      };
    };
    var tokensOfMaybe = function(dictTokensOf) {
      return {
        tokensOf: Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(tokensOf(dictTokensOf))
      };
    };
    var tokensOfNonEmptyArray = function(dictTokensOf) {
      return {
        tokensOf: Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(PureScript_CST_Range_TokenList.monoidTokenList)(function(a) {
          return Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v) {
            return tokensOf(dictTokensOf)(a);
          });
        })
      };
    };
    var tokensOfClassFundep = {
      tokensOf: function(v) {
        if (v instanceof PureScript_CST_Types.FundepDetermined) {
          return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfNonEmptyArray(tokensOfName))(v.value1));
        }
        ;
        if (v instanceof PureScript_CST_Types.FundepDetermines) {
          return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfNonEmptyArray(tokensOfName))(v.value0))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(tokensOf(tokensOfNonEmptyArray(tokensOfName))(v.value2)));
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range (line 554, column 14 - line 558, column 50): " + [v.constructor.name]);
      }
    };
    var tokensOfRecordLabeled = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.RecordPun) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.RecordField) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value1)(tokensOf(dictTokensOf)(v.value2));
            }));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 986, column 14 - line 990, column 52): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfSeparated = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(dictTokensOf)(v.head))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return Data_Foldable.foldMap(Data_Foldable.foldableArray)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
              return PureScript_CST_Range_TokenList.cons(v2.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v3) {
                return tokensOf(dictTokensOf)(v2.value1);
              }));
            })(v.tail);
          }));
        }
      };
    };
    var tokensOfTuple = function(dictTokensOf) {
      return function(dictTokensOf1) {
        return {
          tokensOf: function(v) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(dictTokensOf)(v.value0))(tokensOf(dictTokensOf1)(v.value1));
          }
        };
      };
    };
    var tokensOfWrapped = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return PureScript_CST_Range_TokenList.wrap(v.open)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return tokensOf(dictTokensOf)(v.value);
          }))(v.close);
        }
      };
    };
    var tokensOfDataMembers = {
      tokensOf: function(v) {
        if (v instanceof PureScript_CST_Types.DataAll) {
          return PureScript_CST_Range_TokenList.singleton(v.value0);
        }
        ;
        if (v instanceof PureScript_CST_Types.DataEnumerated) {
          return tokensOf(tokensOfWrapped(tokensOfMaybe(tokensOfSeparated(tokensOfName))))(v.value0);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range (line 313, column 14 - line 317, column 17): " + [v.constructor.name]);
      }
    };
    var tokensOfExport = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.ExportValue) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportOp) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportType) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(tokensOf(tokensOfDataMembers))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportTypeOp) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfName)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportClass) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfName)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportKind) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfName)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportModule) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfName)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportError) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 287, column 14 - line 303, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfImport = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.ImportValue) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportOp) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportType) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(tokensOf(tokensOfDataMembers))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportTypeOp) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfName)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportClass) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfName)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportKind) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfName)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportError) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 372, column 14 - line 386, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfImportDecl = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return PureScript_CST_Range_TokenList.cons(v.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.module))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(PureScript_CST_Range_TokenList.singleton)(v2.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v3) {
                return tokensOf(tokensOfWrapped(tokensOfSeparated(tokensOfImport(dictTokensOf))))(v2.value1);
              }));
            })(v.names))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v2.value0))(tokensOf(tokensOfName)(v2.value1));
            })(v.qualified)));
          }));
        }
      };
    };
    var tokensOfOneOrDelimited = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.One) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.Many) {
            return tokensOf(tokensOfWrapped(tokensOfSeparated(dictTokensOf)))(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 130, column 14 - line 132, column 27): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfTypeVarBinding = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.TypeVarKinded) {
            return tokensOf(tokensOfWrapped(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf))))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeVarName) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 247, column 14 - line 251, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfType = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.TypeVar) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeConstructor) {
            return tokensOf(tokensOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeWildcard) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeHole) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeString) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeRow) {
            return tokensOf(tokensOfWrapped(tokensOfRow(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeRecord) {
            return tokensOf(tokensOfWrapped(tokensOfRow(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeForall) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfNonEmptyArray(tokensOfTypeVarBinding(dictTokensOf)))(v.value1))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value2))(tokensOf(tokensOfType(dictTokensOf))(v.value3)));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeKinded) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfType(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(tokensOf(tokensOfType(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeApp) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfType(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfNonEmptyArray(tokensOfType(dictTokensOf)))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeOp) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfType(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
                return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfQualifiedName)(v2.value0))(tokensOf(tokensOfType(dictTokensOf))(v2.value1));
              })(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeOpName) {
            return tokensOf(tokensOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeArrow) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfType(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(tokensOf(tokensOfType(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeArrowName) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeConstrained) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfType(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(tokensOf(tokensOfType(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeParens) {
            return tokensOf(tokensOfWrapped(tokensOfType(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeUnaryRow) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfType(dictTokensOf))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types["TypeError"]) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 188, column 14 - line 232, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfRow = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(tokensOf(tokensOfSeparated(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf)))))(v.labels))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v1) {
            return PureScript_CST_Range_TokenList.cons(v1.value0)(tokensOf(tokensOfType(dictTokensOf))(v1.value1));
          })(v.tail));
        }
      };
    };
    var tokensOfBinder = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.BinderWildcard) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderVar) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderNamed) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value1)(tokensOf(tokensOfBinder(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderConstructor) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfQualifiedName)(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfArray(tokensOfBinder(dictTokensOf)))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderBoolean) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderChar) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderString) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderInt) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(PureScript_CST_Range_TokenList.singleton)(v.value0))(PureScript_CST_Range_TokenList.singleton(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderNumber) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(PureScript_CST_Range_TokenList.singleton)(v.value0))(PureScript_CST_Range_TokenList.singleton(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderArray) {
            return tokensOf(tokensOfWrapped(tokensOfMaybe(tokensOfSeparated(tokensOfBinder(dictTokensOf)))))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderRecord) {
            return tokensOf(tokensOfWrapped(tokensOfMaybe(tokensOfSeparated(tokensOfRecordLabeled(tokensOfBinder(dictTokensOf))))))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderParens) {
            return tokensOf(tokensOfWrapped(tokensOfBinder(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderTyped) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfBinder(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value1)(tokensOf(tokensOfType(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderOp) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfBinder(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfNonEmptyArray(tokensOfTuple(tokensOfQualifiedName)(tokensOfBinder(dictTokensOf))))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderError) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 953, column 14 - line 983, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfDataCtor = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.name))(tokensOf(tokensOfArray(tokensOfType(dictTokensOf)))(v.fields));
        }
      };
    };
    var tokensOfForeign = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.ForeignValue) {
            return tokensOf(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ForeignData) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf)))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ForeignKind) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfName)(v.value1));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 653, column 14 - line 659, column 26): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfWhere = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v.expr))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
              return PureScript_CST_Range_TokenList.cons(v2.value0)(tokensOf(tokensOfNonEmptyArray(tokensOfLetBinding(dictTokensOf)))(v2.value1));
            })(v.bindings);
          }));
        }
      };
    };
    var tokensOfRecordUpdate = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.RecordUpdateLeaf) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(tokensOf(tokensOfExpr(dictTokensOf))(v.value2)));
          }
          ;
          if (v instanceof PureScript_CST_Types.RecordUpdateBranch) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0))(tokensOf(tokensOfWrapped(tokensOfSeparated(tokensOfRecordUpdate(dictTokensOf))))(v.value1));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 837, column 14 - line 841, column 32): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfPatternGuard = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v1) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfBinder(dictTokensOf))(v1.value0))(PureScript_CST_Range_TokenList.singleton(v1.value1));
          })(v.binder))(tokensOf(tokensOfExpr(dictTokensOf))(v.expr));
        }
      };
    };
    var tokensOfLetBinding = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.LetBindingSignature) {
            return tokensOf(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingName) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0.name))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfBinder(dictTokensOf)))(v.value0.binders))(tokensOf(tokensOfGuarded(dictTokensOf))(v.value0.guarded));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingPattern) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfBinder(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value1)(tokensOf(tokensOfWhere(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingError) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 885, column 14 - line 893, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfGuardedExpr = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return PureScript_CST_Range_TokenList.cons(v.bar)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfSeparated(tokensOfPatternGuard(dictTokensOf)))(v.patterns))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.separator))(tokensOf(tokensOfWhere(dictTokensOf))(v.where)));
          }));
        }
      };
    };
    var tokensOfGuarded = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.Unconditional) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfWhere(dictTokensOf))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.Guarded) {
            return tokensOf(tokensOfNonEmptyArray(tokensOfGuardedExpr(dictTokensOf)))(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 597, column 14 - line 601, column 18): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfExpr = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.ExprHole) {
            return tokensOf(tokensOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprSection) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprIdent) {
            return tokensOf(tokensOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprConstructor) {
            return tokensOf(tokensOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprBoolean) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprChar) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprString) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprInt) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprNumber) {
            return PureScript_CST_Range_TokenList.singleton(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprArray) {
            return tokensOf(tokensOfWrapped(tokensOfMaybe(tokensOfSeparated(tokensOfExpr(dictTokensOf)))))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecord) {
            return tokensOf(tokensOfWrapped(tokensOfMaybe(tokensOfSeparated(tokensOfRecordLabeled(tokensOfExpr(dictTokensOf))))))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprParens) {
            return tokensOf(tokensOfWrapped(tokensOfExpr(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprTyped) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value1)(tokensOf(tokensOfType(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprInfix) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfNonEmptyArray(tokensOfTuple(tokensOfWrapped(tokensOfExpr(dictTokensOf)))(tokensOfExpr(dictTokensOf))))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprOp) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfNonEmptyArray(tokensOfTuple(tokensOfQualifiedName)(tokensOfExpr(dictTokensOf))))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprOpName) {
            return tokensOf(tokensOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprNegate) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(tokensOf(tokensOfExpr(dictTokensOf))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v.value0.expr))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value0.dot)(tokensOf(tokensOfSeparated(tokensOfName))(v.value0.path));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfWrapped(tokensOfSeparated(tokensOfRecordUpdate(dictTokensOf))))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprApp) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfNonEmptyArray(tokensOfExpr(dictTokensOf)))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprLambda) {
            return PureScript_CST_Range_TokenList.cons(v.value0.symbol)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfNonEmptyArray(tokensOfBinder(dictTokensOf)))(v.value0.binders))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value0.arrow))(tokensOf(tokensOfExpr(dictTokensOf))(v.value0.body)));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprIf) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v.value0.cond))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value0.then))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfExpr(dictTokensOf))(v["value0"]["true"]))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v["value0"]["else"]))(tokensOf(tokensOfExpr(dictTokensOf))(v["value0"]["false"])))));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprCase) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfSeparated(tokensOfExpr(dictTokensOf)))(v.value0.head))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value0.of))(tokensOf(tokensOfNonEmptyArray(tokensOfTuple(tokensOfSeparated(tokensOfBinder(dictTokensOf)))(tokensOfGuarded(dictTokensOf))))(v.value0.branches)));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprLet) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfNonEmptyArray(tokensOfLetBinding(dictTokensOf)))(v.value0.bindings))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v["value0"]["in"]))(tokensOf(tokensOfExpr(dictTokensOf))(v.value0.body)));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprDo) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfNonEmptyArray(tokensOfDoStatement(dictTokensOf)))(v.value0.statements);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprAdo) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfDoStatement(dictTokensOf)))(v.value0.statements))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v["value0"]["in"]))(tokensOf(tokensOfExpr(dictTokensOf))(v.value0.result)));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprError) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 763, column 14 - line 834, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfDoStatement = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.DoLet) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfNonEmptyArray(tokensOfLetBinding(dictTokensOf)))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DoDiscard) {
            return tokensOf(tokensOfExpr(dictTokensOf))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.DoBind) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfBinder(dictTokensOf))(v.value0))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value1)(tokensOf(tokensOfExpr(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DoError) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 859, column 14 - line 867, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfInstanceBinding = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
            return tokensOf(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.InstanceBindingName) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0.name))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfBinder(dictTokensOf)))(v.value0.binders))(tokensOf(tokensOfGuarded(dictTokensOf))(v.value0.guarded)));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 671, column 14 - line 677, column 28): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfInstance = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return PureScript_CST_Range_TokenList.cons(v.head.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v2.value0))(PureScript_CST_Range_TokenList.singleton(v2.value1));
            })(v.head.name))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfOneOrDelimited(tokensOfType(dictTokensOf)))(v2.value0))(PureScript_CST_Range_TokenList.singleton(v2.value1));
            })(v.head.constraints))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfQualifiedName)(v.head.className))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfType(dictTokensOf)))(v.head.types))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
              return PureScript_CST_Range_TokenList.cons(v2.value0)(tokensOf(tokensOfNonEmptyArray(tokensOfInstanceBinding(dictTokensOf)))(v2.value1));
            })(v.body)))));
          }));
        }
      };
    };
    var tokensOfDecl = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          if (v instanceof PureScript_CST_Types.DeclData) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0.name))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfTypeVarBinding(dictTokensOf)))(v.value0.vars))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
                return PureScript_CST_Range_TokenList.cons(v2.value0)(tokensOf(tokensOfSeparated(tokensOfDataCtor(dictTokensOf)))(v2.value1));
              })(v.value1)));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclType) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0.name))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfTypeVarBinding(dictTokensOf)))(v.value0.vars))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(tokensOf(tokensOfType(dictTokensOf))(v.value2))));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclNewtype) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0.name))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfTypeVarBinding(dictTokensOf)))(v.value0.vars))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value2))(tokensOf(tokensOfType(dictTokensOf))(v.value3)))));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclClass) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
                return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfOneOrDelimited(tokensOfType(dictTokensOf)))(v2.value0))(PureScript_CST_Range_TokenList.singleton(v2.value1));
              })(v["value0"]["super"]))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0.name))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfTypeVarBinding(dictTokensOf)))(v.value0.vars))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
                return PureScript_CST_Range_TokenList.cons(v2.value0)(tokensOf(tokensOfSeparated(tokensOfClassFundep))(v2.value1));
              })(v.value0.fundeps))(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
                return PureScript_CST_Range_TokenList.cons(v2.value0)(tokensOf(tokensOfNonEmptyArray(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf))))(v2.value1));
              })(v.value1)))));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
            return tokensOf(tokensOfSeparated(tokensOfInstance(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclDerive) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(PureScript_CST_Range_TokenList.singleton)(v.value1))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value2.keyword))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
                return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v2.value0))(PureScript_CST_Range_TokenList.singleton(v2.value1));
              })(v.value2.name))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
                return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfOneOrDelimited(tokensOfType(dictTokensOf)))(v2.value0))(PureScript_CST_Range_TokenList.singleton(v2.value1));
              })(v.value2.constraints))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfQualifiedName)(v.value2.className))(tokensOf(tokensOfArray(tokensOfType(dictTokensOf)))(v.value2.types))))));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclKindSignature) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return tokensOf(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf)))(v.value1);
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclSignature) {
            return tokensOf(tokensOfLabeled(tokensOfName)(tokensOfType(dictTokensOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclValue) {
            return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value0.name))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfArray(tokensOfBinder(dictTokensOf)))(v.value0.binders))(tokensOf(tokensOfGuarded(dictTokensOf))(v.value0.guarded));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclFixity) {
            return PureScript_CST_Range_TokenList.cons(v.value0.keyword.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value0.prec.value0)(tokensOf(tokensOfFixityOp)(v.value0.operator));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclForeign) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return PureScript_CST_Range_TokenList.cons(v.value1)(tokensOf(tokensOfForeign(dictTokensOf))(v.value2));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclRole) {
            return PureScript_CST_Range_TokenList.cons(v.value0)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
              return Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.value1))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.value2))(Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(PureScript_CST_Range_TokenList.monoidTokenList)(function(v2) {
                return PureScript_CST_Range_TokenList.singleton(v2.value0);
              })(v.value3)));
            }));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclError) {
            return tokensOf(dictTokensOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 484, column 14 - line 540, column 17): " + [v.constructor.name]);
        }
      };
    };
    var tokensOfModule = function(dictTokensOf) {
      return {
        tokensOf: function(v) {
          return PureScript_CST_Range_TokenList.cons(v.header.keyword)(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(tokensOf(tokensOfName)(v.header.name))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(PureScript_CST_Range_TokenList.monoidTokenList)(tokensOf(tokensOfWrapped(tokensOfSeparated(tokensOfExport(dictTokensOf)))))(v.header.exports);
          }))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(PureScript_CST_Range_TokenList.singleton(v.header.where))(Data_Semigroup.append(PureScript_CST_Range_TokenList.semigroupTokenList)(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return Data_Foldable.foldMap(Data_Foldable.foldableArray)(PureScript_CST_Range_TokenList.monoidTokenList)(tokensOf(tokensOfImportDecl(dictTokensOf)))(v.header.imports);
          }))(Control_Lazy.defer(PureScript_CST_Range_TokenList.lazyTokenList)(function(v1) {
            return Data_Foldable.foldMap(Data_Foldable.foldableArray)(PureScript_CST_Range_TokenList.monoidTokenList)(tokensOf(tokensOfDecl(dictTokensOf)))(v.body.decls);
          }))))));
        }
      };
    };
    var rangeOfWrapped = {
      rangeOf: function(v) {
        return {
          start: v.open.range.start,
          end: v.close.range.end
        };
      }
    };
    var rangeOfVoid = {
      rangeOf: Data_Void.absurd
    };
    var rangeOfRecoveredError = {
      rangeOf: function(v) {
        var v1 = Data_Array_NonEmpty.fromArray(v.tokens);
        if (v1 instanceof Data_Maybe.Just) {
          return {
            start: Data_Array_NonEmpty.head(v1.value0).range.start,
            end: Data_Array_NonEmpty.last(v1.value0).range.end
          };
        }
        ;
        if (v1 instanceof Data_Maybe.Nothing) {
          return {
            start: v.position,
            end: v.position
          };
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range (line 49, column 5 - line 57, column 10): " + [v1.constructor.name]);
      }
    };
    var rangeOfQualifiedName = {
      rangeOf: function(v) {
        return v.token.range;
      }
    };
    var rangeOfName = {
      rangeOf: function(v) {
        return v.token.range;
      }
    };
    var rangeOfModule = {
      rangeOf: function(v) {
        return {
          start: v.header.keyword.range.start,
          end: v.body.end
        };
      }
    };
    var rangeOf = function(dict) {
      return dict.rangeOf;
    };
    var rangeOfClassFundep = {
      rangeOf: function(v) {
        if (v instanceof PureScript_CST_Types.FundepDetermined) {
          return {
            start: v.value0.range.start,
            end: rangeOf(rangeOfName)(Data_Array_NonEmpty.last(v.value1)).end
          };
        }
        ;
        if (v instanceof PureScript_CST_Types.FundepDetermines) {
          return {
            start: rangeOf(rangeOfName)(Data_Array_NonEmpty.head(v.value0)).start,
            end: rangeOf(rangeOfName)(Data_Array_NonEmpty.last(v.value2)).end
          };
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range (line 543, column 13 - line 551, column 8): " + [v.constructor.name]);
      }
    };
    var rangeOfDataMembers = {
      rangeOf: function(v) {
        if (v instanceof PureScript_CST_Types.DataAll) {
          return v.value0.range;
        }
        ;
        if (v instanceof PureScript_CST_Types.DataEnumerated) {
          return rangeOf(rangeOfWrapped)(v.value0);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range (line 306, column 13 - line 310, column 16): " + [v.constructor.name]);
      }
    };
    var rangeOfExport = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.ExportValue) {
            return rangeOf(rangeOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportOp) {
            return rangeOf(rangeOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportType) {
            if (v.value1 instanceof Data_Maybe.Nothing) {
              return rangeOf(rangeOfName)(v.value0);
            }
            ;
            if (v.value1 instanceof Data_Maybe.Just) {
              return {
                start: rangeOf(rangeOfName)(v.value0).start,
                end: rangeOf(rangeOfDataMembers)(v.value1.value0).end
              };
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range (line 260, column 7 - line 266, column 12): " + [v.value1.constructor.name]);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportTypeOp) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfName)(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportClass) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfName)(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportKind) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfName)(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportModule) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfName)(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExportError) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 254, column 13 - line 284, column 16): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfFixityOp = {
      rangeOf: function(v) {
        if (v instanceof PureScript_CST_Types.FixityValue) {
          return {
            start: rangeOf(rangeOfQualifiedName)(v.value0).start,
            end: rangeOf(rangeOfName)(v.value2).end
          };
        }
        ;
        if (v instanceof PureScript_CST_Types.FixityType) {
          return {
            start: v.value0.range.start,
            end: rangeOf(rangeOfName)(v.value3).end
          };
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range (line 622, column 13 - line 630, column 8): " + [v.constructor.name]);
      }
    };
    var rangeOfImport = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.ImportValue) {
            return rangeOf(rangeOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportOp) {
            return rangeOf(rangeOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportType) {
            if (v.value1 instanceof Data_Maybe.Nothing) {
              return rangeOf(rangeOfName)(v.value0);
            }
            ;
            if (v.value1 instanceof Data_Maybe.Just) {
              return {
                start: rangeOf(rangeOfName)(v.value0).start,
                end: rangeOf(rangeOfDataMembers)(v.value1.value0).end
              };
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range (line 349, column 7 - line 355, column 12): " + [v.value1.constructor.name]);
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportTypeOp) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfName)(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportClass) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfName)(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportKind) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfName)(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ImportError) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 343, column 13 - line 369, column 16): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfImportDecl = {
      rangeOf: function(v) {
        var v1 = function() {
          if (v.qualified instanceof Data_Maybe.Nothing) {
            if (v.names instanceof Data_Maybe.Nothing) {
              return rangeOf(rangeOfName)(v.module);
            }
            ;
            if (v.names instanceof Data_Maybe.Just) {
              return rangeOf(rangeOfWrapped)(v.names.value0.value1);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range (line 324, column 11 - line 328, column 30): " + [v.names.constructor.name]);
          }
          ;
          if (v.qualified instanceof Data_Maybe.Just) {
            return rangeOf(rangeOfName)(v.qualified.value0.value1);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 322, column 17 - line 330, column 20): " + [v.qualified.constructor.name]);
        }();
        return {
          start: v.keyword.range.start,
          end: v1.end
        };
      }
    };
    var rangeOfLabeled = function(dictRangeOf) {
      return function(dictRangeOf1) {
        return {
          rangeOf: function(v) {
            return {
              start: rangeOf(dictRangeOf)(v.label).start,
              end: rangeOf(dictRangeOf1)(v.value).end
            };
          }
        };
      };
    };
    var rangeOfOneOrDelimited = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.One) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.Many) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 125, column 13 - line 127, column 26): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfSeparated = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          var v1 = Data_Array.last(v.tail);
          if (v1 instanceof Data_Maybe.Just) {
            return {
              start: rangeOf(dictRangeOf)(v.head).start,
              end: rangeOf(dictRangeOf)(v1.value0.value1).end
            };
          }
          ;
          if (v1 instanceof Data_Maybe.Nothing) {
            return rangeOf(dictRangeOf)(v.head);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 101, column 5 - line 107, column 21): " + [v1.constructor.name]);
        }
      };
    };
    var rangeOfType = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.TypeVar) {
            return rangeOf(rangeOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeConstructor) {
            return rangeOf(rangeOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeWildcard) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeHole) {
            return rangeOf(rangeOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeString) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeRow) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeRecord) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeForall) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value3).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeKinded) {
            return {
              start: rangeOf(rangeOfType(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeApp) {
            return {
              start: rangeOf(rangeOfType(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfType(dictRangeOf))(Data_Array_NonEmpty.last(v.value1)).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeOp) {
            return {
              start: rangeOf(rangeOfType(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfType(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value1))).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeOpName) {
            return rangeOf(rangeOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeArrow) {
            return {
              start: rangeOf(rangeOfType(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeArrowName) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeConstrained) {
            return {
              start: rangeOf(rangeOfType(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeParens) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeUnaryRow) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types["TypeError"]) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 135, column 13 - line 185, column 16): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfBinder = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.BinderWildcard) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderVar) {
            return rangeOf(rangeOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderNamed) {
            return {
              start: rangeOf(rangeOfName)(v.value0).start,
              end: rangeOf(rangeOfBinder(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderConstructor) {
            var v1 = Data_Array.last(v.value1);
            if (v1 instanceof Data_Maybe.Nothing) {
              return rangeOf(rangeOfQualifiedName)(v.value0);
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return {
                start: rangeOf(rangeOfQualifiedName)(v.value0).start,
                end: rangeOf(rangeOfBinder(dictRangeOf))(v1.value0).end
              };
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range (line 906, column 7 - line 912, column 12): " + [v1.constructor.name]);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderBoolean) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderChar) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderString) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderInt) {
            if (v.value0 instanceof Data_Maybe.Nothing) {
              return v.value1.range;
            }
            ;
            if (v.value0 instanceof Data_Maybe.Just) {
              return {
                start: v.value0.value0.range.start,
                end: v.value1.range.end
              };
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range (line 920, column 7 - line 926, column 12): " + [v.value0.constructor.name]);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderNumber) {
            if (v.value0 instanceof Data_Maybe.Nothing) {
              return v.value1.range;
            }
            ;
            if (v.value0 instanceof Data_Maybe.Just) {
              return {
                start: v.value0.value0.range.start,
                end: v.value1.range.end
              };
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range (line 928, column 7 - line 934, column 12): " + [v.value0.constructor.name]);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderArray) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderRecord) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderParens) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderTyped) {
            return {
              start: rangeOf(rangeOfBinder(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderOp) {
            return {
              start: rangeOf(rangeOfBinder(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfBinder(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value1))).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderError) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 896, column 13 - line 950, column 16): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfDataCtor = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          var v1 = function() {
            var v2 = Data_Array.last(v.fields);
            if (v2 instanceof Data_Maybe.Nothing) {
              return rangeOf(rangeOfName)(v.name);
            }
            ;
            if (v2 instanceof Data_Maybe.Just) {
              return rangeOf(rangeOfType(dictRangeOf))(v2.value0);
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range (line 391, column 17 - line 395, column 21): " + [v2.constructor.name]);
          }();
          return {
            start: rangeOf(rangeOfName)(v.name).start,
            end: v1.end
          };
        }
      };
    };
    var rangeOfForeign = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.ForeignValue) {
            return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ForeignData) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ForeignKind) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfName)(v.value1).end
            };
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 640, column 13 - line 650, column 8): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfTypeVarBinding = {
      rangeOf: function(v) {
        if (v instanceof PureScript_CST_Types.TypeVarKinded) {
          return rangeOf(rangeOfWrapped)(v.value0);
        }
        ;
        if (v instanceof PureScript_CST_Types.TypeVarName) {
          return rangeOf(rangeOfName)(v.value0);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Range (line 240, column 13 - line 244, column 16): " + [v.constructor.name]);
      }
    };
    var rangeOfWhere = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v.bindings instanceof Data_Maybe.Nothing) {
            return rangeOf(rangeOfExpr(dictRangeOf))(v.expr);
          }
          ;
          if (v.bindings instanceof Data_Maybe.Just) {
            return {
              start: rangeOf(rangeOfExpr(dictRangeOf))(v.expr).start,
              end: rangeOf(rangeOfLetBinding(dictRangeOf))(Data_Array_NonEmpty.last(v.bindings.value0.value1)).end
            };
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 993, column 40 - line 999, column 8): " + [v.bindings.constructor.name]);
        }
      };
    };
    var rangeOfLetBinding = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.LetBindingSignature) {
            return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingName) {
            return {
              start: rangeOf(rangeOfName)(v.value0.name).start,
              end: rangeOf(rangeOfGuarded(dictRangeOf))(v.value0.guarded).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingPattern) {
            return {
              start: rangeOf(rangeOfBinder(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfWhere(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingError) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 870, column 13 - line 882, column 16): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfGuardedExpr = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          return {
            start: v.bar.range.start,
            end: rangeOf(rangeOfWhere(dictRangeOf))(v.where).end
          };
        }
      };
    };
    var rangeOfGuarded = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.Unconditional) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfWhere(dictRangeOf))(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.Guarded) {
            return {
              start: rangeOf(rangeOfGuardedExpr(dictRangeOf))(Data_Array_NonEmpty.head(v.value0)).start,
              end: rangeOf(rangeOfGuardedExpr(dictRangeOf))(Data_Array_NonEmpty.last(v.value0)).end
            };
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 586, column 13 - line 594, column 8): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfExpr = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.ExprHole) {
            return rangeOf(rangeOfName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprSection) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprIdent) {
            return rangeOf(rangeOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprConstructor) {
            return rangeOf(rangeOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprBoolean) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprChar) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprString) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprInt) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprNumber) {
            return v.value0.range;
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprArray) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecord) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprParens) {
            return rangeOf(rangeOfWrapped)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprTyped) {
            return {
              start: rangeOf(rangeOfExpr(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprInfix) {
            return {
              start: rangeOf(rangeOfExpr(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value1))).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprOp) {
            return {
              start: rangeOf(rangeOfExpr(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value1))).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprOpName) {
            return rangeOf(rangeOfQualifiedName)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprNegate) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
            return {
              start: rangeOf(rangeOfExpr(dictRangeOf))(v.value0.expr).start,
              end: rangeOf(rangeOfSeparated(rangeOfName))(v.value0.path).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
            return {
              start: rangeOf(rangeOfExpr(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfWrapped)(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprApp) {
            return {
              start: rangeOf(rangeOfExpr(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(Data_Array_NonEmpty.last(v.value1)).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprLambda) {
            return {
              start: v.value0.symbol.range.start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(v.value0.body).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprIf) {
            return {
              start: v.value0.keyword.range.start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(v["value0"]["false"]).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprCase) {
            return {
              start: v.value0.keyword.range.start,
              end: rangeOf(rangeOfGuarded(dictRangeOf))(Data_Tuple.snd(Data_Array_NonEmpty.last(v.value0.branches))).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprLet) {
            return {
              start: v.value0.keyword.range.start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(v.value0.body).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprDo) {
            return {
              start: v.value0.keyword.range.start,
              end: rangeOf(rangeOfDoStatement(dictRangeOf))(Data_Array_NonEmpty.last(v.value0.statements)).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprAdo) {
            return {
              start: v.value0.keyword.range.start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(v.value0.result).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprError) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 680, column 13 - line 760, column 16): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfDoStatement = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.DoLet) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfLetBinding(dictRangeOf))(Data_Array_NonEmpty.last(v.value1)).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DoDiscard) {
            return rangeOf(rangeOfExpr(dictRangeOf))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.DoBind) {
            return {
              start: rangeOf(rangeOfBinder(dictRangeOf))(v.value0).start,
              end: rangeOf(rangeOfExpr(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DoError) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 844, column 13 - line 856, column 16): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfInstanceBinding = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
            return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.InstanceBindingName) {
            return {
              start: rangeOf(rangeOfName)(v.value0.name).start,
              end: rangeOf(rangeOfGuarded(dictRangeOf))(v.value0.guarded).end
            };
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 662, column 13 - line 668, column 8): " + [v.constructor.name]);
        }
      };
    };
    var rangeOfInstance = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          var v1 = function() {
            if (v.body instanceof Data_Maybe.Nothing) {
              var v2 = Data_Array.last(v.head.types);
              if (v2 instanceof Data_Maybe.Nothing) {
                return rangeOf(rangeOfQualifiedName)(v.head.className);
              }
              ;
              if (v2 instanceof Data_Maybe.Just) {
                return rangeOf(rangeOfType(dictRangeOf))(v2.value0);
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Range (line 565, column 11 - line 569, column 25): " + [v2.constructor.name]);
            }
            ;
            if (v.body instanceof Data_Maybe.Just) {
              return rangeOf(rangeOfInstanceBinding(dictRangeOf))(Data_Array_NonEmpty.last(v.body.value0.value1));
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Range (line 563, column 17 - line 571, column 42): " + [v.body.constructor.name]);
          }();
          return {
            start: v.head.keyword.range.start,
            end: v1.end
          };
        }
      };
    };
    var rangeOfDecl = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          if (v instanceof PureScript_CST_Types.DeclData) {
            var v1 = function() {
              if (v.value1 instanceof Data_Maybe.Nothing) {
                var v2 = Data_Array.last(v.value0.vars);
                if (v2 instanceof Data_Maybe.Nothing) {
                  return rangeOf(rangeOfName)(v.value0.name);
                }
                ;
                if (v2 instanceof Data_Maybe.Just) {
                  return rangeOf(rangeOfTypeVarBinding)(v2.value0);
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Range (line 410, column 13 - line 414, column 28): " + [v2.constructor.name]);
              }
              ;
              if (v.value1 instanceof Data_Maybe.Just) {
                return rangeOf(rangeOfDataCtor(dictRangeOf))(Data_Maybe.maybe(v.value1.value0.value1.head)(Data_Tuple.snd)(Data_Array.last(v.value1.value0.value1.tail)));
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Range (line 408, column 19 - line 416, column 55): " + [v.value1.constructor.name]);
            }();
            return {
              start: v.value0.keyword.range.start,
              end: v1.end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclType) {
            return {
              start: v.value0.keyword.range.start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclNewtype) {
            return {
              start: v.value0.keyword.range.start,
              end: rangeOf(rangeOfType(dictRangeOf))(v.value3).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclClass) {
            var v1 = function() {
              if (v.value1 instanceof Data_Maybe.Nothing) {
                if (v.value0.fundeps instanceof Data_Maybe.Nothing) {
                  var v2 = Data_Array.last(v.value0.vars);
                  if (v2 instanceof Data_Maybe.Nothing) {
                    return rangeOf(rangeOfName)(v.value0.name);
                  }
                  ;
                  if (v2 instanceof Data_Maybe.Just) {
                    return rangeOf(rangeOfTypeVarBinding)(v2.value0);
                  }
                  ;
                  throw new Error("Failed pattern match at PureScript.CST.Range (line 434, column 17 - line 438, column 32): " + [v2.constructor.name]);
                }
                ;
                if (v.value0.fundeps instanceof Data_Maybe.Just) {
                  return rangeOf(rangeOfSeparated(rangeOfClassFundep))(v.value0.fundeps.value0.value1);
                }
                ;
                throw new Error("Failed pattern match at PureScript.CST.Range (line 432, column 13 - line 440, column 32): " + [v.value0.fundeps.constructor.name]);
              }
              ;
              if (v.value1 instanceof Data_Maybe.Just) {
                return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(Data_Array_NonEmpty.last(v.value1.value0.value1));
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Range (line 430, column 19 - line 442, column 44): " + [v.value1.constructor.name]);
            }();
            return {
              start: v.value0.keyword.range.start,
              end: v1.end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
            return rangeOf(rangeOfSeparated(rangeOfInstance(dictRangeOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclDerive) {
            var v1 = function() {
              var v2 = Data_Array.last(v.value2.types);
              if (v2 instanceof Data_Maybe.Nothing) {
                return rangeOf(rangeOfQualifiedName)(v.value2.className);
              }
              ;
              if (v2 instanceof Data_Maybe.Just) {
                return rangeOf(rangeOfType(dictRangeOf))(v2.value0);
              }
              ;
              throw new Error("Failed pattern match at PureScript.CST.Range (line 450, column 19 - line 454, column 23): " + [v2.constructor.name]);
            }();
            return {
              start: v.value0.range.start,
              end: v1.end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclKindSignature) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value1).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclSignature) {
            return rangeOf(rangeOfLabeled(rangeOfName)(rangeOfType(dictRangeOf)))(v.value0);
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclValue) {
            return {
              start: rangeOf(rangeOfName)(v.value0.name).start,
              end: rangeOf(rangeOfGuarded(dictRangeOf))(v.value0.guarded).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclFixity) {
            return {
              start: v.value0.keyword.value0.range.start,
              end: rangeOf(rangeOfFixityOp)(v.value0.operator).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclForeign) {
            return {
              start: v.value0.range.start,
              end: rangeOf(rangeOfForeign(dictRangeOf))(v.value2).end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclRole) {
            return {
              start: v.value0.range.start,
              end: Data_Tuple.fst(Data_Array_NonEmpty.last(v.value3)).range.end
            };
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclError) {
            return rangeOf(dictRangeOf)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Range (line 405, column 13 - line 481, column 16): " + [v.constructor.name]);
        }
      };
    };
    module2.exports = {
      rangeOf,
      tokensOf,
      tokensOfTuple,
      tokensOfMaybe,
      tokensOfArray,
      tokensOfNonEmptyArray,
      rangeOfVoid,
      tokensOfVoid,
      rangeOfRecoveredError,
      tokensOfRecoveredError,
      rangeOfModule,
      tokensOfModule,
      rangeOfName,
      tokensOfName,
      rangeOfQualifiedName,
      tokensOfQualifiedName,
      rangeOfWrapped,
      tokensOfWrapped,
      rangeOfSeparated,
      tokensOfSeparated,
      rangeOfLabeled,
      tokensOfLabeled,
      rangeOfOneOrDelimited,
      tokensOfOneOrDelimited,
      rangeOfType,
      tokensOfType,
      tokensOfRow,
      rangeOfTypeVarBinding,
      tokensOfTypeVarBinding,
      rangeOfExport,
      tokensOfExport,
      rangeOfDataMembers,
      tokensOfDataMembers,
      rangeOfImportDecl,
      tokensOfImportDecl,
      rangeOfImport,
      tokensOfImport,
      rangeOfDataCtor,
      tokensOfDataCtor,
      rangeOfDecl,
      tokensOfDecl,
      rangeOfClassFundep,
      tokensOfClassFundep,
      rangeOfInstance,
      tokensOfInstance,
      rangeOfGuarded,
      tokensOfGuarded,
      rangeOfGuardedExpr,
      tokensOfGuardedExpr,
      tokensOfPatternGuard,
      rangeOfFixityOp,
      tokensOfFixityOp,
      rangeOfForeign,
      tokensOfForeign,
      rangeOfInstanceBinding,
      tokensOfInstanceBinding,
      rangeOfExpr,
      tokensOfExpr,
      tokensOfRecordUpdate,
      rangeOfDoStatement,
      tokensOfDoStatement,
      rangeOfLetBinding,
      tokensOfLetBinding,
      rangeOfBinder,
      tokensOfBinder,
      tokensOfRecordLabeled,
      rangeOfWhere,
      tokensOfWhere
    };
  }
});

// output/PureScript.CST/index.js
var require_PureScript = __commonJS({
  "output/PureScript.CST/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Boolean = require_Data();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Lazy = require_Data40();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Tuple = require_Data22();
    var PureScript_CST_Lexer = require_PureScript_CST6();
    var PureScript_CST_Parser = require_PureScript_CST7();
    var PureScript_CST_Parser_Monad = require_PureScript_CST_Parser();
    var PureScript_CST_Print = require_PureScript_CST2();
    var PureScript_CST_Range = require_PureScript_CST8();
    var PureScript_CST_Range_TokenList = require_PureScript_CST_Range();
    var Unsafe_Coerce = require_Unsafe();
    var ParseSucceeded = function() {
      function ParseSucceeded2(value0) {
        this.value0 = value0;
      }
      ;
      ParseSucceeded2.create = function(value0) {
        return new ParseSucceeded2(value0);
      };
      return ParseSucceeded2;
    }();
    var ParseSucceededWithErrors = function() {
      function ParseSucceededWithErrors2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ParseSucceededWithErrors2.create = function(value0) {
        return function(value1) {
          return new ParseSucceededWithErrors2(value0, value1);
        };
      };
      return ParseSucceededWithErrors2;
    }();
    var ParseFailed = function() {
      function ParseFailed2(value0) {
        this.value0 = value0;
      }
      ;
      ParseFailed2.create = function(value0) {
        return new ParseFailed2(value0);
      };
      return ParseFailed2;
    }();
    var PartialModule = function(x) {
      return x;
    };
    var toRecoveredParserResult = function(v) {
      var v1 = function(v2) {
        if (v instanceof Data_Either.Right && Data_Boolean.otherwise) {
          return new ParseSucceeded(v.value0.value0);
        }
        ;
        if (v instanceof Data_Either.Left) {
          return new ParseFailed(v.value0);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST (line 41, column 1 - line 44, column 29): " + [v.constructor.name]);
      };
      if (v instanceof Data_Either.Right) {
        var $12 = Data_Array_NonEmpty.fromArray(v.value0.value1);
        if ($12 instanceof Data_Maybe.Just) {
          return new ParseSucceededWithErrors(v.value0.value0, $12.value0);
        }
        ;
        return v1(true);
      }
      ;
      return v1(true);
    };
    var toRecovered = Unsafe_Coerce.unsafeCoerce;
    var runRecoveredParser = function(p) {
      var $24 = Data_Function.flip(PureScript_CST_Parser_Monad.runParser)(p);
      return function($25) {
        return toRecoveredParserResult($24(PureScript_CST_Lexer.lex($25)));
      };
    };
    var printModule = function(dictTokensOf) {
      return function(mod) {
        return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(PureScript_CST_Print.printSourceToken)(PureScript_CST_Range_TokenList.toArray(PureScript_CST_Range.tokensOf(PureScript_CST_Range.tokensOfModule(dictTokensOf))(mod))) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(PureScript_CST_Print.printComment(PureScript_CST_Print.printLineFeed))(Data_Newtype.unwrap()(Data_Newtype.unwrap()(mod).body).trailingComments);
      };
    };
    var parseType = runRecoveredParser(PureScript_CST_Parser.parseType);
    var parsePartialModule = function(src) {
      return toRecoveredParserResult(function() {
        var v = PureScript_CST_Parser_Monad["runParser'"](PureScript_CST_Parser_Monad.initialParserState(PureScript_CST_Lexer.lex(src)))(PureScript_CST_Parser.parseModuleHeader);
        if (v instanceof PureScript_CST_Parser_Monad.ParseSucc) {
          var res = {
            header: v.value0,
            full: Data_Lazy.defer(function(v1) {
              return toRecoveredParserResult(PureScript_CST_Parser_Monad.fromParserResult(PureScript_CST_Parser_Monad["runParser'"](v.value1)(Control_Bind.bind(PureScript_CST_Parser_Monad.bindParser)(PureScript_CST_Parser.parseModuleBody)(function(body) {
                return Control_Applicative.pure(PureScript_CST_Parser_Monad.applicativeParser)({
                  header: v.value0,
                  body
                });
              }))));
            })
          };
          return Data_Either.Right.create(new Data_Tuple.Tuple(res, v.value1.errors));
        }
        ;
        if (v instanceof PureScript_CST_Parser_Monad.ParseFail) {
          return new Data_Either.Left({
            error: v.value0,
            position: v.value1
          });
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST (line 85, column 29 - line 97, column 31): " + [v.constructor.name]);
      }());
    };
    var parseModule = runRecoveredParser(PureScript_CST_Parser.parseModule);
    var parseImportDecl = runRecoveredParser(PureScript_CST_Parser.parseImportDecl);
    var parseExpr = runRecoveredParser(PureScript_CST_Parser.parseExpr);
    var parseDecl = runRecoveredParser(PureScript_CST_Parser.parseDecl);
    var parseBinder = runRecoveredParser(PureScript_CST_Parser.parseBinder);
    module2.exports = {
      ParseSucceeded,
      ParseSucceededWithErrors,
      ParseFailed,
      PartialModule,
      parseModule,
      parsePartialModule,
      parseImportDecl,
      parseDecl,
      parseExpr,
      parseType,
      parseBinder,
      printModule,
      toRecovered
    };
  }
});

// output/LanguageServer.IdePurescript.Util/index.js
var require_LanguageServer_IdePurescript7 = __commonJS({
  "output/LanguageServer.IdePurescript.Util/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Show = require_Data14();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Exception = require_Effect2();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var PureScript_CST = require_PureScript();
    var PureScript_CST_Range = require_PureScript_CST8();
    var maybeParseResult = function($$default) {
      return function(f) {
        return function(v) {
          if (v instanceof PureScript_CST.ParseSucceeded) {
            return f(PureScript_CST_Range.rangeOfVoid)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST.ParseSucceededWithErrors) {
            return f(PureScript_CST_Range.rangeOfRecoveredError)(v.value0);
          }
          ;
          if (v instanceof PureScript_CST.ParseFailed) {
            return $$default;
          }
          ;
          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Util (line 23, column 3 - line 26, column 32): " + [v.constructor.name]);
        };
      };
    };
    var launchAffLog = function(notify) {
      return Effect_Aff.runAff(Data_Either.either(function() {
        var $6 = notify(IdePurescript_PscIdeServer["Error"].value);
        var $7 = Data_Show.show(Effect_Exception.showError);
        return function($8) {
          return $6($7($8));
        };
      }())(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
    };
    module2.exports = {
      launchAffLog,
      maybeParseResult
    };
  }
});

// output/LanguageServer.IdePurescript.Build/index.js
var require_LanguageServer_IdePurescript8 = __commonJS({
  "output/LanguageServer.IdePurescript.Build/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign87();
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Effect_Exception = require_Effect2();
    var Effect_Ref = require_Effect3();
    var Foreign_Object = require_Foreign3();
    var IdePurescript_Build = require_IdePurescript9();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var LanguageServer_IdePurescript_Server = require_LanguageServer_IdePurescript5();
    var LanguageServer_IdePurescript_Types = require_LanguageServer_IdePurescript6();
    var LanguageServer_IdePurescript_Util = require_LanguageServer_IdePurescript7();
    var LanguageServer_Protocol_Handlers = require_LanguageServer_Protocol2();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var LanguageServer_Protocol_Uri = require_LanguageServer_Protocol6();
    var Node_Path = require_Node();
    var positionToRange = function(v) {
      return {
        start: {
          line: v.startLine - 1 | 0,
          character: v.startColumn - 1 | 0
        },
        end: {
          line: v.endLine - 1 | 0,
          character: v.endColumn - 1 | 0
        }
      };
    };
    var emptyDiagnostics = {
      pscErrors: [],
      diagnostics: Foreign_Object.empty
    };
    var collectByFirst = function(x) {
      var f = function(v) {
        if (v.value0 instanceof Data_Maybe.Just) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, [v.value1]));
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      return Foreign_Object.fromFoldableWith(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(Data_Array.mapMaybe(f)(x));
    };
    var censorWarnings = function(settings) {
      var getCode = function(v) {
        return v.errorCode;
      };
      var codes = LanguageServer_IdePurescript_Config.censorCodes(settings);
      return Data_Array.filter(function() {
        var $75 = Data_Function.flip(Data_Array.notElem(Data_Eq.eqString))(codes);
        return function($76) {
          return $75(getCode($76));
        };
      }());
    };
    var convertDiagnostics = function(projectRoot) {
      return function(settings) {
        return function(v) {
          var warnings$prime = censorWarnings(settings)(v.warnings);
          var dummyRange = {
            start: {
              line: 1,
              character: 1
            },
            end: {
              line: 1,
              character: 1
            }
          };
          var convertDiagnostic = function(isError) {
            return function(v1) {
              return function __do() {
                var resolvedFile = Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(Node_Path.resolve([projectRoot]))(v1.filename)();
                return new Data_Tuple.Tuple(resolvedFile, {
                  range: Data_Maybe.maybe(dummyRange)(positionToRange)(v1.position),
                  severity: Data_Nullable.toNullable(Data_Maybe.Just.create(function() {
                    if (isError) {
                      return 1;
                    }
                    ;
                    return 2;
                  }())),
                  code: Data_Nullable.toNullable(Data_Maybe.Just.create(v1.errorCode)),
                  source: Data_Nullable.toNullable(new Data_Maybe.Just("PureScript")),
                  message: v1.message
                });
              };
            };
          };
          var allDiagnostics = Data_Semigroup.append(Effect.semigroupEffect(Data_Semigroup.semigroupArray))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertDiagnostic(true))(v.errors))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertDiagnostic(false))(warnings$prime));
          var diagnostics = function __do() {
            var diags = allDiagnostics();
            return collectByFirst(diags);
          };
          return Data_Functor.mapFlipped(Effect.functorEffect)(diagnostics)(function(v1) {
            return {
              diagnostics: v1,
              pscErrors: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.errors)(warnings$prime)
            };
          });
        };
      };
    };
    var fullBuild = function(logCb) {
      return function(v) {
        return function(settings) {
          return function(state) {
            return function(v1) {
              var command = $foreign.parseShellQuote(LanguageServer_IdePurescript_Config.buildCommand(settings));
              var v2 = Data_Array.uncons(command);
              if (state.root instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Build.build(logCb)({
                  command: new IdePurescript_Build.Command(v2.value0.head, v2.value0.tail),
                  directory: state.root.value0,
                  useNpmDir: LanguageServer_IdePurescript_Config.addNpmPath(settings)
                }))(Data_Either.either(function() {
                  var $77 = Control_Applicative.pure(Effect_Aff.applicativeAff);
                  return function($78) {
                    return $77(Data_Either.Left.create($78));
                  };
                }())(function(v4) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(IdePurescript_PscIdeServer.Info.value)("Build complete")))(function() {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(function() {
                      if (state.port instanceof Data_Maybe.Nothing) {
                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(IdePurescript_PscIdeServer["Error"].value)("Couldn't reload modules, no ide server port"));
                      }
                      ;
                      if (state.port instanceof Data_Maybe.Just) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(LanguageServer_IdePurescript_Server.loadAll(state.port.value0)))(function(v5) {
                          if (v5 instanceof Data_Either.Left) {
                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(IdePurescript_PscIdeServer["Error"].value)("Error reloading modules: " + Data_Show.show(Effect_Exception.showError)(v5.value0)));
                          }
                          ;
                          if (v5 instanceof Data_Either.Right && v5.value0 instanceof Data_Either.Left) {
                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(IdePurescript_PscIdeServer["Error"].value)("Error message from IDE server reloading modules: " + v5.value0.value0));
                          }
                          ;
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(IdePurescript_PscIdeServer.Info.value)("Reloaded modules"));
                        });
                      }
                      ;
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Build (line 128, column 13 - line 135, column 70): " + [state.port.constructor.name]);
                    }())(function() {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(convertDiagnostics(state.root.value0)(settings)(v4.errors)));
                    });
                  });
                }));
              }
              ;
              if (v2 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left("Error parsing build command"));
              }
              ;
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Left.create("Error running build: port=" + (Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(state.port) + (", root=" + Data_Show.show(Data_Maybe.showMaybe(Data_Show.showString))(state.root)))));
            };
          };
        };
      };
    };
    var getDiagnostics = function(uri) {
      return function(settings) {
        return function(state) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(uri)))(function(filename) {
            var targets = LanguageServer_IdePurescript_Config.codegenTargets(settings);
            if (state.port instanceof Data_Maybe.Just && state.root instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Build.rebuild(state.port.value0)(filename)(targets))(function(v) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(convertDiagnostics(state.root.value0)(settings)(v.errors));
              });
            }
            ;
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(emptyDiagnostics);
          });
        };
      };
    };
    var rebuildAndSendDiagnostics = function(config) {
      return function(conn) {
        return function(state) {
          return function(notify) {
            return function(document) {
              var uri = LanguageServer_Protocol_TextDocument.getUri(document);
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(config)))(function(c) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(state)))(function(s) {
                  return Control_Applicative.when(Effect_Aff.applicativeAff)(LanguageServer_IdePurescript_Config.fastRebuild(c))(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Handlers.sendDiagnosticsBegin(conn)))(function() {
                    return Control_Bind.bind(Effect_Aff.bindAff)(getDiagnostics(uri)(c)(s))(function(v) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(uri)))(function(filename) {
                        var fileDiagnostics = Data_Maybe.fromMaybe([])(Foreign_Object.lookup(filename)(v.diagnostics));
                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                          notify(IdePurescript_PscIdeServer.Info.value)("Built with " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(fileDiagnostics)) + ("/" + (Data_Show.show(Data_Show.showInt)(Data_Array.length(v.pscErrors)) + (" issues for file: " + (Data_Show.show(Data_Show.showString)(filename) + (", all diagnostic files: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(Foreign_Object.keys(v.diagnostics)))))))))();
                          var nonFileDiagnostics = Foreign_Object["delete"](filename)(v.diagnostics);
                          Control_Applicative.when(Effect.applicativeEffect)(Foreign_Object.size(nonFileDiagnostics) > 0)(notify(IdePurescript_PscIdeServer.Info.value)("Unmatched diagnostics: " + Data_Show.show(Foreign_Object.showObject(Data_Show.showArray(LanguageServer_Protocol_Types.showDiagnostic)))(nonFileDiagnostics)))();
                          Effect_Ref.write(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(s1) {
                            return {
                              diagnostics: Foreign_Object.insert(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(uri))(v.pscErrors)(s1.diagnostics),
                              modulesFile: Data_Maybe.Nothing.value,
                              buildQueue: s1.buildQueue,
                              clientCapabilities: s1.clientCapabilities,
                              conn: s1.conn,
                              deactivate: s1.deactivate,
                              modules: s1.modules,
                              parsedModules: s1.parsedModules,
                              port: s1.port,
                              root: s1.root,
                              runningRebuild: s1.runningRebuild
                            };
                          })(s))(state)();
                          LanguageServer_Protocol_Handlers.publishDiagnostics(conn)({
                            uri,
                            diagnostics: fileDiagnostics
                          })();
                          return LanguageServer_Protocol_Handlers.sendDiagnosticsEnd(conn)();
                        });
                      });
                    });
                  }));
                });
              });
            };
          };
        };
      };
    };
    var maybeRebuildAndSendDiagnostics = function(config) {
      return function(conn) {
        return function(state) {
          return function(notify) {
            return function(document) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(function() {
                var $79 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState);
                return function($80) {
                  return function(v) {
                    return v.runningRebuild;
                  }($79($80));
                };
              }())(Effect_Ref.read(state))))(function(runningRebuild) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(document)))(function(version) {
                  var documentUri = LanguageServer_Protocol_TextDocument.getUri(document);
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(IdePurescript_PscIdeServer.Info.value)("Running rebuild: " + Data_Maybe.maybe("None")(function(v) {
                    return Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
                      reflectSymbol: function() {
                        return "uri";
                      }
                    })(Data_Show.showRecordFieldsCons({
                      reflectSymbol: function() {
                        return "version";
                      }
                    })(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(LanguageServer_Protocol_Types.showDocumentUri)))({
                      uri: v.uri,
                      version: v.version
                    });
                  })(runningRebuild))))(function() {
                    if (runningRebuild instanceof Data_Maybe.Just) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(IdePurescript_PscIdeServer.Info.value)("Rebuild requested for " + (Data_Show.show(LanguageServer_Protocol_Types.showDocumentUri)(documentUri) + " when already running one, ignoring"))))(function() {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(false);
                      });
                    }
                    ;
                    if (runningRebuild instanceof Data_Maybe.Nothing) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.suspendAff(Effect_Aff["finally"](Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(v) {
                        return {
                          runningRebuild: Data_Maybe.Nothing.value,
                          buildQueue: v.buildQueue,
                          clientCapabilities: v.clientCapabilities,
                          conn: v.conn,
                          deactivate: v.deactivate,
                          diagnostics: v.diagnostics,
                          modules: v.modules,
                          modulesFile: v.modulesFile,
                          parsedModules: v.parsedModules,
                          port: v.port,
                          root: v.root
                        };
                      }))(state)))(rebuildAndSendDiagnostics(config)(conn)(state)(notify)(document))))(function(fiber) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                          notify(IdePurescript_PscIdeServer.Info.value)("Launched rebuild run")();
                          return Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(v) {
                            return {
                              runningRebuild: new Data_Maybe.Just({
                                fiber,
                                uri: documentUri,
                                version
                              }),
                              buildQueue: v.buildQueue,
                              clientCapabilities: v.clientCapabilities,
                              conn: v.conn,
                              deactivate: v.deactivate,
                              diagnostics: v.diagnostics,
                              modules: v.modules,
                              modulesFile: v.modulesFile,
                              parsedModules: v.parsedModules,
                              port: v.port,
                              root: v.root
                            };
                          }))(state)();
                        }))(function() {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.joinFiber(fiber))(function() {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(true);
                          });
                        });
                      });
                    }
                    ;
                    throw new Error("Failed pattern match at LanguageServer.IdePurescript.Build (line 202, column 3 - line 216, column 16): " + [runningRebuild.constructor.name]);
                  });
                });
              });
            };
          };
        };
      };
    };
    var launchRebuildAndSendDiagnostics = function(config) {
      return function(conn) {
        return function(state) {
          return function(notify) {
            return function(document) {
              return Data_Functor["void"](Effect.functorEffect)(LanguageServer_IdePurescript_Util.launchAffLog(notify)(maybeRebuildAndSendDiagnostics(config)(conn)(state)(notify)(document)));
            };
          };
        };
      };
    };
    module2.exports = {
      collectByFirst,
      fullBuild,
      launchRebuildAndSendDiagnostics,
      maybeRebuildAndSendDiagnostics,
      positionToRange,
      rebuildAndSendDiagnostics
    };
  }
});

// output/LanguageServer.IdePurescript.Clean/index.js
var require_LanguageServer_IdePurescript9 = __commonJS({
  "output/LanguageServer.IdePurescript.Clean/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_String_CodePoints = require_Data_String6();
    var Data_Traversable = require_Data29();
    var Effect_Aff = require_Effect6();
    var Effect_Exception = require_Effect2();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var Node_FS_Aff = require_Node_FS6();
    var Node_FS_Stats = require_Node_FS3();
    var Node_Path = require_Node();
    var removeFile = function(filePath) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.unlink(filePath))(function() {
        return Control_Applicative.pure(Effect_Aff.applicativeAff)('File "' + (filePath + '" was removed\n'));
      });
    };
    var removeDirectory = function(processor) {
      return function(dirPath) {
        return function(contentFullPaths) {
          var dirRemovalMsg = 'Directory "' + (dirPath + '" was removed\n');
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(processor(true))(contentFullPaths))(function() {
            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.rmdir(dirPath))(function() {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(dirRemovalMsg);
            });
          });
        };
      };
    };
    var joinPaths = function(parent) {
      return function(child) {
        return Node_Path.concat([parent, child]);
      };
    };
    var filesToRemove = ["cache-db.json"];
    var maybeRemovableFile = function(filePath) {
      return Data_Array.find(function(x) {
        return x === Node_Path.basename(filePath);
      })(filesToRemove);
    };
    var directoryRemovalMarker = "externs.cbor";
    var maybeRemovableContents = function(dirContents) {
      var v = Data_Array.find(function(x) {
        return x === directoryRemovalMarker;
      })(dirContents);
      if (v instanceof Data_Maybe.Nothing) {
        return Data_Maybe.Nothing.value;
      }
      ;
      return new Data_Maybe.Just(dirContents);
    };
    var processDir = function(markedForRemoval) {
      return function(path) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.stat(path))(function(stats) {
          var v = Node_FS_Stats.isDirectory(stats);
          if (!v) {
            if (markedForRemoval) {
              return removeFile(path);
            }
            ;
            if (!markedForRemoval) {
              var v1 = maybeRemovableFile(path);
              if (v1 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)("");
              }
              ;
              return removeFile(path);
            }
            ;
            throw new Error("Failed pattern match at LanguageServer.IdePurescript.Clean (line 43, column 7 - line 48, column 33): " + [markedForRemoval.constructor.name]);
          }
          ;
          if (v) {
            return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readdir(path))(function(contentPartialPaths) {
              var removeDir = removeDirectory(processDir);
              var contentFullPaths = Data_Functor.map(Data_Functor.functorArray)(joinPaths(path))(contentPartialPaths);
              if (markedForRemoval) {
                return removeDir(path)(contentFullPaths);
              }
              ;
              if (!markedForRemoval) {
                var v12 = maybeRemovableContents(contentPartialPaths);
                if (v12 instanceof Data_Maybe.Nothing) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(processDir(false))(contentFullPaths))(function(msgs) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.fold(Data_Monoid.monoidString)(msgs));
                  });
                }
                ;
                return removeDir(path)(contentFullPaths);
              }
              ;
              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Clean (line 57, column 7 - line 63, column 47): " + [markedForRemoval.constructor.name]);
            });
          }
          ;
          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Clean (line 41, column 3 - line 63, column 47): " + [v.constructor.name]);
        });
      };
    };
    var clean = function(settings) {
      var outputDir = LanguageServer_IdePurescript_Config.effectiveOutputDirectory(settings);
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Node_FS_Aff.stat(outputDir)))(function(attempedStats) {
        if (attempedStats instanceof Data_Either.Left) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Left.create("Could not find directory to clean. " + Effect_Exception.message(attempedStats.value0)));
        }
        ;
        if (attempedStats instanceof Data_Either.Right) {
          var v = Node_FS_Stats.isDirectory(attempedStats.value0);
          if (!v) {
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Left.create('Target "' + (outputDir + '" is not a directory')));
          }
          ;
          if (v) {
            return Control_Bind.bind(Effect_Aff.bindAff)(processDir(false)(outputDir))(function(msg) {
              var v1 = Data_String_CodePoints.length(msg);
              if (v1 === 0) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Right.create('Nothing to clean in directory "' + (outputDir + '"')));
              }
              ;
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Right.create(msg + ('Successfully cleaned directory "' + (outputDir + '"'))));
            });
          }
          ;
          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Clean (line 27, column 20 - line 33, column 94): " + [v.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at LanguageServer.IdePurescript.Clean (line 25, column 3 - line 33, column 94): " + [attempedStats.constructor.name]);
      });
    };
    module2.exports = {
      clean
    };
  }
});

// output/IdePurescript.QuickFix/index.js
var require_IdePurescript10 = __commonJS({
  "output/IdePurescript.QuickFix/index.js"(exports2, module2) {
    "use strict";
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var wildcardInferredType = "WildcardInferredType";
    var isUnknownToken = Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString))(["UnknownValue", "UnknownType", "UnknownDataConstructor", "UnknownTypeConstructor", "UnknownName"]);
    var isImport = Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString))(["UnusedImport", "DuplicateImport", "HidingImport", "ImplicitImport", "ImplicitQualifiedImport", "UnusedDctorExplicitImport", "UnusedDctorImport", "UnusedExplicitImport"]);
    var getTitle = function(code) {
      if (code === "UnusedImport") {
        return "Remove import";
      }
      ;
      if (code === "RedundantEmptyHidingImport") {
        return "Remove import";
      }
      ;
      if (code === "DuplicateImport") {
        return "Remove import";
      }
      ;
      if (code === "RedundantUnqualifiedImport") {
        return "Remove import";
      }
      ;
      if (code === "DeprecatedQualifiedSyntax") {
        return "Remove qualified keyword";
      }
      ;
      if (code === "ImplicitImport") {
        return "Make import explicit";
      }
      ;
      if (code === "UnusedExplicitImport") {
        return "Remove unused references";
      }
      ;
      return "Apply suggestion";
    };
    module2.exports = {
      getTitle,
      wildcardInferredType,
      isUnknownToken,
      isImport
    };
  }
});

// output/LanguageServer.IdePurescript.CodeActions/index.js
var require_LanguageServer_IdePurescript10 = __commonJS({
  "output/LanguageServer.IdePurescript.CodeActions/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Except = require_Control_Monad();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Identity = require_Data20();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var Data_String_Regex = require_Data_String5();
    var Data_String_Regex_Flags = require_Data_String_Regex();
    var Data_Traversable = require_Data29();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Foreign = require_Foreign();
    var Foreign_Index = require_Foreign4();
    var Foreign_Object = require_Foreign3();
    var IdePurescript_QuickFix = require_IdePurescript10();
    var IdePurescript_Regex = require_IdePurescript4();
    var LanguageServer_IdePurescript_Assist = require_LanguageServer_IdePurescript4();
    var LanguageServer_IdePurescript_Build = require_LanguageServer_IdePurescript8();
    var LanguageServer_IdePurescript_Commands = require_LanguageServer_IdePurescript();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_Handlers = require_LanguageServer_Protocol2();
    var LanguageServer_Protocol_Text = require_LanguageServer_Protocol4();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var toNextLine = function(v) {
      return {
        start: v.start,
        end: {
          line: v.end.line + 1 | 0,
          character: 0
        }
      };
    };
    var readSuggestion = function(o) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(o)("replacement"))(Foreign.readString(Data_Identity.monadIdentity)))(function(replacement) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(o)("range"))(LanguageServer_Protocol_Types.readRange))(function(range) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
            replacement,
            range
          });
        });
      });
    };
    var commandAction = function(kind) {
      return function(v) {
        return {
          title: v.title,
          kind,
          isPreferred: false,
          edit: Data_Nullable.toNullable(Data_Maybe.Nothing.value),
          command: Data_Nullable.toNullable(new Data_Maybe.Just(v))
        };
      };
    };
    var commandAction_ = commandAction(LanguageServer_Protocol_Types.codeActionEmpty);
    var codeActionLiteralsSupported = function(capabilities) {
      return Data_Maybe.isJust(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe(function(v) {
        return v.textDocument;
      }(capabilities)))(function($183) {
        return Data_Nullable.toMaybe(function(v) {
          return v.codeAction;
        }($183));
      }))(function($184) {
        return Data_Nullable.toMaybe(function(v) {
          return v.codeActionLiteralSupport;
        }($184));
      }));
    };
    var codeActionToCommand = function(capabilities) {
      return function(action) {
        var supportsLiteral = Data_Maybe.maybe(true)(codeActionLiteralsSupported)(capabilities);
        var convert = function(v) {
          var v1 = function(v2) {
            return Data_Maybe.Nothing.value;
          };
          var $55 = Data_Nullable.toMaybe(v.command);
          if ($55 instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(new Data_Either.Right($55.value0));
          }
          ;
          return v1(true);
        };
        return Data_Functor.map(Data_Maybe.functorMaybe)(LanguageServer_Protocol_Types.codeActionResult)(function() {
          if (supportsLiteral) {
            return Data_Maybe.Just.create(new Data_Either.Left(action));
          }
          ;
          return convert(action);
        }());
      };
    };
    var getActions = function(v) {
      return function(v1) {
        return function(v2) {
          return function(v3) {
            if (v2.conn instanceof Data_Maybe.Just) {
              var removeOverlaps = function() {
                var go = function(v42) {
                  return function(v5) {
                    if (v42.length === 0) {
                      return [v5];
                    }
                    ;
                    var v6 = function(v7) {
                      return v42;
                    };
                    var $69 = Data_Array.head(v42);
                    if ($69 instanceof Data_Maybe.Just) {
                      var $70 = Data_Ord.lessThan(LanguageServer_Protocol_Types.positionOrd)($69.value0.range.end)(v5.range.start);
                      if ($70) {
                        return Data_Array.cons(v5)(v42);
                      }
                      ;
                      return v6(true);
                    }
                    ;
                    return v6(true);
                  };
                };
                return Data_Array.foldl(go)([]);
              }();
              var notImplicitPrelude = Data_Array.filter(function(v42) {
                return !(v42.errorCode === "ImplicitImport" && Data_String_CodeUnits.contains("Module Prelude")(v42.message));
              });
              var intersects = function(v42) {
                return function(v5) {
                  return Data_Ord.lessThanOrEq(LanguageServer_Protocol_Types.positionOrd)(v42.start)(v5.end) && Data_Ord.lessThanOrEq(LanguageServer_Protocol_Types.positionOrd)(v5.start)(v42.end);
                };
              };
              var getReplacementRange = function(v42) {
                if (v42.position instanceof Data_Maybe.Just && v42.suggestion instanceof Data_Maybe.Just) {
                  var range$prime = LanguageServer_IdePurescript_Build.positionToRange(Data_Maybe.fromMaybe(v42.position.value0)(v42.suggestion.value0.replaceRange));
                  return Data_Maybe.Just.create({
                    replacement: v42.suggestion.value0.replacement,
                    range: range$prime
                  });
                }
                ;
                return Data_Maybe.Nothing.value;
              };
              var filterKind = function(actions) {
                var isSubKindOf = function(v43) {
                  return function(v5) {
                    return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(v5)(v43))(new Data_Maybe.Just(0));
                  };
                };
                var v42 = Data_Nullable.toMaybe(v3.context.only);
                if (v42 instanceof Data_Maybe.Nothing) {
                  return actions;
                }
                ;
                if (v42 instanceof Data_Maybe.Just) {
                  return Data_Array.filter(function(v5) {
                    return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function(v6) {
                      return isSubKindOf(v5.kind)(v6);
                    })(v42.value0);
                  })(actions);
                }
                ;
                throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeActions (line 65, column 5 - line 67, column 102): " + [v42.constructor.name]);
              };
              var docUri = function(v42) {
                return v42.uri;
              }(Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier)(v3.textDocument));
              var fixAllCommand = function(text) {
                return function(rebuildErrors) {
                  var replacements = removeOverlaps(Data_Array.sortWith(LanguageServer_Protocol_Types.ordRange)(function(v42) {
                    return v42.range;
                  })(Data_Array.nubByEq(Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                    reflectSymbol: function() {
                      return "replacement";
                    }
                  })(Data_Eq.eqString))()({
                    reflectSymbol: function() {
                      return "range";
                    }
                  })(LanguageServer_Protocol_Types.eqRange))))(Data_Array.mapMaybe(getReplacementRange)(rebuildErrors))));
                  var $98 = Data_Array.length(replacements) > 0;
                  if ($98) {
                    return [LanguageServer_IdePurescript_Commands.replaceAllSuggestions(text)(docUri)(replacements)];
                  }
                  ;
                  return [];
                };
              };
              var organizeImports = function(errs) {
                return Data_Functor.map(Data_Functor.functorArray)(commandAction(LanguageServer_Protocol_Types.codeActionSourceOrganizeImports))(fixAllCommand("Organize Imports")(Data_Array.filter(function(v42) {
                  return IdePurescript_QuickFix.isImport(v42.errorCode);
                })(errs)));
              };
              var sortImports = [commandAction(LanguageServer_Protocol_Types.codeActionSourceSortImports)(LanguageServer_IdePurescript_Commands.sortImports(docUri))];
              var commandForCode = function(v42) {
                if (v42.position instanceof Data_Maybe.Just && intersects(LanguageServer_IdePurescript_Build.positionToRange(v42.position.value0))(v3.range)) {
                  if (v42.errorCode === "ModuleNotFound") {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)([commandAction_(LanguageServer_IdePurescript_Commands.build)]);
                  }
                  ;
                  if (v42.errorCode === "HoleInferredType") {
                    if (v42.pursIde instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.singleton(commandAction_(LanguageServer_IdePurescript_Commands.typedHole(v42.pursIde.value0.name)(docUri)(LanguageServer_IdePurescript_Build.positionToRange(v42.position.value0))(v42.pursIde.value0.completions))));
                    }
                    ;
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                  }
                  ;
                  var v5 = function(v6) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                  };
                  var $109 = IdePurescript_QuickFix.isUnknownToken(v42.errorCode);
                  if ($109) {
                    return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Functor.functorArray)(commandAction_))(LanguageServer_IdePurescript_Assist.fixTypoActions(v)(v1)(v2)(docUri)(v42.position.value0.startLine - 1 | 0)(v42.position.value0.startColumn - 1 | 0));
                  }
                  ;
                  return v5(true);
                }
                ;
                return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
              };
              var asCommand = function(v42) {
                var v5 = function(v6) {
                  return Data_Maybe.Nothing.value;
                };
                if (v42.position instanceof Data_Maybe.Just) {
                  var $117 = getReplacementRange(v42);
                  if ($117 instanceof Data_Maybe.Just) {
                    var $118 = intersects(LanguageServer_IdePurescript_Build.positionToRange(v42.position.value0))(v3.range);
                    if ($118) {
                      var replacement$prime = IdePurescript_Regex["replace'"](Data_String_Regex.regex("\\s*\\n\\s*$")(Data_String_Regex_Flags.global))("\n")($117.value0.replacement);
                      var replacement$prime$prime = function() {
                        var $119 = v42.errorCode === IdePurescript_QuickFix.wildcardInferredType;
                        if ($119) {
                          return IdePurescript_Regex["replace'"](Data_String_Regex.regex("\\n\\s*$")(Data_String_Regex_Flags.noFlags))("")(replacement$prime);
                        }
                        ;
                        return replacement$prime;
                      }();
                      return Data_Maybe.Just.create(commandAction_(LanguageServer_IdePurescript_Commands.replaceSuggestion(IdePurescript_QuickFix.getTitle(v42.errorCode))(docUri)(replacement$prime$prime)($117.value0.range)));
                    }
                    ;
                    return v5(true);
                  }
                  ;
                  return v5(true);
                }
                ;
                return v5(true);
              };
              var v4 = Foreign_Object.lookup(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(docUri))(v2.diagnostics);
              if (v4 instanceof Data_Maybe.Just) {
                return Data_Functor.map(Effect_Aff.functorAff)(Data_Array.mapMaybe(codeActionToCommand(v2.clientCapabilities)))(Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(commandForCode)(v4.value0))(function(v5) {
                  var actions = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.catMaybes(Data_Functor.map(Data_Functor.functorArray)(asCommand)(v4.value0)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(commandAction_)(fixAllCommand("Apply all suggestions")(notImplicitPrelude(v4.value0))))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(organizeImports(notImplicitPrelude(v4.value0)))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.concat(v5))(sortImports))));
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(filterKind(actions));
                }));
              }
              ;
              return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
            }
            ;
            return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
          };
        };
      };
    };
    var afterEnd = function(v) {
      return {
        start: v.end,
        end: {
          line: v.end.line,
          character: v.end.character + 10 | 0
        }
      };
    };
    var getReplacementEdit = function(doc) {
      return function(v) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(IdePurescript_Regex["replace'"](Data_String_Regex.regex("\n$")(Data_String_Regex_Flags.noFlags))(""))(LanguageServer_Protocol_TextDocument.getTextAtRange(doc)(afterEnd(v.range)))))(function(afterText) {
          var replacementTrimSpaces = IdePurescript_Regex["replace'"](Data_String_Regex.regex("\\s+\n")(Data_String_Regex_Flags.global))("\n")(v.replacement);
          var removeTrailingNewline = !Data_String_Common["null"](afterText);
          var newText = function() {
            if (removeTrailingNewline) {
              return IdePurescript_Regex["replace'"](Data_String_Regex.regex("\\s+\n$")(Data_String_Regex_Flags.noFlags))("")(replacementTrimSpaces);
            }
            ;
            return replacementTrimSpaces;
          }();
          var range$prime = function() {
            var $144 = newText === "" && afterText === "";
            if ($144) {
              return toNextLine(v.range);
            }
            ;
            return v.range;
          }();
          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
            range: range$prime,
            newText
          });
        });
      };
    };
    var onReplaceAllSuggestions = function(docs) {
      return function(v) {
        return function(v1) {
          return function(args) {
            var v2 = function(v3) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
            };
            if (v1.conn instanceof Data_Maybe.Just && args.length === 2) {
              var $153 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]));
              if ($153 instanceof Data_Either.Right) {
                var $154 = Control_Monad_Except.runExcept(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray(Data_Identity.monadIdentity)(args[1]))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(readSuggestion)));
                if ($154 instanceof Data_Either.Right) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($153.value0)))(function(doc) {
                    return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Data_Nullable.toMaybe(doc))(function(doc1) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(doc1)))(function(version) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(getReplacementEdit(doc1))($154.value0))(function(edits) {
                          return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v1.conn.value0)(LanguageServer_Protocol_Types.workspaceEdit(v1.clientCapabilities)([{
                            textDocument: {
                              uri: $153.value0,
                              version: Data_Nullable.notNull(version)
                            },
                            edits
                          }])));
                        });
                      });
                    });
                  });
                }
                ;
                return v2(true);
              }
              ;
              return v2(true);
            }
            ;
            return v2(true);
          };
        };
      };
    };
    var onReplaceSuggestion = function(docs) {
      return function(v) {
        return function(v1) {
          return function(args) {
            var v2 = function(v3) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
            };
            if (v1.conn instanceof Data_Maybe.Just && args.length === 3) {
              var $168 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[0]));
              if ($168 instanceof Data_Either.Right) {
                var $169 = Control_Monad_Except.runExcept(Foreign.readString(Data_Identity.monadIdentity)(args[1]));
                if ($169 instanceof Data_Either.Right) {
                  var $170 = Control_Monad_Except.runExcept(LanguageServer_Protocol_Types.readRange(args[2]));
                  if ($170 instanceof Data_Either.Right) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)($168.value0)))(function(doc) {
                      return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Data_Nullable.toMaybe(doc))(function(doc1) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getVersion(doc1)))(function(version) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(getReplacementEdit(doc1)({
                            replacement: $169.value0,
                            range: $170.value0
                          }))(function(v3) {
                            var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(v1.clientCapabilities)($168.value0)(version)(v3.range)(v3.newText);
                            return Data_Functor["void"](Effect_Aff.functorAff)(LanguageServer_Protocol_Handlers.applyEdit(v1.conn.value0)(edit));
                          });
                        });
                      });
                    });
                  }
                  ;
                  return v2(true);
                }
                ;
                return v2(true);
              }
              ;
              return v2(true);
            }
            ;
            return v2(true);
          };
        };
      };
    };
    module2.exports = {
      getActions,
      onReplaceAllSuggestions,
      onReplaceSuggestion
    };
  }
});

// output/Data.Map/index.js
var require_Data50 = __commonJS({
  "output/Data.Map/index.js"(exports2, module2) {
    "use strict";
    var Data_Functor = require_Data4();
    var Data_Map_Internal = require_Data_Map();
    var Data_Semigroup = require_Data7();
    var Data_Set = require_Data48();
    var SemigroupMap = function(x) {
      return x;
    };
    var traversableWithIndexSemigroupMap = Data_Map_Internal.traversableWithIndexMap;
    var traversableSemigroupMap = Data_Map_Internal.traversableMap;
    var showSemigroupMap = function(dictShow) {
      return function(dictShow1) {
        return Data_Map_Internal.showMap(dictShow)(dictShow1);
      };
    };
    var semigroupSemigroupMap = function(dictOrd) {
      return function(dictSemigroup) {
        return {
          append: function(v) {
            return function(v1) {
              return Data_Map_Internal.unionWith(dictOrd)(Data_Semigroup.append(dictSemigroup))(v)(v1);
            };
          }
        };
      };
    };
    var plusSemigroupMap = function(dictOrd) {
      return Data_Map_Internal.plusMap(dictOrd);
    };
    var ordSemigroupMap = function(dictOrd) {
      return function(dictOrd1) {
        return Data_Map_Internal.ordMap(dictOrd)(dictOrd1);
      };
    };
    var ord1SemigroupMap = function(dictOrd) {
      return Data_Map_Internal.ord1Map(dictOrd);
    };
    var newtypeSemigroupMap = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidSemigroupMap = function(dictOrd) {
      return function(dictSemigroup) {
        return {
          mempty: Data_Map_Internal.empty,
          Semigroup0: function() {
            return semigroupSemigroupMap(dictOrd)(dictSemigroup);
          }
        };
      };
    };
    var keys = function() {
      var $20 = Data_Functor["void"](Data_Map_Internal.functorMap);
      return function($21) {
        return Data_Set.fromMap($20($21));
      };
    }();
    var functorWithIndexSemigroupMap = Data_Map_Internal.functorWithIndexMap;
    var functorSemigroupMap = Data_Map_Internal.functorMap;
    var foldableWithIndexSemigroupMap = Data_Map_Internal.foldableWithIndexMap;
    var foldableSemigroupMap = Data_Map_Internal.foldableMap;
    var eqSemigroupMap = function(dictEq) {
      return function(dictEq1) {
        return Data_Map_Internal.eqMap(dictEq)(dictEq1);
      };
    };
    var eq1SemigroupMap = function(dictEq) {
      return Data_Map_Internal.eq1Map(dictEq);
    };
    var bindSemigroupMap = function(dictOrd) {
      return Data_Map_Internal.bindMap(dictOrd);
    };
    var applySemigroupMap = function(dictOrd) {
      return Data_Map_Internal.applyMap(dictOrd);
    };
    var altSemigroupMap = function(dictOrd) {
      return Data_Map_Internal.altMap(dictOrd);
    };
    module2.exports = {
      keys,
      SemigroupMap,
      eq1SemigroupMap,
      eqSemigroupMap,
      ord1SemigroupMap,
      ordSemigroupMap,
      newtypeSemigroupMap,
      showSemigroupMap,
      semigroupSemigroupMap,
      monoidSemigroupMap,
      altSemigroupMap,
      plusSemigroupMap,
      functorSemigroupMap,
      functorWithIndexSemigroupMap,
      applySemigroupMap,
      bindSemigroupMap,
      foldableSemigroupMap,
      foldableWithIndexSemigroupMap,
      traversableSemigroupMap,
      traversableWithIndexSemigroupMap,
      alter: Data_Map_Internal.alter,
      catMaybes: Data_Map_Internal.catMaybes,
      checkValid: Data_Map_Internal.checkValid,
      "delete": Data_Map_Internal["delete"],
      difference: Data_Map_Internal.difference,
      empty: Data_Map_Internal.empty,
      filter: Data_Map_Internal.filter,
      filterKeys: Data_Map_Internal.filterKeys,
      filterWithKey: Data_Map_Internal.filterWithKey,
      findMax: Data_Map_Internal.findMax,
      findMin: Data_Map_Internal.findMin,
      foldSubmap: Data_Map_Internal.foldSubmap,
      fromFoldable: Data_Map_Internal.fromFoldable,
      fromFoldableWith: Data_Map_Internal.fromFoldableWith,
      fromFoldableWithIndex: Data_Map_Internal.fromFoldableWithIndex,
      insert: Data_Map_Internal.insert,
      insertWith: Data_Map_Internal.insertWith,
      intersection: Data_Map_Internal.intersection,
      intersectionWith: Data_Map_Internal.intersectionWith,
      isEmpty: Data_Map_Internal.isEmpty,
      isSubmap: Data_Map_Internal.isSubmap,
      lookup: Data_Map_Internal.lookup,
      lookupGE: Data_Map_Internal.lookupGE,
      lookupGT: Data_Map_Internal.lookupGT,
      lookupLE: Data_Map_Internal.lookupLE,
      lookupLT: Data_Map_Internal.lookupLT,
      mapMaybe: Data_Map_Internal.mapMaybe,
      mapMaybeWithKey: Data_Map_Internal.mapMaybeWithKey,
      member: Data_Map_Internal.member,
      pop: Data_Map_Internal.pop,
      showTree: Data_Map_Internal.showTree,
      singleton: Data_Map_Internal.singleton,
      size: Data_Map_Internal.size,
      submap: Data_Map_Internal.submap,
      toUnfoldable: Data_Map_Internal.toUnfoldable,
      toUnfoldableUnordered: Data_Map_Internal.toUnfoldableUnordered,
      union: Data_Map_Internal.union,
      unionWith: Data_Map_Internal.unionWith,
      unions: Data_Map_Internal.unions,
      update: Data_Map_Internal.update,
      values: Data_Map_Internal.values
    };
  }
});

// output/Data.Lens.Internal.Exchange/index.js
var require_Data_Lens_Internal = __commonJS({
  "output/Data.Lens.Internal.Exchange/index.js"(exports2, module2) {
    "use strict";
    var Exchange = function() {
      function Exchange2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Exchange2.create = function(value0) {
        return function(value1) {
          return new Exchange2(value0, value1);
        };
      };
      return Exchange2;
    }();
    var profunctorExchange = {
      dimap: function(f) {
        return function(g) {
          return function(v) {
            return new Exchange(function($11) {
              return v.value0(f($11));
            }, function($12) {
              return g(v.value1($12));
            });
          };
        };
      }
    };
    var functorExchange = {
      map: function(f) {
        return function(v) {
          return new Exchange(v.value0, function($13) {
            return f(v.value1($13));
          });
        };
      }
    };
    module2.exports = {
      Exchange,
      functorExchange,
      profunctorExchange
    };
  }
});

// output/Data.Lens.Internal.Forget/index.js
var require_Data_Lens_Internal2 = __commonJS({
  "output/Data.Lens.Internal.Forget/index.js"(exports2, module2) {
    "use strict";
    var Data_Const = require_Data26();
    var Data_Either = require_Data16();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Semigroup = require_Data7();
    var Data_Tuple = require_Data22();
    var Forget = function(x) {
      return x;
    };
    var semigroupForget = function(dictSemigroup) {
      return Data_Semigroup.semigroupFn(dictSemigroup);
    };
    var profunctorForget = {
      dimap: function(f) {
        return function(v) {
          return function(v1) {
            return function($24) {
              return v1(f($24));
            };
          };
        };
      }
    };
    var strongForget = {
      first: function(v) {
        return function($25) {
          return v(Data_Tuple.fst($25));
        };
      },
      second: function(v) {
        return function($26) {
          return v(Data_Tuple.snd($26));
        };
      },
      Profunctor0: function() {
        return profunctorForget;
      }
    };
    var newtypeForget = {
      Coercible0: function() {
        return void 0;
      }
    };
    var monoidForget = function(dictMonoid) {
      return Data_Monoid.monoidFn(dictMonoid);
    };
    var cochoiceForget = {
      unleft: function(v) {
        return function($27) {
          return v(Data_Either.Left.create($27));
        };
      },
      unright: function(v) {
        return function($28) {
          return v(Data_Either.Right.create($28));
        };
      },
      Profunctor0: function() {
        return profunctorForget;
      }
    };
    var choiceForget = function(dictMonoid) {
      return {
        left: function(v) {
          return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
        },
        right: function(v) {
          return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
        },
        Profunctor0: function() {
          return profunctorForget;
        }
      };
    };
    var wanderForget = function(dictMonoid) {
      return {
        wander: function(f) {
          return function(v) {
            return Data_Newtype.alaF()()()()(Data_Const.Const)(f(Data_Const.applicativeConst(dictMonoid)))(v);
          };
        },
        Strong0: function() {
          return strongForget;
        },
        Choice1: function() {
          return choiceForget(dictMonoid);
        }
      };
    };
    module2.exports = {
      Forget,
      newtypeForget,
      semigroupForget,
      monoidForget,
      profunctorForget,
      choiceForget,
      strongForget,
      cochoiceForget,
      wanderForget
    };
  }
});

// output/Data.Lens.Internal.Grating/index.js
var require_Data_Lens_Internal3 = __commonJS({
  "output/Data.Lens.Internal.Grating/index.js"(exports2, module2) {
    "use strict";
    var Grating = function(x) {
      return x;
    };
    var profunctorGrating = {
      dimap: function(f) {
        return function(g) {
          return function(v) {
            return function(d) {
              return g(v(function(k) {
                return d(function($6) {
                  return k(f($6));
                });
              }));
            };
          };
        };
      }
    };
    var newtypeGrating = {
      Coercible0: function() {
        return void 0;
      }
    };
    var closedGrating = {
      closed: function(v) {
        return function(f) {
          return function(x) {
            return v(function(k) {
              return f(function(g) {
                return k(g(x));
              });
            });
          };
        };
      },
      Profunctor0: function() {
        return profunctorGrating;
      }
    };
    module2.exports = {
      Grating,
      newtypeGrating,
      profunctorGrating,
      closedGrating
    };
  }
});

// output/Data.Profunctor.Choice/index.js
var require_Data_Profunctor3 = __commonJS({
  "output/Data.Profunctor.Choice/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Control_Semigroupoid = require_Control();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Profunctor = require_Data35();
    var right = function(dict) {
      return dict.right;
    };
    var left = function(dict) {
      return dict.left;
    };
    var splitChoice = function(dictCategory) {
      return function(dictChoice) {
        return function(l) {
          return function(r) {
            return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(left(dictChoice)(l))(right(dictChoice)(r));
          };
        };
      };
    };
    var fanin = function(dictCategory) {
      return function(dictChoice) {
        return function(l) {
          return function(r) {
            var join = Data_Profunctor.dimap(dictChoice.Profunctor0())(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(dictCategory));
            return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(splitChoice(dictCategory)(dictChoice)(l)(r))(join);
          };
        };
      };
    };
    var choiceFn = {
      left: function(v) {
        return function(v1) {
          if (v1 instanceof Data_Either.Left) {
            return Data_Either.Left.create(v(v1.value0));
          }
          ;
          if (v1 instanceof Data_Either.Right) {
            return new Data_Either.Right(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      right: Data_Functor.map(Data_Either.functorEither),
      Profunctor0: function() {
        return Data_Profunctor.profunctorFn;
      }
    };
    module2.exports = {
      left,
      right,
      splitChoice,
      fanin,
      choiceFn
    };
  }
});

// output/Data.Lens.Internal.Wander/index.js
var require_Data_Lens_Internal4 = __commonJS({
  "output/Data.Lens.Internal.Wander/index.js"(exports2, module2) {
    "use strict";
    var Data_Identity = require_Data20();
    var Data_Newtype = require_Data23();
    var Data_Profunctor_Choice = require_Data_Profunctor3();
    var Data_Profunctor_Star = require_Data_Profunctor();
    var Data_Profunctor_Strong = require_Data_Profunctor2();
    var wanderStar = function(dictApplicative) {
      return {
        wander: function(t) {
          return function(v) {
            return t(dictApplicative)(v);
          };
        },
        Strong0: function() {
          return Data_Profunctor_Star.strongStar(dictApplicative.Apply0().Functor0());
        },
        Choice1: function() {
          return Data_Profunctor_Star.choiceStar(dictApplicative);
        }
      };
    };
    var wanderFunction = {
      wander: function(t) {
        return Data_Newtype.alaF()()()()(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
      },
      Strong0: function() {
        return Data_Profunctor_Strong.strongFn;
      },
      Choice1: function() {
        return Data_Profunctor_Choice.choiceFn;
      }
    };
    var wander = function(dict) {
      return dict.wander;
    };
    module2.exports = {
      wander,
      wanderFunction,
      wanderStar
    };
  }
});

// output/Data.Lens.Internal.Indexed/index.js
var require_Data_Lens_Internal5 = __commonJS({
  "output/Data.Lens.Internal.Indexed/index.js"(exports2, module2) {
    "use strict";
    var Data_Either = require_Data16();
    var Data_Lens_Internal_Wander = require_Data_Lens_Internal4();
    var Data_Profunctor = require_Data35();
    var Data_Profunctor_Choice = require_Data_Profunctor3();
    var Data_Profunctor_Strong = require_Data_Profunctor2();
    var Data_Tuple = require_Data22();
    var Indexed = function(x) {
      return x;
    };
    var profunctorIndexed = function(dictProfunctor) {
      return {
        dimap: function(f) {
          return function(g) {
            return function(v) {
              return Data_Profunctor.dimap(dictProfunctor)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(f))(g)(v);
            };
          };
        }
      };
    };
    var strongIndexed = function(dictStrong) {
      return {
        first: function(v) {
          return Indexed(Data_Profunctor.lcmap(dictStrong.Profunctor0())(function(v1) {
            return new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1.value0), v1.value1.value1);
          })(Data_Profunctor_Strong.first(dictStrong)(v)));
        },
        second: function(v) {
          return Indexed(Data_Profunctor.lcmap(dictStrong.Profunctor0())(function(v1) {
            return new Data_Tuple.Tuple(v1.value1.value0, new Data_Tuple.Tuple(v1.value0, v1.value1.value1));
          })(Data_Profunctor_Strong.second(dictStrong)(v)));
        },
        Profunctor0: function() {
          return profunctorIndexed(dictStrong.Profunctor0());
        }
      };
    };
    var newtypeIndexed = {
      Coercible0: function() {
        return void 0;
      }
    };
    var choiceIndexed = function(dictChoice) {
      return {
        left: function(v) {
          return Indexed(Data_Profunctor.lcmap(dictChoice.Profunctor0())(function(v1) {
            return Data_Either.either(function() {
              var $44 = Data_Tuple.Tuple.create(v1.value0);
              return function($45) {
                return Data_Either.Left.create($44($45));
              };
            }())(Data_Either.Right.create)(v1.value1);
          })(Data_Profunctor_Choice.left(dictChoice)(v)));
        },
        right: function(v) {
          return Indexed(Data_Profunctor.lcmap(dictChoice.Profunctor0())(function(v1) {
            return Data_Either.either(Data_Either.Left.create)(function() {
              var $46 = Data_Tuple.Tuple.create(v1.value0);
              return function($47) {
                return Data_Either.Right.create($46($47));
              };
            }())(v1.value1);
          })(Data_Profunctor_Choice.right(dictChoice)(v)));
        },
        Profunctor0: function() {
          return profunctorIndexed(dictChoice.Profunctor0());
        }
      };
    };
    var wanderIndexed = function(dictWander) {
      return {
        wander: function(trav) {
          return function(v) {
            return Indexed(Data_Lens_Internal_Wander.wander(dictWander)(function(dictApplicative) {
              return function(ia2fb) {
                return function(v1) {
                  return trav(dictApplicative)(function() {
                    var $48 = Data_Tuple.Tuple.create(v1.value0);
                    return function($49) {
                      return ia2fb($48($49));
                    };
                  }())(v1.value1);
                };
              };
            })(v));
          };
        },
        Strong0: function() {
          return strongIndexed(dictWander.Strong0());
        },
        Choice1: function() {
          return choiceIndexed(dictWander.Choice1());
        }
      };
    };
    module2.exports = {
      Indexed,
      newtypeIndexed,
      profunctorIndexed,
      strongIndexed,
      choiceIndexed,
      wanderIndexed
    };
  }
});

// output/Data.Lens.Internal.Market/index.js
var require_Data_Lens_Internal6 = __commonJS({
  "output/Data.Lens.Internal.Market/index.js"(exports2, module2) {
    "use strict";
    var Data_Bifunctor = require_Data24();
    var Data_Either = require_Data16();
    var Market = function() {
      function Market2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Market2.create = function(value0) {
        return function(value1) {
          return new Market2(value0, value1);
        };
      };
      return Market2;
    }();
    var profunctorMarket = {
      dimap: function(f) {
        return function(g) {
          return function(v) {
            return new Market(function($19) {
              return g(v.value0($19));
            }, function() {
              var $20 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(g);
              return function($21) {
                return $20(v.value1(f($21)));
              };
            }());
          };
        };
      }
    };
    var functorMarket = {
      map: function(f) {
        return function(v) {
          return new Market(function($22) {
            return f(v.value0($22));
          }, function() {
            var $23 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(f);
            return function($24) {
              return $23(v.value1($24));
            };
          }());
        };
      }
    };
    var choiceMarket = {
      left: function(v) {
        return new Market(function($25) {
          return Data_Either.Left.create(v.value0($25));
        }, Data_Either.either(function() {
          var $26 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Either.Left.create);
          return function($27) {
            return $26(v.value1($27));
          };
        }())(function($28) {
          return Data_Either.Left.create(Data_Either.Right.create($28));
        }));
      },
      right: function(v) {
        return new Market(function($29) {
          return Data_Either.Right.create(v.value0($29));
        }, Data_Either.either(function($30) {
          return Data_Either.Left.create(Data_Either.Left.create($30));
        })(function() {
          var $31 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Either.Right.create);
          return function($32) {
            return $31(v.value1($32));
          };
        }()));
      },
      Profunctor0: function() {
        return profunctorMarket;
      }
    };
    module2.exports = {
      Market,
      functorMarket,
      profunctorMarket,
      choiceMarket
    };
  }
});

// output/Data.Profunctor.Cochoice/index.js
var require_Data_Profunctor4 = __commonJS({
  "output/Data.Profunctor.Cochoice/index.js"(exports2, module2) {
    "use strict";
    var unright = function(dict) {
      return dict.unright;
    };
    var unleft = function(dict) {
      return dict.unleft;
    };
    module2.exports = {
      unleft,
      unright
    };
  }
});

// output/Data.Profunctor.Costrong/index.js
var require_Data_Profunctor5 = __commonJS({
  "output/Data.Profunctor.Costrong/index.js"(exports2, module2) {
    "use strict";
    var unsecond = function(dict) {
      return dict.unsecond;
    };
    var unfirst = function(dict) {
      return dict.unfirst;
    };
    module2.exports = {
      unfirst,
      unsecond
    };
  }
});

// output/Data.Lens.Internal.Re/index.js
var require_Data_Lens_Internal7 = __commonJS({
  "output/Data.Lens.Internal.Re/index.js"(exports2, module2) {
    "use strict";
    var Data_Profunctor = require_Data35();
    var Data_Profunctor_Choice = require_Data_Profunctor3();
    var Data_Profunctor_Cochoice = require_Data_Profunctor4();
    var Data_Profunctor_Costrong = require_Data_Profunctor5();
    var Data_Profunctor_Strong = require_Data_Profunctor2();
    var Re = function(x) {
      return x;
    };
    var profunctorRe = function(dictProfunctor) {
      return {
        dimap: function(f) {
          return function(g) {
            return function(v) {
              var $25 = Data_Profunctor.dimap(dictProfunctor)(g)(f);
              return function($26) {
                return v($25($26));
              };
            };
          };
        }
      };
    };
    var strongRe = function(dictStrong) {
      return {
        unfirst: function(v) {
          var $27 = Data_Profunctor_Strong.first(dictStrong);
          return function($28) {
            return v($27($28));
          };
        },
        unsecond: function(v) {
          var $29 = Data_Profunctor_Strong.second(dictStrong);
          return function($30) {
            return v($29($30));
          };
        },
        Profunctor0: function() {
          return profunctorRe(dictStrong.Profunctor0());
        }
      };
    };
    var newtypeRe = {
      Coercible0: function() {
        return void 0;
      }
    };
    var costrongRe = function(dictCostrong) {
      return {
        first: function(v) {
          var $31 = Data_Profunctor_Costrong.unfirst(dictCostrong);
          return function($32) {
            return v($31($32));
          };
        },
        second: function(v) {
          var $33 = Data_Profunctor_Costrong.unsecond(dictCostrong);
          return function($34) {
            return v($33($34));
          };
        },
        Profunctor0: function() {
          return profunctorRe(dictCostrong.Profunctor0());
        }
      };
    };
    var cochoiceRe = function(dictCochoice) {
      return {
        left: function(v) {
          var $35 = Data_Profunctor_Cochoice.unleft(dictCochoice);
          return function($36) {
            return v($35($36));
          };
        },
        right: function(v) {
          var $37 = Data_Profunctor_Cochoice.unright(dictCochoice);
          return function($38) {
            return v($37($38));
          };
        },
        Profunctor0: function() {
          return profunctorRe(dictCochoice.Profunctor0());
        }
      };
    };
    var choiceRe = function(dictChoice) {
      return {
        unleft: function(v) {
          var $39 = Data_Profunctor_Choice.left(dictChoice);
          return function($40) {
            return v($39($40));
          };
        },
        unright: function(v) {
          var $41 = Data_Profunctor_Choice.right(dictChoice);
          return function($42) {
            return v($41($42));
          };
        },
        Profunctor0: function() {
          return profunctorRe(dictChoice.Profunctor0());
        }
      };
    };
    module2.exports = {
      Re,
      newtypeRe,
      profunctorRe,
      choiceRe,
      cochoiceRe,
      strongRe,
      costrongRe
    };
  }
});

// output/Data.Lens.Internal.Shop/index.js
var require_Data_Lens_Internal8 = __commonJS({
  "output/Data.Lens.Internal.Shop/index.js"(exports2, module2) {
    "use strict";
    var Data_Tuple = require_Data22();
    var Shop = function() {
      function Shop2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Shop2.create = function(value0) {
        return function(value1) {
          return new Shop2(value0, value1);
        };
      };
      return Shop2;
    }();
    var profunctorShop = {
      dimap: function(f) {
        return function(g) {
          return function(v) {
            return new Shop(function($30) {
              return v.value0(f($30));
            }, function(s) {
              var $31 = v.value1(f(s));
              return function($32) {
                return g($31($32));
              };
            });
          };
        };
      }
    };
    var strongShop = {
      first: function(v) {
        return new Shop(function(v1) {
          return v.value0(v1.value0);
        }, function(v1) {
          return function(b) {
            return new Data_Tuple.Tuple(v.value1(v1.value0)(b), v1.value1);
          };
        });
      },
      second: function(v) {
        return new Shop(function(v1) {
          return v.value0(v1.value1);
        }, function(v1) {
          return function(b) {
            return new Data_Tuple.Tuple(v1.value0, v.value1(v1.value1)(b));
          };
        });
      },
      Profunctor0: function() {
        return profunctorShop;
      }
    };
    module2.exports = {
      Shop,
      profunctorShop,
      strongShop
    };
  }
});

// output/Data.Lens.Internal.Stall/index.js
var require_Data_Lens_Internal9 = __commonJS({
  "output/Data.Lens.Internal.Stall/index.js"(exports2, module2) {
    "use strict";
    var Data_Bifunctor = require_Data24();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Tuple = require_Data22();
    var Stall = function() {
      function Stall2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Stall2.create = function(value0) {
        return function(value1) {
          return new Stall2(value0, value1);
        };
      };
      return Stall2;
    }();
    var profunctorStall = {
      dimap: function(f) {
        return function(g) {
          return function(v) {
            return new Stall(function() {
              var $61 = Data_Functor.map(Data_Functor.functorFn)(g);
              return function($62) {
                return $61(v.value0(f($62)));
              };
            }(), function() {
              var $63 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(g);
              return function($64) {
                return $63(v.value1(f($64)));
              };
            }());
          };
        };
      }
    };
    var strongStall = {
      first: function(v) {
        return new Stall(function(v1) {
          return function(b) {
            return new Data_Tuple.Tuple(v.value0(v1.value0)(b), v1.value1);
          };
        }, function(v1) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function(t) {
            return new Data_Tuple.Tuple(t, v1.value1);
          })(v.value1(v1.value0));
        });
      },
      second: function(v) {
        return new Stall(function(v1) {
          return function(b) {
            return new Data_Tuple.Tuple(v1.value0, v.value0(v1.value1)(b));
          };
        }, function(v1) {
          return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Tuple.Tuple.create(v1.value0))(v.value1(v1.value1));
        });
      },
      Profunctor0: function() {
        return profunctorStall;
      }
    };
    var functorStall = {
      map: function(f) {
        return function(v) {
          return new Stall(function() {
            var $65 = Data_Functor.map(Data_Functor.functorFn)(f);
            return function($66) {
              return $65(v.value0($66));
            };
          }(), function() {
            var $67 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(f);
            return function($68) {
              return $67(v.value1($68));
            };
          }());
        };
      }
    };
    var choiceStall = {
      left: function(v) {
        return new Stall(function(v1) {
          if (v1 instanceof Data_Either.Left) {
            return function(b) {
              return new Data_Either.Left(v.value0(v1.value0)(b));
            };
          }
          ;
          if (v1 instanceof Data_Either.Right) {
            return function(v2) {
              return new Data_Either.Right(v1.value0);
            };
          }
          ;
          throw new Error("Failed pattern match at Data.Lens.Internal.Stall (line 36, column 8 - line 38, column 33): " + [v1.constructor.name]);
        }, function(v1) {
          if (v1 instanceof Data_Either.Left) {
            return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Either.Left.create)(v.value1(v1.value0));
          }
          ;
          if (v1 instanceof Data_Either.Right) {
            return new Data_Either.Left(new Data_Either.Right(v1.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Lens.Internal.Stall (line 39, column 8 - line 41, column 34): " + [v1.constructor.name]);
        });
      },
      right: function(v) {
        return new Stall(function(v1) {
          if (v1 instanceof Data_Either.Left) {
            return function(v2) {
              return new Data_Either.Left(v1.value0);
            };
          }
          ;
          if (v1 instanceof Data_Either.Right) {
            return function(b) {
              return new Data_Either.Right(v.value0(v1.value0)(b));
            };
          }
          ;
          throw new Error("Failed pattern match at Data.Lens.Internal.Stall (line 45, column 8 - line 47, column 39): " + [v1.constructor.name]);
        }, function(v1) {
          if (v1 instanceof Data_Either.Left) {
            return new Data_Either.Left(new Data_Either.Left(v1.value0));
          }
          ;
          if (v1 instanceof Data_Either.Right) {
            return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Either.Right.create)(v.value1(v1.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Lens.Internal.Stall (line 48, column 8 - line 50, column 36): " + [v1.constructor.name]);
        });
      },
      Profunctor0: function() {
        return profunctorStall;
      }
    };
    module2.exports = {
      Stall,
      functorStall,
      profunctorStall,
      strongStall,
      choiceStall
    };
  }
});

// output/Data.Lens.Internal.Tagged/index.js
var require_Data_Lens_Internal10 = __commonJS({
  "output/Data.Lens.Internal.Tagged/index.js"(exports2, module2) {
    "use strict";
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Ord = require_Data12();
    var Tagged = function(x) {
      return x;
    };
    var taggedProfunctor = {
      dimap: function(v) {
        return function(g) {
          return function(v1) {
            return g(v1);
          };
        };
      }
    };
    var taggedCostrong = {
      unfirst: function(v) {
        return v.value0;
      },
      unsecond: function(v) {
        return v.value1;
      },
      Profunctor0: function() {
        return taggedProfunctor;
      }
    };
    var taggedClosed = {
      closed: function(v) {
        return Data_Function["const"](v);
      },
      Profunctor0: function() {
        return taggedProfunctor;
      }
    };
    var taggedChoice = {
      left: function(v) {
        return new Data_Either.Left(v);
      },
      right: function(v) {
        return new Data_Either.Right(v);
      },
      Profunctor0: function() {
        return taggedProfunctor;
      }
    };
    var newtypeTagged = {
      Coercible0: function() {
        return void 0;
      }
    };
    var functorTagged = {
      map: function(f) {
        return function(m) {
          return f(m);
        };
      }
    };
    var foldableTagged = {
      foldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return f(v);
          };
        };
      },
      foldr: function(f) {
        return function(b) {
          return function(v) {
            return f(v)(b);
          };
        };
      },
      foldl: function(f) {
        return function(b) {
          return function(v) {
            return f(b)(v);
          };
        };
      }
    };
    var traversableTagged = {
      sequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tagged)(v);
        };
      },
      traverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Tagged)(f(v));
          };
        };
      },
      Functor0: function() {
        return functorTagged;
      },
      Foldable1: function() {
        return foldableTagged;
      }
    };
    var eqTagged = function(dictEq) {
      return {
        eq: function(x) {
          return function(y) {
            return Data_Eq.eq(dictEq)(x)(y);
          };
        }
      };
    };
    var ordTagged = function(dictOrd) {
      return {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(dictOrd)(x)(y);
          };
        },
        Eq0: function() {
          return eqTagged(dictOrd.Eq0());
        }
      };
    };
    var eq1Tagged = {
      eq1: function(dictEq) {
        return Data_Eq.eq(eqTagged(dictEq));
      }
    };
    var ord1Tagged = {
      compare1: function(dictOrd) {
        return Data_Ord.compare(ordTagged(dictOrd));
      },
      Eq10: function() {
        return eq1Tagged;
      }
    };
    module2.exports = {
      Tagged,
      newtypeTagged,
      eqTagged,
      eq1Tagged,
      ordTagged,
      ord1Tagged,
      functorTagged,
      taggedProfunctor,
      taggedChoice,
      taggedCostrong,
      taggedClosed,
      foldableTagged,
      traversableTagged
    };
  }
});

// output/Data.Lens.Types/index.js
var require_Data_Lens = __commonJS({
  "output/Data.Lens.Types/index.js"(exports2, module2) {
    "use strict";
    var Data_Lens_Internal_Exchange = require_Data_Lens_Internal();
    var Data_Lens_Internal_Forget = require_Data_Lens_Internal2();
    var Data_Lens_Internal_Grating = require_Data_Lens_Internal3();
    var Data_Lens_Internal_Indexed = require_Data_Lens_Internal5();
    var Data_Lens_Internal_Market = require_Data_Lens_Internal6();
    var Data_Lens_Internal_Re = require_Data_Lens_Internal7();
    var Data_Lens_Internal_Shop = require_Data_Lens_Internal8();
    var Data_Lens_Internal_Stall = require_Data_Lens_Internal9();
    var Data_Lens_Internal_Tagged = require_Data_Lens_Internal10();
    var Data_Lens_Internal_Wander = require_Data_Lens_Internal4();
    module2.exports = {
      Exchange: Data_Lens_Internal_Exchange.Exchange,
      Forget: Data_Lens_Internal_Forget.Forget,
      Indexed: Data_Lens_Internal_Indexed.Indexed,
      Market: Data_Lens_Internal_Market.Market,
      Re: Data_Lens_Internal_Re.Re,
      Shop: Data_Lens_Internal_Shop.Shop,
      Stall: Data_Lens_Internal_Stall.Stall,
      Tagged: Data_Lens_Internal_Tagged.Tagged,
      wander: Data_Lens_Internal_Wander.wander
    };
  }
});

// output/Data.Lens.Iso/index.js
var require_Data_Lens2 = __commonJS({
  "output/Data.Lens.Iso/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Boolean = require_Data();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Lens_Internal_Exchange = require_Data_Lens_Internal();
    var Data_Lens_Types = require_Data_Lens();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_Profunctor = require_Data35();
    var Data_Tuple = require_Data22();
    var withIso = function(l) {
      return function(f) {
        var v = l(new Data_Lens_Internal_Exchange.Exchange(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn)));
        return f(v.value0)(v.value1);
      };
    };
    var under = function(l) {
      return withIso(l)(function(sa) {
        return function(bt) {
          return function(ts) {
            return function($19) {
              return sa(ts(bt($19)));
            };
          };
        };
      });
    };
    var re = function(t) {
      return Data_Newtype.unwrap()(t(Control_Category.identity(Control_Category.categoryFn)));
    };
    var iso = function(f) {
      return function(g) {
        return function(dictProfunctor) {
          return function(pab) {
            return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
          };
        };
      };
    };
    var mapping = function(dictFunctor) {
      return function(dictFunctor1) {
        return function(l) {
          return function(dictProfunctor) {
            return withIso(l)(function(sa) {
              return function(bt) {
                return iso(Data_Functor.map(dictFunctor)(sa))(Data_Functor.map(dictFunctor1)(bt))(dictProfunctor);
              };
            });
          };
        };
      };
    };
    var non = function(dictEq) {
      return function(def) {
        return function(dictProfunctor) {
          var g = function(a) {
            if (Data_Eq.eq(dictEq)(a)(def)) {
              return Data_Maybe.Nothing.value;
            }
            ;
            if (Data_Boolean.otherwise) {
              return new Data_Maybe.Just(a);
            }
            ;
            throw new Error("Failed pattern match at Data.Lens.Iso (line 45, column 9 - line 46, column 33): " + [a.constructor.name]);
          };
          return iso(Data_Maybe.fromMaybe(def))(g)(dictProfunctor);
        };
      };
    };
    var uncurried = function(dictProfunctor) {
      return iso(Data_Tuple.uncurry)(Data_Tuple.curry)(dictProfunctor);
    };
    var flipped = function(dictProfunctor) {
      return iso(Data_Function.flip)(Data_Function.flip)(dictProfunctor);
    };
    var dimapping = function(dictProfunctor) {
      return function(dictProfunctor1) {
        return function(f) {
          return function(g) {
            return function(dictProfunctor2) {
              return withIso(f)(function(sa) {
                return function(bt) {
                  return withIso(g)(function(ssaa) {
                    return function(bbtt) {
                      return iso(Data_Profunctor.dimap(dictProfunctor)(sa)(ssaa))(Data_Profunctor.dimap(dictProfunctor1)(bt)(bbtt))(dictProfunctor2);
                    };
                  });
                };
              });
            };
          };
        };
      };
    };
    var curried = function(dictProfunctor) {
      return iso(Data_Tuple.curry)(Data_Tuple.uncurry)(dictProfunctor);
    };
    var cloneIso = function(l) {
      return function(dictProfunctor) {
        return withIso(l)(function(x) {
          return function(y) {
            return function(p) {
              return iso(x)(y)(dictProfunctor)(p);
            };
          };
        });
      };
    };
    var auf = function(dictProfunctor) {
      return function(l) {
        return withIso(l)(function(sa) {
          return function(bt) {
            return function(f) {
              return function(g) {
                return function(e) {
                  return bt(f(Data_Profunctor.rmap(dictProfunctor)(sa)(g))(e));
                };
              };
            };
          };
        });
      };
    };
    var au = function(l) {
      return withIso(l)(function(sa) {
        return function(bt) {
          return function(f) {
            return function(e) {
              return sa(f(bt)(e));
            };
          };
        };
      });
    };
    module2.exports = {
      iso,
      withIso,
      cloneIso,
      re,
      au,
      auf,
      under,
      non,
      curried,
      uncurried,
      flipped,
      mapping,
      dimapping,
      Exchange: Data_Lens_Types.Exchange,
      Re: Data_Lens_Types.Re
    };
  }
});

// output/LanguageServer.IdePurescript.Util.CST/index.js
var require_LanguageServer_IdePurescript_Util = __commonJS({
  "output/LanguageServer.IdePurescript.Util.CST/index.js"(exports2, module2) {
    "use strict";
    var Data_Lens_Iso = require_Data_Lens2();
    var sourcePosToPosition = function(v) {
      return {
        line: v.line,
        character: v.column
      };
    };
    var sourceRangeToRange = function(sr) {
      return {
        start: sourcePosToPosition(sr.start),
        end: sourcePosToPosition(sr.end)
      };
    };
    var sourcePosFromPosition = function(v) {
      return {
        line: v.line,
        column: v.character
      };
    };
    var sourceRangeFromRange = function(v) {
      return {
        start: sourcePosFromPosition(v.start),
        end: sourcePosFromPosition(v.end)
      };
    };
    var _sourceRange = function(dictProfunctor) {
      return Data_Lens_Iso.iso(sourceRangeToRange)(sourceRangeFromRange)(dictProfunctor);
    };
    var _sourcePosition = function(dictProfunctor) {
      return Data_Lens_Iso.iso(sourcePosToPosition)(sourcePosFromPosition)(dictProfunctor);
    };
    module2.exports = {
      "_sourcePosition": _sourcePosition,
      "_sourceRange": _sourceRange,
      sourceRangeToRange,
      sourceRangeFromRange,
      sourcePosToPosition,
      sourcePosFromPosition
    };
  }
});

// output/Data.CatQueue/index.js
var require_Data51 = __commonJS({
  "output/Data.CatQueue/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Monad = require_Control7();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_List = require_Data38();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var CatQueue = function() {
      function CatQueue2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      CatQueue2.create = function(value0) {
        return function(value1) {
          return new CatQueue2(value0, value1);
        };
      };
      return CatQueue2;
    }();
    var unsnoc = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v.value1 instanceof Data_List_Types.Cons) {
          $tco_done = true;
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value1.value0, new CatQueue(v.value0, v.value1.value1)));
        }
        ;
        if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v.value1 instanceof Data_List_Types.Nil) {
          $copy_v = new CatQueue(Data_List_Types.Nil.value, Data_List.reverse(v.value0));
          return;
        }
        ;
        throw new Error("Failed pattern match at Data.CatQueue (line 93, column 1 - line 93, column 63): " + [v.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    var uncons = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v.value0 instanceof Data_List_Types.Nil) {
          $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
          return;
        }
        ;
        if (v.value0 instanceof Data_List_Types.Cons) {
          $tco_done = true;
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
        }
        ;
        throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [v.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    var snoc = function(v) {
      return function(a) {
        return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
    };
    var showCatQueue = function(dictShow) {
      return {
        show: function(v) {
          return "(CatQueue " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value0) + (" " + (Data_Show.show(Data_List_Types.showList(dictShow))(v.value1) + ")")));
        }
      };
    };
    var $$null = function(v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
        return true;
      }
      ;
      return false;
    };
    var length = function(v) {
      return Data_List.length(v.value0) + Data_List.length(v.value1) | 0;
    };
    var functorCatQueue = {
      map: function(f) {
        return function(v) {
          return new CatQueue(Data_Functor.map(Data_List_Types.functorList)(f)(v.value0), Data_Functor.map(Data_List_Types.functorList)(f)(v.value1));
        };
      }
    };
    var foldableCatQueue = {
      foldMap: function(dictMonoid) {
        return Data_Foldable.foldMapDefaultL(foldableCatQueue)(dictMonoid);
      },
      foldr: function(f) {
        return Data_Foldable.foldrDefault(foldableCatQueue)(f);
      },
      foldl: function(f) {
        var go = function($copy_acc) {
          return function($copy_q) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, q) {
              var v = uncons(q);
              if (v instanceof Data_Maybe.Just) {
                $tco_var_acc = f(acc)(v.value0.value0);
                $copy_q = v.value0.value1;
                return;
              }
              ;
              if (v instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return acc;
              }
              ;
              throw new Error("Failed pattern match at Data.CatQueue (line 148, column 16 - line 150, column 22): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_q);
            }
            ;
            return $tco_result;
          };
        };
        return go;
      }
    };
    var semigroupCatQueue = {
      append: Data_Foldable.foldl(foldableCatQueue)(snoc)
    };
    var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
    var monoidCatQueue = {
      mempty: empty,
      Semigroup0: function() {
        return semigroupCatQueue;
      }
    };
    var singleton = snoc(empty);
    var fromFoldable = function(dictFoldable) {
      return function(f) {
        return Data_Foldable.foldMap(dictFoldable)(monoidCatQueue)(singleton)(f);
      };
    };
    var traversableCatQueue = {
      traverse: function(dictApplicative) {
        return function(f) {
          var $100 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Foldable.foldl(foldableCatQueue)(snoc)(empty));
          var $101 = Data_Foldable.foldl(foldableCatQueue)(function(acc) {
            var $103 = Control_Apply.lift2(dictApplicative.Apply0())(snoc)(acc);
            return function($104) {
              return $103(f($104));
            };
          })(Control_Applicative.pure(dictApplicative)(empty));
          return function($102) {
            return $100($101($102));
          };
        };
      },
      sequence: function(dictApplicative) {
        return Data_Traversable.sequenceDefault(traversableCatQueue)(dictApplicative);
      },
      Functor0: function() {
        return functorCatQueue;
      },
      Foldable1: function() {
        return foldableCatQueue;
      }
    };
    var unfoldable1CatQueue = {
      unfoldr1: function(f) {
        return function(b) {
          var go = function($copy_source) {
            return function($copy_memo) {
              var $tco_var_source = $copy_source;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(source, memo) {
                var v = f(source);
                if (v.value1 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return snoc(memo)(v.value0);
                }
                ;
                if (v.value1 instanceof Data_Maybe.Just) {
                  $tco_var_source = v.value1.value0;
                  $copy_memo = snoc(memo)(v.value0);
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatQueue (line 155, column 24 - line 157, column 57): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_source, $copy_memo);
              }
              ;
              return $tco_result;
            };
          };
          return go(b)(empty);
        };
      }
    };
    var unfoldableCatQueue = {
      unfoldr: function(f) {
        return function(b) {
          var go = function($copy_source) {
            return function($copy_memo) {
              var $tco_var_source = $copy_source;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(source, memo) {
                var v = f(source);
                if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return memo;
                }
                ;
                if (v instanceof Data_Maybe.Just) {
                  $tco_var_source = v.value0.value1;
                  $copy_memo = snoc(memo)(v.value0.value0);
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatQueue (line 162, column 24 - line 164, column 57): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_source, $copy_memo);
              }
              ;
              return $tco_result;
            };
          };
          return go(b)(empty);
        };
      },
      Unfoldable10: function() {
        return unfoldable1CatQueue;
      }
    };
    var cqEq = function(dictEq) {
      var elemEq = Data_Eq.eq(dictEq);
      var go = function($copy_xs) {
        return function($copy_ys) {
          var $tco_var_xs = $copy_xs;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(xs, ys) {
            var v = uncons(ys);
            var v1 = uncons(xs);
            if (v1 instanceof Data_Maybe.Just && (v instanceof Data_Maybe.Just && elemEq(v1.value0.value0)(v.value0.value0))) {
              $tco_var_xs = v1.value0.value1;
              $copy_ys = v.value0.value1;
              return;
            }
            ;
            if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return true;
            }
            ;
            $tco_done = true;
            return false;
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_xs, $copy_ys);
          }
          ;
          return $tco_result;
        };
      };
      return go;
    };
    var eqCatQueue = function(dictEq) {
      return {
        eq: cqEq(dictEq)
      };
    };
    var cqCompare = function(dictOrd) {
      var elemCompare = Data_Ord.compare(dictOrd);
      var go = function($copy_xs) {
        return function($copy_ys) {
          var $tco_var_xs = $copy_xs;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(xs, ys) {
            var v = uncons(ys);
            var v1 = uncons(xs);
            if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just) {
              var v2 = elemCompare(v1.value0.value0)(v.value0.value0);
              if (v2 instanceof Data_Ordering.EQ) {
                $tco_var_xs = v1.value0.value1;
                $copy_ys = v.value0.value1;
                return;
              }
              ;
              $tco_done = true;
              return v2;
            }
            ;
            if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return Data_Ordering.GT.value;
            }
            ;
            if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Just) {
              $tco_done = true;
              return Data_Ordering.LT.value;
            }
            ;
            if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Data.CatQueue (line 118, column 16 - line 125, column 30): " + [v1.constructor.name, v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_xs, $copy_ys);
          }
          ;
          return $tco_result;
        };
      };
      return go;
    };
    var ordCatQueue = function(dictOrd) {
      return {
        compare: cqCompare(dictOrd),
        Eq0: function() {
          return eqCatQueue(dictOrd.Eq0());
        }
      };
    };
    var cons = function(a) {
      return function(v) {
        return new CatQueue(new Data_List_Types.Cons(a, v.value0), v.value1);
      };
    };
    var monadCatQueue = {
      Applicative0: function() {
        return applicativeCatQueue;
      },
      Bind1: function() {
        return bindCatQueue;
      }
    };
    var bindCatQueue = {
      bind: Data_Function.flip(Data_Foldable.foldMap(foldableCatQueue)(monoidCatQueue)),
      Apply0: function() {
        return applyCatQueue;
      }
    };
    var applyCatQueue = {
      apply: Control_Monad.ap(monadCatQueue),
      Functor0: function() {
        return functorCatQueue;
      }
    };
    var applicativeCatQueue = {
      pure: singleton,
      Apply0: function() {
        return applyCatQueue;
      }
    };
    var altCatQueue = {
      alt: Data_Semigroup.append(semigroupCatQueue),
      Functor0: function() {
        return functorCatQueue;
      }
    };
    var plusCatQueue = {
      empty,
      Alt0: function() {
        return altCatQueue;
      }
    };
    var alternativeCatQueue = {
      Applicative0: function() {
        return applicativeCatQueue;
      },
      Plus1: function() {
        return plusCatQueue;
      }
    };
    var monadPlusCatQueue = {
      Monad0: function() {
        return monadCatQueue;
      },
      Alternative1: function() {
        return alternativeCatQueue;
      }
    };
    var monadZeroCatQueue = {
      Monad0: function() {
        return monadCatQueue;
      },
      Alternative1: function() {
        return alternativeCatQueue;
      },
      MonadZeroIsDeprecated2: function() {
        return void 0;
      }
    };
    module2.exports = {
      CatQueue,
      empty,
      "null": $$null,
      singleton,
      length,
      cons,
      snoc,
      uncons,
      unsnoc,
      fromFoldable,
      eqCatQueue,
      ordCatQueue,
      semigroupCatQueue,
      monoidCatQueue,
      showCatQueue,
      foldableCatQueue,
      unfoldable1CatQueue,
      unfoldableCatQueue,
      traversableCatQueue,
      functorCatQueue,
      applyCatQueue,
      applicativeCatQueue,
      bindCatQueue,
      monadCatQueue,
      altCatQueue,
      plusCatQueue,
      alternativeCatQueue,
      monadZeroCatQueue,
      monadPlusCatQueue
    };
  }
});

// output/Data.CatList/index.js
var require_Data52 = __commonJS({
  "output/Data.CatList/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Monad = require_Control7();
    var Data_CatQueue = require_Data51();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_List_Types = require_Data_List();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Semigroup = require_Data7();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var CatNil = function() {
      function CatNil2() {
      }
      ;
      CatNil2.value = new CatNil2();
      return CatNil2;
    }();
    var CatCons = function() {
      function CatCons2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      CatCons2.create = function(value0) {
        return function(value1) {
          return new CatCons2(value0, value1);
        };
      };
      return CatCons2;
    }();
    var showCatList = function(dictShow) {
      return {
        show: function(v) {
          if (v instanceof CatNil) {
            return "CatNil";
          }
          ;
          if (v instanceof CatCons) {
            return "(CatList " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(Data_CatQueue.showCatQueue(showCatList(dictShow)))(v.value1) + ")")));
          }
          ;
          throw new Error("Failed pattern match at Data.CatList (line 148, column 1 - line 150, column 71): " + [v.constructor.name]);
        }
      };
    };
    var $$null = function(v) {
      if (v instanceof CatNil) {
        return true;
      }
      ;
      return false;
    };
    var link = function(v) {
      return function(v1) {
        if (v instanceof CatNil) {
          return v1;
        }
        ;
        if (v1 instanceof CatNil) {
          return v;
        }
        ;
        if (v instanceof CatCons) {
          return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
        }
        ;
        throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [v.constructor.name, v1.constructor.name]);
      };
    };
    var foldr = function(k) {
      return function(b) {
        return function(q) {
          var foldl = function($copy_v) {
            return function($copy_c) {
              return function($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_var_c = $copy_c;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, c, v1) {
                  if (v1 instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return c;
                  }
                  ;
                  if (v1 instanceof Data_List_Types.Cons) {
                    $tco_var_v = v;
                    $tco_var_c = v(c)(v1.value0);
                    $copy_v1 = v1.value1;
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [v.constructor.name, c.constructor.name, v1.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                }
                ;
                return $tco_result;
              };
            };
          };
          var go = function($copy_xs) {
            return function($copy_ys) {
              var $tco_var_xs = $copy_xs;
              var $tco_done1 = false;
              var $tco_result;
              function $tco_loop(xs, ys) {
                var v = Data_CatQueue.uncons(xs);
                if (v instanceof Data_Maybe.Nothing) {
                  $tco_done1 = true;
                  return foldl(function(x) {
                    return function(i) {
                      return i(x);
                    };
                  })(b)(ys);
                }
                ;
                if (v instanceof Data_Maybe.Just) {
                  $tco_var_xs = v.value0.value1;
                  $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done1) {
                $tco_result = $tco_loop($tco_var_xs, $copy_ys);
              }
              ;
              return $tco_result;
            };
          };
          return go(q)(Data_List_Types.Nil.value);
        };
      };
    };
    var uncons = function(v) {
      if (v instanceof CatNil) {
        return Data_Maybe.Nothing.value;
      }
      ;
      if (v instanceof CatCons) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, function() {
          var $45 = Data_CatQueue["null"](v.value1);
          if ($45) {
            return CatNil.value;
          }
          ;
          return foldr(link)(CatNil.value)(v.value1);
        }()));
      }
      ;
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [v.constructor.name]);
    };
    var foldableCatList = {
      foldMap: function(dictMonoid) {
        return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
      },
      foldr: function(f) {
        return function(s) {
          return function(l) {
            return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
          };
        };
      },
      foldl: function(f) {
        var go = function($copy_acc) {
          return function($copy_q) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, q) {
              var v = uncons(q);
              if (v instanceof Data_Maybe.Just) {
                $tco_var_acc = f(acc)(v.value0.value0);
                $copy_q = v.value0.value1;
                return;
              }
              ;
              if (v instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return acc;
              }
              ;
              throw new Error("Failed pattern match at Data.CatList (line 157, column 16 - line 159, column 22): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_q);
            }
            ;
            return $tco_result;
          };
        };
        return go;
      }
    };
    var length = Data_Foldable.length(foldableCatList)(Data_Semiring.semiringInt);
    var foldMap = function(dictMonoid) {
      return function(v) {
        return function(v1) {
          if (v1 instanceof CatNil) {
            return Data_Monoid.mempty(dictMonoid);
          }
          ;
          if (v1 instanceof CatCons) {
            var d = function() {
              var $54 = Data_CatQueue["null"](v1.value1);
              if ($54) {
                return CatNil.value;
              }
              ;
              return foldr(link)(CatNil.value)(v1.value1);
            }();
            return Data_Semigroup.append(dictMonoid.Semigroup0())(v(v1.value0))(foldMap(dictMonoid)(v)(d));
          }
          ;
          throw new Error("Failed pattern match at Data.CatList (line 135, column 1 - line 135, column 62): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    };
    var empty = CatNil.value;
    var append = link;
    var cons = function(a) {
      return function(cat) {
        return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
    };
    var functorCatList = {
      map: function(v) {
        return function(v1) {
          if (v1 instanceof CatNil) {
            return CatNil.value;
          }
          ;
          if (v1 instanceof CatCons) {
            var d = function() {
              var $59 = Data_CatQueue["null"](v1.value1);
              if ($59) {
                return CatNil.value;
              }
              ;
              return foldr(link)(CatNil.value)(v1.value1);
            }();
            return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
          }
          ;
          throw new Error("Failed pattern match at Data.CatList (line 185, column 1 - line 189, column 26): " + [v.constructor.name, v1.constructor.name]);
        };
      }
    };
    var singleton = function(a) {
      return cons(a)(CatNil.value);
    };
    var traversableCatList = {
      traverse: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof CatNil) {
              return Control_Applicative.pure(dictApplicative)(CatNil.value);
            }
            ;
            if (v1 instanceof CatCons) {
              var d = function() {
                var $64 = Data_CatQueue["null"](v1.value1);
                if ($64) {
                  return CatNil.value;
                }
                ;
                return foldr(link)(CatNil.value)(v1.value1);
              }();
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(v(v1.value0)))(Data_Traversable.traverse(traversableCatList)(dictApplicative)(v)(d));
            }
            ;
            throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      },
      sequence: function(dictApplicative) {
        return function(v) {
          if (v instanceof CatNil) {
            return Control_Applicative.pure(dictApplicative)(CatNil.value);
          }
          ;
          if (v instanceof CatCons) {
            var d = function() {
              var $68 = Data_CatQueue["null"](v.value1);
              if ($68) {
                return CatNil.value;
              }
              ;
              return foldr(link)(CatNil.value)(v.value1);
            }();
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(cons)(v.value0))(Data_Traversable.sequence(traversableCatList)(dictApplicative)(d));
          }
          ;
          throw new Error("Failed pattern match at Data.CatList (line 175, column 1 - line 183, column 33): " + [v.constructor.name]);
        };
      },
      Functor0: function() {
        return functorCatList;
      },
      Foldable1: function() {
        return foldableCatList;
      }
    };
    var semigroupCatList = {
      append
    };
    var monoidCatList = {
      mempty: CatNil.value,
      Semigroup0: function() {
        return semigroupCatList;
      }
    };
    var monadCatList = {
      Applicative0: function() {
        return applicativeCatList;
      },
      Bind1: function() {
        return bindCatList;
      }
    };
    var bindCatList = {
      bind: Data_Function.flip(foldMap(monoidCatList)),
      Apply0: function() {
        return applyCatList;
      }
    };
    var applyCatList = {
      apply: Control_Monad.ap(monadCatList),
      Functor0: function() {
        return functorCatList;
      }
    };
    var applicativeCatList = {
      pure: singleton,
      Apply0: function() {
        return applyCatList;
      }
    };
    var fromFoldable = function(dictFoldable) {
      return function(f) {
        return Data_Foldable.foldMap(dictFoldable)(monoidCatList)(singleton)(f);
      };
    };
    var snoc = function(cat) {
      return function(a) {
        return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
    };
    var unfoldable1CatList = {
      unfoldr1: function(f) {
        return function(b) {
          var go = function($copy_source) {
            return function($copy_memo) {
              var $tco_var_source = $copy_source;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(source, memo) {
                var v = f(source);
                if (v.value1 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return snoc(memo)(v.value0);
                }
                ;
                if (v.value1 instanceof Data_Maybe.Just) {
                  $tco_var_source = v.value1.value0;
                  $copy_memo = snoc(memo)(v.value0);
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatList (line 171, column 24 - line 173, column 57): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_source, $copy_memo);
              }
              ;
              return $tco_result;
            };
          };
          return go(b)(CatNil.value);
        };
      }
    };
    var unfoldableCatList = {
      unfoldr: function(f) {
        return function(b) {
          var go = function($copy_source) {
            return function($copy_memo) {
              var $tco_var_source = $copy_source;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(source, memo) {
                var v = f(source);
                if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return memo;
                }
                ;
                if (v instanceof Data_Maybe.Just) {
                  $tco_var_source = v.value0.value1;
                  $copy_memo = snoc(memo)(v.value0.value0);
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatList (line 164, column 24 - line 166, column 57): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_source, $copy_memo);
              }
              ;
              return $tco_result;
            };
          };
          return go(b)(CatNil.value);
        };
      },
      Unfoldable10: function() {
        return unfoldable1CatList;
      }
    };
    var altCatList = {
      alt: append,
      Functor0: function() {
        return functorCatList;
      }
    };
    var plusCatList = {
      empty,
      Alt0: function() {
        return altCatList;
      }
    };
    var alternativeCatList = {
      Applicative0: function() {
        return applicativeCatList;
      },
      Plus1: function() {
        return plusCatList;
      }
    };
    var monadPlusCatList = {
      Monad0: function() {
        return monadCatList;
      },
      Alternative1: function() {
        return alternativeCatList;
      }
    };
    var monadZeroCatList = {
      Monad0: function() {
        return monadCatList;
      },
      Alternative1: function() {
        return alternativeCatList;
      },
      MonadZeroIsDeprecated2: function() {
        return void 0;
      }
    };
    module2.exports = {
      CatNil,
      CatCons,
      empty,
      "null": $$null,
      singleton,
      length,
      append,
      cons,
      snoc,
      uncons,
      fromFoldable,
      semigroupCatList,
      monoidCatList,
      showCatList,
      foldableCatList,
      unfoldableCatList,
      unfoldable1CatList,
      traversableCatList,
      functorCatList,
      applyCatList,
      applicativeCatList,
      bindCatList,
      monadCatList,
      altCatList,
      plusCatList,
      alternativeCatList,
      monadZeroCatList,
      monadPlusCatList
    };
  }
});

// output/Control.Monad.Free/index.js
var require_Control_Monad2 = __commonJS({
  "output/Control.Monad.Free/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad = require_Control7();
    var Control_Monad_Rec_Class = require_Control_Monad_Rec();
    var Data_CatList = require_Data52();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_Traversable = require_Data29();
    var Unsafe_Coerce = require_Unsafe();
    var Free = function() {
      function Free2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Free2.create = function(value0) {
        return function(value1) {
          return new Free2(value0, value1);
        };
      };
      return Free2;
    }();
    var Return = function() {
      function Return2(value0) {
        this.value0 = value0;
      }
      ;
      Return2.create = function(value0) {
        return new Return2(value0);
      };
      return Return2;
    }();
    var Bind = function() {
      function Bind2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Bind2.create = function(value0) {
        return function(value1) {
          return new Bind2(value0, value1);
        };
      };
      return Bind2;
    }();
    var toView = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        var runExpF = function(v22) {
          return v22;
        };
        var concatF = function(v22) {
          return function(r) {
            return new Free(v22.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v22.value1)(r));
          };
        };
        if (v.value0 instanceof Return) {
          var v2 = Data_CatList.uncons(v.value1);
          if (v2 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return new Return(v.value0.value0);
          }
          ;
          if (v2 instanceof Data_Maybe.Just) {
            $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
            return;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [v2.constructor.name]);
        }
        ;
        if (v.value0 instanceof Bind) {
          $tco_done = true;
          return new Bind(v.value0.value0, function(a) {
            return concatF(v.value0.value1(a))(v.value1);
          });
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [v.value0.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    var runFreeM = function(dictFunctor) {
      return function(dictMonadRec) {
        return function(k) {
          var go = function(f) {
            var v = toView(f);
            if (v instanceof Return) {
              return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(v.value0));
            }
            ;
            if (v instanceof Bind) {
              return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Loop.create)(k(Data_Functor.map(dictFunctor)(v.value1)(v.value0)));
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 194, column 10 - line 196, column 37): " + [v.constructor.name]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
        };
      };
    };
    var runFree = function(dictFunctor) {
      return function(k) {
        var go = function($copy_f) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(f) {
            var v = toView(f);
            if (v instanceof Return) {
              $tco_done = true;
              return v.value0;
            }
            ;
            if (v instanceof Bind) {
              $copy_f = k(Data_Functor.map(dictFunctor)(v.value1)(v.value0));
              return;
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 178, column 10 - line 180, column 33): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_f);
          }
          ;
          return $tco_result;
        };
        return go;
      };
    };
    var resume$prime = function(k) {
      return function(j) {
        return function(f) {
          var v = toView(f);
          if (v instanceof Return) {
            return j(v.value0);
          }
          ;
          if (v instanceof Bind) {
            return k(v.value0)(v.value1);
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [v.constructor.name]);
        };
      };
    };
    var resume = function(dictFunctor) {
      return resume$prime(function(g) {
        return function(i) {
          return new Data_Either.Left(Data_Functor.map(dictFunctor)(i)(g));
        };
      })(Data_Either.Right.create);
    };
    var fromView = function(f) {
      return new Free(f, Data_CatList.empty);
    };
    var wrap = function(f) {
      return fromView(new Bind(f, Unsafe_Coerce.unsafeCoerce));
    };
    var suspendF = function(dictApplicative) {
      return function(f) {
        return wrap(Control_Applicative.pure(dictApplicative)(f));
      };
    };
    var freeMonad = {
      Applicative0: function() {
        return freeApplicative;
      },
      Bind1: function() {
        return freeBind;
      }
    };
    var freeFunctor = {
      map: function(k) {
        return function(f) {
          return Control_Bind.bindFlipped(freeBind)(function() {
            var $119 = Control_Applicative.pure(freeApplicative);
            return function($120) {
              return $119(k($120));
            };
          }())(f);
        };
      }
    };
    var freeBind = {
      bind: function(v) {
        return function(k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
        };
      },
      Apply0: function() {
        return freeApply;
      }
    };
    var freeApply = {
      apply: Control_Monad.ap(freeMonad),
      Functor0: function() {
        return freeFunctor;
      }
    };
    var freeApplicative = {
      pure: function($121) {
        return fromView(Return.create($121));
      },
      Apply0: function() {
        return freeApply;
      }
    };
    var semigroupFree = function(dictSemigroup) {
      return {
        append: Control_Apply.lift2(freeApply)(Data_Semigroup.append(dictSemigroup))
      };
    };
    var freeMonadRec = {
      tailRecM: function(k) {
        return function(a) {
          return Control_Bind.bind(freeBind)(k(a))(function(v) {
            if (v instanceof Control_Monad_Rec_Class.Loop) {
              return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
            }
            ;
            if (v instanceof Control_Monad_Rec_Class.Done) {
              return Control_Applicative.pure(freeApplicative)(v.value0);
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [v.constructor.name]);
          });
        };
      },
      Monad0: function() {
        return freeMonad;
      }
    };
    var liftF = function(f) {
      return fromView(new Bind(f, function() {
        var $122 = Control_Applicative.pure(freeApplicative);
        return function($123) {
          return $122($123);
        };
      }()));
    };
    var freeMonadTrans = {
      lift: function(dictMonad) {
        return liftF;
      }
    };
    var monoidFree = function(dictMonoid) {
      return {
        mempty: Control_Applicative.pure(freeApplicative)(Data_Monoid.mempty(dictMonoid)),
        Semigroup0: function() {
          return semigroupFree(dictMonoid.Semigroup0());
        }
      };
    };
    var substFree = function(k) {
      var go = function(f) {
        var v = toView(f);
        if (v instanceof Return) {
          return Control_Applicative.pure(freeApplicative)(v.value0);
        }
        ;
        if (v instanceof Bind) {
          return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 168, column 10 - line 170, column 33): " + [v.constructor.name]);
      };
      return go;
    };
    var hoistFree = function(k) {
      return substFree(function($124) {
        return liftF(k($124));
      });
    };
    var foldableFree = function(dictFunctor) {
      return function(dictFoldable) {
        return {
          foldMap: function(dictMonoid) {
            return function(f) {
              var go = function() {
                var $125 = resume(dictFunctor);
                return function($126) {
                  return function(v) {
                    if (v instanceof Data_Either.Left) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(v.value0);
                    }
                    ;
                    if (v instanceof Data_Either.Right) {
                      return f(v.value0);
                    }
                    ;
                    throw new Error("Failed pattern match at Control.Monad.Free (line 93, column 21 - line 95, column 21): " + [v.constructor.name]);
                  }($125($126));
                };
              }();
              return go;
            };
          },
          foldl: function(f) {
            var go = function(r) {
              var $127 = resume(dictFunctor);
              return function($128) {
                return function(v) {
                  if (v instanceof Data_Either.Left) {
                    return Data_Foldable.foldl(dictFoldable)(go)(r)(v.value0);
                  }
                  ;
                  if (v instanceof Data_Either.Right) {
                    return f(r)(v.value0);
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Free (line 98, column 23 - line 100, column 23): " + [v.constructor.name]);
                }($127($128));
              };
            };
            return go;
          },
          foldr: function(f) {
            var go = function(r) {
              var $129 = resume(dictFunctor);
              return function($130) {
                return function(v) {
                  if (v instanceof Data_Either.Left) {
                    return Data_Foldable.foldr(dictFoldable)(Data_Function.flip(go))(r)(v.value0);
                  }
                  ;
                  if (v instanceof Data_Either.Right) {
                    return f(v.value0)(r);
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Free (line 103, column 23 - line 105, column 23): " + [v.constructor.name]);
                }($129($130));
              };
            };
            return go;
          }
        };
      };
    };
    var traversableFree = function(dictTraversable) {
      return {
        traverse: function(dictApplicative) {
          return function(f) {
            var go = function() {
              var $131 = resume(dictTraversable.Functor0());
              return function($132) {
                return function(v) {
                  if (v instanceof Data_Either.Left) {
                    return Data_Functor.map(dictApplicative.Apply0().Functor0())(function() {
                      var $133 = Control_Bind.join(freeBind);
                      return function($134) {
                        return $133(liftF($134));
                      };
                    }())(Data_Traversable.traverse(dictTraversable)(dictApplicative)(go)(v.value0));
                  }
                  ;
                  if (v instanceof Data_Either.Right) {
                    return Data_Functor.map(dictApplicative.Apply0().Functor0())(Control_Applicative.pure(freeApplicative))(f(v.value0));
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Free (line 110, column 21 - line 112, column 30): " + [v.constructor.name]);
                }($131($132));
              };
            }();
            return go;
          };
        },
        sequence: function(dictApplicative) {
          return function(tma) {
            return Data_Traversable.traverse(traversableFree(dictTraversable))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(tma);
          };
        },
        Functor0: function() {
          return freeFunctor;
        },
        Foldable1: function() {
          return foldableFree(dictTraversable.Functor0())(dictTraversable.Foldable1());
        }
      };
    };
    var foldFree = function(dictMonadRec) {
      return function(k) {
        var go = function(f) {
          var v = toView(f);
          if (v instanceof Return) {
            return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(v.value0));
          }
          ;
          if (v instanceof Bind) {
            return Data_Functor.map(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(function($135) {
              return Control_Monad_Rec_Class.Loop.create(v.value1($135));
            })(k(v.value0));
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [v.constructor.name]);
        };
        return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
    };
    var eqFree = function(dictFunctor) {
      return function(dictEq1) {
        return function(dictEq) {
          return {
            eq: function(x) {
              return function(y) {
                var v = resume(dictFunctor)(y);
                var v1 = resume(dictFunctor)(x);
                if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                  return Data_Eq.eq1(dictEq1)(eqFree(dictFunctor)(dictEq1)(dictEq))(v1.value0)(v.value0);
                }
                ;
                if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                  return Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                }
                ;
                return false;
              };
            }
          };
        };
      };
    };
    var ordFree = function(dictFunctor) {
      return function(dictOrd1) {
        return function(dictOrd) {
          return {
            compare: function(x) {
              return function(y) {
                var v = resume(dictFunctor)(y);
                var v1 = resume(dictFunctor)(x);
                if (v1 instanceof Data_Either.Left && v instanceof Data_Either.Left) {
                  return Data_Ord.compare1(dictOrd1)(ordFree(dictFunctor)(dictOrd1)(dictOrd))(v1.value0)(v.value0);
                }
                ;
                if (v1 instanceof Data_Either.Left) {
                  return Data_Ordering.LT.value;
                }
                ;
                if (v instanceof Data_Either.Left) {
                  return Data_Ordering.GT.value;
                }
                ;
                if (v1 instanceof Data_Either.Right && v instanceof Data_Either.Right) {
                  return Data_Ord.compare(dictOrd)(v1.value0)(v.value0);
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Free (line 56, column 17 - line 60, column 36): " + [v1.constructor.name, v.constructor.name]);
              };
            },
            Eq0: function() {
              return eqFree(dictFunctor)(dictOrd1.Eq10())(dictOrd.Eq0());
            }
          };
        };
      };
    };
    var eq1Free = function(dictFunctor) {
      return function(dictEq1) {
        return {
          eq1: function(dictEq) {
            return Data_Eq.eq(eqFree(dictFunctor)(dictEq1)(dictEq));
          }
        };
      };
    };
    var ord1Free = function(dictFunctor) {
      return function(dictOrd1) {
        return {
          compare1: function(dictOrd) {
            return Data_Ord.compare(ordFree(dictFunctor)(dictOrd1)(dictOrd));
          },
          Eq10: function() {
            return eq1Free(dictFunctor)(dictOrd1.Eq10());
          }
        };
      };
    };
    module2.exports = {
      suspendF,
      wrap,
      liftF,
      hoistFree,
      foldFree,
      substFree,
      runFree,
      runFreeM,
      resume,
      "resume'": resume$prime,
      eqFree,
      eq1Free,
      ordFree,
      ord1Free,
      freeFunctor,
      freeBind,
      freeApplicative,
      freeApply,
      freeMonad,
      freeMonadTrans,
      freeMonadRec,
      foldableFree,
      traversableFree,
      semigroupFree,
      monoidFree
    };
  }
});

// output/Data.Bifoldable/index.js
var require_Data53 = __commonJS({
  "output/Data.Bifoldable/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Category = require_Control2();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Monoid = require_Data19();
    var Data_Monoid_Conj = require_Data_Monoid();
    var Data_Monoid_Disj = require_Data_Monoid2();
    var Data_Monoid_Dual = require_Data_Monoid3();
    var Data_Monoid_Endo = require_Data_Monoid4();
    var Data_Newtype = require_Data23();
    var Data_Semigroup = require_Data7();
    var Data_Unit = require_Data3();
    var bifoldr = function(dict) {
      return dict.bifoldr;
    };
    var bitraverse_ = function(dictBifoldable) {
      return function(dictApplicative) {
        return function(f) {
          return function(g) {
            return bifoldr(dictBifoldable)(function() {
              var $150 = Control_Apply.applySecond(dictApplicative.Apply0());
              return function($151) {
                return $150(f($151));
              };
            }())(function() {
              var $152 = Control_Apply.applySecond(dictApplicative.Apply0());
              return function($153) {
                return $152(g($153));
              };
            }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
        };
      };
    };
    var bifor_ = function(dictBifoldable) {
      return function(dictApplicative) {
        return function(t) {
          return function(f) {
            return function(g) {
              return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
            };
          };
        };
      };
    };
    var bisequence_ = function(dictBifoldable) {
      return function(dictApplicative) {
        return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var bifoldl = function(dict) {
      return dict.bifoldl;
    };
    var bifoldableTuple = {
      bifoldMap: function(dictMonoid) {
        return function(f) {
          return function(g) {
            return function(v) {
              return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
            };
          };
        };
      },
      bifoldr: function(f) {
        return function(g) {
          return function(z) {
            return function(v) {
              return f(v.value0)(g(v.value1)(z));
            };
          };
        };
      },
      bifoldl: function(f) {
        return function(g) {
          return function(z) {
            return function(v) {
              return g(f(z)(v.value0))(v.value1);
            };
          };
        };
      }
    };
    var bifoldableJoker = function(dictFoldable) {
      return {
        bifoldr: function(v) {
          return function(r) {
            return function(u) {
              return function(v1) {
                return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
              };
            };
          };
        },
        bifoldl: function(v) {
          return function(r) {
            return function(u) {
              return function(v1) {
                return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
              };
            };
          };
        },
        bifoldMap: function(dictMonoid) {
          return function(v) {
            return function(r) {
              return function(v1) {
                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
              };
            };
          };
        }
      };
    };
    var bifoldableEither = {
      bifoldr: function(v) {
        return function(v1) {
          return function(z) {
            return function(v2) {
              if (v2 instanceof Data_Either.Left) {
                return v(v2.value0)(z);
              }
              ;
              if (v2 instanceof Data_Either.Right) {
                return v1(v2.value0)(z);
              }
              ;
              throw new Error("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32): " + [v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name]);
            };
          };
        };
      },
      bifoldl: function(v) {
        return function(v1) {
          return function(z) {
            return function(v2) {
              if (v2 instanceof Data_Either.Left) {
                return v(z)(v2.value0);
              }
              ;
              if (v2 instanceof Data_Either.Right) {
                return v1(z)(v2.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32): " + [v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name]);
            };
          };
        };
      },
      bifoldMap: function(dictMonoid) {
        return function(v) {
          return function(v1) {
            return function(v2) {
              if (v2 instanceof Data_Either.Left) {
                return v(v2.value0);
              }
              ;
              if (v2 instanceof Data_Either.Right) {
                return v1(v2.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.Bifoldable (line 62, column 1 - line 68, column 32): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
            };
          };
        };
      }
    };
    var bifoldableConst = {
      bifoldr: function(f) {
        return function(v) {
          return function(z) {
            return function(v1) {
              return f(v1)(z);
            };
          };
        };
      },
      bifoldl: function(f) {
        return function(v) {
          return function(z) {
            return function(v1) {
              return f(z)(v1);
            };
          };
        };
      },
      bifoldMap: function(dictMonoid) {
        return function(f) {
          return function(v) {
            return function(v1) {
              return f(v1);
            };
          };
        };
      }
    };
    var bifoldableClown = function(dictFoldable) {
      return {
        bifoldr: function(l) {
          return function(v) {
            return function(u) {
              return function(v1) {
                return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
              };
            };
          };
        },
        bifoldl: function(l) {
          return function(v) {
            return function(u) {
              return function(v1) {
                return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
              };
            };
          };
        },
        bifoldMap: function(dictMonoid) {
          return function(l) {
            return function(v) {
              return function(v1) {
                return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
              };
            };
          };
        }
      };
    };
    var bifoldMapDefaultR = function(dictBifoldable) {
      return function(dictMonoid) {
        return function(f) {
          return function(g) {
            return bifoldr(dictBifoldable)(function() {
              var $154 = Data_Semigroup.append(dictMonoid.Semigroup0());
              return function($155) {
                return $154(f($155));
              };
            }())(function() {
              var $156 = Data_Semigroup.append(dictMonoid.Semigroup0());
              return function($157) {
                return $156(g($157));
              };
            }())(Data_Monoid.mempty(dictMonoid));
          };
        };
      };
    };
    var bifoldMapDefaultL = function(dictBifoldable) {
      return function(dictMonoid) {
        return function(f) {
          return function(g) {
            return bifoldl(dictBifoldable)(function(m) {
              return function(a) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
              };
            })(function(m) {
              return function(b) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
              };
            })(Data_Monoid.mempty(dictMonoid));
          };
        };
      };
    };
    var bifoldMap = function(dict) {
      return dict.bifoldMap;
    };
    var bifoldableFlip = function(dictBifoldable) {
      return {
        bifoldr: function(r) {
          return function(l) {
            return function(u) {
              return function(v) {
                return bifoldr(dictBifoldable)(l)(r)(u)(v);
              };
            };
          };
        },
        bifoldl: function(r) {
          return function(l) {
            return function(u) {
              return function(v) {
                return bifoldl(dictBifoldable)(l)(r)(u)(v);
              };
            };
          };
        },
        bifoldMap: function(dictMonoid) {
          return function(r) {
            return function(l) {
              return function(v) {
                return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
              };
            };
          };
        }
      };
    };
    var bifoldlDefault = function(dictBifoldable) {
      return function(f) {
        return function(g) {
          return function(z) {
            return function(p) {
              return Data_Newtype.unwrap()(Data_Newtype.unwrap()(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function() {
                var $158 = Data_Function.flip(f);
                return function($159) {
                  return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($158($159)));
                };
              }())(function() {
                var $160 = Data_Function.flip(g);
                return function($161) {
                  return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($160($161)));
                };
              }())(p)))(z);
            };
          };
        };
      };
    };
    var bifoldrDefault = function(dictBifoldable) {
      return function(f) {
        return function(g) {
          return function(z) {
            return function(p) {
              return Data_Newtype.unwrap()(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function($162) {
                return Data_Monoid_Endo.Endo(f($162));
              })(function($163) {
                return Data_Monoid_Endo.Endo(g($163));
              })(p))(z);
            };
          };
        };
      };
    };
    var bifoldableProduct2 = function(dictBifoldable) {
      return function(dictBifoldable1) {
        return {
          bifoldr: function(l) {
            return function(r) {
              return function(u) {
                return function(m) {
                  return bifoldrDefault(bifoldableProduct2(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                };
              };
            };
          },
          bifoldl: function(l) {
            return function(r) {
              return function(u) {
                return function(m) {
                  return bifoldlDefault(bifoldableProduct2(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                };
              };
            };
          },
          bifoldMap: function(dictMonoid) {
            return function(l) {
              return function(r) {
                return function(v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                };
              };
            };
          }
        };
      };
    };
    var bifold = function(dictBifoldable) {
      return function(dictMonoid) {
        return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var biany = function(dictBifoldable) {
      return function(dictBooleanAlgebra) {
        return function(p) {
          return function(q) {
            var $164 = Data_Newtype.unwrap();
            var $165 = bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function($167) {
              return Data_Monoid_Disj.Disj(p($167));
            })(function($168) {
              return Data_Monoid_Disj.Disj(q($168));
            });
            return function($166) {
              return $164($165($166));
            };
          };
        };
      };
    };
    var biall = function(dictBifoldable) {
      return function(dictBooleanAlgebra) {
        return function(p) {
          return function(q) {
            var $169 = Data_Newtype.unwrap();
            var $170 = bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function($172) {
              return Data_Monoid_Conj.Conj(p($172));
            })(function($173) {
              return Data_Monoid_Conj.Conj(q($173));
            });
            return function($171) {
              return $169($170($171));
            };
          };
        };
      };
    };
    module2.exports = {
      bifoldMap,
      bifoldl,
      bifoldr,
      bifoldrDefault,
      bifoldlDefault,
      bifoldMapDefaultR,
      bifoldMapDefaultL,
      bifold,
      bitraverse_,
      bifor_,
      bisequence_,
      biany,
      biall,
      bifoldableClown,
      bifoldableJoker,
      bifoldableFlip,
      bifoldableProduct2,
      bifoldableEither,
      bifoldableTuple,
      bifoldableConst
    };
  }
});

// output/Data.Functor.Clown/index.js
var require_Data_Functor8 = __commonJS({
  "output/Data.Functor.Clown/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Data_Functor = require_Data4();
    var Data_Functor_Contravariant = require_Data_Functor6();
    var Data_Show = require_Data14();
    var Clown = function(x) {
      return x;
    };
    var showClown = function(dictShow) {
      return {
        show: function(v) {
          return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var profunctorClown = function(dictContravariant) {
      return {
        dimap: function(f) {
          return function(v) {
            return function(v1) {
              return Data_Functor_Contravariant.cmap(dictContravariant)(f)(v1);
            };
          };
        }
      };
    };
    var ordClown = function(dictOrd) {
      return dictOrd;
    };
    var newtypeClown = {
      Coercible0: function() {
        return void 0;
      }
    };
    var hoistClown = function(f) {
      return function(v) {
        return f(v);
      };
    };
    var functorClown = {
      map: function(v) {
        return function(v1) {
          return v1;
        };
      }
    };
    var eqClown = function(dictEq) {
      return dictEq;
    };
    var bifunctorClown = function(dictFunctor) {
      return {
        bimap: function(f) {
          return function(v) {
            return function(v1) {
              return Data_Functor.map(dictFunctor)(f)(v1);
            };
          };
        }
      };
    };
    var biapplyClown = function(dictApply) {
      return {
        biapply: function(v) {
          return function(v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
          };
        },
        Bifunctor0: function() {
          return bifunctorClown(dictApply.Functor0());
        }
      };
    };
    var biapplicativeClown = function(dictApplicative) {
      return {
        bipure: function(a) {
          return function(v) {
            return Control_Applicative.pure(dictApplicative)(a);
          };
        },
        Biapply0: function() {
          return biapplyClown(dictApplicative.Apply0());
        }
      };
    };
    module2.exports = {
      Clown,
      hoistClown,
      newtypeClown,
      eqClown,
      ordClown,
      showClown,
      functorClown,
      bifunctorClown,
      biapplyClown,
      biapplicativeClown,
      profunctorClown
    };
  }
});

// output/Control.Biapply/index.js
var require_Control15 = __commonJS({
  "output/Control.Biapply/index.js"(exports2, module2) {
    "use strict";
    var Control_Category = require_Control2();
    var Data_Bifunctor = require_Data24();
    var Data_Function = require_Data2();
    var Data_Tuple = require_Data22();
    var biapplyTuple = {
      biapply: function(v) {
        return function(v1) {
          return new Data_Tuple.Tuple(v.value0(v1.value0), v.value1(v1.value1));
        };
      },
      Bifunctor0: function() {
        return Data_Bifunctor.bifunctorTuple;
      }
    };
    var biapply = function(dict) {
      return dict.biapply;
    };
    var biapplyFirst = function(dictBiapply) {
      return function(a) {
        return function(b) {
          return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn))))(a))(b);
        };
      };
    };
    var biapplySecond = function(dictBiapply) {
      return function(a) {
        return function(b) {
          return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
        };
      };
    };
    var bilift2 = function(dictBiapply) {
      return function(f) {
        return function(g) {
          return function(a) {
            return function(b) {
              return biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
            };
          };
        };
      };
    };
    var bilift3 = function(dictBiapply) {
      return function(f) {
        return function(g) {
          return function(a) {
            return function(b) {
              return function(c) {
                return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.identity(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
              };
            };
          };
        };
      };
    };
    module2.exports = {
      biapply,
      biapplyFirst,
      biapplySecond,
      bilift2,
      bilift3,
      biapplyTuple
    };
  }
});

// output/Control.Biapplicative/index.js
var require_Control16 = __commonJS({
  "output/Control.Biapplicative/index.js"(exports2, module2) {
    "use strict";
    var Control_Biapply = require_Control15();
    var Data_Tuple = require_Data22();
    var bipure = function(dict) {
      return dict.bipure;
    };
    var biapplicativeTuple = {
      bipure: Data_Tuple.Tuple.create,
      Biapply0: function() {
        return Control_Biapply.biapplyTuple;
      }
    };
    module2.exports = {
      bipure,
      biapplicativeTuple
    };
  }
});

// output/Data.Functor.Flip/index.js
var require_Data_Functor9 = __commonJS({
  "output/Data.Functor.Flip/index.js"(exports2, module2) {
    "use strict";
    var Control_Biapplicative = require_Control16();
    var Control_Biapply = require_Control15();
    var Control_Category = require_Control2();
    var Control_Semigroupoid = require_Control();
    var Data_Bifunctor = require_Data24();
    var Data_Profunctor = require_Data35();
    var Data_Show = require_Data14();
    var Flip = function(x) {
      return x;
    };
    var showFlip = function(dictShow) {
      return {
        show: function(v) {
          return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var semigroupoidFlip = function(dictSemigroupoid) {
      return {
        compose: function(v) {
          return function(v1) {
            return Flip(Control_Semigroupoid.compose(dictSemigroupoid)(v1)(v));
          };
        }
      };
    };
    var ordFlip = function(dictOrd) {
      return dictOrd;
    };
    var newtypeFlip = {
      Coercible0: function() {
        return void 0;
      }
    };
    var functorFlip = function(dictBifunctor) {
      return {
        map: function(f) {
          return function(v) {
            return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
          };
        }
      };
    };
    var eqFlip = function(dictEq) {
      return dictEq;
    };
    var contravariantFlip = function(dictProfunctor) {
      return {
        cmap: function(f) {
          return function(v) {
            return Data_Profunctor.lcmap(dictProfunctor)(f)(v);
          };
        }
      };
    };
    var categoryFlip = function(dictCategory) {
      return {
        identity: Control_Category.identity(dictCategory),
        Semigroupoid0: function() {
          return semigroupoidFlip(dictCategory.Semigroupoid0());
        }
      };
    };
    var bifunctorFlip = function(dictBifunctor) {
      return {
        bimap: function(f) {
          return function(g) {
            return function(v) {
              return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
            };
          };
        }
      };
    };
    var biapplyFlip = function(dictBiapply) {
      return {
        biapply: function(v) {
          return function(v1) {
            return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
        },
        Bifunctor0: function() {
          return bifunctorFlip(dictBiapply.Bifunctor0());
        }
      };
    };
    var biapplicativeFlip = function(dictBiapplicative) {
      return {
        bipure: function(a) {
          return function(b) {
            return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
          };
        },
        Biapply0: function() {
          return biapplyFlip(dictBiapplicative.Biapply0());
        }
      };
    };
    module2.exports = {
      Flip,
      newtypeFlip,
      eqFlip,
      ordFlip,
      showFlip,
      functorFlip,
      bifunctorFlip,
      biapplyFlip,
      biapplicativeFlip,
      contravariantFlip,
      semigroupoidFlip,
      categoryFlip
    };
  }
});

// output/Data.Functor.Joker/index.js
var require_Data_Functor10 = __commonJS({
  "output/Data.Functor.Joker/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Newtype = require_Data23();
    var Data_Show = require_Data14();
    var Joker = function(x) {
      return x;
    };
    var showJoker = function(dictShow) {
      return {
        show: function(v) {
          return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
        }
      };
    };
    var profunctorJoker = function(dictFunctor) {
      return {
        dimap: function(v) {
          return function(g) {
            return function(v1) {
              return Data_Functor.map(dictFunctor)(g)(v1);
            };
          };
        }
      };
    };
    var ordJoker = function(dictOrd) {
      return dictOrd;
    };
    var newtypeJoker = {
      Coercible0: function() {
        return void 0;
      }
    };
    var hoistJoker = function(f) {
      return function(v) {
        return f(v);
      };
    };
    var functorJoker = function(dictFunctor) {
      return {
        map: function(f) {
          return function(v) {
            return Data_Functor.map(dictFunctor)(f)(v);
          };
        }
      };
    };
    var eqJoker = function(dictEq) {
      return dictEq;
    };
    var choiceJoker = function(dictFunctor) {
      return {
        left: function(v) {
          return Joker(Data_Functor.map(dictFunctor)(Data_Either.Left.create)(v));
        },
        right: function(v) {
          return Joker(Data_Functor.map(dictFunctor)(Data_Either.Right.create)(v));
        },
        Profunctor0: function() {
          return profunctorJoker(dictFunctor);
        }
      };
    };
    var bifunctorJoker = function(dictFunctor) {
      return {
        bimap: function(v) {
          return function(g) {
            return function(v1) {
              return Data_Functor.map(dictFunctor)(g)(v1);
            };
          };
        }
      };
    };
    var biapplyJoker = function(dictApply) {
      return {
        biapply: function(v) {
          return function(v1) {
            return Control_Apply.apply(dictApply)(v)(v1);
          };
        },
        Bifunctor0: function() {
          return bifunctorJoker(dictApply.Functor0());
        }
      };
    };
    var biapplicativeJoker = function(dictApplicative) {
      return {
        bipure: function(v) {
          return function(b) {
            return Control_Applicative.pure(dictApplicative)(b);
          };
        },
        Biapply0: function() {
          return biapplyJoker(dictApplicative.Apply0());
        }
      };
    };
    var applyJoker = function(dictApply) {
      return {
        apply: function(v) {
          return function(v1) {
            return Joker(Control_Apply.apply(dictApply)(v)(v1));
          };
        },
        Functor0: function() {
          return functorJoker(dictApply.Functor0());
        }
      };
    };
    var bindJoker = function(dictBind) {
      return {
        bind: function(v) {
          return function(amb) {
            return Joker(Control_Bind.bind(dictBind)(v)(function() {
              var $47 = Data_Newtype.un()(Joker);
              return function($48) {
                return $47(amb($48));
              };
            }()));
          };
        },
        Apply0: function() {
          return applyJoker(dictBind.Apply0());
        }
      };
    };
    var applicativeJoker = function(dictApplicative) {
      return {
        pure: function() {
          var $49 = Control_Applicative.pure(dictApplicative);
          return function($50) {
            return Joker($49($50));
          };
        }(),
        Apply0: function() {
          return applyJoker(dictApplicative.Apply0());
        }
      };
    };
    var monadJoker = function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeJoker(dictMonad.Applicative0());
        },
        Bind1: function() {
          return bindJoker(dictMonad.Bind1());
        }
      };
    };
    module2.exports = {
      Joker,
      hoistJoker,
      newtypeJoker,
      eqJoker,
      ordJoker,
      showJoker,
      functorJoker,
      applyJoker,
      applicativeJoker,
      bindJoker,
      monadJoker,
      bifunctorJoker,
      biapplyJoker,
      biapplicativeJoker,
      profunctorJoker,
      choiceJoker
    };
  }
});

// output/Data.Functor.Product2/index.js
var require_Data_Functor11 = __commonJS({
  "output/Data.Functor.Product2/index.js"(exports2, module2) {
    "use strict";
    var Control_Biapplicative = require_Control16();
    var Control_Biapply = require_Control15();
    var Data_Bifunctor = require_Data24();
    var Data_Eq = require_Data8();
    var Data_Functor = require_Data4();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Profunctor = require_Data35();
    var Data_Show = require_Data14();
    var Product2 = function() {
      function Product22(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Product22.create = function(value0) {
        return function(value1) {
          return new Product22(value0, value1);
        };
      };
      return Product22;
    }();
    var showProduct2 = function(dictShow) {
      return function(dictShow1) {
        return {
          show: function(v) {
            return "(Product2 " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          }
        };
      };
    };
    var profunctorProduct2 = function(dictProfunctor) {
      return function(dictProfunctor1) {
        return {
          dimap: function(f) {
            return function(g) {
              return function(v) {
                return new Product2(Data_Profunctor.dimap(dictProfunctor)(f)(g)(v.value0), Data_Profunctor.dimap(dictProfunctor1)(f)(g)(v.value1));
              };
            };
          }
        };
      };
    };
    var functorProduct2 = function(dictFunctor) {
      return function(dictFunctor1) {
        return {
          map: function(f) {
            return function(v) {
              return new Product2(Data_Functor.map(dictFunctor)(f)(v.value0), Data_Functor.map(dictFunctor1)(f)(v.value1));
            };
          }
        };
      };
    };
    var eqProduct2 = function(dictEq) {
      return function(dictEq1) {
        return {
          eq: function(x) {
            return function(y) {
              return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
            };
          }
        };
      };
    };
    var ordProduct2 = function(dictOrd) {
      return function(dictOrd1) {
        return {
          compare: function(x) {
            return function(y) {
              var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
              }
              ;
              if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
              }
              ;
              return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
            };
          },
          Eq0: function() {
            return eqProduct2(dictOrd.Eq0())(dictOrd1.Eq0());
          }
        };
      };
    };
    var bifunctorProduct2 = function(dictBifunctor) {
      return function(dictBifunctor1) {
        return {
          bimap: function(f) {
            return function(g) {
              return function(v) {
                return new Product2(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
              };
            };
          }
        };
      };
    };
    var biapplyProduct2 = function(dictBiapply) {
      return function(dictBiapply1) {
        return {
          biapply: function(v) {
            return function(v1) {
              return new Product2(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
            };
          },
          Bifunctor0: function() {
            return bifunctorProduct2(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
          }
        };
      };
    };
    var biapplicativeProduct2 = function(dictBiapplicative) {
      return function(dictBiapplicative1) {
        return {
          bipure: function(a) {
            return function(b) {
              return new Product2(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
            };
          },
          Biapply0: function() {
            return biapplyProduct2(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
          }
        };
      };
    };
    module2.exports = {
      Product2,
      eqProduct2,
      ordProduct2,
      showProduct2,
      functorProduct2,
      bifunctorProduct2,
      biapplyProduct2,
      biapplicativeProduct2,
      profunctorProduct2
    };
  }
});

// output/Data.Bitraversable/index.js
var require_Data54 = __commonJS({
  "output/Data.Bitraversable/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Category = require_Control2();
    var Data_Bifoldable = require_Data53();
    var Data_Bifunctor = require_Data24();
    var Data_Const = require_Data26();
    var Data_Either = require_Data16();
    var Data_Functor = require_Data4();
    var Data_Functor_Clown = require_Data_Functor8();
    var Data_Functor_Flip = require_Data_Functor9();
    var Data_Functor_Joker = require_Data_Functor10();
    var Data_Functor_Product2 = require_Data_Functor11();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var bitraverse = function(dict) {
      return dict.bitraverse;
    };
    var lfor = function(dictBitraversable) {
      return function(dictApplicative) {
        return function(t) {
          return function(f) {
            return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
          };
        };
      };
    };
    var ltraverse = function(dictBitraversable) {
      return function(dictApplicative) {
        return function(f) {
          return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
        };
      };
    };
    var rfor = function(dictBitraversable) {
      return function(dictApplicative) {
        return function(t) {
          return function(f) {
            return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
          };
        };
      };
    };
    var rtraverse = function(dictBitraversable) {
      return function(dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
      };
    };
    var bitraversableTuple = {
      bitraverse: function(dictApplicative) {
        return function(f) {
          return function(g) {
            return function(v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create)(f(v.value0)))(g(v.value1));
            };
          };
        };
      },
      bisequence: function(dictApplicative) {
        return function(v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create)(v.value0))(v.value1);
        };
      },
      Bifunctor0: function() {
        return Data_Bifunctor.bifunctorTuple;
      },
      Bifoldable1: function() {
        return Data_Bifoldable.bifoldableTuple;
      }
    };
    var bitraversableJoker = function(dictTraversable) {
      return {
        bitraverse: function(dictApplicative) {
          return function(v) {
            return function(r) {
              return function(v1) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
              };
            };
          };
        },
        bisequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
        },
        Bifunctor0: function() {
          return Data_Functor_Joker.bifunctorJoker(dictTraversable.Functor0());
        },
        Bifoldable1: function() {
          return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
        }
      };
    };
    var bitraversableEither = {
      bitraverse: function(dictApplicative) {
        return function(v) {
          return function(v1) {
            return function(v2) {
              if (v2 instanceof Data_Either.Left) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Left.create)(v(v2.value0));
              }
              ;
              if (v2 instanceof Data_Either.Right) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create)(v1(v2.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Bitraversable (line 57, column 1 - line 61, column 37): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
            };
          };
        };
      },
      bisequence: function(dictApplicative) {
        return function(v) {
          if (v instanceof Data_Either.Left) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Left.create)(v.value0);
          }
          ;
          if (v instanceof Data_Either.Right) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Bitraversable (line 57, column 1 - line 61, column 37): " + [v.constructor.name]);
        };
      },
      Bifunctor0: function() {
        return Data_Bifunctor.bifunctorEither;
      },
      Bifoldable1: function() {
        return Data_Bifoldable.bifoldableEither;
      }
    };
    var bitraversableConst = {
      bitraverse: function(dictApplicative) {
        return function(f) {
          return function(v) {
            return function(v1) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Const.Const)(f(v1));
            };
          };
        };
      },
      bisequence: function(dictApplicative) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Const.Const)(v);
        };
      },
      Bifunctor0: function() {
        return Data_Bifunctor.bifunctorConst;
      },
      Bifoldable1: function() {
        return Data_Bifoldable.bifoldableConst;
      }
    };
    var bitraversableClown = function(dictTraversable) {
      return {
        bitraverse: function(dictApplicative) {
          return function(l) {
            return function(v) {
              return function(v1) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
              };
            };
          };
        },
        bisequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
        },
        Bifunctor0: function() {
          return Data_Functor_Clown.bifunctorClown(dictTraversable.Functor0());
        },
        Bifoldable1: function() {
          return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
        }
      };
    };
    var bisequenceDefault = function(dictBitraversable) {
      return function(dictApplicative) {
        return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn));
      };
    };
    var bisequence = function(dict) {
      return dict.bisequence;
    };
    var bitraversableFlip = function(dictBitraversable) {
      return {
        bitraverse: function(dictApplicative) {
          return function(r) {
            return function(l) {
              return function(v) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
              };
            };
          };
        },
        bisequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
          };
        },
        Bifunctor0: function() {
          return Data_Functor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
        },
        Bifoldable1: function() {
          return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
        }
      };
    };
    var bitraversableProduct2 = function(dictBitraversable) {
      return function(dictBitraversable1) {
        return {
          bitraverse: function(dictApplicative) {
            return function(l) {
              return function(r) {
                return function(v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Product2.Product2.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                };
              };
            };
          },
          bisequence: function(dictApplicative) {
            return function(v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Product2.Product2.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
            };
          },
          Bifunctor0: function() {
            return Data_Functor_Product2.bifunctorProduct2(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
          },
          Bifoldable1: function() {
            return Data_Bifoldable.bifoldableProduct2(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
          }
        };
      };
    };
    var bitraverseDefault = function(dictBitraversable) {
      return function(dictApplicative) {
        return function(f) {
          return function(g) {
            return function(t) {
              return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
            };
          };
        };
      };
    };
    var bifor = function(dictBitraversable) {
      return function(dictApplicative) {
        return function(t) {
          return function(f) {
            return function(g) {
              return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
            };
          };
        };
      };
    };
    module2.exports = {
      bitraverse,
      bisequence,
      bitraverseDefault,
      bisequenceDefault,
      ltraverse,
      rtraverse,
      bifor,
      lfor,
      rfor,
      bitraversableClown,
      bitraversableJoker,
      bitraversableFlip,
      bitraversableProduct2,
      bitraversableEither,
      bitraversableTuple,
      bitraversableConst,
      biall: Data_Bifoldable.biall,
      biany: Data_Bifoldable.biany,
      bifold: Data_Bifoldable.bifold,
      bifoldMap: Data_Bifoldable.bifoldMap,
      bifoldMapDefaultL: Data_Bifoldable.bifoldMapDefaultL,
      bifoldMapDefaultR: Data_Bifoldable.bifoldMapDefaultR,
      bifoldl: Data_Bifoldable.bifoldl,
      bifoldlDefault: Data_Bifoldable.bifoldlDefault,
      bifoldr: Data_Bifoldable.bifoldr,
      bifoldrDefault: Data_Bifoldable.bifoldrDefault,
      bifor_: Data_Bifoldable.bifor_,
      bisequence_: Data_Bifoldable.bisequence_,
      bitraverse_: Data_Bifoldable.bitraverse_
    };
  }
});

// output/PureScript.CST.Traversal/index.js
var require_PureScript_CST9 = __commonJS({
  "output/PureScript.CST.Traversal/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Category = require_Control2();
    var Control_Monad_Free = require_Control_Monad2();
    var Control_Monad_Reader_Trans = require_Control_Monad_Reader2();
    var Data_Array_NonEmpty_Internal = require_Data_Array_NonEmpty();
    var Data_Bitraversable = require_Data54();
    var Data_Const = require_Data26();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Functor_Compose = require_Data_Functor4();
    var Data_Identity = require_Data20();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var PureScript_CST_Types = require_PureScript_CST();
    var traverseWrapped = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(value) {
            return {
              open: v.open,
              value,
              close: v.close
            };
          })(k(v.value));
        };
      };
    };
    var traverseSeparated = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v1) {
            return function(v2) {
              return {
                head: v1,
                tail: v2
              };
            };
          })(k(v.head)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k))(v.tail));
        };
      };
    };
    var traverseRecordUpdate = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.RecordUpdateLeaf) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.RecordUpdateLeaf.create(v.value0)(v.value1))(k.onExpr(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.RecordUpdateBranch) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.RecordUpdateBranch.create(v.value0))(traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(traverseRecordUpdate(dictApplicative)(k)))(v.value1));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 410, column 26 - line 412, column 146): " + [v.constructor.name]);
        };
      };
    };
    var traverseRecordLabeled = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.RecordPun) {
            return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.RecordPun(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.RecordField) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.RecordField.create(v.value0)(v.value1))(k(v.value2));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 385, column 27 - line 387, column 57): " + [v.constructor.name]);
        };
      };
    };
    var traverseRecordAccessor = function(dictApplicative) {
      return function(k) {
        return function(r) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return {
              expr: v,
              dot: r.dot,
              path: r.path
            };
          })(k.onExpr(r.expr));
        };
      };
    };
    var traversePatternGuard = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(binder) {
            return function(expr) {
              return {
                binder,
                expr
              };
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(k.onBinder))(v.binder)))(k.onExpr(v.expr));
        };
      };
    };
    var traverseModuleBody = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(decls) {
            return {
              decls,
              trailingComments: v.trailingComments,
              end: v.end
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onDecl)(v.decls));
        };
      };
    };
    var traverseModule = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(body) {
            return {
              header: v.header,
              body
            };
          })(traverseModuleBody(dictApplicative)(k)(v.body));
        };
      };
    };
    var traverseLambda = function(dictApplicative) {
      return function(k) {
        return function(l) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return function(v1) {
              return {
                binders: v,
                body: v1,
                arrow: l.arrow,
                symbol: l.symbol
              };
            };
          })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onBinder)(l.binders)))(k.onExpr(l.body));
        };
      };
    };
    var traverseLabeled = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(value) {
            return {
              label: v.label,
              separator: v.separator,
              value
            };
          })(k(v.value));
        };
      };
    };
    var traverseRow = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(labels) {
            return function(tail) {
              return {
                labels,
                tail
              };
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(traverseSeparated(dictApplicative)(traverseLabeled(dictApplicative)(k.onType)))(v.labels)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onType))(v.tail));
        };
      };
    };
    var traverseTypeVarBinding = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.TypeVarKinded) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeVarKinded.create)(traverseWrapped(dictApplicative)(traverseLabeled(dictApplicative)(k.onType))(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeVarName) {
            return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.TypeVarName(v.value0));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 320, column 28 - line 322, column 46): " + [v.constructor.name]);
        };
      };
    };
    var traverseType = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.TypeRow) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeRow.create)(traverseWrapped(dictApplicative)(traverseRow(dictApplicative)(k))(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeRecord) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeRecord.create)(traverseWrapped(dictApplicative)(traverseRow(dictApplicative)(k))(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeForall) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeForall.create(v.value0))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(v.value1)))(v.value2))(k.onType(v.value3));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeKinded) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeKinded.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeApp) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeApp.create)(k.onType(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onType)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeOp) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeOp.create)(k.onType(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onType))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeArrow) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeArrow.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeConstrained) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeConstrained.create)(k.onType(v.value0)))(v.value1))(k.onType(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeParens) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeParens.create)(traverseWrapped(dictApplicative)(k.onType)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.TypeUnaryRow) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.TypeUnaryRow.create(v.value0))(k.onType(v.value1));
          }
          ;
          return Control_Applicative.pure(dictApplicative)(v);
        };
      };
    };
    var traverseIfThenElse = function(dictApplicative) {
      return function(k) {
        return function(r) {
          return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return function(v1) {
              return function(v2) {
                return {
                  cond: v,
                  "true": v1,
                  "false": v2,
                  "else": r["else"],
                  keyword: r.keyword,
                  then: r.then
                };
              };
            };
          })(k.onExpr(r.cond)))(k.onExpr(r["true"])))(k.onExpr(r["false"]));
        };
      };
    };
    var traverseWhere = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(expr) {
            return function(bindings) {
              return {
                expr,
                bindings
              };
            };
          })(k.onExpr(v.expr)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))))(v.bindings));
        };
      };
    };
    var traverseValueBindingFields = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v1) {
            return function(v2) {
              return {
                binders: v1,
                guarded: v2,
                name: v.name
              };
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onBinder)(v.binders)))(traverseGuarded(dictApplicative)(k)(v.guarded));
        };
      };
    };
    var traverseLetBinding = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.LetBindingSignature) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.LetBindingSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingName) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.LetBindingName.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingPattern) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.LetBindingPattern.create)(k.onBinder(v.value0)))(v.value1))(traverseWhere(dictApplicative)(k)(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.LetBindingError) {
            return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.LetBindingError(v.value0));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 489, column 24 - line 493, column 48): " + [v.constructor.name]);
        };
      };
    };
    var traverseGuardedExpr = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(ps) {
            return function(wh) {
              return {
                bar: v.bar,
                patterns: ps,
                separator: v.separator,
                where: wh
              };
            };
          })(traverseSeparated(dictApplicative)(traversePatternGuard(dictApplicative)(k))(v.patterns)))(traverseWhere(dictApplicative)(k)(v.where));
        };
      };
    };
    var traverseGuarded = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.Unconditional) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.Unconditional.create(v.value0))(traverseWhere(dictApplicative)(k)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.Guarded) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.Guarded.create)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseGuardedExpr(dictApplicative)(k))(v.value0));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 450, column 21 - line 452, column 72): " + [v.constructor.name]);
        };
      };
    };
    var traverseInstanceBinding = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.InstanceBindingSignature) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.InstanceBindingSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.InstanceBindingName) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.InstanceBindingName.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 246, column 29 - line 248, column 92): " + [v.constructor.name]);
        };
      };
    };
    var traverseLetIn = function(dictApplicative) {
      return function(k) {
        return function(l) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return function(v1) {
              return {
                bindings: v,
                body: v1,
                "in": l["in"],
                keyword: l.keyword
              };
            };
          })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))(l.bindings)))(k.onExpr(l.body));
        };
      };
    };
    var traverseForeign = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.ForeignValue) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ForeignValue.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ForeignData) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ForeignData.create(v.value0))(traverseLabeled(dictApplicative)(k.onType)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ForeignKind) {
            return Control_Applicative.pure(dictApplicative)(v);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 216, column 21 - line 219, column 40): " + [v.constructor.name]);
        };
      };
    };
    var traverseDoStatement = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.DoLet) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DoLet.create(v.value0))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLetBinding(dictApplicative)(k))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.DoDiscard) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DoDiscard.create)(k.onExpr(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.DoBind) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DoBind.create)(k.onBinder(v.value0)))(v.value1))(k.onExpr(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.DoError) {
            return Control_Applicative.pure(dictApplicative)(new PureScript_CST_Types.DoError(v.value0));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 520, column 25 - line 524, column 32): " + [v.constructor.name]);
        };
      };
    };
    var traverseDoBlock = function(dictApplicative) {
      return function(k) {
        return function(d) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return {
              statements: v,
              keyword: d.keyword
            };
          })(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseDoStatement(dictApplicative)(k))(d.statements));
        };
      };
    };
    var traverseDelimitedNonEmpty = function(dictApplicative) {
      return function(k) {
        return traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(k));
      };
    };
    var traverseOneOrDelimited = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.One) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.One.create)(k(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.Many) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.Many.create)(traverseDelimitedNonEmpty(dictApplicative)(k)(v.value0));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Traversal (line 265, column 28 - line 267, column 55): " + [v.constructor.name]);
        };
      };
    };
    var traverseInstanceHead = function(dictApplicative) {
      return function(k) {
        return function(head) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return function(v1) {
              return {
                constraints: v,
                types: v1,
                className: head.className,
                keyword: head.keyword,
                name: head.name
              };
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseOneOrDelimited(dictApplicative)(k.onType)))(head.constraints)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onType)(head.types));
        };
      };
    };
    var traverseInstance = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(head) {
            return function(body) {
              return {
                head,
                body
              };
            };
          })(traverseInstanceHead(dictApplicative)(k)(v.head)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseInstanceBinding(dictApplicative)(k))))(v.body));
        };
      };
    };
    var traverseDelimited = function(dictApplicative) {
      return function(k) {
        return traverseWrapped(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(traverseSeparated(dictApplicative)(k)));
      };
    };
    var traverseDataHead = function(dictApplicative) {
      return function(k) {
        return function(head) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return {
              vars: v,
              keyword: head.keyword,
              name: head.name
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(head.vars));
        };
      };
    };
    var traverseDataCtor = function(dictApplicative) {
      return function(k) {
        return function(v) {
          return Data_Functor.map(dictApplicative.Apply0().Functor0())(function(fields) {
            return {
              name: v.name,
              fields
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onType)(v.fields));
        };
      };
    };
    var traverseClassHead = function(dictApplicative) {
      return function(k) {
        return function(head) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return function(v1) {
              return {
                "super": v,
                vars: v1,
                fundeps: head.fundeps,
                keyword: head.keyword,
                name: head.name
              };
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseOneOrDelimited(dictApplicative)(k.onType)))(head["super"])))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseTypeVarBinding(dictApplicative)(k))(head.vars));
        };
      };
    };
    var traverseDecl = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.DeclData) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclData.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(traverseSeparated(dictApplicative)(traverseDataCtor(dictApplicative)(k))))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclType) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclType.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(v.value1))(k.onType(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclNewtype) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclNewtype.create)(traverseDataHead(dictApplicative)(k)(v.value0)))(v.value1))(v.value2))(k.onType(v.value3));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclClass) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclClass.create)(traverseClassHead(dictApplicative)(k)(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(traverseLabeled(dictApplicative)(k.onType))))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclInstanceChain) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclInstanceChain.create)(traverseSeparated(dictApplicative)(traverseInstance(dictApplicative)(k))(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclDerive) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclDerive.create(v.value0)(v.value1))(traverseInstanceHead(dictApplicative)(k)(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclKindSignature) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclKindSignature.create(v.value0))(traverseLabeled(dictApplicative)(k.onType)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclSignature) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclSignature.create)(traverseLabeled(dictApplicative)(k.onType)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclValue) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclValue.create)(traverseValueBindingFields(dictApplicative)(k)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.DeclForeign) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.DeclForeign.create(v.value0)(v.value1))(traverseForeign(dictApplicative)(k)(v.value2));
          }
          ;
          return Control_Applicative.pure(dictApplicative)(v);
        };
      };
    };
    var traverseCaseOf = function(dictApplicative) {
      return function(k) {
        return function(r) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return function(v1) {
              return {
                head: v,
                branches: v1,
                keyword: r.keyword,
                of: r.of
              };
            };
          })(traverseSeparated(dictApplicative)(k.onExpr)(r.head)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseSeparated(dictApplicative)(k.onBinder))(traverseGuarded(dictApplicative)(k)))(r.branches));
        };
      };
    };
    var traverseBinder = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.BinderNamed) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.BinderNamed.create(v.value0)(v.value1))(k.onBinder(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderConstructor) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.BinderConstructor.create(v.value0))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(k.onBinder)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderArray) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.BinderArray.create)(traverseDelimited(dictApplicative)(k.onBinder)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderRecord) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.BinderRecord.create)(traverseDelimited(dictApplicative)(traverseRecordLabeled(dictApplicative)(k.onBinder))(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderParens) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.BinderParens.create)(traverseWrapped(dictApplicative)(k.onBinder)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderTyped) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.BinderTyped.create)(k.onBinder(v.value0)))(v.value1))(k.onType(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.BinderOp) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.BinderOp.create)(k.onBinder(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onBinder))(v.value1));
          }
          ;
          return Control_Applicative.pure(dictApplicative)(v);
        };
      };
    };
    var traverseAdoBlock = function(dictApplicative) {
      return function(k) {
        return function(a) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(function(v) {
            return function(v1) {
              return {
                statements: v,
                result: v1,
                "in": a["in"],
                keyword: a.keyword
              };
            };
          })(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(traverseDoStatement(dictApplicative)(k))(a.statements)))(k.onExpr(a.result));
        };
      };
    };
    var traverseExpr = function(dictApplicative) {
      return function(k) {
        return function(v) {
          if (v instanceof PureScript_CST_Types.ExprArray) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprArray.create)(traverseDelimited(dictApplicative)(k.onExpr)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecord) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprRecord.create)(traverseDelimited(dictApplicative)(traverseRecordLabeled(dictApplicative)(k.onExpr))(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprParens) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprParens.create)(traverseWrapped(dictApplicative)(k.onExpr)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprTyped) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.flap(dictApplicative.Apply0().Functor0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprTyped.create)(k.onExpr(v.value0)))(v.value1))(k.onType(v.value2));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprInfix) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprInfix.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(dictApplicative)(traverseWrapped(dictApplicative)(k.onExpr))(k.onExpr))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprOp) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprOp.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(dictApplicative)(k.onExpr))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprNegate) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprNegate.create(v.value0))(k.onExpr(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecordAccessor) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprRecordAccessor.create)(traverseRecordAccessor(dictApplicative)(k)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprRecordUpdate) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprRecordUpdate.create)(k.onExpr(v.value0)))(traverseWrapped(dictApplicative)(traverseSeparated(dictApplicative)(traverseRecordUpdate(dictApplicative)(k)))(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprApp) {
            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprApp.create)(k.onExpr(v.value0)))(Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(dictApplicative)(k.onExpr)(v.value1));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprLambda) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprLambda.create)(traverseLambda(dictApplicative)(k)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprIf) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprIf.create)(traverseIfThenElse(dictApplicative)(k)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprCase) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprCase.create)(traverseCaseOf(dictApplicative)(k)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprLet) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprLet.create)(traverseLetIn(dictApplicative)(k)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprDo) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprDo.create)(traverseDoBlock(dictApplicative)(k)(v.value0));
          }
          ;
          if (v instanceof PureScript_CST_Types.ExprAdo) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(PureScript_CST_Types.ExprAdo.create)(traverseAdoBlock(dictApplicative)(k)(v.value0));
          }
          ;
          return Control_Applicative.pure(dictApplicative)(v);
        };
      };
    };
    var topDownTraversalWithContextM = function(dictMonad) {
      return function(visitor) {
        var visitor$prime = {
          onBinder: function(a) {
            return function(ctx) {
              return Control_Bind.bind(dictMonad.Bind1())(visitor.onBinder(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip(function() {
                var $324 = traverseBinder(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0()))(visitor$prime);
                return function($325) {
                  return Control_Monad_Reader_Trans.runReaderT($324($325));
                };
              }())));
            };
          },
          onExpr: function(a) {
            return function(ctx) {
              return Control_Bind.bind(dictMonad.Bind1())(visitor.onExpr(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip(function() {
                var $326 = traverseExpr(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0()))(visitor$prime);
                return function($327) {
                  return Control_Monad_Reader_Trans.runReaderT($326($327));
                };
              }())));
            };
          },
          onDecl: function(a) {
            return function(ctx) {
              return Control_Bind.bind(dictMonad.Bind1())(visitor.onDecl(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip(function() {
                var $328 = traverseDecl(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0()))(visitor$prime);
                return function($329) {
                  return Control_Monad_Reader_Trans.runReaderT($328($329));
                };
              }())));
            };
          },
          onType: function(a) {
            return function(ctx) {
              return Control_Bind.bind(dictMonad.Bind1())(visitor.onType(ctx)(a))(Data_Tuple.uncurry(Data_Function.flip(function() {
                var $330 = traverseType(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0()))(visitor$prime);
                return function($331) {
                  return Control_Monad_Reader_Trans.runReaderT($330($331));
                };
              }())));
            };
          }
        };
        return visitor$prime;
      };
    };
    var topDownTraversalWithContext = function(visitor) {
      var visitor$prime = {
        onBinder: function(a) {
          return function(ctx) {
            return Control_Bind.bind(Data_Identity.bindIdentity)(Control_Applicative.pure(Data_Identity.applicativeIdentity)(visitor.onBinder(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip(function() {
              var $332 = traverseBinder(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity))(visitor$prime);
              return function($333) {
                return Control_Monad_Reader_Trans.runReaderT($332($333));
              };
            }())));
          };
        },
        onExpr: function(a) {
          return function(ctx) {
            return Control_Bind.bind(Data_Identity.bindIdentity)(Control_Applicative.pure(Data_Identity.applicativeIdentity)(visitor.onExpr(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip(function() {
              var $334 = traverseExpr(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity))(visitor$prime);
              return function($335) {
                return Control_Monad_Reader_Trans.runReaderT($334($335));
              };
            }())));
          };
        },
        onDecl: function(a) {
          return function(ctx) {
            return Control_Bind.bind(Data_Identity.bindIdentity)(Control_Applicative.pure(Data_Identity.applicativeIdentity)(visitor.onDecl(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip(function() {
              var $336 = traverseDecl(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity))(visitor$prime);
              return function($337) {
                return Control_Monad_Reader_Trans.runReaderT($336($337));
              };
            }())));
          };
        },
        onType: function(a) {
          return function(ctx) {
            return Control_Bind.bind(Data_Identity.bindIdentity)(Control_Applicative.pure(Data_Identity.applicativeIdentity)(visitor.onType(ctx)(a)))(Data_Tuple.uncurry(Data_Function.flip(function() {
              var $338 = traverseType(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity))(visitor$prime);
              return function($339) {
                return Control_Monad_Reader_Trans.runReaderT($338($339));
              };
            }())));
          };
        }
      };
      return visitor$prime;
    };
    var topDownTraversal = function(dictMonad) {
      return function(visitor) {
        var visitor$prime = {
          onBinder: function(a) {
            return Control_Bind.bind(dictMonad.Bind1())(visitor.onBinder(a))(traverseBinder(dictMonad.Applicative0())(visitor$prime));
          },
          onExpr: function(a) {
            return Control_Bind.bind(dictMonad.Bind1())(visitor.onExpr(a))(traverseExpr(dictMonad.Applicative0())(visitor$prime));
          },
          onType: function(a) {
            return Control_Bind.bind(dictMonad.Bind1())(visitor.onType(a))(traverseType(dictMonad.Applicative0())(visitor$prime));
          },
          onDecl: function(a) {
            return Control_Bind.bind(dictMonad.Bind1())(visitor.onDecl(a))(traverseDecl(dictMonad.Applicative0())(visitor$prime));
          }
        };
        return visitor$prime;
      };
    };
    var topDownPureTraversal = function(visitor) {
      var visitor$prime = {
        onBinder: function(a) {
          return Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onBinder(a)))(traverseBinder(Control_Monad_Free.freeApplicative)(visitor$prime));
        },
        onExpr: function(a) {
          return Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onExpr(a)))(traverseExpr(Control_Monad_Free.freeApplicative)(visitor$prime));
        },
        onType: function(a) {
          return Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onType(a)))(traverseType(Control_Monad_Free.freeApplicative)(visitor$prime));
        },
        onDecl: function(a) {
          return Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onDecl(a)))(traverseDecl(Control_Monad_Free.freeApplicative)(visitor$prime));
        }
      };
      return visitor$prime;
    };
    var rewriteWithContextM = function(dictMonad) {
      return function(traversal) {
        return function(visitor) {
          return function(ctx) {
            return function(g) {
              var visitor$prime = topDownTraversalWithContextM(dictMonad)(visitor);
              return Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Tuple.Tuple.create(ctx))(Control_Monad_Reader_Trans.runReaderT(traversal(visitor$prime)(g))(ctx));
            };
          };
        };
      };
    };
    var rewriteWithContext = function(traversal) {
      return function(visitor) {
        return function(ctx) {
          return function(g) {
            var visitor$prime = topDownTraversalWithContext(visitor);
            return new Data_Tuple.Tuple(ctx, Data_Newtype.un()(Data_Identity.Identity)(Control_Monad_Reader_Trans.runReaderT(traversal(visitor$prime)(g))(ctx)));
          };
        };
      };
    };
    var rewriteTypeWithContextM = function(dictMonad) {
      return rewriteWithContextM(dictMonad)(function(v) {
        return v.onType;
      });
    };
    var rewriteTypeWithContext = rewriteWithContext(function(v) {
      return v.onType;
    });
    var rewriteTopDownM = function(dictMonad) {
      return function(traversal) {
        return function(visitor) {
          var visitor$prime = topDownTraversal(dictMonad)(visitor);
          return traversal(visitor$prime);
        };
      };
    };
    var rewriteTypeTopDownM = function(dictMonad) {
      return rewriteTopDownM(dictMonad)(function(v) {
        return v.onType;
      });
    };
    var rewriteTopDown = function(traversal) {
      return function(visitor) {
        var visitor$prime = topDownPureTraversal(visitor);
        var $340 = Control_Monad_Free.runFree(Data_Identity.functorIdentity)(Data_Newtype.un()(Data_Identity.Identity));
        var $341 = traversal(visitor$prime);
        return function($342) {
          return $340($341($342));
        };
      };
    };
    var rewriteTypeTopDown = rewriteTopDown(function(v) {
      return v.onType;
    });
    var rewriteModuleWithContextM = function(dictMonad) {
      return rewriteWithContextM(dictMonad)(traverseModule(Control_Monad_Reader_Trans.applicativeReaderT(dictMonad.Applicative0())));
    };
    var rewriteModuleWithContext = rewriteWithContext(traverseModule(Control_Monad_Reader_Trans.applicativeReaderT(Data_Identity.applicativeIdentity)));
    var rewriteModuleTopDownM = function(dictMonad) {
      return rewriteTopDownM(dictMonad)(traverseModule(dictMonad.Applicative0()));
    };
    var rewriteModuleTopDown = rewriteTopDown(traverseModule(Control_Monad_Free.freeApplicative));
    var rewriteExprWithContextM = function(dictMonad) {
      return rewriteWithContextM(dictMonad)(function(v) {
        return v.onExpr;
      });
    };
    var rewriteExprWithContext = rewriteWithContext(function(v) {
      return v.onExpr;
    });
    var rewriteExprTopDownM = function(dictMonad) {
      return rewriteTopDownM(dictMonad)(function(v) {
        return v.onExpr;
      });
    };
    var rewriteExprTopDown = rewriteTopDown(function(v) {
      return v.onExpr;
    });
    var rewriteDeclWithContextM = function(dictMonad) {
      return rewriteWithContextM(dictMonad)(function(v) {
        return v.onDecl;
      });
    };
    var rewriteDeclWithContext = rewriteWithContext(function(v) {
      return v.onDecl;
    });
    var rewriteDeclTopDownM = function(dictMonad) {
      return rewriteTopDownM(dictMonad)(function(v) {
        return v.onDecl;
      });
    };
    var rewriteDeclTopDown = rewriteTopDown(function(v) {
      return v.onDecl;
    });
    var rewriteBinderWithContextM = function(dictMonad) {
      return rewriteWithContextM(dictMonad)(function(v) {
        return v.onBinder;
      });
    };
    var rewriteBinderWithContext = rewriteWithContext(function(v) {
      return v.onBinder;
    });
    var rewriteBinderTopDownM = function(dictMonad) {
      return rewriteTopDownM(dictMonad)(function(v) {
        return v.onBinder;
      });
    };
    var rewriteBinderTopDown = rewriteTopDown(function(v) {
      return v.onBinder;
    });
    var defer = function(dictMonad) {
      return function(v) {
        return Control_Bind.bind(dictMonad.Bind1())(Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit))(v);
      };
    };
    var topDownMonoidalTraversal = function(dictMonoid) {
      return function(visitor) {
        var visitor$prime = {
          onBinder: function(a) {
            return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onBinder(a)))(defer(Control_Monad_Free.freeMonad)(function(v) {
              return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseBinder(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
            }));
          },
          onExpr: function(a) {
            return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onExpr(a)))(defer(Control_Monad_Free.freeMonad)(function(v) {
              return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseExpr(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
            }));
          },
          onDecl: function(a) {
            return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onDecl(a)))(defer(Control_Monad_Free.freeMonad)(function(v) {
              return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseDecl(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
            }));
          },
          onType: function(a) {
            return Control_Apply.apply(Data_Functor_Compose.applyCompose(Control_Monad_Free.freeApply)(Data_Const.applyConst(dictMonoid.Semigroup0())))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(visitor.onType(a)))(defer(Control_Monad_Free.freeMonad)(function(v) {
              return Data_Newtype.un()(Data_Functor_Compose.Compose)(traverseType(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid)))(visitor$prime)(a));
            }));
          }
        };
        return visitor$prime;
      };
    };
    var monoidalRewrite = function(dictMonoid) {
      return function(traversal) {
        return function(visitor) {
          return function(g) {
            var visitor$prime = topDownMonoidalTraversal(dictMonoid)(visitor);
            return Data_Newtype.un()(Data_Const.Const)(Control_Monad_Free.runFree(Data_Identity.functorIdentity)(Data_Newtype.un()(Data_Identity.Identity))(Data_Newtype.un()(Data_Functor_Compose.Compose)(traversal(visitor$prime)(g))));
          };
        };
      };
    };
    var foldMapBinder = function(dictMonoid) {
      return monoidalRewrite(dictMonoid)(function(v) {
        return v.onBinder;
      });
    };
    var foldMapDecl = function(dictMonoid) {
      return monoidalRewrite(dictMonoid)(function(v) {
        return v.onDecl;
      });
    };
    var foldMapExpr = function(dictMonoid) {
      return monoidalRewrite(dictMonoid)(function(v) {
        return v.onExpr;
      });
    };
    var foldMapModule = function(dictMonoid) {
      return monoidalRewrite(dictMonoid)(traverseModule(Data_Functor_Compose.applicativeCompose(Control_Monad_Free.freeApplicative)(Data_Const.applicativeConst(dictMonoid))));
    };
    var foldMapType = function(dictMonoid) {
      return monoidalRewrite(dictMonoid)(function(v) {
        return v.onType;
      });
    };
    var defaultVisitorWithContextM = function(dictMonad) {
      return {
        onBinder: Data_Tuple.curry(Control_Applicative.pure(dictMonad.Applicative0())),
        onDecl: Data_Tuple.curry(Control_Applicative.pure(dictMonad.Applicative0())),
        onExpr: Data_Tuple.curry(Control_Applicative.pure(dictMonad.Applicative0())),
        onType: Data_Tuple.curry(Control_Applicative.pure(dictMonad.Applicative0()))
      };
    };
    var defaultVisitorWithContext = {
      onBinder: Data_Tuple.curry(Control_Category.identity(Control_Category.categoryFn)),
      onDecl: Data_Tuple.curry(Control_Category.identity(Control_Category.categoryFn)),
      onExpr: Data_Tuple.curry(Control_Category.identity(Control_Category.categoryFn)),
      onType: Data_Tuple.curry(Control_Category.identity(Control_Category.categoryFn))
    };
    var defaultVisitorM = function(dictApplicative) {
      return {
        onBinder: Control_Applicative.pure(dictApplicative),
        onDecl: Control_Applicative.pure(dictApplicative),
        onExpr: Control_Applicative.pure(dictApplicative),
        onType: Control_Applicative.pure(dictApplicative)
      };
    };
    var defaultVisitor = {
      onBinder: Control_Category.identity(Control_Category.categoryFn),
      onDecl: Control_Category.identity(Control_Category.categoryFn),
      onExpr: Control_Category.identity(Control_Category.categoryFn),
      onType: Control_Category.identity(Control_Category.categoryFn)
    };
    var defaultMonoidalVisitor = function(dictMonoid) {
      return {
        onBinder: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
        onDecl: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
        onExpr: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)),
        onType: Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid))
      };
    };
    var bottomUpTraversal = function(dictMonad) {
      return function(visitor) {
        var visitor$prime = {
          onBinder: function(a) {
            return Control_Bind.bindFlipped(dictMonad.Bind1())(visitor.onBinder)(defer(dictMonad)(function(v) {
              return traverseBinder(dictMonad.Applicative0())(visitor$prime)(a);
            }));
          },
          onExpr: function(a) {
            return Control_Bind.bindFlipped(dictMonad.Bind1())(visitor.onExpr)(defer(dictMonad)(function(v) {
              return traverseExpr(dictMonad.Applicative0())(visitor$prime)(a);
            }));
          },
          onType: function(a) {
            return Control_Bind.bindFlipped(dictMonad.Bind1())(visitor.onType)(defer(dictMonad)(function(v) {
              return traverseType(dictMonad.Applicative0())(visitor$prime)(a);
            }));
          },
          onDecl: function(a) {
            return Control_Bind.bindFlipped(dictMonad.Bind1())(visitor.onDecl)(defer(dictMonad)(function(v) {
              return traverseDecl(dictMonad.Applicative0())(visitor$prime)(a);
            }));
          }
        };
        return visitor$prime;
      };
    };
    var rewriteBottomUpM = function(dictMonad) {
      return function(traversal) {
        return function(visitor) {
          var visitor$prime = bottomUpTraversal(dictMonad)(visitor);
          return traversal(visitor$prime);
        };
      };
    };
    var rewriteBinderBottomUpM = function(dictMonad) {
      return rewriteBottomUpM(dictMonad)(function(v) {
        return v.onBinder;
      });
    };
    var rewriteDeclBottomUpM = function(dictMonad) {
      return rewriteBottomUpM(dictMonad)(function(v) {
        return v.onDecl;
      });
    };
    var rewriteExprBottomUpM = function(dictMonad) {
      return rewriteBottomUpM(dictMonad)(function(v) {
        return v.onExpr;
      });
    };
    var rewriteModuleBottomUpM = function(dictMonad) {
      return rewriteBottomUpM(dictMonad)(traverseModule(dictMonad.Applicative0()));
    };
    var rewriteTypeBottomUpM = function(dictMonad) {
      return rewriteBottomUpM(dictMonad)(function(v) {
        return v.onType;
      });
    };
    var bottomUpPureTraversal = function(visitor) {
      var visitor$prime = {
        onBinder: function(a) {
          return Control_Bind.bindFlipped(Control_Monad_Free.freeBind)(function() {
            var $343 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
            return function($344) {
              return $343(visitor.onBinder($344));
            };
          }())(traverseBinder(Control_Monad_Free.freeApplicative)(visitor$prime)(a));
        },
        onExpr: function(a) {
          return Control_Bind.bindFlipped(Control_Monad_Free.freeBind)(function() {
            var $345 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
            return function($346) {
              return $345(visitor.onExpr($346));
            };
          }())(traverseExpr(Control_Monad_Free.freeApplicative)(visitor$prime)(a));
        },
        onType: function(a) {
          return Control_Bind.bindFlipped(Control_Monad_Free.freeBind)(function() {
            var $347 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
            return function($348) {
              return $347(visitor.onType($348));
            };
          }())(traverseType(Control_Monad_Free.freeApplicative)(visitor$prime)(a));
        },
        onDecl: function(a) {
          return Control_Bind.bindFlipped(Control_Monad_Free.freeBind)(function() {
            var $349 = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
            return function($350) {
              return $349(visitor.onDecl($350));
            };
          }())(traverseDecl(Control_Monad_Free.freeApplicative)(visitor$prime)(a));
        }
      };
      return visitor$prime;
    };
    var rewriteBottomUp = function(traversal) {
      return function(visitor) {
        var visitor$prime = bottomUpPureTraversal(visitor);
        var $351 = Control_Monad_Free.runFree(Data_Identity.functorIdentity)(Data_Newtype.un()(Data_Identity.Identity));
        var $352 = traversal(visitor$prime);
        return function($353) {
          return $351($352($353));
        };
      };
    };
    var rewriteBinderBottomUp = rewriteBottomUp(function(v) {
      return v.onBinder;
    });
    var rewriteDeclBottomUp = rewriteBottomUp(function(v) {
      return v.onDecl;
    });
    var rewriteExprBottomUp = rewriteBottomUp(function(v) {
      return v.onExpr;
    });
    var rewriteModuleBottomUp = rewriteBottomUp(traverseModule(Control_Monad_Free.freeApplicative));
    var rewriteTypeBottomUp = rewriteBottomUp(function(v) {
      return v.onType;
    });
    module2.exports = {
      defaultVisitorM,
      rewriteModuleBottomUpM,
      rewriteBinderBottomUpM,
      rewriteExprBottomUpM,
      rewriteDeclBottomUpM,
      rewriteTypeBottomUpM,
      rewriteModuleTopDownM,
      rewriteBinderTopDownM,
      rewriteExprTopDownM,
      rewriteDeclTopDownM,
      rewriteTypeTopDownM,
      defaultVisitorWithContextM,
      rewriteModuleWithContextM,
      rewriteBinderWithContextM,
      rewriteExprWithContextM,
      rewriteDeclWithContextM,
      rewriteTypeWithContextM,
      defaultMonoidalVisitor,
      foldMapModule,
      foldMapBinder,
      foldMapDecl,
      foldMapExpr,
      foldMapType,
      defaultVisitor,
      rewriteModuleBottomUp,
      rewriteBinderBottomUp,
      rewriteExprBottomUp,
      rewriteDeclBottomUp,
      rewriteTypeBottomUp,
      rewriteModuleTopDown,
      rewriteBinderTopDown,
      rewriteExprTopDown,
      rewriteDeclTopDown,
      rewriteTypeTopDown,
      defaultVisitorWithContext,
      rewriteModuleWithContext,
      rewriteBinderWithContext,
      rewriteExprWithContext,
      rewriteDeclWithContext,
      rewriteTypeWithContext,
      traverseModule,
      traverseModuleBody,
      traverseDecl,
      traverseForeign,
      traverseInstance,
      traverseInstanceHead,
      traverseInstanceBinding,
      traverseClassHead,
      traverseOneOrDelimited,
      traverseDataHead,
      traverseDataCtor,
      traverseType,
      traverseRow,
      traverseTypeVarBinding,
      traverseExpr,
      traverseDelimited,
      traverseDelimitedNonEmpty,
      traverseSeparated,
      traverseWrapped,
      traverseRecordLabeled,
      traverseLabeled,
      traverseRecordAccessor,
      traverseRecordUpdate,
      traverseLambda,
      traverseIfThenElse,
      traverseCaseOf,
      traverseGuarded,
      traverseGuardedExpr,
      traversePatternGuard,
      traverseWhere,
      traverseLetBinding,
      traverseValueBindingFields,
      traverseLetIn,
      traverseDoStatement,
      traverseDoBlock,
      traverseAdoBlock,
      traverseBinder,
      bottomUpTraversal,
      rewriteBottomUpM,
      topDownTraversal,
      rewriteTopDownM,
      topDownTraversalWithContextM,
      rewriteWithContextM,
      topDownMonoidalTraversal,
      monoidalRewrite,
      bottomUpPureTraversal,
      rewriteBottomUp,
      topDownPureTraversal,
      rewriteTopDown,
      topDownTraversalWithContext,
      rewriteWithContext
    };
  }
});

// output/LanguageServer.IdePurescript.CodeLens.ExportManagement/index.js
var require_LanguageServer_IdePurescript_CodeLens = __commonJS({
  "output/LanguageServer.IdePurescript.CodeLens.ExportManagement/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Data_Array = require_Data39();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_List_Types = require_Data_List();
    var Data_Map = require_Data50();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Nullable = require_Data41();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Tuple = require_Data22();
    var Effect_Aff = require_Effect6();
    var Foreign = require_Foreign();
    var LanguageServer_IdePurescript_Commands = require_LanguageServer_IdePurescript();
    var LanguageServer_IdePurescript_Util_CST = require_LanguageServer_IdePurescript_Util();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var PureScript_CST = require_PureScript();
    var PureScript_CST_Traversal = require_PureScript_CST9();
    var PureScript_CST_Types = require_PureScript_CST();
    var WithConstructors = function() {
      function WithConstructors2() {
      }
      ;
      WithConstructors2.value = new WithConstructors2();
      return WithConstructors2;
    }();
    var NoConstructors = function() {
      function NoConstructors2() {
      }
      ;
      NoConstructors2.value = new NoConstructors2();
      return NoConstructors2;
    }();
    var semigroupDeclNameInfo = {
      append: function(sr1) {
        return function(v) {
          return sr1;
        };
      }
    };
    var eqDeclConstructorInfo = {
      eq: function(x) {
        return function(y) {
          if (x instanceof WithConstructors && y instanceof WithConstructors) {
            return true;
          }
          ;
          if (x instanceof NoConstructors && y instanceof NoConstructors) {
            return true;
          }
          ;
          return false;
        };
      }
    };
    var withConstructors = function(s) {
      return s + "(..)";
    };
    var printExports = function(exports3) {
      return "\n  ( " + (Data_Array.intercalate(Data_Monoid.monoidString)("\n  , ")(Data_Array.sort(Data_Ord.ordString)(exports3)) + "\n  )\n  ");
    };
    var printExport = function(v) {
      if (v instanceof PureScript_CST_Types.ExportOp) {
        return Data_Maybe.Just.create("(" + (v.value0.name + ")"));
      }
      ;
      if (v instanceof PureScript_CST_Types.ExportType) {
        return Data_Maybe.Just.create(v.value0.name + Data_Monoid.guard(Data_Monoid.monoidString)(Data_Maybe.isJust(v.value1))("(..)"));
      }
      ;
      if (v instanceof PureScript_CST_Types.ExportTypeOp) {
        return Data_Maybe.Just.create("type (" + (v.value1.name + ")"));
      }
      ;
      if (v instanceof PureScript_CST_Types.ExportClass) {
        return Data_Maybe.Just.create("class " + v.value1.name);
      }
      ;
      if (v instanceof PureScript_CST_Types.ExportKind) {
        return Data_Maybe.Just.create(v.value1.name);
      }
      ;
      if (v instanceof PureScript_CST_Types.ExportModule) {
        return Data_Maybe.Just.create("module " + v.value1.name);
      }
      ;
      if (v instanceof PureScript_CST_Types.ExportValue) {
        return Data_Maybe.Just.create(v.value0.name);
      }
      ;
      if (v instanceof PureScript_CST_Types.ExportError) {
        return Data_Maybe.Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLens.ExportManagement (line 44, column 15 - line 52, column 31): " + [v.constructor.name]);
    };
    var getDeclNameInfo = function() {
      var entry = function(name) {
        return function(range) {
          return function(ctors) {
            return Data_Map.SemigroupMap(Data_Map_Internal.singleton(name)({
              range: LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(range),
              ctors,
              name
            }));
          };
        };
      };
      return PureScript_CST_Traversal.foldMapModule(Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupDeclNameInfo))({
        onBinder: PureScript_CST_Traversal.defaultMonoidalVisitor(Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupDeclNameInfo)).onBinder,
        onDecl: function(v1) {
          if (v1 instanceof PureScript_CST_Types.DeclSignature) {
            return entry(v1.value0.label.name)(v1.value0.label.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclKindSignature && (v1.value0.value instanceof PureScript_CST_Types.TokLowerName && (v1.value0.value.value0 instanceof Data_Maybe.Nothing && v1.value0.value.value1 === "class"))) {
            return entry("class " + v1.value1.label.name)(v1.value1.label.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclKindSignature) {
            return entry(v1.value1.label.name)(v1.value1.label.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclValue) {
            return entry(v1.value0.name.name)(v1.value0.name.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclData) {
            return entry(v1.value0.name.name)(v1.value0.name.token.range)(WithConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclNewtype) {
            return entry(v1.value0.name.name)(v1.value0.name.token.range)(WithConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclType) {
            return entry(v1.value0.name.name)(v1.value0.name.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclClass) {
            return entry("class " + v1.value0.name.name)(v1.value0.name.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclFixity && v1.value0.operator instanceof PureScript_CST_Types.FixityValue) {
            return entry("(" + (v1.value0.operator.value2.name + ")"))(v1.value0.operator.value2.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclFixity && v1.value0.operator instanceof PureScript_CST_Types.FixityType) {
            return entry("type (" + (v1.value0.operator.value3.name + ")"))(v1.value0.operator.value3.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclForeign && v1.value2 instanceof PureScript_CST_Types.ForeignValue) {
            return entry(v1.value2.value0.label.name)(v1.value2.value0.label.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclForeign && v1.value2 instanceof PureScript_CST_Types.ForeignData) {
            return entry(v1.value2.value1.label.name)(v1.value2.value1.label.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclForeign && v1.value2 instanceof PureScript_CST_Types.ForeignKind) {
            return entry(v1.value2.value1.name)(v1.value2.value1.token.range)(NoConstructors.value);
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclInstanceChain) {
            return Data_Monoid.mempty(Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupDeclNameInfo));
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclDerive) {
            return Data_Monoid.mempty(Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupDeclNameInfo));
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclRole) {
            return Data_Monoid.mempty(Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupDeclNameInfo));
          }
          ;
          if (v1 instanceof PureScript_CST_Types.DeclError) {
            return Data_Monoid.mempty(Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupDeclNameInfo));
          }
          ;
          throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLens.ExportManagement (line 77, column 11 - line 94, column 38): " + [v1.constructor.name]);
        },
        onExpr: PureScript_CST_Traversal.defaultMonoidalVisitor(Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupDeclNameInfo)).onExpr,
        onType: PureScript_CST_Traversal.defaultMonoidalVisitor(Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupDeclNameInfo)).onType
      });
    }();
    var formatDeclName = function(v) {
      if (v.ctors instanceof NoConstructors) {
        return v.name;
      }
      ;
      if (v.ctors instanceof WithConstructors) {
        return v.name + "(..)";
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLens.ExportManagement (line 63, column 49 - line 65, column 37): " + [v.ctors.constructor.name]);
    };
    var exportsToArray = function(v) {
      return Data_Array.cons(v.head)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.tail));
    };
    var mkCodeLenses = function(uri) {
      return function(v) {
        var mkCodeLensResult = function(codeLensRange) {
          return function(replaceCommand) {
            return {
              range: codeLensRange,
              command: Data_Nullable.notNull(replaceCommand),
              data: Foreign.unsafeToForeign(Data_Nullable["null"])
            };
          };
        };
        var start = LanguageServer_IdePurescript_Util_CST.sourcePosToPosition(v.header.name.token.range.end);
        var noExplicitExports = Data_Maybe.isNothing(v.header.exports);
        var exportArray = function() {
          if (v.header.exports instanceof Data_Maybe.Nothing) {
            return [];
          }
          ;
          if (v.header.exports instanceof Data_Maybe.Just) {
            return exportsToArray(v.header.exports.value0.value);
          }
          ;
          throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLens.ExportManagement (line 118, column 19 - line 124, column 45): " + [v.header.exports.constructor.name]);
        }();
        var exportNames = Data_Array.mapMaybe(printExport)(exportArray);
        var end = LanguageServer_IdePurescript_Util_CST.sourcePosToPosition(v.header.where.range.start);
        var exportsRange = {
          start,
          end
        };
        var v1 = getDeclNameInfo(v);
        var moduleLens = function() {
          if (noExplicitExports) {
            return Data_Maybe.Just.create(mkCodeLensResult(LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(v.header.keyword.range))(LanguageServer_IdePurescript_Commands.replaceSuggestion("implicit module exports - make all explicit")(uri)(printExports(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(formatDeclName)(Data_Map_Internal.values(v1)))))(exportsRange)));
          }
          ;
          return Data_Maybe.Nothing.value;
        }();
        var declToCodeLens = function(v2) {
          var replace = function(title) {
            return function(exps) {
              return Data_Array.singleton(mkCodeLensResult(v2.range)(LanguageServer_IdePurescript_Commands.replaceSuggestion(title)(uri)(printExports(exps))(exportsRange)));
            };
          };
          var exported = Data_Array.elem(Data_Eq.eqString)(v2.name)(exportNames);
          if (noExplicitExports) {
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(replace("exported (export only this)")([v2.name]))(replace("(export everything else)")(Data_Array["delete"](Data_Eq.eqString)(v2.name)(Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(formatDeclName)(Data_Map_Internal.values(v1))))));
          }
          ;
          var $146 = Data_Eq.eq(eqDeclConstructorInfo)(v2.ctors)(WithConstructors.value) && Data_Array.elem(Data_Eq.eqString)(withConstructors(v2.name))(exportNames);
          if ($146) {
            var otherNames = Data_Array["delete"](Data_Eq.eqString)(withConstructors(v2.name))(exportNames);
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(replace("exported with constructors (export only type)")(Data_Array.cons(v2.name)(otherNames)))(replace("(remove from exports)")(otherNames));
          }
          ;
          var $147 = Data_Eq.eq(eqDeclConstructorInfo)(v2.ctors)(WithConstructors.value) && exported;
          if ($147) {
            var otherNames = Data_Array["delete"](Data_Eq.eqString)(v2.name)(exportNames);
            return Data_Semigroup.append(Data_Semigroup.semigroupArray)(replace("exported without constructors (export constructors)")(Data_Array.cons(withConstructors(v2.name))(otherNames)))(replace("(remove from exports)")(otherNames));
          }
          ;
          if (exported) {
            return replace("exported (remove from exports)")(Data_Array["delete"](Data_Eq.eqString)(v2.name)(exportNames));
          }
          ;
          return replace("private (add to exports)")(Data_Array.snoc(exportNames)(formatDeclName(v2)));
        };
        var privatePublicCodeLenses = Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidArray)(declToCodeLens)(Data_Map_Internal.values(v1));
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.fromFoldable(Data_Foldable.foldableMaybe)(moduleLens))(privatePublicCodeLenses);
      };
    };
    var exportManagementCodeLenses = function(_documentStore) {
      return function(_settings) {
        return function(v) {
          return function(uri) {
            var v1 = Data_Functor.map(Data_Maybe.functorMaybe)(function(v2) {
              return v2.parsed;
            })(Data_Map_Internal.lookup(LanguageServer_Protocol_Types.ordDocumentUri)(uri)(v.parsedModules));
            if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof PureScript_CST.ParseSucceeded) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(mkCodeLenses(uri)(v1.value0.value0));
            }
            ;
            if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof PureScript_CST.ParseSucceededWithErrors) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(mkCodeLenses(uri)(v1.value0.value0));
            }
            ;
            return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
          };
        };
      };
    };
    module2.exports = {
      exportManagementCodeLenses,
      printExports
    };
  }
});

// output/LanguageServer.IdePurescript.CodeLens.TopLevelDeclarations/index.js
var require_LanguageServer_IdePurescript_CodeLens2 = __commonJS({
  "output/LanguageServer.IdePurescript.CodeLens.TopLevelDeclarations/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Data_Ord = require_Data12();
    var Data_Set = require_Data48();
    var Data_String_Common = require_Data_String4();
    var Data_String_Utils = require_Data_String7();
    var Effect_Aff = require_Effect6();
    var Foreign = require_Foreign();
    var IdePurescript_PscIde = require_IdePurescript2();
    var LanguageServer_IdePurescript_Commands = require_LanguageServer_IdePurescript();
    var LanguageServer_IdePurescript_Util = require_LanguageServer_IdePurescript7();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var PureScript_CST_Types = require_PureScript_CST();
    var getDecls = function(v) {
      var sig = function(v1) {
        if (v1 instanceof PureScript_CST_Types.DeclSignature) {
          return new Data_Maybe.Just(v1.value0.label.name);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var signatures = Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)(Data_Array.mapMaybe(sig)(v.body.decls));
      var go = function(v1) {
        if (v1 instanceof PureScript_CST_Types.DeclValue && (v1.value0.guarded instanceof PureScript_CST_Types.Unconditional && (v1.value0.guarded.value1.expr instanceof PureScript_CST_Types.ExprTyped && v1.value0.guarded.value1.bindings instanceof Data_Maybe.Nothing))) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v1 instanceof PureScript_CST_Types.DeclValue && !Data_Set.member(Data_Ord.ordString)(v1.value0.name.name)(signatures)) {
          return new Data_Maybe.Just({
            name: v1.value0.name.name,
            range: v1.value0.name.token.range
          });
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      return {
        moduleName: v.header.name.name,
        decls: Data_Array.mapMaybe(go)(v.body.decls)
      };
    };
    var ensureSpaceAfterFirstLine = function() {
      var prependSpaceIfNecessary = function(i) {
        return function(s) {
          var $32 = i === 0 || Data_String_Utils.startsWith(" ")(s);
          if ($32) {
            return s;
          }
          ;
          return " " + s;
        };
      };
      var $55 = Data_String_Common.joinWith("\n");
      var $56 = Data_Array.mapWithIndex(prependSpaceIfNecessary);
      return function($57) {
        return $55($56(Data_String_Utils.lines($57)));
      };
    }();
    var topLevelDeclarationLenses = function(_docs) {
      return function(_settings) {
        return function(v) {
          return function(uri) {
            var mkReplaceCommand = function(name) {
              return function(ty) {
                return function(range) {
                  var signature = name + (" \u2237 " + Data_String_Common.trim(ty));
                  return {
                    command: LanguageServer_IdePurescript_Commands.cmdName(LanguageServer_IdePurescript_Commands.replaceSuggestionCmd),
                    title: signature,
                    "arguments": Data_Nullable.notNull([Foreign.unsafeToForeign(uri), Foreign.unsafeToForeign(ensureSpaceAfterFirstLine(signature) + "\n"), Foreign.unsafeToForeign(range)])
                  };
                };
              };
            };
            var mkCodeLensResult = function(types) {
              return function(v1) {
                var range = {
                  start: {
                    line: v1.range.start.line,
                    character: 0
                  },
                  end: {
                    line: v1.range.end.line,
                    character: 0
                  }
                };
                var lookupType = Data_Array.findMap(function(v2) {
                  var $40 = v2.identifier === v1.name;
                  if ($40) {
                    return new Data_Maybe.Just(v2["type'"]);
                  }
                  ;
                  return Data_Maybe.Nothing.value;
                })(types);
                return Data_Functor.map(Data_Maybe.functorMaybe)(function(ty) {
                  return {
                    range,
                    command: Data_Nullable.notNull(mkReplaceCommand(v1.name)(ty)(range)),
                    data: Foreign.unsafeToForeign(Data_Nullable["null"])
                  };
                })(lookupType);
              };
            };
            var binds = Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(LanguageServer_IdePurescript_Util.maybeParseResult(Data_Maybe.Nothing.value)(function(dictRangeOf) {
              return function($58) {
                return Data_Maybe.Just.create(getDecls($58));
              };
            }))(Data_Functor.map(Data_Maybe.functorMaybe)(function(v1) {
              return v1.parsed;
            })(Data_Map_Internal.lookup(LanguageServer_Protocol_Types.ordDocumentUri)(uri)(v.parsedModules)));
            if (v.port instanceof Data_Maybe.Just && binds instanceof Data_Maybe.Just) {
              return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.typesInModule(v.port.value0)(binds.value0.moduleName))(function(types) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.mapMaybe(mkCodeLensResult(types))(binds.value0.decls));
              });
            }
            ;
            return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
          };
        };
      };
    };
    module2.exports = {
      topLevelDeclarationLenses
    };
  }
});

// output/LanguageServer.IdePurescript.CodeLenses/index.js
var require_LanguageServer_IdePurescript11 = __commonJS({
  "output/LanguageServer.IdePurescript.CodeLenses/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Data_Semigroup = require_Data7();
    var Data_Unit = require_Data3();
    var Effect_Aff = require_Effect6();
    var LanguageServer_IdePurescript_CodeLens_ExportManagement = require_LanguageServer_IdePurescript_CodeLens();
    var LanguageServer_IdePurescript_CodeLens_TopLevelDeclarations = require_LanguageServer_IdePurescript_CodeLens2();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var supportsRefresh = function(v) {
      if (v instanceof Data_Maybe.Just) {
        return Data_Maybe.fromMaybe(false)(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe(v.value0.workspace))(function($21) {
          return Data_Nullable.toMaybe(function(v1) {
            return v1.codeLens;
          }($21));
        }))(function($22) {
          return Data_Nullable.toMaybe(function(v1) {
            return v1.refreshSupport;
          }($22));
        }));
      }
      ;
      if (v instanceof Data_Maybe.Nothing) {
        return false;
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLenses (line 36, column 1 - line 36, column 55): " + [v.constructor.name]);
    };
    var getCodeLenses = function(_notify) {
      return function(_stateRef) {
        return function(documentStore) {
          return function(settings) {
            return function(state) {
              return function(v) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(function() {
                  if (state.runningRebuild instanceof Data_Maybe.Just) {
                    return Effect_Aff.joinFiber(state.runningRebuild.value0.fiber);
                  }
                  ;
                  if (state.runningRebuild instanceof Data_Maybe.Nothing) {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  }
                  ;
                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.CodeLenses (line 24, column 3 - line 28, column 16): " + [state.runningRebuild.constructor.name]);
                }())(function() {
                  var guard = function(b) {
                    return function(m) {
                      if (b) {
                        return m;
                      }
                      ;
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                    };
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(guard(LanguageServer_IdePurescript_Config.declarationTypeCodeLens(settings))(LanguageServer_IdePurescript_CodeLens_TopLevelDeclarations.topLevelDeclarationLenses(documentStore)(settings)(state)(v.textDocument.uri)))(function(topLevelDeclarations) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(guard(LanguageServer_IdePurescript_Config.exportsCodeLens(settings))(LanguageServer_IdePurescript_CodeLens_ExportManagement.exportManagementCodeLenses(documentStore)(settings)(state)(v.textDocument.uri)))(function(exportManagement) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(topLevelDeclarations)(exportManagement));
                    });
                  });
                });
              };
            };
          };
        };
      };
    };
    module2.exports = {
      getCodeLenses,
      supportsRefresh
    };
  }
});

// output/LanguageServer.IdePurescript.SuggestionRank/index.js
var require_LanguageServer_IdePurescript12 = __commonJS({
  "output/LanguageServer.IdePurescript.SuggestionRank/index.js"(exports2, module2) {
    "use strict";
    var Data_Boolean = require_Data();
    var Data_Bounded = require_Data13();
    var Data_Char = require_Data49();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Ord = require_Data12();
    var Data_Ordering = require_Data9();
    var Data_Semigroup = require_Data7();
    var Data_String_CodePoints = require_Data_String6();
    var SuggestionRank = function(x) {
      return x;
    };
    var Ranking = function(x) {
      return x;
    };
    var toString = function(v) {
      return Data_String_CodePoints.singleton(Data_String_CodePoints.codePointFromChar(Data_Maybe.fromMaybe(" ")(Data_Char.fromCharCode(65 + v | 0))));
    };
    var semigroupSuggestionRank = {
      append: function(v) {
        return function(v1) {
          return Data_Ord.min(Data_Ord.ordInt)(v)(v1);
        };
      }
    };
    var newtypeRanking = {
      Coercible0: function() {
        return void 0;
      }
    };
    var fromInt = function() {
      var $28 = Data_Ord.clamp(Data_Ord.ordInt)(0)(25);
      return function($29) {
        return SuggestionRank($28($29));
      };
    }();
    var eqSuggestionRank = {
      eq: function(x) {
        return function(y) {
          return x === y;
        };
      }
    };
    var ordSuggestionRank = {
      compare: function(v) {
        return function(v1) {
          return Data_Ordering.invert(Data_Ord.compare(Data_Ord.ordInt)(v)(v1));
        };
      },
      Eq0: function() {
        return eqSuggestionRank;
      }
    };
    var enumSuggestionRank = {
      succ: function(v) {
        if (v === 0) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just(v - 1 | 0);
        }
        ;
        throw new Error("Failed pattern match at LanguageServer.IdePurescript.SuggestionRank (line 30, column 1 - line 36, column 48): " + [v.constructor.name]);
      },
      pred: function(v) {
        if (v === 25) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just(v + 1 | 0);
        }
        ;
        throw new Error("Failed pattern match at LanguageServer.IdePurescript.SuggestionRank (line 30, column 1 - line 36, column 48): " + [v.constructor.name]);
      },
      Ord0: function() {
        return ordSuggestionRank;
      }
    };
    var contravariantRanking = {
      cmap: function(f) {
        return function(v) {
          return function($30) {
            return v(f($30));
          };
        };
      }
    };
    var boundedSuggestionRank = {
      top: 0,
      bottom: 25,
      Ord0: function() {
        return ordSuggestionRank;
      }
    };
    var monoidSuggestionRank = {
      mempty: Data_Bounded.bottom(boundedSuggestionRank),
      Semigroup0: function() {
        return semigroupSuggestionRank;
      }
    };
    var cmapRanking = function(k) {
      return function(r) {
        var $31 = Data_Maybe.maybe(Data_Monoid.mempty(monoidSuggestionRank))(Data_Newtype.unwrap()(r));
        return function($32) {
          return $31(k($32));
        };
      };
    };
    var semigroupRanking = {
      append: function(v) {
        return function(v1) {
          return function(a) {
            var rank = v(a);
            var $27 = Data_Eq.eq(eqSuggestionRank)(rank)(Data_Bounded.top(boundedSuggestionRank));
            if ($27) {
              return rank;
            }
            ;
            return Data_Semigroup.append(semigroupSuggestionRank)(rank)(v1(a));
          };
        };
      }
    };
    var monoidRanking = {
      mempty: Data_Function["const"](Data_Bounded.bottom(boundedSuggestionRank)),
      Semigroup0: function() {
        return semigroupRanking;
      }
    };
    module2.exports = {
      fromInt,
      toString,
      Ranking,
      cmapRanking,
      eqSuggestionRank,
      ordSuggestionRank,
      boundedSuggestionRank,
      enumSuggestionRank,
      semigroupSuggestionRank,
      monoidSuggestionRank,
      newtypeRanking,
      semigroupRanking,
      monoidRanking,
      contravariantRanking
    };
  }
});

// output/LanguageServer.IdePurescript.Completion/index.js
var require_LanguageServer_IdePurescript13 = __commonJS({
  "output/LanguageServer.IdePurescript.Completion/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Bounded = require_Data13();
    var Data_FoldableWithIndex = require_Data28();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_Semigroup = require_Data7();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_Common = require_Data_String4();
    var Data_String_Utils = require_Data_String7();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var IdePurescript_Completion = require_IdePurescript7();
    var IdePurescript_Modules = require_IdePurescript5();
    var IdePurescript_PscIde = require_IdePurescript2();
    var LanguageServer_IdePurescript_Commands = require_LanguageServer_IdePurescript();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var LanguageServer_IdePurescript_Imports = require_LanguageServer_IdePurescript3();
    var LanguageServer_IdePurescript_SuggestionRank = require_LanguageServer_IdePurescript12();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var rankSub = function(v) {
      var v1 = Data_String_CodePoints.indexOf(v.sub)(v.str);
      if (v1 instanceof Data_Maybe.Just) {
        return LanguageServer_IdePurescript_SuggestionRank.fromInt((1 + v1.value0 | 0) * ((1 + Data_String_CodePoints.length(v.sub) | 0) - (Data_String_CodePoints.length(v.str) + v1.value0 | 0) | 0) | 0);
      }
      ;
      if (v1 instanceof Data_Maybe.Nothing) {
        return Data_Bounded.bottom(LanguageServer_IdePurescript_SuggestionRank.boundedSuggestionRank);
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Completion (line 199, column 5 - line 201, column 24): " + [v1.constructor.name]);
    };
    var rankSegmentPrefix = function(v) {
      var v1 = Data_String_CodePoints.indexOf(v.prefix)(v.segment);
      if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
        return LanguageServer_IdePurescript_SuggestionRank.fromInt(((1 + v.ix | 0) * (1 + (Data_String_CodePoints.length(v.segment) - Data_String_CodePoints.length(v.prefix) | 0) | 0) | 0) + (v.len - v.ix | 0) | 0);
      }
      ;
      return Data_Bounded.bottom(LanguageServer_IdePurescript_SuggestionRank.boundedSuggestionRank);
    };
    var rankQualifiedWithType = function(opts) {
      var v = IdePurescript_Modules.getModuleFromUnknownQualifier(opts.qualifier)(opts.state);
      if (v instanceof Data_Maybe.Just && IdePurescript_Modules.getModuleName(v.value0) === opts.mod) {
        return Data_Bounded.top(LanguageServer_IdePurescript_SuggestionRank.boundedSuggestionRank);
      }
      ;
      return Data_Bounded.bottom(LanguageServer_IdePurescript_SuggestionRank.boundedSuggestionRank);
    };
    var rankQualifiedWithSegment = function(opts) {
      var segments = Data_String_Common.split(".")(opts.mod);
      return Data_FoldableWithIndex.foldMapWithIndex(Data_FoldableWithIndex.foldableWithIndexArray)(LanguageServer_IdePurescript_SuggestionRank.monoidSuggestionRank)(function(ix) {
        return function(segment) {
          return Data_Newtype.unwrap()(rankSegmentPrefix)({
            len: Data_Array.length(segments),
            ix,
            segment,
            prefix: opts.qualifier
          });
        };
      })(segments);
    };
    var rankQualifiedWithConcat = Data_Function.flip(LanguageServer_IdePurescript_SuggestionRank.cmapRanking)(rankSub)(function(opts) {
      return new Data_Maybe.Just({
        sub: opts.qualifier,
        str: Data_String_Common.replaceAll(".")("")(opts.mod)
      });
    });
    var rankModuleAbv = Data_Function.flip(LanguageServer_IdePurescript_SuggestionRank.cmapRanking)(rankSub)(function(v) {
      var modAbv = Data_String_Common.joinWith("")(Data_Array.filter(function(ch) {
        return Data_String_Common.toUpper(ch) === ch;
      })(Data_String_Utils.toCharArray(Data_String_Common.replaceAll(".")("")(v.mod))));
      return new Data_Maybe.Just({
        sub: v.abv,
        str: modAbv
      });
    });
    var rankQualifiedWithAbv = Data_Function.flip(LanguageServer_IdePurescript_SuggestionRank.cmapRanking)(rankModuleAbv)(function(opts) {
      var $38 = Data_String_Common.toUpper(opts.qualifier) === opts.qualifier;
      if ($38) {
        return new Data_Maybe.Just({
          abv: opts.qualifier,
          mod: opts.mod
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var rankUnknownQualified = Data_Semigroup.append(LanguageServer_IdePurescript_SuggestionRank.semigroupRanking)(rankQualifiedWithType)(Data_Semigroup.append(LanguageServer_IdePurescript_SuggestionRank.semigroupRanking)(rankQualifiedWithSegment)(Data_Semigroup.append(LanguageServer_IdePurescript_SuggestionRank.semigroupRanking)(rankQualifiedWithAbv)(rankQualifiedWithConcat)));
    var rankSuggestion = Data_Function.flip(LanguageServer_IdePurescript_SuggestionRank.cmapRanking)(rankUnknownQualified)(function(v) {
      if (v.suggestion instanceof IdePurescript_Completion.IdentSuggestion && (v.suggestion.value0.qualifier instanceof Data_Maybe.Just && Data_Array["null"](IdePurescript_Modules.getQualModule(v.suggestion.value0.qualifier.value0)(v.state)))) {
        return new Data_Maybe.Just({
          state: v.state,
          qualifier: v.suggestion.value0.qualifier.value0,
          mod: v.suggestion.value0.exportMod
        });
      }
      ;
      return Data_Maybe.Nothing.value;
    });
    var getCompletions = function(notify) {
      return function(docs) {
        return function(settings) {
          return function(state) {
            return function(v) {
              var result = function(arr) {
                return {
                  items: arr,
                  isIncomplete: true
                };
              };
              var mkRange = function(pos) {
                return {
                  start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(v1) {
                    return {
                      character: 0,
                      line: v1.line
                    };
                  })(pos),
                  end: pos
                };
              };
              var edit = function(newText) {
                return function(prefix) {
                  return {
                    range: {
                      start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(pos) {
                        return {
                          character: pos.character - Data_String_CodePoints.length(prefix) | 0,
                          line: pos.line
                        };
                      })(v.position),
                      end: v.position
                    },
                    newText
                  };
                };
              };
              var convertSuggest = function(v1) {
                if (v1 instanceof IdePurescript_Completion.Module) {
                  return LanguageServer_Protocol_Types.Module.value;
                }
                ;
                if (v1 instanceof IdePurescript_Completion.Value) {
                  return LanguageServer_Protocol_Types.Value.value;
                }
                ;
                if (v1 instanceof IdePurescript_Completion["Function"]) {
                  return LanguageServer_Protocol_Types["Function"].value;
                }
                ;
                if (v1 instanceof IdePurescript_Completion.Type) {
                  return LanguageServer_Protocol_Types.Class.value;
                }
                ;
                if (v1 instanceof IdePurescript_Completion.DCtor) {
                  return LanguageServer_Protocol_Types.Enum.value;
                }
                ;
                if (v1 instanceof IdePurescript_Completion.Kind) {
                  return LanguageServer_Protocol_Types.Interface.value;
                }
                ;
                throw new Error("Failed pattern match at LanguageServer.IdePurescript.Completion (line 85, column 20 - line 91, column 25): " + [v1.constructor.name]);
              };
              var convert = function(v1) {
                return function(v2) {
                  if (v2 instanceof IdePurescript_Completion.QualifierSuggestion) {
                    return Data_Newtype.over()()(LanguageServer_Protocol_Types.CompletionItem)(function(v3) {
                      return {
                        detail: Data_Nullable.toNullable(new Data_Maybe.Just(v2.value0.mod)),
                        additionalTextEdits: v3.additionalTextEdits,
                        command: v3.command,
                        documentation: v3.documentation,
                        filterText: v3.filterText,
                        insertText: v3.insertText,
                        kind: v3.kind,
                        label: v3.label,
                        labelDetails: v3.labelDetails,
                        sortText: v3.sortText,
                        textEdit: v3.textEdit
                      };
                    })(LanguageServer_Protocol_Types.completionItem(v2.value0.text)(LanguageServer_Protocol_Types.Module.value));
                  }
                  ;
                  if (v2 instanceof IdePurescript_Completion.ModuleSuggestion) {
                    return Data_Newtype.over()()(LanguageServer_Protocol_Types.CompletionItem)(function(v3) {
                      return {
                        textEdit: Data_Nullable.toNullable(Data_Maybe.Just.create(edit(v2.value0.text)(v2.value0.prefix))),
                        additionalTextEdits: v3.additionalTextEdits,
                        command: v3.command,
                        detail: v3.detail,
                        documentation: v3.documentation,
                        filterText: v3.filterText,
                        insertText: v3.insertText,
                        kind: v3.kind,
                        label: v3.label,
                        labelDetails: v3.labelDetails,
                        sortText: v3.sortText
                      };
                    })(LanguageServer_Protocol_Types.completionItem(v2.value0.text)(convertSuggest(v2.value0.suggestType)));
                  }
                  ;
                  if (v2 instanceof IdePurescript_Completion.IdentSuggestion) {
                    var rankText = LanguageServer_IdePurescript_SuggestionRank.toString(Data_Newtype.unwrap()(rankSuggestion)({
                      state: Data_Newtype.unwrap()(state).modules,
                      suggestion: v2
                    }));
                    var exportText = "\n*From: " + (function() {
                      var $61 = v2.value0.exportMod === v2.value0.origMod;
                      if ($61) {
                        return v2.value0.origMod;
                      }
                      ;
                      return v2.value0.exportMod + (" (re-exported from " + (v2.value0.origMod + ")"));
                    }() + "*");
                    return Data_Newtype.over()()(LanguageServer_Protocol_Types.CompletionItem)(function(v3) {
                      return {
                        detail: Data_Nullable.toNullable(new Data_Maybe.Just(v2.value0.valueType)),
                        labelDetails: Data_Nullable.toNullable(Data_Maybe.Just.create({
                          detail: Data_Nullable.toNullable(Data_Maybe.Just.create(" " + v2.value0.valueType)),
                          description: Data_Nullable.toNullable(new Data_Maybe.Just(v2.value0.exportMod))
                        })),
                        documentation: Data_Nullable.toNullable(Data_Maybe.Just.create(LanguageServer_Protocol_Types.markupContent(Data_Maybe.fromMaybe("")(v2.value0.documentation) + exportText))),
                        command: Data_Nullable.toNullable(Data_Maybe.Just.create(LanguageServer_IdePurescript_Commands.addCompletionImport(v2.value0.identifier)(new Data_Maybe.Just(v2.value0.exportMod))(v2.value0.qualifier)(v1)(Data_Maybe.maybe("")(LanguageServer_IdePurescript_Imports.showNS)(v2.value0.namespace)))),
                        textEdit: Data_Nullable.toNullable(Data_Maybe.Just.create(edit(v2.value0.identifier)(v2.value0.prefix))),
                        sortText: Data_Nullable.toNullable(Data_Maybe.Just.create(rankText + ("." + v2.value0.identifier))),
                        additionalTextEdits: v3.additionalTextEdits,
                        filterText: v3.filterText,
                        insertText: v3.insertText,
                        kind: v3.kind,
                        label: v3.label
                      };
                    })(LanguageServer_Protocol_Types.completionItem(v2.value0.identifier)(convertSuggest(v2.value0.suggestType)));
                  }
                  ;
                  throw new Error("Failed pattern match at LanguageServer.IdePurescript.Completion (line 103, column 3 - line 109, column 12): " + [v1.constructor.name, v2.constructor.name]);
                };
              };
              var uri = function(v1) {
                return v1.uri;
              }(Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier)(v.textDocument));
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(uri)))(function(doc) {
                return Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(result([])))(function(doc1) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(doc1)(mkRange(v.position))))(function(line) {
                    var autoCompleteAllModules = LanguageServer_IdePurescript_Config.autoCompleteAllModules(settings);
                    var v1 = Data_Newtype.unwrap()(state);
                    var getQualifiedModule = Data_Function.flip(IdePurescript_Modules.getQualModule)(v1.modules);
                    if (v1.port instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(function() {
                        if (autoCompleteAllModules) {
                          return IdePurescript_PscIde.getLoadedModules(v1.port.value0);
                        }
                        ;
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(IdePurescript_Modules.getUnqualActiveModules(v1.modules)(Data_Maybe.Nothing.value));
                      }())(function(usedModules) {
                        var qualifiers = Data_Array.mapMaybe(function(v2) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
                            return {
                              moduleName: v2.moduleName,
                              qualifier: v3
                            };
                          })(v2.qualifier);
                        })(v1.modules.modules);
                        return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Completion.getSuggestions(notify)(v1.port.value0)({
                          line,
                          moduleInfo: {
                            modules: usedModules,
                            openModules: IdePurescript_Modules.getUnqualActiveModules(v1.modules)(Data_Maybe.Nothing.value),
                            candidateModules: function() {
                              var $86 = IdePurescript_Modules.getUnqualActiveModules(v1.modules);
                              return function($87) {
                                return $86(Data_Maybe.Just.create($87));
                              };
                            }(),
                            getQualifiedModule,
                            mainModule: v1.modules.main,
                            importedModules: IdePurescript_Modules.getAllActiveModules(v1.modules)
                          },
                          qualifiers,
                          maxResults: LanguageServer_IdePurescript_Config.autocompleteLimit(settings),
                          groupCompletions: LanguageServer_IdePurescript_Config.autocompleteGrouped(settings),
                          preferredModules: LanguageServer_IdePurescript_Config.importsPreferredModules(settings)
                        }))(function(v2) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                            items: Data_Functor.map(Data_Functor.functorArray)(convert(uri))(v2.results),
                            isIncomplete: v2.isIncomplete
                          });
                        });
                      });
                    }
                    ;
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(result([]));
                  });
                })(Data_Nullable.toMaybe(doc));
              });
            };
          };
        };
      };
    };
    module2.exports = {
      getCompletions
    };
  }
});

// output/LanguageServer.IdePurescript.FoldingRanges/index.js
var require_LanguageServer_IdePurescript14 = __commonJS({
  "output/LanguageServer.IdePurescript.FoldingRanges/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Functor = require_Data4();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Data_Semigroup = require_Data7();
    var Data_Show = require_Data14();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var LanguageServer_IdePurescript_Util = require_LanguageServer_IdePurescript7();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var PureScript_CST_Range = require_PureScript_CST8();
    var makeRange = function(kind) {
      return function(startPos) {
        return function(endPos) {
          return {
            startLine: startPos.line,
            startCharacter: Data_Nullable.notNull(startPos.column),
            endLine: endPos.line,
            endCharacter: Data_Nullable.notNull(endPos.column),
            kind
          };
        };
      };
    };
    var makeRange$prime = function(range) {
      return makeRange(Data_Nullable["null"])(range.start)(range.end);
    };
    var getRanges = function(dictRangeOf) {
      return function(v) {
        var importRanges = function() {
          var v1 = Data_Array.last(v.header.imports);
          var v2 = Data_Array.head(v.header.imports);
          if (v2 instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
            return [makeRange(Data_Nullable.notNull("imports"))(PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfImportDecl)(v2.value0).start)(PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfImportDecl)(v1.value0).end)];
          }
          ;
          return [];
        }();
        var bodyRanges = Data_Functor.map(Data_Functor.functorArray)(function() {
          var $29 = PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfDecl(dictRangeOf));
          return function($30) {
            return makeRange$prime($29($30));
          };
        }())(v.body.decls);
        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(importRanges)(bodyRanges);
      };
    };
    var getFoldingRanges = function(notify) {
      return function(_docs) {
        return function(v) {
          return function(v1) {
            return function(v2) {
              var v3 = Data_Map_Internal.lookup(LanguageServer_Protocol_Types.ordDocumentUri)(v2.textDocument.uri)(v1.parsedModules);
              if (v3 instanceof Data_Maybe.Just) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(LanguageServer_IdePurescript_Util.maybeParseResult([])(function(dictRangeOf) {
                  return getRanges(dictRangeOf);
                })(v3.value0.parsed));
              }
              ;
              if (v3 instanceof Data_Maybe.Nothing) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(notify(IdePurescript_PscIdeServer.Warning.value)("getFoldingRanges - no parsed CST for " + Data_Show.show(LanguageServer_Protocol_Types.showDocumentUri)(v2.textDocument.uri))))(function() {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                });
              }
              ;
              throw new Error("Failed pattern match at LanguageServer.IdePurescript.FoldingRanges (line 26, column 3 - line 31, column 14): " + [v3.constructor.name]);
            };
          };
        };
      };
    };
    module2.exports = {
      getFoldingRanges
    };
  }
});

// output/LanguageServer.IdePurescript.Formatting/index.js
var require_LanguageServer_IdePurescript15 = __commonJS({
  "output/LanguageServer.IdePurescript.Formatting/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Nullable = require_Data41();
    var Data_Semiring = require_Data10();
    var Data_Show = require_Data14();
    var Data_String_Utils = require_Data_String7();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Effect_Exception = require_Effect2();
    var Effect_Ref = require_Effect3();
    var Foreign = require_Foreign();
    var IdePurescript_Build = require_IdePurescript9();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var Node_Buffer = require_Node6();
    var Node_Buffer_Class = require_Node_Buffer();
    var Node_ChildProcess = require_Node7();
    var Node_Encoding = require_Node5();
    var Node_Stream = require_Node9();
    var purtyCommand = new IdePurescript_Build.Command("purty", ["format", "-"]);
    var pursTidyCommand = new IdePurescript_Build.Command("purs-tidy", ["format"]);
    var poseCommand = new IdePurescript_Build.Command("prettier", ["--parser", "purescript"]);
    var mkTextEdit = function(oldText) {
      return function(text) {
        var range = {
          start: {
            line: 0,
            character: 0
          },
          end: {
            line: Data_Foldable.length(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_String_Utils.lines(oldText)) + 1 | 0,
            character: 0
          }
        };
        return {
          range,
          newText: text
        };
      };
    };
    var format = function(_logCb) {
      return function(settings) {
        return function(state) {
          return function(formatter) {
            return function(text) {
              var command = function() {
                if (formatter instanceof LanguageServer_IdePurescript_Config.Purty) {
                  return purtyCommand;
                }
                ;
                if (formatter instanceof LanguageServer_IdePurescript_Config.PursTidy) {
                  return pursTidyCommand;
                }
                ;
                if (formatter instanceof LanguageServer_IdePurescript_Config.Pose) {
                  return poseCommand;
                }
                ;
                if (formatter instanceof LanguageServer_IdePurescript_Config.NoFormatter) {
                  return new IdePurescript_Build.Command("echo", []);
                }
                ;
                throw new Error("Failed pattern match at LanguageServer.IdePurescript.Formatting (line 64, column 15 - line 68, column 39): " + [formatter.constructor.name]);
              }();
              if (state.root instanceof Data_Maybe.Just) {
                return Effect_Aff.makeAff(function(cb) {
                  var succ = function($28) {
                    return cb(Data_Either.Right.create($28));
                  };
                  var err = function($29) {
                    return cb(Data_Either.Left.create($29));
                  };
                  return function __do() {
                    var cp = IdePurescript_Build.spawn({
                      command,
                      directory: state.root.value0,
                      useNpmDir: LanguageServer_IdePurescript_Config.addNpmPath(settings)
                    })();
                    Node_ChildProcess.onError(cp)(function($30) {
                      return err(Node_ChildProcess.toStandardError($30));
                    })();
                    var result = Effect_Ref["new"]([])();
                    var res = function(s) {
                      return Effect_Ref.modify_(function(v) {
                        return Data_Array.snoc(v)(s);
                      })(result);
                    };
                    Effect_Exception.catchException(err)(Node_Stream.onDataString(Node_ChildProcess.stderr(cp))(Node_Encoding.UTF8.value)(function($31) {
                      return err(Effect_Exception.error($31));
                    }))();
                    Effect_Exception.catchException(err)(Node_Stream.onData(Node_ChildProcess.stdout(cp))(res))();
                    Node_ChildProcess.onClose(cp)(function(exit) {
                      if (exit instanceof Node_ChildProcess.Normally && (exit.value0 === 0 || exit.value0 === 1)) {
                        return Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(result))(Node_Buffer_Class.concat(Node_Buffer.mutableBufferEffect)))(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value)))(succ);
                      }
                      ;
                      return err(Effect_Exception.error(command.value0 + " process exited abnormally"));
                    })();
                    Control_Applicative.when(Effect.applicativeEffect)(!Foreign.isUndefined(Foreign.unsafeToForeign(Node_ChildProcess.pid(cp))))(function __do2() {
                      Effect_Exception.catchException(err)(Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(Node_ChildProcess.stdin(cp))(Node_Encoding.UTF8.value)(text)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))))();
                      return Effect_Exception.catchException(err)(Node_Stream.end(Node_ChildProcess.stdin(cp))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))();
                    })();
                    return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
                  };
                });
              }
              ;
              return Control_Applicative.pure(Effect_Aff.applicativeAff)("");
            };
          };
        };
      };
    };
    var getFormattedDocument = function(logCb) {
      return function(docs) {
        return function(settings) {
          return function(serverState) {
            return function(v) {
              var v1 = LanguageServer_IdePurescript_Config.formatter(settings);
              if (v1 instanceof LanguageServer_IdePurescript_Config.NoFormatter) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
              }
              ;
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(v.textDocument.uri))))(function(maybeDoc) {
                if (maybeDoc instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                }
                ;
                if (maybeDoc instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(maybeDoc.value0)))(function(text) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(format(logCb)(settings)(serverState)(v1)(text)))(function(newTextEither) {
                      if (newTextEither instanceof Data_Either.Left) {
                        return Data_Functor.voidLeft(Effect_Aff.functorAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logCb(IdePurescript_PscIdeServer["Error"].value)(Data_Show.show(Effect_Exception.showError)(newTextEither.value0))))([]);
                      }
                      ;
                      if (newTextEither instanceof Data_Either.Right && newTextEither.value0 === "") {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                      }
                      ;
                      if (newTextEither instanceof Data_Either.Right) {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)([mkTextEdit(text)(newTextEither.value0)]);
                      }
                      ;
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Formatting (line 48, column 11 - line 51, column 62): " + [newTextEither.constructor.name]);
                    });
                  });
                }
                ;
                throw new Error("Failed pattern match at LanguageServer.IdePurescript.Formatting (line 43, column 7 - line 51, column 62): " + [maybeDoc.constructor.name]);
              });
            };
          };
        };
      };
    };
    module2.exports = {
      getFormattedDocument
    };
  }
});

// output/LanguageServer.IdePurescript.Symbols/index.js
var require_LanguageServer_IdePurescript16 = __commonJS({
  "output/LanguageServer.IdePurescript.Symbols/index.js"(exports2, module2) {
    "use strict";
    var Control_Alt = require_Control6();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Array_NonEmpty = require_Data_Array2();
    var Data_Array_NonEmpty_Internal = require_Data_Array_NonEmpty();
    var Data_Either = require_Data16();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_Monoid = require_Data19();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_Ord = require_Data12();
    var Data_Semigroup = require_Data7();
    var Data_Set = require_Data48();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var IdePurescript_Modules = require_IdePurescript5();
    var IdePurescript_PscIde = require_IdePurescript2();
    var IdePurescript_Tokens = require_IdePurescript6();
    var LanguageServer_IdePurescript_Types = require_LanguageServer_IdePurescript6();
    var LanguageServer_IdePurescript_Util_CST = require_LanguageServer_IdePurescript_Util();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var LanguageServer_Protocol_Uri = require_LanguageServer_Protocol6();
    var Node_Path = require_Node();
    var PureScript_CST = require_PureScript();
    var PureScript_CST_Range = require_PureScript_CST8();
    var PureScript_CST_Traversal = require_PureScript_CST9();
    var PureScript_CST_Types = require_PureScript_CST();
    var rangeOfDoStatementsScope = function(dictRangeOf) {
      return {
        rangeOf: function(v) {
          return Data_Array_NonEmpty.foldl1(function(a) {
            return function(b) {
              return {
                start: a.start,
                end: b.end
              };
            };
          })(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(Data_Either.either(PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfExpr(dictRangeOf)))(PureScript_CST_Range.rangeOf(PureScript_CST_Range.rangeOfDoStatement(dictRangeOf))))(v));
        }
      };
    };
    var guard$prime = function(dictMonoid) {
      return function(cond) {
        return function(f) {
          if (cond) {
            return f(Data_Unit.unit);
          }
          ;
          return Data_Monoid.mempty(dictMonoid);
        };
      };
    };
    var getLocalDefinitions = function(dictRangeOf) {
      return function(uri) {
        return function(position) {
          return function(ident) {
            var onBinder = function(dictRangeOf1) {
              return function(eScope) {
                return PureScript_CST_Traversal.foldMapBinder(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function() {
                    return "scope";
                  }
                })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function() {
                    return "start";
                  }
                })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function() {
                    return "line";
                  }
                })(Data_Ord.ordInt))()({
                  reflectSymbol: function() {
                    return "column";
                  }
                })(Data_Ord.ordInt))))()({
                  reflectSymbol: function() {
                    return "end";
                  }
                })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function() {
                    return "line";
                  }
                })(Data_Ord.ordInt))()({
                  reflectSymbol: function() {
                    return "column";
                  }
                })(Data_Ord.ordInt))))))()({
                  reflectSymbol: function() {
                    return "ident";
                  }
                })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function() {
                    return "start";
                  }
                })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function() {
                    return "line";
                  }
                })(Data_Ord.ordInt))()({
                  reflectSymbol: function() {
                    return "column";
                  }
                })(Data_Ord.ordInt))))()({
                  reflectSymbol: function() {
                    return "end";
                  }
                })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function() {
                    return "line";
                  }
                })(Data_Ord.ordInt))()({
                  reflectSymbol: function() {
                    return "column";
                  }
                })(Data_Ord.ordInt))))))))({
                  onBinder: function(v1) {
                    if (v1 instanceof PureScript_CST_Types.BinderVar && v1.value0.name === ident) {
                      return Data_Set.singleton({
                        ident: v1.value0.token.range,
                        scope: PureScript_CST_Range.rangeOf(dictRangeOf1)(eScope)
                      });
                    }
                    ;
                    if (v1 instanceof PureScript_CST_Types.BinderNamed && v1.value0.name === ident) {
                      return Data_Set.singleton({
                        ident: v1.value0.token.range,
                        scope: PureScript_CST_Range.rangeOf(dictRangeOf1)(eScope)
                      });
                    }
                    ;
                    return Data_Set.empty;
                  },
                  onDecl: PureScript_CST_Traversal.defaultMonoidalVisitor(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "scope";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))()({
                    reflectSymbol: function() {
                      return "ident";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt)))))))).onDecl,
                  onExpr: PureScript_CST_Traversal.defaultMonoidalVisitor(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "scope";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))()({
                    reflectSymbol: function() {
                      return "ident";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt)))))))).onExpr,
                  onType: PureScript_CST_Traversal.defaultMonoidalVisitor(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "scope";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))()({
                    reflectSymbol: function() {
                      return "ident";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt)))))))).onType
                });
              };
            };
            var onLetBind = function(dictRangeOf1) {
              return function(eScope) {
                return function(v) {
                  if (v instanceof PureScript_CST_Types.LetBindingName) {
                    return Data_Semigroup.append(Data_Set.semigroupSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "scope";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))()({
                      reflectSymbol: function() {
                        return "ident";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))))(guard$prime(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "scope";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))()({
                      reflectSymbol: function() {
                        return "ident";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))))(v.value0.name.name === ident)(function(v1) {
                      return Data_Set.singleton({
                        ident: v.value0.name.token.range,
                        scope: PureScript_CST_Range.rangeOf(dictRangeOf1)(eScope)
                      });
                    }))(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "scope";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))()({
                      reflectSymbol: function() {
                        return "ident";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))))(onBinder(PureScript_CST_Range.rangeOfGuarded(dictRangeOf))(v.value0.guarded))(v.value0.binders));
                  }
                  ;
                  if (v instanceof PureScript_CST_Types.LetBindingPattern) {
                    return onBinder(dictRangeOf1)(eScope)(v.value0);
                  }
                  ;
                  return Data_Set.empty;
                };
              };
            };
            var onStmt = function(stmt) {
              return function(acc) {
                if (stmt instanceof PureScript_CST_Types.DoLet) {
                  var res$prime = Data_Maybe.maybe(Data_Set.empty)(function(scopeStmts) {
                    return Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "scope";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))()({
                      reflectSymbol: function() {
                        return "ident";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))))(onLetBind(rangeOfDoStatementsScope(dictRangeOf))(scopeStmts))(stmt.value1);
                  })(Data_Array_NonEmpty.fromArray(acc.scope));
                  return {
                    res: Data_Semigroup.append(Data_Set.semigroupSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "scope";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))()({
                      reflectSymbol: function() {
                        return "ident";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))))(acc.res)(res$prime),
                    scope: Data_Array.cons(new Data_Either.Right(stmt))(acc.scope)
                  };
                }
                ;
                if (stmt instanceof PureScript_CST_Types.DoBind) {
                  var res$prime = Data_Maybe.maybe(Data_Set.empty)(function(scopeStmts) {
                    return onBinder(rangeOfDoStatementsScope(dictRangeOf))(scopeStmts)(stmt.value0);
                  })(Data_Array_NonEmpty.fromArray(acc.scope));
                  return {
                    res: Data_Semigroup.append(Data_Set.semigroupSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "scope";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))()({
                      reflectSymbol: function() {
                        return "ident";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))))(acc.res)(res$prime),
                    scope: Data_Array.cons(new Data_Either.Right(stmt))(acc.scope)
                  };
                }
                ;
                return {
                  res: acc.res,
                  scope: Data_Array.cons(new Data_Either.Right(stmt))(acc.scope)
                };
              };
            };
            var res = function(range) {
              return LanguageServer_Protocol_Types.gotoDefinitionResult(Data_Either.Left.create({
                uri,
                range: LanguageServer_IdePurescript_Util_CST.sourceRangeToRange(range)
              }));
            };
            var containsPosition = function(v) {
              var target = new Data_Tuple.Tuple(position.line, position.character);
              return Data_Ord.greaterThanOrEq(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(target)(new Data_Tuple.Tuple(v.start.line, v.start.column)) && Data_Ord.lessThanOrEq(Data_Tuple.ordTuple(Data_Ord.ordInt)(Data_Ord.ordInt))(target)(new Data_Tuple.Tuple(v.end.line, v.end.column));
            };
            var toRes = function(ranges) {
              var validRanges = Data_Array.filter(function($214) {
                return containsPosition(function(v) {
                  return v.scope;
                }($214));
              })(Data_Array.fromFoldable(Data_Set.foldableSet)(ranges));
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Maybe.functorMaybe)(function($215) {
                return res(function(v) {
                  return v.ident;
                }($215));
              })(Data_Array.last(validRanges)));
            };
            var $216 = PureScript_CST_Traversal.foldMapModule(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function() {
                return "scope";
              }
            })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function() {
                return "start";
              }
            })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function() {
                return "line";
              }
            })(Data_Ord.ordInt))()({
              reflectSymbol: function() {
                return "column";
              }
            })(Data_Ord.ordInt))))()({
              reflectSymbol: function() {
                return "end";
              }
            })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function() {
                return "line";
              }
            })(Data_Ord.ordInt))()({
              reflectSymbol: function() {
                return "column";
              }
            })(Data_Ord.ordInt))))))()({
              reflectSymbol: function() {
                return "ident";
              }
            })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function() {
                return "start";
              }
            })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function() {
                return "line";
              }
            })(Data_Ord.ordInt))()({
              reflectSymbol: function() {
                return "column";
              }
            })(Data_Ord.ordInt))))()({
              reflectSymbol: function() {
                return "end";
              }
            })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function() {
                return "line";
              }
            })(Data_Ord.ordInt))()({
              reflectSymbol: function() {
                return "column";
              }
            })(Data_Ord.ordInt))))))))({
              onBinder: PureScript_CST_Traversal.defaultMonoidalVisitor(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "scope";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "start";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "line";
                }
              })(Data_Ord.ordInt))()({
                reflectSymbol: function() {
                  return "column";
                }
              })(Data_Ord.ordInt))))()({
                reflectSymbol: function() {
                  return "end";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "line";
                }
              })(Data_Ord.ordInt))()({
                reflectSymbol: function() {
                  return "column";
                }
              })(Data_Ord.ordInt))))))()({
                reflectSymbol: function() {
                  return "ident";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "start";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "line";
                }
              })(Data_Ord.ordInt))()({
                reflectSymbol: function() {
                  return "column";
                }
              })(Data_Ord.ordInt))))()({
                reflectSymbol: function() {
                  return "end";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "line";
                }
              })(Data_Ord.ordInt))()({
                reflectSymbol: function() {
                  return "column";
                }
              })(Data_Ord.ordInt)))))))).onBinder,
              onDecl: function(d) {
                if (d instanceof PureScript_CST_Types.DeclValue) {
                  return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "scope";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))()({
                    reflectSymbol: function() {
                      return "ident";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))))(onBinder(PureScript_CST_Range.rangeOfDecl(dictRangeOf))(d))(d.value0.binders);
                }
                ;
                return Data_Set.empty;
              },
              onExpr: function(e) {
                if (e instanceof PureScript_CST_Types.ExprLet) {
                  return Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "scope";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))()({
                    reflectSymbol: function() {
                      return "ident";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))))(onLetBind(PureScript_CST_Range.rangeOfExpr(dictRangeOf))(e))(e.value0.bindings);
                }
                ;
                if (e instanceof PureScript_CST_Types.ExprLambda) {
                  return Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "scope";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))()({
                    reflectSymbol: function() {
                      return "ident";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))))(onBinder(PureScript_CST_Range.rangeOfExpr(dictRangeOf))(e.value0.body))(e.value0.binders);
                }
                ;
                if (e instanceof PureScript_CST_Types.ExprCase) {
                  return Data_Foldable.foldMap(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "scope";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))()({
                    reflectSymbol: function() {
                      return "ident";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "start";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))()({
                    reflectSymbol: function() {
                      return "end";
                    }
                  })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                    reflectSymbol: function() {
                      return "line";
                    }
                  })(Data_Ord.ordInt))()({
                    reflectSymbol: function() {
                      return "column";
                    }
                  })(Data_Ord.ordInt))))))))(function(v1) {
                    return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "scope";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))()({
                      reflectSymbol: function() {
                        return "ident";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "start";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))()({
                      reflectSymbol: function() {
                        return "end";
                      }
                    })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function() {
                        return "line";
                      }
                    })(Data_Ord.ordInt))()({
                      reflectSymbol: function() {
                        return "column";
                      }
                    })(Data_Ord.ordInt))))))))(onBinder(PureScript_CST_Range.rangeOfGuarded(dictRangeOf))(v1.value1))(Data_Array.cons(v1.value0.head)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v1.value0.tail)));
                  })(e.value0.branches);
                }
                ;
                if (e instanceof PureScript_CST_Types.ExprDo) {
                  return function(v1) {
                    return v1.res;
                  }(Data_Array.foldr(onStmt)({
                    scope: [],
                    res: Data_Set.empty
                  })(Data_Array_NonEmpty.toArray(e.value0.statements)));
                }
                ;
                if (e instanceof PureScript_CST_Types.ExprAdo) {
                  return function(v1) {
                    return v1.res;
                  }(Data_Array.foldr(onStmt)({
                    scope: [new Data_Either.Left(e.value0.result)],
                    res: Data_Set.empty
                  })(e.value0.statements));
                }
                ;
                return Data_Set.empty;
              },
              onType: PureScript_CST_Traversal.defaultMonoidalVisitor(Data_Set.monoidSet(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "scope";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "start";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "line";
                }
              })(Data_Ord.ordInt))()({
                reflectSymbol: function() {
                  return "column";
                }
              })(Data_Ord.ordInt))))()({
                reflectSymbol: function() {
                  return "end";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "line";
                }
              })(Data_Ord.ordInt))()({
                reflectSymbol: function() {
                  return "column";
                }
              })(Data_Ord.ordInt))))))()({
                reflectSymbol: function() {
                  return "ident";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "start";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "line";
                }
              })(Data_Ord.ordInt))()({
                reflectSymbol: function() {
                  return "column";
                }
              })(Data_Ord.ordInt))))()({
                reflectSymbol: function() {
                  return "end";
                }
              })(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                reflectSymbol: function() {
                  return "line";
                }
              })(Data_Ord.ordInt))()({
                reflectSymbol: function() {
                  return "column";
                }
              })(Data_Ord.ordInt)))))))).onType
            });
            return function($217) {
              return toRes($216($217));
            };
          };
        };
      };
    };
    var convPosition = function(v) {
      return {
        line: v.line - 1 | 0,
        character: v.column - 1 | 0
      };
    };
    var convTypePosition = function(v) {
      return {
        start: convPosition(v.start),
        end: convPosition(v.end)
      };
    };
    var getSymbols = function(root) {
      return function(port) {
        return function(prefix) {
          return function(modules) {
            var getName = function(v) {
              return Node_Path.resolve([root])(v.name);
            };
            var getInfo = function(v) {
              if (v.definedAt instanceof Data_Maybe.Just) {
                return function __do() {
                  var fileName = getName(v.definedAt.value0)();
                  var kind = function() {
                    var $125 = Data_String_CodePoints.take(1)(v.identifier) === Data_String_Common.toUpper(Data_String_CodePoints.take(1)(v.identifier));
                    if ($125) {
                      return LanguageServer_Protocol_Types.ClassSymbolKind.value;
                    }
                    ;
                    var $126 = Data_String_CodeUnits.contains("->")(v.identifier);
                    if ($126) {
                      return LanguageServer_Protocol_Types.FunctionSymbolKind.value;
                    }
                    ;
                    return LanguageServer_Protocol_Types.PropertySymbolKind.value;
                  }();
                  var uri = LanguageServer_Protocol_Uri.filenameToUri(fileName)();
                  return Data_Maybe.Just.create({
                    name: v.identifier,
                    kind: LanguageServer_Protocol_Types.symbolKindToInt(kind),
                    location: {
                      uri,
                      range: convTypePosition(v.definedAt.value0)
                    },
                    containerName: Data_Nullable.toNullable(Data_Maybe.Just.create(v["module'"]))
                  });
                };
              }
              ;
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
            };
            var opts = {
              maxResults: Data_Maybe.Nothing.value,
              groupReexports: true
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getCompletion(port)(prefix)(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(modules)(Data_Function["const"]([]))(opts))(function(completions) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(getInfo)(completions)))(function(res) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Array.catMaybes(res));
              });
            });
          };
        };
      };
    };
    var getDocumentSymbols = function(v) {
      return function(state) {
        return function(v1) {
          var v2 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state);
          if (v2.port instanceof Data_Maybe.Just && v2.root instanceof Data_Maybe.Just) {
            return getSymbols(v2.root.value0)(v2.port.value0)("")(Data_Maybe.maybe([])(Data_Array.singleton)(v2.modules.main));
          }
          ;
          return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
        };
      };
    };
    var getWorkspaceSymbols = function(v) {
      return function(state) {
        return function(v1) {
          var v2 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state);
          if (v2.port instanceof Data_Maybe.Just && v2.root instanceof Data_Maybe.Just) {
            return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getLoadedModules(v2.port.value0))(function(allModules) {
              return getSymbols(v2.root.value0)(v2.port.value0)(v1.query)(allModules);
            });
          }
          ;
          return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
        };
      };
    };
    var getDefinition = function(v) {
      return function(v1) {
        return function(v2) {
          return function(v3) {
            return function(v4) {
              if (v3.clientCapabilities instanceof Data_Maybe.Just) {
                var typeInfo = function(port$prime) {
                  return function(modules) {
                    return function(v5) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getTypeInfo(port$prime)(v5.word)(modules.main)(v5.qualifier)(IdePurescript_Modules.getUnqualActiveModules(modules)(new Data_Maybe.Just(v5.word)))(Data_Function.flip(IdePurescript_Modules.getQualModule)(modules)))(function(info) {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(function() {
                          if (info instanceof Data_Maybe.Just && info.value0.definedAt instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just({
                              typePos: info.value0.definedAt.value0,
                              originRange: Data_Maybe.Nothing.value
                            });
                          }
                          ;
                          return Data_Maybe.Nothing.value;
                        }());
                      });
                    };
                  };
                };
                var mkNewRange = function(pos) {
                  return function(left) {
                    return function(right) {
                      return {
                        start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(v5) {
                          return {
                            character: left,
                            line: v5.line
                          };
                        })(pos),
                        end: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(v5) {
                          return {
                            character: right,
                            line: v5.line
                          };
                        })(pos)
                      };
                    };
                  };
                };
                var moduleInfo = function(port$prime) {
                  return function(v5) {
                    return function(v6) {
                      var fullModule = function() {
                        if (v5.qualifier instanceof Data_Maybe.Just) {
                          return v5.qualifier.value0 + ("." + v5.word);
                        }
                        ;
                        if (v5.qualifier instanceof Data_Maybe.Nothing) {
                          return v5.word;
                        }
                        ;
                        throw new Error("Failed pattern match at LanguageServer.IdePurescript.Symbols (line 94, column 20 - line 96, column 24): " + [v5.qualifier.constructor.name]);
                      }();
                      var left = v6.right - Data_String_CodePoints.length(fullModule) | 0;
                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getModuleInfo(port$prime)(fullModule))(function(info) {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(function() {
                          if (info instanceof Data_Maybe.Just && info.value0.definedAt instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just({
                              typePos: info.value0.definedAt.value0,
                              originRange: Data_Maybe.Just.create(mkNewRange(v4.position)(left)(v6.right))
                            });
                          }
                          ;
                          return Data_Maybe.Nothing.value;
                        }());
                      });
                    };
                  };
                };
                var mkLineRange = function(pos) {
                  return {
                    start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(v5) {
                      return {
                        character: 0,
                        line: v5.line
                      };
                    })(pos),
                    end: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(c) {
                      return {
                        character: c.character + 100 | 0,
                        line: c.line
                      };
                    })(pos)
                  };
                };
                var locationLinkSupported = function(c) {
                  return Data_Maybe.isJust(Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe(function(v5) {
                    return v5.textDocument;
                  }(c)))(function($218) {
                    return Data_Nullable.toMaybe(function(v5) {
                      return v5.definition;
                    }($218));
                  }))(function($219) {
                    return Data_Nullable.toMaybe(function(v5) {
                      return v5.linkSupport;
                    }($219));
                  }));
                };
                var mkResult = function(uri) {
                  return function(v5) {
                    return function(range) {
                      if (v5 instanceof Data_Maybe.Just) {
                        var $179 = locationLinkSupported(v3.clientCapabilities.value0);
                        if ($179) {
                          var targetRange = Data_Newtype.over()()(LanguageServer_Protocol_Types.Range)(function(rr) {
                            return {
                              start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(pp) {
                                return {
                                  character: 0,
                                  line: pp.line
                                };
                              })(rr.start),
                              end: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(pp) {
                                return {
                                  line: pp.line + 1 | 0,
                                  character: pp.character
                                };
                              })(rr.end)
                            };
                          })(range);
                          return LanguageServer_Protocol_Types.gotoDefinitionResult(Data_Either.Right.create({
                            originSelectionRange: Data_Nullable.toNullable(new Data_Maybe.Just(v5.value0)),
                            targetRange,
                            targetSelectionRange: targetRange,
                            targetUri: uri
                          }));
                        }
                        ;
                        return LanguageServer_Protocol_Types.gotoDefinitionResult(Data_Either.Left.create({
                          uri,
                          range
                        }));
                      }
                      ;
                      if (v5 instanceof Data_Maybe.Nothing) {
                        return LanguageServer_Protocol_Types.gotoDefinitionResult(Data_Either.Left.create({
                          uri,
                          range
                        }));
                      }
                      ;
                      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Symbols (line 118, column 3 - line 140, column 60): " + [uri.constructor.name, v5.constructor.name, range.constructor.name]);
                    };
                  };
                };
                var localDefn = function(uri) {
                  return function(ident) {
                    var v5 = Data_Functor.map(Data_Maybe.functorMaybe)(function(v6) {
                      return v6.parsed;
                    })(Data_Map_Internal.lookup(LanguageServer_Protocol_Types.ordDocumentUri)(uri)(v3.parsedModules));
                    if (v5 instanceof Data_Maybe.Just && v5.value0 instanceof PureScript_CST.ParseSucceeded) {
                      return getLocalDefinitions(PureScript_CST_Range.rangeOfVoid)(uri)(v4.position)(ident)(v5.value0.value0);
                    }
                    ;
                    if (v5 instanceof Data_Maybe.Just && v5.value0 instanceof PureScript_CST.ParseSucceededWithErrors) {
                      return getLocalDefinitions(PureScript_CST_Range.rangeOfRecoveredError)(uri)(v4.position)(ident)(v5.value0.value0);
                    }
                    ;
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                  };
                };
                return Data_Functor.map(Effect_Aff.functorAff)(Data_Nullable.toNullable)(function() {
                  var uri = function(v5) {
                    return v5.uri;
                  }(Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier)(v4.textDocument));
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(v1)(uri)))(function(maybeDoc) {
                    var v5 = Data_Nullable.toMaybe(maybeDoc);
                    if (v5 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                    }
                    ;
                    if (v5 instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(v5.value0)(mkLineRange(v4.position))))(function(text) {
                        var v6 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(v3);
                        var v7 = IdePurescript_Tokens.identifierAtPoint(text)(function(v10) {
                          return v10.character;
                        }(Data_Newtype.un()(LanguageServer_Protocol_Types.Position)(v4.position)));
                        if (v6.port instanceof Data_Maybe.Just && (v6.root instanceof Data_Maybe.Just && v7 instanceof Data_Maybe.Just)) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(localDefn(uri)(v7.value0.word))(function(v10) {
                            if (v10 instanceof Data_Maybe.Just && Data_Maybe.isNothing(v7.value0.qualifier)) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(v10.value0));
                            }
                            ;
                            return Control_Bind.bind(Effect_Aff.bindAff)(Control_Apply.lift2(Effect_Aff.applyAff)(Control_Alt.alt(Data_Maybe.altMaybe))(moduleInfo(v6.port.value0)(v7.value0)(v7.value0.range))(typeInfo(v6.port.value0)(v6.modules)(v7.value0)))(function(info) {
                              return Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableMaybe)(info)(function(v11) {
                                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Bind.bindFlipped(Effect.bindEffect)(LanguageServer_Protocol_Uri.filenameToUri)(Node_Path.resolve([v6.root.value0])(v11.typePos.name))))(function(defnUri) {
                                  var startRange = {
                                    start: convPosition(v11.typePos.start),
                                    end: convPosition(v11.typePos.start)
                                  };
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(mkResult(defnUri)(v11.originRange)(startRange));
                                });
                              });
                            });
                          });
                        }
                        ;
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                      });
                    }
                    ;
                    throw new Error("Failed pattern match at LanguageServer.IdePurescript.Symbols (line 69, column 3 - line 85, column 33): " + [v5.constructor.name]);
                  });
                }());
              }
              ;
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
            };
          };
        };
      };
    };
    module2.exports = {
      convPosition,
      getDefinition,
      getDocumentSymbols,
      getSymbols,
      getWorkspaceSymbols
    };
  }
});

// output/LanguageServer.IdePurescript.References/index.js
var require_LanguageServer_IdePurescript17 = __commonJS({
  "output/LanguageServer.IdePurescript.References/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_String_Utils = require_Data_String7();
    var Data_Traversable = require_Data29();
    var Effect = require_Effect();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var IdePurescript_Modules = require_IdePurescript5();
    var IdePurescript_PscIde = require_IdePurescript2();
    var IdePurescript_Tokens = require_IdePurescript6();
    var LanguageServer_IdePurescript_Symbols = require_LanguageServer_IdePurescript16();
    var LanguageServer_IdePurescript_Types = require_LanguageServer_IdePurescript6();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var LanguageServer_Protocol_Uri = require_LanguageServer_Protocol6();
    var Node_Path = require_Node();
    var PscIde = require_PscIde2();
    var PscIde_Command = require_PscIde();
    var getReferences = function(docs) {
      return function(v) {
        return function(state) {
          return function(v1) {
            var mkRange = function(pos) {
              return {
                start: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(v22) {
                  return {
                    character: 0,
                    line: v22.line
                  };
                })(pos),
                end: Data_Newtype.over()()(LanguageServer_Protocol_Types.Position)(function(c) {
                  return {
                    character: c.character + 100 | 0,
                    line: c.line
                  };
                })(pos)
              };
            };
            var convLocation = function(root) {
              return function(v22) {
                return function __do() {
                  var uri = Control_Bind.bindFlipped(Effect.bindEffect)(LanguageServer_Protocol_Uri.filenameToUri)(Node_Path.resolve([root])(v22.name))();
                  return {
                    uri,
                    range: {
                      start: LanguageServer_IdePurescript_Symbols.convPosition(v22.start),
                      end: LanguageServer_IdePurescript_Symbols.convPosition(v22.end)
                    }
                  };
                };
              };
            };
            var v2 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state);
            return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(function(v3) {
              return v3.uri;
            }(Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier)(v1.textDocument)))))(function(doc) {
              return Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)([]))(function(doc1) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(doc1)(mkRange(v1.position))))(function(text) {
                  var v3 = IdePurescript_Tokens.identifierAtPoint(text)(function(v6) {
                    return v6.character;
                  }(Data_Newtype.un()(LanguageServer_Protocol_Types.Position)(v1.position)));
                  if (v2.port instanceof Data_Maybe.Just && (v2.root instanceof Data_Maybe.Just && v3 instanceof Data_Maybe.Just)) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getTypeInfo(v2.port.value0)(v3.value0.word)(v2.modules.main)(v3.value0.qualifier)(IdePurescript_Modules.getUnqualActiveModules(v2.modules)(new Data_Maybe.Just(v3.value0.word)))(Data_Function.flip(IdePurescript_Modules.getQualModule)(v2.modules)))(function(info) {
                      if (info instanceof Data_Maybe.Just) {
                        var ns = function() {
                          if (info["value0"]["type'"] === "Type") {
                            return PscIde_Command.NSType.value;
                          }
                          ;
                          if (Data_String_Utils.endsWith("-> Type")(info["value0"]["type'"])) {
                            return PscIde_Command.NSType.value;
                          }
                          ;
                          return PscIde_Command.NSValue.value;
                        }();
                        return Control_Bind.bind(Effect_Aff.bindAff)(PscIde.usages(v2.port.value0)(info["value0"]["module'"])(ns)(v3.value0.word))(function(usg) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Either.either(Control_Applicative.pure(Control_Applicative.applicativeFn)(Control_Applicative.pure(Effect.applicativeEffect)([])))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convLocation(v2.root.value0)))(usg));
                        });
                      }
                      ;
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                    });
                  }
                  ;
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)([]);
                });
              })(Data_Nullable.toMaybe(doc));
            });
          };
        };
      };
    };
    module2.exports = {
      getReferences
    };
  }
});

// output/LanguageServer.IdePurescript.Search/index.js
var require_LanguageServer_IdePurescript18 = __commonJS({
  "output/LanguageServer.IdePurescript.Search/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Control_Monad_Except = require_Control_Monad();
    var Control_Monad_Except_Trans = require_Control_Monad_Except();
    var Data_Either = require_Data16();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Identity = require_Data20();
    var Data_Maybe = require_Data15();
    var Data_Traversable = require_Data29();
    var Effect_Aff = require_Effect6();
    var Foreign = require_Foreign();
    var Foreign_Index = require_Foreign4();
    var IdePurescript_Modules = require_IdePurescript5();
    var IdePurescript_PscIde = require_IdePurescript2();
    var PscIde = require_PscIde2();
    var PscIde_Command = require_PscIde();
    var encodeSearchResult = Foreign.unsafeToForeign;
    var search = function(v) {
      return function(v1) {
        return function(state) {
          return function(args) {
            var toResult = function(v22) {
              return encodeSearchResult({
                typ: v22["type'"],
                identifier: v22.identifier,
                mod: v22["module'"]
              });
            };
            var v2 = Control_Monad_Except.runExcept(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))(args));
            if (state.port instanceof Data_Maybe.Just && (v2 instanceof Data_Either.Right && v2.value0.length === 1)) {
              return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getLoadedModules(state.port.value0))(function(loadedModules) {
                var getQualifiedModule = Data_Function.flip(IdePurescript_Modules.getQualModule)(state.modules);
                return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde["getCompletion'"](Data_Maybe.Just.create(new PscIde_Command.Flex(v2["value0"][0])))([])(state.port.value0)(state.modules.main)(Data_Maybe.Nothing.value)(loadedModules)(getQualifiedModule)(PscIde.defaultCompletionOptions))(function(results) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign(Data_Functor.map(Data_Functor.functorArray)(toResult)(results)));
                });
              });
            }
            ;
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign.unsafeToForeign([]));
          };
        };
      };
    };
    var decodeSearchResult = function(obj) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("identifier"))(Foreign.readString(Data_Identity.monadIdentity)))(function(identifier) {
        return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("typ"))(Foreign.readString(Data_Identity.monadIdentity)))(function(typ) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(obj)("mod"))(Foreign.readString(Data_Identity.monadIdentity)))(function(mod) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
              identifier,
              typ,
              mod
            });
          });
        });
      });
    };
    module2.exports = {
      decodeSearchResult,
      search
    };
  }
});

// output/LanguageServer.IdePurescript.Tooltips/index.js
var require_LanguageServer_IdePurescript19 = __commonJS({
  "output/LanguageServer.IdePurescript.Tooltips/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Eq = require_Data8();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_String_CodePoints = require_Data_String6();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var IdePurescript_Modules = require_IdePurescript5();
    var IdePurescript_PscIde = require_IdePurescript2();
    var IdePurescript_Tokens = require_IdePurescript6();
    var LanguageServer_IdePurescript_Types = require_LanguageServer_IdePurescript6();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var getTooltips = function(docs) {
      return function(v) {
        return function(state) {
          return function(v1) {
            var wordRange = function(v2) {
              return function(v3) {
                return {
                  start: {
                    line: v2.line,
                    character: v3.left
                  },
                  end: {
                    line: v2.line,
                    character: v3.right
                  }
                };
              };
            };
            var lineRange = function(v2) {
              return {
                start: {
                  line: v2.line,
                  character: 0
                },
                end: {
                  line: v2.line,
                  character: v2.character + 100 | 0
                }
              };
            };
            var convertInfo = function(word) {
              return function(v2) {
                var showExpanded = Data_Maybe.isJust(v2.expandedType) && Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(v2.expandedType)(new Data_Maybe.Just(v2["type'"]));
                var expandedTypeStr = word + (" :: " + Data_Maybe.fromMaybe("")(v2.expandedType));
                var compactTypeStr = word + (" :: " + v2["type'"]);
                var typeStr = "```purescript\n" + (compactTypeStr + (function() {
                  if (showExpanded) {
                    return "\n" + expandedTypeStr;
                  }
                  ;
                  return "";
                }() + "\n```"));
                return {
                  contents: LanguageServer_Protocol_Types.markupContent(typeStr + ("\n" + Data_Maybe.fromMaybe("")(v2.documentation))),
                  range: Data_Nullable.toNullable(Data_Maybe.Nothing.value)
                };
              };
            };
            return Data_Functor.map(Effect_Aff.functorAff)(Data_Nullable.toNullable)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(docs)(function(v2) {
              return v2.uri;
            }(Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier)(v1.textDocument)))))(function(maybeDoc) {
              var v2 = Data_Nullable.toMaybe(maybeDoc);
              if (v2 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
              }
              ;
              if (v2 instanceof Data_Maybe.Just) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtRange(v2.value0)(lineRange(v1.position))))(function(text) {
                  var v3 = Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state);
                  var $$char = function(v42) {
                    return v42.character;
                  }(Data_Newtype.un()(LanguageServer_Protocol_Types.Position)(v1.position));
                  var v4 = IdePurescript_Tokens.identifierAtPoint(text)($$char);
                  if (v3.port instanceof Data_Maybe.Just && v4 instanceof Data_Maybe.Just) {
                    if (v4.value0.qualifier instanceof Data_Maybe.Just && $$char < (v4.value0.range.left + Data_String_CodePoints.length(v4.value0.qualifier.value0) | 0)) {
                      var mod = IdePurescript_Modules.getQualModule(v4.value0.qualifier.value0)(Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)(state).modules);
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(function() {
                        var v6 = Data_Array.uncons(mod);
                        if (v6 instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create({
                            contents: LanguageServer_Protocol_Types.markupContent(v6.value0.head),
                            range: Data_Nullable.toNullable(Data_Maybe.Just.create(wordRange(v1.position)({
                              right: v4.value0.range.left + Data_String_CodePoints.length(v4.value0.qualifier.value0) | 0,
                              left: v4.value0.range.left
                            })))
                          });
                        }
                        ;
                        return Data_Maybe.Nothing.value;
                      }());
                    }
                    ;
                    return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_PscIde.getTypeInfo(v3.port.value0)(v4.value0.word)(v3.modules.main)(v4.value0.qualifier)(IdePurescript_Modules.getUnqualActiveModules(v3.modules)(new Data_Maybe.Just(v4.value0.word)))(Data_Function.flip(IdePurescript_Modules.getQualModule)(v3.modules)))(function(ty) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Maybe.functorMaybe)(convertInfo(v4.value0.word))(ty));
                    });
                  }
                  ;
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                });
              }
              ;
              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Tooltips (line 29, column 3 - line 54, column 29): " + [v2.constructor.name]);
            }));
          };
        };
      };
    };
    module2.exports = {
      getTooltips
    };
  }
});

// output/LanguageServer.IdePurescript.WatchedFiles/index.js
var require_LanguageServer_IdePurescript20 = __commonJS({
  "output/LanguageServer.IdePurescript.WatchedFiles/index.js"(exports2, module2) {
    "use strict";
    var Control_Applicative = require_Control4();
    var Control_Bind = require_Control5();
    var Data_Array = require_Data39();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Maybe = require_Data15();
    var Data_Nullable = require_Data41();
    var Data_String_CodePoints = require_Data_String6();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Common = require_Data_String4();
    var Data_Unit = require_Data3();
    var Effect_Aff = require_Effect6();
    var Effect_Class = require_Effect4();
    var Effect_Ref = require_Effect3();
    var IdePurescript_Tokens = require_IdePurescript6();
    var LanguageServer_IdePurescript_Assist = require_LanguageServer_IdePurescript4();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_Handlers = require_LanguageServer_Protocol2();
    var LanguageServer_Protocol_Text = require_LanguageServer_Protocol4();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var moduleNameFromFolderStructure = function(path) {
      var dirs = Data_String_Common.split("/")(path);
      var parentIndex = Data_Maybe.fromMaybe(-1 | 0)(Data_Array.findLastIndex(function() {
        var $28 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
        return function($29) {
          return $28(IdePurescript_Tokens.startsWithCapitalLetter($29));
        };
      }())(dirs));
      var parts = Data_Array.drop(parentIndex + 1 | 0)(dirs);
      var parts$prime = function() {
        var v = Data_Array.index(dirs)(parentIndex);
        if (v instanceof Data_Maybe.Just && (v.value0 === "test" && Data_Eq.notEq(Data_Maybe.eqMaybe(Data_Eq.eqString))(Data_Array.index(parts)(0))(new Data_Maybe.Just("Test")))) {
          return Data_Array.cons("Test")(parts);
        }
        ;
        return parts;
      }();
      return Data_String_Common.joinWith(".")(parts$prime);
    };
    var inferModuleName = function(v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function(v1) {
        return moduleNameFromFolderStructure(v1);
      })(Data_String_CodeUnits.stripSuffix(".purs")(v));
    };
    var insertModuleHeader = function(configRef) {
      return function(connection) {
        return function(stateRef) {
          return function(documents) {
            return function(uri) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(stateRef)))(function(v) {
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(documents)(uri)))(function(maybeDoc) {
                  return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(Data_Nullable.toMaybe(maybeDoc))(function(doc) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getTextAtVersion(doc)))(function(v1) {
                      return Control_Applicative.when(Effect_Aff.applicativeAff)(v1.text === "")(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(inferModuleName(uri))(function(inferredModuleName) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(configRef)))(function(config) {
                          var preludeModule = LanguageServer_IdePurescript_Config.preludeModule(config);
                          var toInsert = "module " + (inferredModuleName + (" where\n\nimport " + (preludeModule + "\n")));
                          var edit = LanguageServer_Protocol_Text.makeWorkspaceEdit(v.clientCapabilities)(uri)(v1.version)(LanguageServer_IdePurescript_Assist["lineRange'"](0)(Data_String_CodePoints.length(toInsert)))(toInsert);
                          return LanguageServer_Protocol_Handlers.applyEdit(connection)(edit);
                        });
                      }));
                    });
                  });
                });
              });
            };
          };
        };
      };
    };
    var handleFileCreated = function(configRef) {
      return function(connection) {
        return function(stateRef) {
          return function(documents) {
            return function(uri) {
              return insertModuleHeader(configRef)(connection)(stateRef)(documents)(uri);
            };
          };
        };
      };
    };
    var handleDidChangeWatchedFiles = function(configRef) {
      return function(conn) {
        return function(stateRef) {
          return function(documents) {
            return function(v) {
              return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(v.changes)(function(v1) {
                var v2 = LanguageServer_Protocol_Types.fromFileChangeTypeCode(v1.type);
                if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof LanguageServer_Protocol_Types.CreatedChangeType) {
                  return handleFileCreated(configRef)(conn)(stateRef)(documents)(v1.uri);
                }
                ;
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
              });
            };
          };
        };
      };
    };
    module2.exports = {
      handleDidChangeWatchedFiles
    };
  }
});

// output/LanguageServer.Protocol.Setup/foreign.js
var require_foreign88 = __commonJS({
  "output/LanguageServer.Protocol.Setup/foreign.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getConfigurationImpl = exports2.initDocumentStore = exports2.initConnection = void 0;
    var node_1 = require("vscode-languageserver/node");
    var vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
    var initConnection = function(commands) {
      return function(cb) {
        return function() {
          var conn = (0, node_1.createConnection)();
          conn.listen();
          conn.onInitialize(function(params) {
            conn.console.info(JSON.stringify(params));
            cb({
              params,
              conn
            })();
            return {
              capabilities: {
                textDocumentSync: node_1.TextDocumentSyncKind.Full,
                completionProvider: {
                  resolveProvider: false,
                  triggerCharacters: ["."]
                },
                codeLensProvider: {
                  resolveProvider: false
                },
                hoverProvider: true,
                definitionProvider: true,
                workspaceSymbolProvider: true,
                documentSymbolProvider: true,
                codeActionProvider: {
                  codeActionKinds: [
                    node_1.CodeActionKind.Empty,
                    node_1.CodeActionKind.SourceOrganizeImports,
                    "source.sortImports",
                    node_1.CodeActionKind.SourceFixAll,
                    node_1.CodeActionKind.Source
                  ]
                },
                executeCommandProvider: (params.initializationOptions || {}).executeCommandProvider === false ? void 0 : {
                  commands
                },
                referencesProvider: true,
                foldingRangeProvider: true,
                documentFormattingProvider: true
              }
            };
          });
          return conn;
        };
      };
    };
    exports2.initConnection = initConnection;
    var initDocumentStore = function(conn) {
      return function() {
        var documents = new node_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
        documents.listen(conn);
        return documents;
      };
    };
    exports2.initDocumentStore = initDocumentStore;
    var getConfigurationImpl = function(conn) {
      return function() {
        return conn.workspace.getConfiguration("purescript").then(function(config) {
          return { purescript: config };
        });
      };
    };
    exports2.getConfigurationImpl = getConfigurationImpl;
  }
});

// output/LanguageServer.Protocol.Setup/index.js
var require_LanguageServer_Protocol9 = __commonJS({
  "output/LanguageServer.Protocol.Setup/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign88();
    var Control_Promise = require_Control13();
    var InitParams = function(x) {
      return x;
    };
    var getConfiguration = function(conn) {
      return Control_Promise.toAffE($foreign.getConfigurationImpl(conn));
    };
    module2.exports = {
      InitParams,
      getConfiguration,
      initConnection: $foreign.initConnection,
      initDocumentStore: $foreign.initDocumentStore,
      getConfigurationImpl: $foreign.getConfigurationImpl
    };
  }
});

// output/LanguageServer.Protocol.Workspace/foreign.js
var require_foreign89 = __commonJS({
  "output/LanguageServer.Protocol.Workspace/foreign.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.codeLensRefresh = void 0;
    var node_1 = require("vscode-languageserver/node");
    var codeLensRefresh = function(conn) {
      return function() {
        return conn.sendRequest(node_1.CodeLensRefreshRequest.type);
      };
    };
    exports2.codeLensRefresh = codeLensRefresh;
  }
});

// output/LanguageServer.Protocol.Workspace/index.js
var require_LanguageServer_Protocol10 = __commonJS({
  "output/LanguageServer.Protocol.Workspace/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign89();
    module2.exports = {
      codeLensRefresh: $foreign.codeLensRefresh
    };
  }
});

// output/LanguageServer.IdePurescript.Main/index.js
var require_LanguageServer_IdePurescript21 = __commonJS({
  "output/LanguageServer.IdePurescript.Main/index.js"(exports2, module2) {
    "use strict";
    var $foreign = require_foreign();
    var Control_Applicative = require_Control4();
    var Control_Apply = require_Control3();
    var Control_Bind = require_Control5();
    var Control_Monad_Error_Class = require_Control_Monad_Error();
    var Control_Monad_Except = require_Control_Monad();
    var Control_Promise = require_Control13();
    var Data_Array = require_Data39();
    var Data_Either = require_Data16();
    var Data_Eq = require_Data8();
    var Data_Foldable = require_Data25();
    var Data_Function = require_Data2();
    var Data_Functor = require_Data4();
    var Data_HeytingAlgebra = require_Data21();
    var Data_Map_Internal = require_Data_Map();
    var Data_Maybe = require_Data15();
    var Data_Newtype = require_Data23();
    var Data_Nullable = require_Data41();
    var Data_Profunctor_Strong = require_Data_Profunctor2();
    var Data_Show = require_Data14();
    var Data_String_CodeUnits = require_Data_String2();
    var Data_String_Pattern = require_Data_String3();
    var Data_Traversable = require_Data29();
    var Data_Tuple = require_Data22();
    var Data_Unfoldable = require_Data32();
    var Data_Unit = require_Data3();
    var Effect = require_Effect();
    var Effect_AVar = require_Effect7();
    var Effect_Aff = require_Effect6();
    var Effect_Aff_AVar = require_Effect_Aff();
    var Effect_Class = require_Effect4();
    var Effect_Console = require_Effect8();
    var Effect_Exception = require_Effect2();
    var Effect_Ref = require_Effect3();
    var Foreign = require_Foreign();
    var Foreign_JSON = require_Foreign2();
    var Foreign_Object = require_Foreign3();
    var IdePurescript_Modules = require_IdePurescript5();
    var IdePurescript_PscIdeServer = require_IdePurescript3();
    var LanguageServer_IdePurescript_Assist = require_LanguageServer_IdePurescript4();
    var LanguageServer_IdePurescript_Build = require_LanguageServer_IdePurescript8();
    var LanguageServer_IdePurescript_Clean = require_LanguageServer_IdePurescript9();
    var LanguageServer_IdePurescript_CodeActions = require_LanguageServer_IdePurescript10();
    var LanguageServer_IdePurescript_CodeLenses = require_LanguageServer_IdePurescript11();
    var LanguageServer_IdePurescript_Commands = require_LanguageServer_IdePurescript();
    var LanguageServer_IdePurescript_Completion = require_LanguageServer_IdePurescript13();
    var LanguageServer_IdePurescript_Config = require_LanguageServer_IdePurescript2();
    var LanguageServer_IdePurescript_FoldingRanges = require_LanguageServer_IdePurescript14();
    var LanguageServer_IdePurescript_Formatting = require_LanguageServer_IdePurescript15();
    var LanguageServer_IdePurescript_Imports = require_LanguageServer_IdePurescript3();
    var LanguageServer_IdePurescript_References = require_LanguageServer_IdePurescript17();
    var LanguageServer_IdePurescript_Search = require_LanguageServer_IdePurescript18();
    var LanguageServer_IdePurescript_Server = require_LanguageServer_IdePurescript5();
    var LanguageServer_IdePurescript_Symbols = require_LanguageServer_IdePurescript16();
    var LanguageServer_IdePurescript_Tooltips = require_LanguageServer_IdePurescript19();
    var LanguageServer_IdePurescript_Types = require_LanguageServer_IdePurescript6();
    var LanguageServer_IdePurescript_Util = require_LanguageServer_IdePurescript7();
    var LanguageServer_IdePurescript_WatchedFiles = require_LanguageServer_IdePurescript20();
    var LanguageServer_Protocol_Console = require_LanguageServer_Protocol8();
    var LanguageServer_Protocol_DocumentStore = require_LanguageServer_Protocol();
    var LanguageServer_Protocol_Handlers = require_LanguageServer_Protocol2();
    var LanguageServer_Protocol_Setup = require_LanguageServer_Protocol9();
    var LanguageServer_Protocol_TextDocument = require_LanguageServer_Protocol5();
    var LanguageServer_Protocol_Types = require_LanguageServer_Protocol3();
    var LanguageServer_Protocol_Uri = require_LanguageServer_Protocol6();
    var LanguageServer_Protocol_Window = require_LanguageServer_Protocol7();
    var LanguageServer_Protocol_Workspace = require_LanguageServer_Protocol10();
    var Node_Encoding = require_Node5();
    var Node_FS_Aff = require_Node_FS6();
    var Node_FS_Sync = require_Node_FS4();
    var Node_Path = require_Node();
    var Node_Process = require_Node3();
    var PureScript_CST = require_PureScript();
    var updateModules = function(state) {
      return function(documents) {
        return function(uri) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(state)))(function(v) {
            if (v.port instanceof Data_Maybe.Just && Data_Eq.notEq(Data_Maybe.eqMaybe(LanguageServer_Protocol_Types.eqDocumentUri))(v.modulesFile)(new Data_Maybe.Just(uri))) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_DocumentStore.getDocument(documents)(uri)))(function(maybeDoc) {
                return Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableMaybe)(Data_Nullable.toMaybe(maybeDoc))(function(doc) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_TextDocument.getText(doc)))(function(text) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Uri.uriToFilename(uri)))(function(path) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(IdePurescript_Modules.getModulesForFileTemp(v.port.value0)(path)(text))(function(modules) {
                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(v1) {
                          return {
                            modules,
                            modulesFile: new Data_Maybe.Just(uri),
                            buildQueue: v1.buildQueue,
                            clientCapabilities: v1.clientCapabilities,
                            conn: v1.conn,
                            deactivate: v1.deactivate,
                            diagnostics: v1.diagnostics,
                            parsedModules: v1.parsedModules,
                            port: v1.port,
                            root: v1.root,
                            runningRebuild: v1.runningRebuild
                          };
                        }))(state));
                      });
                    });
                  });
                });
              });
            }
            ;
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
          });
        };
      };
    };
    var parseArgs = function(allArgs) {
      var defaultArgs = {
        config: Data_Maybe.Nothing.value,
        filename: Data_Maybe.Nothing.value,
        version: false
      };
      var args = Data_Array.drop(2)(allArgs);
      var go = function($copy_i) {
        return function($copy_c) {
          var $tco_var_i = $copy_i;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(i, c) {
            var v = Data_Array.index(args)(i);
            if (v instanceof Data_Maybe.Just && v.value0 === "--config") {
              var v1 = Data_Array.index(args)(i + 1 | 0);
              if (v1 instanceof Data_Maybe.Just) {
                $tco_var_i = i + 2 | 0;
                $copy_c = {
                  config: new Data_Maybe.Just(v1.value0),
                  filename: c.filename,
                  version: c.version
                };
                return;
              }
              ;
              if (v1 instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
              }
              ;
              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 105, column 26 - line 107, column 27): " + [v1.constructor.name]);
            }
            ;
            if (v instanceof Data_Maybe.Just && v.value0 === "--log") {
              var v1 = Data_Array.index(args)(i + 1 | 0);
              if (v1 instanceof Data_Maybe.Just) {
                $tco_var_i = i + 2 | 0;
                $copy_c = {
                  config: c.config,
                  filename: new Data_Maybe.Just(v1.value0),
                  version: c.version
                };
                return;
              }
              ;
              if (v1 instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
              }
              ;
              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 108, column 23 - line 110, column 27): " + [v1.constructor.name]);
            }
            ;
            if (v instanceof Data_Maybe.Just && v.value0 === "--version") {
              $tco_var_i = i + 1 | 0;
              $copy_c = {
                config: c.config,
                filename: c.filename,
                version: true
              };
              return;
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              $tco_var_i = i + 1 | 0;
              $copy_c = c;
              return;
            }
            ;
            if (v instanceof Data_Maybe.Nothing) {
              $tco_done = true;
              return new Data_Maybe.Just(c);
            }
            ;
            throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 104, column 5 - line 114, column 24): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_i, $copy_c);
          }
          ;
          return $tco_result;
        };
      };
      return go(0)(defaultArgs);
    };
    var muteReexportsWarn = function(logFn) {
      return function(con) {
        return function(str) {
          var $67 = Data_String_CodeUnits.contains("Failed to resolve reexports for Type.")(str);
          if ($67) {
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          }
          ;
          return logFn(con)(str);
        };
      };
    };
    var mkStopPscIdeServer = function(state) {
      return function(logError) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(function(v) {
          return v.deactivate;
        })(Data_Newtype.unwrap()))(Effect_Ref.read(state))))(function(quit) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(quit)(function() {
            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
              Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(v) {
                return {
                  port: Data_Maybe.Nothing.value,
                  deactivate: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
                  modules: IdePurescript_Modules.initialModulesState,
                  runningRebuild: Data_Maybe.Nothing.value,
                  buildQueue: v.buildQueue,
                  clientCapabilities: v.clientCapabilities,
                  conn: v.conn,
                  diagnostics: v.diagnostics,
                  modulesFile: v.modulesFile,
                  parsedModules: v.parsedModules,
                  root: v.root
                };
              }))(state)();
              return logError(IdePurescript_PscIdeServer.Success.value)("Stopped IDE server")();
            });
          });
        });
      };
    };
    var mkRunHandler = function(config) {
      return function(state) {
        return function(documents) {
          return function(_handlerName) {
            return function(docUri) {
              return function(f) {
                return function(b) {
                  return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(config)))(function(c) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value))(updateModules(state)(documents))(docUri(b)))(function(ms) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Data_Maybe["maybe'"](function(v) {
                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(state));
                      })(Control_Applicative.pure(Effect_Aff.applicativeAff))(ms))(function(s) {
                        return f(c)(s)(b);
                      });
                    });
                  }));
                };
              };
            };
          };
        };
      };
    };
    var mkLogError = function(logFile) {
      return function(state) {
        return function(l) {
          return function(s) {
            return function __do() {
              Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(function(v) {
                return v.conn;
              })(Data_Newtype.unwrap()))(Effect_Ref.read(state)))(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Data_Function.flip(function() {
                if (l instanceof IdePurescript_PscIdeServer.Success) {
                  return LanguageServer_Protocol_Console.log;
                }
                ;
                if (l instanceof IdePurescript_PscIdeServer.Info) {
                  return muteReexportsWarn(LanguageServer_Protocol_Console.info);
                }
                ;
                if (l instanceof IdePurescript_PscIdeServer.Warning) {
                  return LanguageServer_Protocol_Console.warn;
                }
                ;
                if (l instanceof IdePurescript_PscIdeServer["Error"]) {
                  return LanguageServer_Protocol_Console.error;
                }
                ;
                throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 173, column 13 - line 177, column 29): " + [l.constructor.name]);
              }())(s)))();
              if (logFile instanceof Data_Maybe.Just) {
                return Node_FS_Sync.appendTextFile(Node_Encoding.UTF8.value)(logFile.value0)("[" + (Data_Show.show(IdePurescript_PscIdeServer.showErrorLevel)(l) + ("] " + (s + "\n"))))();
              }
              ;
              if (logFile instanceof Data_Maybe.Nothing) {
                return Data_Unit.unit;
              }
              ;
              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 180, column 3 - line 183, column 25): " + [logFile.constructor.name]);
            };
          };
        };
      };
    };
    var isLibSourceFile = function(path) {
      return Data_Foldable.or(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Functor.mapFlipped(Data_Functor.functorArray)([".spago", "bower_components"])(function() {
        var $137 = Data_Function.flip(Data_String_CodeUnits.contains)(path);
        return function($138) {
          return $137(Data_String_Pattern.Pattern($138));
        };
      }()));
    };
    var getWorkspaceRoot = function(state) {
      return function __do() {
        var root = Data_Functor.map(Effect.functorEffect)(function() {
          var $139 = Data_Newtype.unwrap();
          return function($140) {
            return function(v) {
              return v.root;
            }($139($140));
          };
        }())(Effect_Ref.read(state))();
        return Data_Maybe.maybe(Node_Process.cwd)(Control_Applicative.pure(Effect.applicativeEffect))(root)();
      };
    };
    var getTextDocUri = function() {
      var $141 = Data_Newtype.un()(LanguageServer_Protocol_Types.TextDocumentIdentifier);
      return function($142) {
        return Data_Maybe.Just.create(function(v) {
          return v.uri;
        }($141(function(v) {
          return v.textDocument;
        }($142))));
      };
    }();
    var getPort = function(state) {
      return Data_Functor.map(Effect.functorEffect)(function() {
        var $143 = Data_Newtype.unwrap();
        return function($144) {
          return function(v) {
            return v.port;
          }($143($144));
        };
      }())(Effect_Ref.read(state));
    };
    var defaultServerState = {
      port: Data_Maybe.Nothing.value,
      deactivate: Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit),
      root: Data_Maybe.Nothing.value,
      conn: Data_Maybe.Nothing.value,
      runningRebuild: Data_Maybe.Nothing.value,
      modules: IdePurescript_Modules.initialModulesState,
      modulesFile: Data_Maybe.Nothing.value,
      buildQueue: Foreign_Object.empty,
      diagnostics: Foreign_Object.empty,
      clientCapabilities: Data_Maybe.Nothing.value,
      parsedModules: Data_Map_Internal.empty
    };
    var connect = function(state) {
      return LanguageServer_Protocol_Setup.initConnection(LanguageServer_IdePurescript_Commands.commands)(function(v) {
        return function __do() {
          (function __do2() {
            var args = Node_Process.argv();
            return LanguageServer_Protocol_Console.log(v.conn)("Starting with args: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(args))();
          })();
          var root = function() {
            var v1 = Data_Nullable.toMaybe(v.params.rootPath);
            var v2 = Data_Nullable.toMaybe(v.params.rootUri);
            if (v2 instanceof Data_Maybe.Just) {
              return Data_Functor.map(Effect.functorEffect)(Data_Maybe.Just.create)(LanguageServer_Protocol_Uri.uriToFilename(v2.value0))();
            }
            ;
            if (v1 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v1.value0);
            }
            ;
            if (v2 instanceof Data_Maybe.Nothing && v1 instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 278, column 13 - line 281, column 39): " + [v2.constructor.name, v1.constructor.name]);
          }();
          var workingRoot = Data_Maybe.maybe(Node_Process.cwd)(Control_Applicative.pure(Effect.applicativeEffect))(root)();
          Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(v1) {
            return {
              root: new Data_Maybe.Just(workingRoot),
              clientCapabilities: new Data_Maybe.Just(v.params.capabilities),
              buildQueue: v1.buildQueue,
              conn: v1.conn,
              deactivate: v1.deactivate,
              diagnostics: v1.diagnostics,
              modules: v1.modules,
              modulesFile: v1.modulesFile,
              parsedModules: v1.parsedModules,
              port: v1.port,
              runningRebuild: v1.runningRebuild
            };
          }))(state)();
          Control_Bind.bindFlipped(Effect.bindEffect)(function(v1) {
            return LanguageServer_Protocol_Console.log(v.conn)("Starting with cwd: " + (v1.value0 + (" and using root path: " + v1.value1)));
          })(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create)(Node_Process.cwd))(Control_Applicative.pure(Effect.applicativeEffect)(workingRoot)))();
          return Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(v1) {
            return {
              conn: new Data_Maybe.Just(v.conn),
              buildQueue: v1.buildQueue,
              clientCapabilities: v1.clientCapabilities,
              deactivate: v1.deactivate,
              diagnostics: v1.diagnostics,
              modules: v1.modules,
              modulesFile: v1.modulesFile,
              parsedModules: v1.parsedModules,
              port: v1.port,
              root: v1.root,
              runningRebuild: v1.runningRebuild
            };
          }))(state)();
        };
      });
    };
    var cleanProject = function(conn) {
      return function(v) {
        return function(v1) {
          return function(v2) {
            return function(config) {
              return function(v3) {
                return function(v4) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Handlers.sendCleanBegin(conn)))(function() {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.info(conn)("Started cleaning compiled output")))(function() {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Clean.clean(config))(function(v5) {
                        if (v5 instanceof Data_Either.Left) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                            LanguageServer_Protocol_Console.error(conn)(v5.value0)();
                            return LanguageServer_Protocol_Window.showError(conn)(v5.value0)();
                          });
                        }
                        ;
                        if (v5 instanceof Data_Either.Right) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(conn)(v5.value0));
                        }
                        ;
                        throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 355, column 9 - line 362, column 27): " + [v5.constructor.name]);
                      }))(function() {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.info(conn)("Finished cleaning compiled output")))(function() {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Handlers.sendCleanEnd(conn));
                        });
                      });
                    });
                  });
                };
              };
            };
          };
        };
      };
    };
    var buildProject = function(conn) {
      return function(state) {
        return function(logError) {
          return function(docs) {
            return function(c) {
              return function(s) {
                return function($$arguments) {
                  var workspaceRoot = getWorkspaceRoot(state);
                  return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_Protocol_Window.createWorkDoneProgress(conn))(function(progressReporter) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                      LanguageServer_Protocol_Window.workBegin(progressReporter)({
                        title: "Building PureScript"
                      })();
                      return LanguageServer_Protocol_Handlers.sendDiagnosticsBegin(conn)();
                    }))(function() {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Build.fullBuild(logError)(docs)(c)(s)($$arguments))(function(v) {
                        if (v instanceof Data_Either.Right) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                            LanguageServer_Protocol_Console.log(conn)("Built with " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(v.value0.pscErrors)) + " issues"))();
                            var pscErrorsMap = Data_Functor.map(Effect.functorEffect)(LanguageServer_IdePurescript_Build.collectByFirst)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(function(v1) {
                              return function __do2() {
                                var projectRoot = workspaceRoot();
                                var filename$prime = Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(Node_Path.resolve([projectRoot]))(v1.filename)();
                                var uri = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))(function(f) {
                                  return Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(Data_Maybe.Just.create)(Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)))(LanguageServer_Protocol_Uri.filenameToUri(f));
                                })(filename$prime)();
                                return new Data_Tuple.Tuple(uri, v1);
                              };
                            })(v.value0.pscErrors))();
                            var prevErrors = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(function(v1) {
                              return v1.diagnostics;
                            })(Data_Newtype.un()(LanguageServer_IdePurescript_Types.ServerState)))(Effect_Ref.read(state))();
                            var nonErrorFiles = Data_Array.difference(Data_Eq.eqString)(Foreign_Object.keys(prevErrors))(Foreign_Object.keys(pscErrorsMap));
                            LanguageServer_Protocol_Console.log(conn)("Removing old diagnostics for: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(nonErrorFiles))();
                            Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(LanguageServer_Protocol_Types.DocumentUri)(nonErrorFiles))(function(uri) {
                              return LanguageServer_Protocol_Handlers.publishDiagnostics(conn)({
                                uri,
                                diagnostics: []
                              });
                            })();
                            Effect_Ref.write(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(v1) {
                              return {
                                diagnostics: pscErrorsMap,
                                buildQueue: v1.buildQueue,
                                clientCapabilities: v1.clientCapabilities,
                                conn: v1.conn,
                                deactivate: v1.deactivate,
                                modules: v1.modules,
                                modulesFile: v1.modulesFile,
                                parsedModules: v1.parsedModules,
                                port: v1.port,
                                root: v1.root,
                                runningRebuild: v1.runningRebuild
                              };
                            })(s))(state)();
                            return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value0.diagnostics))(function(v1) {
                              return function __do2() {
                                var uri = LanguageServer_Protocol_Uri.filenameToUri(v1.value0)();
                                LanguageServer_Protocol_Console.log(conn)("Publishing diagnostics for: " + (Data_Show.show(LanguageServer_Protocol_Types.showDocumentUri)(uri) + (" (" + (Data_Show.show(Data_Show.showString)(v1.value0) + ")"))))();
                                return LanguageServer_Protocol_Handlers.publishDiagnostics(conn)({
                                  uri,
                                  diagnostics: v1.value1
                                })();
                              };
                            })();
                          });
                        }
                        ;
                        if (v instanceof Data_Either.Left) {
                          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                            LanguageServer_Protocol_Console.error(conn)(v.value0)();
                            return LanguageServer_Protocol_Window.showError(conn)(v.value0)();
                          });
                        }
                        ;
                        throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 312, column 9 - line 340, column 31): " + [v.constructor.name]);
                      }))(function() {
                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                          LanguageServer_Protocol_Handlers.sendDiagnosticsEnd(conn)();
                          return LanguageServer_Protocol_Window.workDone(progressReporter)();
                        });
                      });
                    });
                  });
                };
              };
            };
          };
        };
      };
    };
    var buildWarningDialog = function(conn) {
      return function(state) {
        return function(documents) {
          return function(settings) {
            return function(logError) {
              return function(msg) {
                return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_Protocol_Window.showWarningWithActions(conn)(msg + ". \n\nEnsure project is built with the same purs version as the IDE server is using")(["Build project"]))(function(action) {
                  return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString))(action)(new Data_Maybe.Just("Build project")))(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.info(conn)("Building by request from warning dialog")))(function() {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(state)))(function(s) {
                      return buildProject(conn)(state)(logError)(documents)(settings)(s)([]);
                    });
                  }));
                });
              };
            };
          };
        };
      };
    };
    var handleEvents = function(config) {
      return function(conn) {
        return function(state) {
          return function(documents) {
            return function(logError) {
              var stopPscIdeServer = mkStopPscIdeServer(state)(logError);
              var runHandler = mkRunHandler(config)(state)(documents);
              var launchAff = function() {
                var $145 = Data_Functor["void"](Effect.functorEffect);
                var $146 = LanguageServer_IdePurescript_Util.launchAffLog(logError);
                return function($147) {
                  return $145($146($147));
                };
              }();
              return function __do() {
                LanguageServer_Protocol_Handlers.onCompletion(conn)(runHandler("onCompletion")(getTextDocUri)(LanguageServer_IdePurescript_Completion.getCompletions(logError)(documents)))();
                LanguageServer_Protocol_Handlers.onDefinition(conn)(runHandler("onDefinition")(getTextDocUri)(LanguageServer_IdePurescript_Symbols.getDefinition(logError)(documents)))();
                LanguageServer_Protocol_Handlers.onDocumentSymbol(conn)(runHandler("onDocumentSymbol")(getTextDocUri)(LanguageServer_IdePurescript_Symbols.getDocumentSymbols))();
                LanguageServer_Protocol_Handlers.onWorkspaceSymbol(conn)(runHandler("onWorkspaceSymbol")(Data_Function["const"](Data_Maybe.Nothing.value))(LanguageServer_IdePurescript_Symbols.getWorkspaceSymbols))();
                LanguageServer_Protocol_Handlers.onFoldingRanges(conn)(runHandler("onFoldingRanges")(getTextDocUri)(LanguageServer_IdePurescript_FoldingRanges.getFoldingRanges(logError)(documents)))();
                LanguageServer_Protocol_Handlers.onDocumentFormatting(conn)(runHandler("onDocumentFormatting")(getTextDocUri)(LanguageServer_IdePurescript_Formatting.getFormattedDocument(logError)(documents)))();
                LanguageServer_Protocol_Handlers.onReferences(conn)(runHandler("onReferences")(getTextDocUri)(LanguageServer_IdePurescript_References.getReferences(documents)))();
                LanguageServer_Protocol_Handlers.onHover(conn)(runHandler("onHover")(getTextDocUri)(LanguageServer_IdePurescript_Tooltips.getTooltips(documents)))();
                LanguageServer_Protocol_Handlers.onCodeAction(conn)(runHandler("onCodeAction")(getTextDocUri)(LanguageServer_IdePurescript_CodeActions.getActions(documents)))();
                LanguageServer_Protocol_Handlers.onCodeLens(conn)(runHandler("onCodeLens")(getTextDocUri)(LanguageServer_IdePurescript_CodeLenses.getCodeLenses(logError)(state)(documents)))();
                LanguageServer_Protocol_Handlers.onShutdown(conn)(Control_Promise.fromAff(stopPscIdeServer))();
                LanguageServer_Protocol_Handlers.onDidChangeWatchedFiles(conn)(function() {
                  var $148 = LanguageServer_IdePurescript_WatchedFiles.handleDidChangeWatchedFiles(config)(conn)(state)(documents);
                  return function($149) {
                    return launchAff($148($149));
                  };
                }())();
                LanguageServer_Protocol_DocumentStore.onDidChangeContent(documents)(function(v) {
                  return function __do2() {
                    var v1 = LanguageServer_Protocol_TextDocument.getVersion(v.document)();
                    var text = LanguageServer_Protocol_TextDocument.getText(v.document)();
                    var res = PureScript_CST.parseModule(text);
                    return Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(s) {
                      return {
                        modulesFile: Data_Maybe.Nothing.value,
                        parsedModules: Data_Map_Internal.insert(LanguageServer_Protocol_Types.ordDocumentUri)(LanguageServer_Protocol_TextDocument.getUri(v.document))({
                          version: v1,
                          parsed: res
                        })(s.parsedModules),
                        buildQueue: s.buildQueue,
                        clientCapabilities: s.clientCapabilities,
                        conn: s.conn,
                        deactivate: s.deactivate,
                        diagnostics: s.diagnostics,
                        modules: s.modules,
                        port: s.port,
                        root: s.root,
                        runningRebuild: s.runningRebuild
                      };
                    }))(state)();
                  };
                })();
                LanguageServer_Protocol_DocumentStore.onDidOpenDocument(documents)(function(v) {
                  var uri = Data_Newtype.un()(LanguageServer_Protocol_Types.DocumentUri)(LanguageServer_Protocol_TextDocument.getUri(v.document));
                  var enqueue = Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(st) {
                    return {
                      buildQueue: Foreign_Object.insert(uri)(v.document)(st.buildQueue),
                      clientCapabilities: st.clientCapabilities,
                      conn: st.conn,
                      deactivate: st.deactivate,
                      diagnostics: st.diagnostics,
                      modules: st.modules,
                      modulesFile: st.modulesFile,
                      parsedModules: st.parsedModules,
                      port: st.port,
                      root: st.root,
                      runningRebuild: st.runningRebuild
                    };
                  }))(state);
                  return function __do2() {
                    var c = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(config))();
                    return Control_Applicative.when(Effect.applicativeEffect)(LanguageServer_IdePurescript_Config.buildOpenedFiles(c) && !isLibSourceFile(uri))(Control_Bind.bind(Effect.bindEffect)(getPort(state))(Data_Maybe.maybe(enqueue)(function(v1) {
                      return LanguageServer_IdePurescript_Build.launchRebuildAndSendDiagnostics(config)(conn)(state)(logError)(v.document);
                    })))();
                  };
                })();
                return LanguageServer_Protocol_DocumentStore.onDidSaveDocument(documents)(function(v) {
                  return function __do2() {
                    var c = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(config))();
                    var $102 = LanguageServer_IdePurescript_Config.fullBuildOnSave(c);
                    if ($102) {
                      var s = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(state))();
                      return launchAff(buildProject(conn)(state)(logError)(documents)(c)(s)([]))();
                    }
                    ;
                    return LanguageServer_IdePurescript_Build.launchRebuildAndSendDiagnostics(config)(conn)(state)(logError)(v.document)();
                  };
                })();
              };
            };
          };
        };
      };
    };
    var buildDocumentsInQueue = function(config) {
      return function(conn) {
        return function(state) {
          return function(logError) {
            return function __do() {
              var queue = Data_Functor.map(Effect.functorEffect)(function() {
                var $150 = Data_Newtype.unwrap();
                return function($151) {
                  return function(v) {
                    return v.buildQueue;
                  }($150($151));
                };
              }())(Effect_Ref.read(state))();
              var docs = Foreign_Object.values(queue);
              return Data_Functor["void"](Effect.functorEffect)(LanguageServer_IdePurescript_Util.launchAffLog(logError)(Data_Foldable.sequence_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(LanguageServer_IdePurescript_Build.rebuildAndSendDiagnostics(config)(conn)(state)(logError))(docs))))();
            };
          };
        };
      };
    };
    var mkStartPscIdeServer = function(config) {
      return function(conn) {
        return function(state) {
          return function(documents) {
            return function(logError) {
              var workspaceRoot = getWorkspaceRoot(state);
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logError(IdePurescript_PscIdeServer.Info.value)("Starting IDE server")))(function() {
                return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_Protocol_Window.createWorkDoneProgress(conn))(function(progressReporter) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Window.workBegin(progressReporter)({
                    title: "Starting PureScript IDE server"
                  })))(function() {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(workspaceRoot))(function(rootPath) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(config)))(function(settings) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Server["startServer'"](settings)(rootPath)(logError)(logError))(function(startRes) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Server.retry(logError)(6)(function() {
                            if (startRes.port instanceof Data_Maybe.Just) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Server.loadAll(startRes.port.value0))(function(v) {
                                if (v instanceof Data_Either.Left && Data_String_CodeUnits.contains("Version mismatch for the externs")(v.value0)) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.info(conn)("Error loading modules: " + v.value0)))(function() {
                                    return buildWarningDialog(conn)(state)(documents)(settings)(logError)(v.value0 + ". Ensure project is built with the same purs version as the IDE server is using");
                                  });
                                }
                                ;
                                if (v instanceof Data_Either.Left) {
                                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logError(IdePurescript_PscIdeServer.Info.value)("Non-fatal error loading modules: " + v.value0));
                                }
                                ;
                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                              }))(function() {
                                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                                  Effect_Ref.modify_(Data_Newtype.over()()(LanguageServer_IdePurescript_Types.ServerState)(function(v2) {
                                    return {
                                      port: new Data_Maybe.Just(startRes.port.value0),
                                      deactivate: startRes.quit,
                                      buildQueue: v2.buildQueue,
                                      clientCapabilities: v2.clientCapabilities,
                                      conn: v2.conn,
                                      diagnostics: v2.diagnostics,
                                      modules: v2.modules,
                                      modulesFile: v2.modulesFile,
                                      parsedModules: v2.parsedModules,
                                      root: v2.root,
                                      runningRebuild: v2.runningRebuild
                                    };
                                  }))(state)();
                                  var v = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(state))();
                                  return Control_Applicative.when(Effect.applicativeEffect)(LanguageServer_IdePurescript_CodeLenses.supportsRefresh(v.clientCapabilities))(LanguageServer_Protocol_Workspace.codeLensRefresh(conn))();
                                });
                              });
                            }
                            ;
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                          }()))(function() {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Window.workDone(progressReporter)))(function() {
                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(buildDocumentsInQueue(config)(conn)(state)(logError));
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            };
          };
        };
      };
    };
    var handleCommands = function(config) {
      return function(conn) {
        return function(state) {
          return function(documents) {
            return function(logError) {
              var stopPscIdeServer = mkStopPscIdeServer(state)(logError);
              var startPscIdeServer = mkStartPscIdeServer(config)(conn)(state)(documents)(logError);
              var restartPscIdeServer = Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.apathize(stopPscIdeServer))(function() {
                return startPscIdeServer;
              });
              var onClean = cleanProject(conn)(state)(logError);
              var onBuild = buildProject(conn)(state)(logError);
              var noResult = Foreign.unsafeToForeign(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
              var voidHandler = function(h) {
                return function(d) {
                  return function(c) {
                    return function(s) {
                      return function(a) {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(h(d)(c)(s)(a)))(function(v) {
                          if (v instanceof Data_Either.Left) {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logError(IdePurescript_PscIdeServer["Error"].value)(Data_Show.show(Effect_Exception.showError)(v.value0))))(function() {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(noResult);
                            });
                          }
                          ;
                          if (v instanceof Data_Either.Right) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(noResult);
                          }
                          ;
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 581, column 13 - line 585, column 37): " + [v.constructor.name]);
                        });
                      };
                    };
                  };
                };
              };
              var simpleHandler = function(h) {
                return function(v) {
                  return function(v1) {
                    return function(v2) {
                      return function(v3) {
                        return Data_Functor.voidLeft(Effect_Aff.functorAff)(h)(noResult);
                      };
                    };
                  };
                };
              };
              var handlers = Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.first(Data_Profunctor_Strong.strongFn)(LanguageServer_IdePurescript_Commands.cmdName))([Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.caseSplitCmd)(voidHandler(LanguageServer_IdePurescript_Assist.caseSplit)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.addClauseCmd)(voidHandler(LanguageServer_IdePurescript_Assist.addClause)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.replaceSuggestionCmd)(voidHandler(LanguageServer_IdePurescript_CodeActions.onReplaceSuggestion)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.replaceAllSuggestionsCmd)(voidHandler(LanguageServer_IdePurescript_CodeActions.onReplaceAllSuggestions)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.buildCmd)(voidHandler(onBuild)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.cleanCmd)(voidHandler(onClean)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.addCompletionImportCmd)(LanguageServer_IdePurescript_Imports.addCompletionImport(logError)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.addModuleImportCmd)(voidHandler(LanguageServer_IdePurescript_Imports["addModuleImport'"](logError))), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.sortImportsCmd)(LanguageServer_IdePurescript_Imports.reformatImports(logError)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.startPscIdeCmd)(simpleHandler(startPscIdeServer)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.stopPscIdeCmd)(simpleHandler(stopPscIdeServer)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.restartPscIdeCmd)(simpleHandler(restartPscIdeServer)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.getAvailableModulesCmd)(LanguageServer_IdePurescript_Imports.getAllModules(logError)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.searchCmd)(LanguageServer_IdePurescript_Search.search), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.fixTypoCmd)(LanguageServer_IdePurescript_Assist.fixTypo(logError)), Data_Tuple.Tuple.create(LanguageServer_IdePurescript_Commands.typedHoleExplicitCmd)(voidHandler(LanguageServer_IdePurescript_Assist.fillTypedHole(logError)))]));
              return LanguageServer_Protocol_Handlers.onExecuteCommand(conn)(function(v) {
                return Control_Promise.fromAff(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(config)))(function(c) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(state)))(function(s) {
                    var v1 = Foreign_Object.lookup(v.command)(handlers);
                    if (v1 instanceof Data_Maybe.Just) {
                      return v1.value0(documents)(c)(s)(v["arguments"]);
                    }
                    ;
                    if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.error(conn)("Unknown command: " + v.command)))(function() {
                        return Control_Applicative.pure(Effect_Aff.applicativeAff)(noResult);
                      });
                    }
                    ;
                    throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 615, column 11 - line 619, column 28): " + [v1.constructor.name]);
                  });
                }));
              });
            };
          };
        };
      };
    };
    var autoStartPcsIdeServer = function(config) {
      return function(conn) {
        return function(state) {
          return function(logError) {
            return function(documents) {
              var workspaceRoot = getWorkspaceRoot(state);
              var launchAff = function() {
                var $152 = Data_Functor["void"](Effect.functorEffect);
                var $153 = LanguageServer_IdePurescript_Util.launchAffLog(logError);
                return function($154) {
                  return $152($153($154));
                };
              }();
              var startPscIdeServer = mkStartPscIdeServer(config)(conn)(state)(documents)(logError);
              var resolvePath = function(p) {
                return function __do() {
                  var root = workspaceRoot();
                  return Node_Path.resolve([root])(p)();
                };
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(config)))(function(c) {
                return Control_Applicative.when(Effect_Aff.applicativeAff)(LanguageServer_IdePurescript_Config.autoStartPscIde(c))(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(startPscIdeServer)(function() {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(resolvePath(LanguageServer_IdePurescript_Config.effectiveOutputDirectory(c))))(function(outputDir) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Foldable.or(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(Control_Bind.composeKleisliFlipped(Effect_Aff.bindAff)(Node_FS_Aff.exists)(function() {
                      var $155 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                      return function($156) {
                        return $155(resolvePath($156));
                      };
                    }()))(["bower.json", "psc-package.json", "spago.dhall", "flake.nix", "shell.nix"])))(function(hasPackageFile) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(LanguageServer_IdePurescript_Server.getEnvPursIdeSources(Effect_Aff.monadEffectAff))(function(envIdeSources) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(!hasPackageFile && Data_Maybe.isNothing(envIdeSources))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Window.showError(conn)("It doesn't look like the workspace root is a PureScript project(has bower.json/psc-package.json/spago.dhall/flake.nix/shell.nix).The PureScript project should be opened as a root workspace folder."))))(function() {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(outputDir))(function(exists) {
                            return Control_Applicative.unless(Effect_Aff.applicativeAff)(exists)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(launchAff(function() {
                              var message = "Output directory does not exist at '" + (outputDir + "'");
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.info(conn)(message)))(function() {
                                return buildWarningDialog(conn)(state)(documents)(c)(logError)(message + ". Ensure project is built, or check configuration of output directory and build command.");
                              });
                            }())));
                          });
                        });
                      });
                    });
                  });
                }));
              });
            };
          };
        };
      };
    };
    var handleConfig = function(config) {
      return function(conn) {
        return function(state) {
          return function(documents) {
            return function(cmdLineConfig) {
              return function(logError) {
                var launchAff = function() {
                  var $157 = Data_Functor["void"](Effect.functorEffect);
                  var $158 = LanguageServer_IdePurescript_Util.launchAffLog(logError);
                  return function($159) {
                    return $157($158($159));
                  };
                }();
                return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function(v) {
                  var setConfig = function(source) {
                    return function(newConfig) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
                        LanguageServer_Protocol_Console.log(conn)("Got new config (" + (source + ")"))();
                        return Effect_Ref.write(newConfig)(config)();
                      }))(function() {
                        return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.tryPut(Data_Unit.unit)(v))(function(v1) {
                          if (v1) {
                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                          }
                          ;
                          if (!v1) {
                            return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(conn)("Not starting server, already started"));
                          }
                          ;
                          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 527, column 13 - line 529, column 82): " + [v1.constructor.name]);
                        });
                      });
                    };
                  };
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Handlers.onDidChangeConfiguration(conn)(function(v1) {
                    return launchAff(setConfig("client push")(v1.settings));
                  })))(function() {
                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.forkAff(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff_AVar.read(v))(function() {
                      return autoStartPcsIdeServer(config)(conn)(state)(logError)(documents);
                    })))(function() {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Maybe.maybe(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))(setConfig("command line"))(cmdLineConfig))(function() {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(50))(function() {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Effect_AVar.isFilled)(Effect_Aff_AVar.status(v)))(function(got1) {
                            return Control_Applicative.unless(Effect_Aff.applicativeAff)(got1)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(LanguageServer_Protocol_Setup.getConfiguration(conn)))(function(initialConfig) {
                              if (initialConfig instanceof Data_Either.Right) {
                                return setConfig("by request")(initialConfig.value0);
                              }
                              ;
                              if (initialConfig instanceof Data_Either.Left) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(LanguageServer_Protocol_Console.log(conn)("Failed to request settings: " + Data_Show.show(Effect_Exception.showError)(initialConfig.value0))))(function() {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.delay(200))(function() {
                                    return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Effect_AVar.isFilled)(Effect_Aff_AVar.status(v)))(function(got2) {
                                      return Control_Applicative.unless(Effect_Aff.applicativeAff)(got2)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(logError(IdePurescript_PscIdeServer.Warning.value)("Proceeding with no config received")))(function() {
                                        return Data_Functor["void"](Effect_Aff.functorAff)(Effect_Aff_AVar.tryPut(Data_Unit.unit)(v));
                                      }));
                                    });
                                  });
                                });
                              }
                              ;
                              throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 547, column 5 - line 557, column 44): " + [initialConfig.constructor.name]);
                            }));
                          });
                        });
                      });
                    });
                  });
                });
              };
            };
          };
        };
      };
    };
    var main$prime = function(v) {
      return function __do() {
        var state = Effect_Ref["new"](defaultServerState)();
        var config = Effect_Ref["new"](Foreign.unsafeToForeign({}))();
        var conn = connect(state)();
        var documents = LanguageServer_Protocol_Setup.initDocumentStore(conn)();
        var logError = mkLogError(v.filename)(state);
        handleEvents(config)(conn)(state)(documents)(logError)();
        handleCommands(config)(conn)(state)(documents)(logError)();
        Data_Functor["void"](Effect.functorEffect)(LanguageServer_IdePurescript_Util.launchAffLog(logError)(handleConfig(config)(conn)(state)(documents)(v.config)(logError)))();
        var plsVersion = $foreign.version();
        return LanguageServer_Protocol_Console.log(conn)("PureScript Language Server started (" + (plsVersion + ")"))();
      };
    };
    var main = function __do() {
      var maybeArgs = Data_Functor.map(Effect.functorEffect)(parseArgs)(Node_Process.argv)();
      if (maybeArgs instanceof Data_Maybe.Nothing) {
        Effect_Console.error("Error parsing args")();
        return Node_Process.exit(1)();
      }
      ;
      if (maybeArgs instanceof Data_Maybe.Just && maybeArgs.value0.version) {
        var v = $foreign.version();
        return Effect_Console.log(v)();
      }
      ;
      if (maybeArgs instanceof Data_Maybe.Just) {
        Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Data_Function.flip(Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value))("Starting logging...\n"))(maybeArgs.value0.filename)();
        var config$prime = function() {
          if (maybeArgs.value0.config instanceof Data_Maybe.Just) {
            return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(Foreign_JSON.parseJSON(maybeArgs.value0.config.value0)));
          }
          ;
          if (maybeArgs.value0.config instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 638, column 19 - line 640, column 29): " + [maybeArgs.value0.config.constructor.name]);
        }();
        return main$prime({
          config: config$prime,
          filename: maybeArgs.value0.filename
        })();
      }
      ;
      throw new Error("Failed pattern match at LanguageServer.IdePurescript.Main (line 628, column 3 - line 641, column 57): " + [maybeArgs.constructor.name]);
    };
    module2.exports = {
      main
    };
  }
});

// main.js
require_LanguageServer_IdePurescript21().main();
