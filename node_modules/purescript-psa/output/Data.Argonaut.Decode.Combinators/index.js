// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");

// | Attempt to get the value for a given key on an `Object Json`.
// |
// | The result will be `Right Nothing` if the key and value are not present,
// | or if the key is present and the value is `null`.
// |
// | Use this accessor if the key and value are optional in your object.
// | If the key and value are mandatory, use `getField` (`.:`) instead.
var getFieldOptional$prime = function (dictDecodeJson) {
    return function (o) {
        return function (s) {
            var decode = function (json) {
                var $8 = Data_Argonaut_Core.isNull(json);
                if ($8) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                };
                return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Argonaut_Decode_Class.elaborateFailure(s)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(json)));
            };
            return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(s)(o));
        };
    };
};

// | Attempt to get the value for a given key on an `Object Json`.
// |
// | The result will be `Right Nothing` if the key and value are not present,
// | but will fail if the key is present but the value cannot be converted to the right type.
// |
// | This function will treat `null` as a value and attempt to decode it into your desired type.
// | If you would like to treat `null` values the same as absent values, use
// | `getFieldOptional'` (`.:?`) instead.
var getFieldOptional = function (dictDecodeJson) {
    return function (o) {
        return function (s) {
            var decode = function (json) {
                return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Argonaut_Decode_Class.elaborateFailure(s)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(json)));
            };
            return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(s)(o));
        };
    };
};
var getFieldOptionalDeprecated = function (dictWarn) {
    return function (dictDecodeJson) {
        return getFieldOptional(dictDecodeJson);
    };
};

// | Attempt to get the value for a given key on an `Object Json`.
// |
// | Use this accessor if the key and value *must* be present in your object.
// | If the key and value are optional, use `getFieldOptional'` (`.:?`) instead.
var getField = function (dictDecodeJson) {
    return function (o) {
        return function (s) {
            return Data_Maybe.maybe(Data_Either.Left.create("Expected field " + Data_Show.show(Data_Show.showString)(s)))((function () {
                var $9 = Data_Argonaut_Decode_Class.elaborateFailure(s);
                var $10 = Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson);
                return function ($11) {
                    return $9($10($11));
                };
            })())(Foreign_Object.lookup(s)(o));
        };
    };
};
var getFieldDeprecated = function (dictWarn) {
    return function (dictDecodeJson) {
        return getField(dictDecodeJson);
    };
};

// | Helper for use in combination with `.:?` to provide default values for optional
// | `Object Json` fields.
// |
// | Example usage:
// | ```purescript
// | newtype MyType = MyType
// |   { foo :: String
// |   , bar :: Maybe Int
// |   , baz :: Boolean
// |   }
// |
// | instance decodeJsonMyType :: DecodeJson MyType where
// |   decodeJson json = do
// |     x <- decodeJson json
// |     foo <- x .: "foo" -- mandatory field
// |     bar <- x .:? "bar" -- optional field
// |     baz <- x .:? "baz" .!= false -- optional field with default value of `false`
// |     pure $ MyType { foo, bar, baz }
// | ```
var defaultField = function (parser) {
    return function ($$default) {
        return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe($$default))(parser);
    };
};
var defaultFieldDeprecated = function (dictWarn) {
    return defaultField;
};
module.exports = {
    getField: getField,
    getFieldDeprecated: getFieldDeprecated,
    getFieldOptional: getFieldOptional,
    getFieldOptionalDeprecated: getFieldOptionalDeprecated,
    "getFieldOptional'": getFieldOptional$prime,
    defaultField: defaultField,
    defaultFieldDeprecated: defaultFieldDeprecated
};
