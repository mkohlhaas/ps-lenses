// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup_Traversable = require("../Data.Semigroup.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");

// | This class identifies data structures which can be _unfolded_.
// |
// | The generating function `f` in `unfoldr1 f` corresponds to the `uncons`
// | operation of a non-empty list or array; it always returns a value, and
// | then optionally a value to continue unfolding from.
// |
// | Note that, in order to provide an `Unfoldable1 t` instance, `t` need not
// | be a type which is guaranteed to be non-empty. For example, the fact that
// | lists can be empty does not prevent us from providing an
// | `Unfoldable1 List` instance. However, the result of `unfoldr1` should
// | always be non-empty.
// |
// | Every type which has an `Unfoldable` instance can be given an
// | `Unfoldable1` instance (and, in fact, is required to, because
// | `Unfoldable1` is a superclass of `Unfoldable`). However, there are types
// | which have `Unfoldable1` instances but cannot have `Unfoldable` instances.
// | In particular, types which are guaranteed to be non-empty, such as
// | `NonEmptyList`, cannot be given `Unfoldable` instances.
// |
// | The utility of this class, then, is that it provides an `Unfoldable`-like
// | interface while still permitting instances for guaranteed-non-empty types
// | like `NonEmptyList`.
var Unfoldable1 = function (unfoldr1) {
    this.unfoldr1 = unfoldr1;
};
var unfoldr1 = function (dict) {
    return dict.unfoldr1;
};
var unfoldable1Maybe = new Unfoldable1(function (f) {
    return function (b) {
        return new Data_Maybe.Just(Data_Tuple.fst(f(b)));
    };
});
var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));

// | Replicate a value `n` times. At least one value will be produced, so values
// | `n` less than 1 will be treated as 1.
// |
// | ``` purescript
// | replicate1 2 "foo" == (NEL.cons "foo" (NEL.singleton "foo") :: NEL.NonEmptyList String)
// | replicate1 0 "foo" == (NEL.singleton "foo" :: NEL.NonEmptyList String)
// | ```
var replicate1 = function (dictUnfoldable1) {
    return function (n) {
        return function (v) {
            var step = function (i) {
                if (i <= 0) {
                    return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
                };
                if (Data_Boolean.otherwise) {
                    return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
                };
                throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [ i.constructor.name ]);
            };
            return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
        };
    };
};

// | Perform an `Apply` action `n` times (at least once, so values `n` less
// | than 1 will be treated as 1), and accumulate the results.
// |
// | ``` purescript
// | > replicate1A 2 (randomInt 1 10) :: Effect (NEL.NonEmptyList Int)
// | (NonEmptyList (NonEmpty 8 (2 : Nil)))
// | > replicate1A 0 (randomInt 1 10) :: Effect (NEL.NonEmptyList Int)
// | (NonEmptyList (NonEmpty 4 Nil))
// | ```
var replicate1A = function (dictApply) {
    return function (dictUnfoldable1) {
        return function (dictTraversable1) {
            return function (n) {
                return function (m) {
                    return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
                };
            };
        };
    };
};

// | Contain a single value. For example:
// |
// | ``` purescript
// | singleton "foo" == (NEL.singleton "foo" :: NEL.NonEmptyList String)
// | ```
var singleton = function (dictUnfoldable1) {
    return replicate1(dictUnfoldable1)(1);
};

// | Create an `Unfoldable1` containing a range of values, including both
// | endpoints.
// |
// | ``` purescript
// | range 0 0 == (NEL.singleton 0 :: NEL.NonEmptyList Int)
// | range 1 2 == (NEL.cons 1 (NEL.singleton 2) :: NEL.NonEmptyList Int)
// | range 2 0 == (NEL.cons 2 (NEL.cons 1 (NEL.singleton 0)) :: NEL.NonEmptyList Int)
// | ```
var range = function (dictUnfoldable1) {
    return function (start) {
        return function (end) {
            var go = function (delta) {
                return function (i) {
                    var i$prime = i + delta | 0;
                    return new Data_Tuple.Tuple(i, (function () {
                        var $8 = i === end;
                        if ($8) {
                            return Data_Maybe.Nothing.value;
                        };
                        return new Data_Maybe.Just(i$prime);
                    })());
                };
            };
            var delta = (function () {
                var $9 = end >= start;
                if ($9) {
                    return 1;
                };
                return -1 | 0;
            })();
            return unfoldr1(dictUnfoldable1)(go(delta))(start);
        };
    };
};
module.exports = {
    Unfoldable1: Unfoldable1,
    unfoldr1: unfoldr1,
    replicate1: replicate1,
    replicate1A: replicate1A,
    singleton: singleton,
    range: range,
    unfoldable1Array: unfoldable1Array,
    unfoldable1Maybe: unfoldable1Maybe
};
