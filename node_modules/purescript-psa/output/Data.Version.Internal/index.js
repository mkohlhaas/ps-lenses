// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Text_Parsing_Parser = require("../Text.Parsing.Parser/index.js");
var Text_Parsing_Parser_Pos = require("../Text.Parsing.Parser.Pos/index.js");
var Text_Parsing_Parser_Token = require("../Text.Parsing.Parser.Token/index.js");
var lieAboutPos = Data_Function["const"](Text_Parsing_Parser_Pos.initialPos);
var match$prime = Text_Parsing_Parser_Token.match(Data_Identity.monadIdentity)(Data_Eq.eqChar)(lieAboutPos);
var when$prime = Text_Parsing_Parser_Token.when(Data_Identity.monadIdentity)(lieAboutPos);
var isDigit = function (c) {
    return "0" <= c && c <= "9";
};
var nonNegativeInt = (function () {
    var intFromList = (function () {
        var $7 = Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray);
        return function ($8) {
            return Data_Int.fromString(Data_String_CodeUnits.fromCharArray($7($8)));
        };
    })();
    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(intFromList)(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Token.when(Data_Identity.monadIdentity)(lieAboutPos)(isDigit))))(Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("invalid 32-bit integer"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))));
})();
var isAsciiAlpha = function (ch) {
    return Data_Ord.between(Data_Ord.ordChar)("a")("z")(Data_Char_Unicode.toLower(ch));
};
var eof = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(Data_Identity.monadIdentity))(function (v) {
    return v.value0;
}))(function (v) {
    return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_List["null"](v))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("expected eof"));
});
module.exports = {
    isDigit: isDigit,
    isAsciiAlpha: isAsciiAlpha,
    nonNegativeInt: nonNegativeInt,
    lieAboutPos: lieAboutPos,
    "match'": match$prime,
    "when'": when$prime,
    eof: eof
};
