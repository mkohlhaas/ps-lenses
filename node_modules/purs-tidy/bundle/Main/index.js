// output/Data.Functor/foreign.js
var arrayMap = function(f) {
  return function(arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i = 0; i < l; i++) {
      result[i] = f(arr[i]);
    }
    return result;
  };
};

// output/Control.Semigroupoid/index.js
var semigroupoidFn = {
  compose: function(f) {
    return function(g) {
      return function(x) {
        return f(g(x));
      };
    };
  }
};
var compose = function(dict) {
  return dict.compose;
};
var composeFlipped = function(dictSemigroupoid) {
  var compose1 = compose(dictSemigroupoid);
  return function(f) {
    return function(g) {
      return compose1(g)(f);
    };
  };
};

// output/Control.Category/index.js
var identity = function(dict) {
  return dict.identity;
};
var categoryFn = {
  identity: function(x) {
    return x;
  },
  Semigroupoid0: function() {
    return semigroupoidFn;
  }
};

// output/Data.Boolean/index.js
var otherwise = true;

// output/Data.Function/index.js
var on = function(f) {
  return function(g) {
    return function(x) {
      return function(y) {
        return f(g(x))(g(y));
      };
    };
  };
};
var flip = function(f) {
  return function(b) {
    return function(a) {
      return f(a)(b);
    };
  };
};
var $$const = function(a) {
  return function(v) {
    return a;
  };
};
var applyFlipped = function(x) {
  return function(f) {
    return f(x);
  };
};
var apply = function(f) {
  return function(x) {
    return f(x);
  };
};

// output/Data.Unit/foreign.js
var unit = void 0;

// output/Type.Proxy/index.js
var $$Proxy = /* @__PURE__ */ function() {
  function $$Proxy2() {
  }
  ;
  $$Proxy2.value = new $$Proxy2();
  return $$Proxy2;
}();

// output/Data.Functor/index.js
var map = function(dict) {
  return dict.map;
};
var $$void = function(dictFunctor) {
  return map(dictFunctor)($$const(unit));
};
var voidLeft = function(dictFunctor) {
  var map113 = map(dictFunctor);
  return function(f) {
    return function(x) {
      return map113($$const(x))(f);
    };
  };
};
var voidRight = function(dictFunctor) {
  var map113 = map(dictFunctor);
  return function(x) {
    return map113($$const(x));
  };
};
var functorFn = {
  map: /* @__PURE__ */ compose(semigroupoidFn)
};
var functorArray = {
  map: arrayMap
};

// output/Data.Semigroup/foreign.js
var concatString = function(s1) {
  return function(s2) {
    return s1 + s2;
  };
};
var concatArray = function(xs) {
  return function(ys) {
    if (xs.length === 0)
      return ys;
    if (ys.length === 0)
      return xs;
    return xs.concat(ys);
  };
};

// output/Data.Symbol/index.js
var reflectSymbol = function(dict) {
  return dict.reflectSymbol;
};

// output/Data.Void/index.js
var absurd = function(a) {
  var spin = function($copy_v) {
    var $tco_result;
    function $tco_loop(v) {
      $copy_v = v;
      return;
    }
    ;
    while (true) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  return spin(a);
};

// output/Record.Unsafe/foreign.js
var unsafeGet = function(label) {
  return function(rec) {
    return rec[label];
  };
};
var unsafeSet = function(label) {
  return function(value) {
    return function(rec) {
      var copy3 = {};
      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy3[key] = rec[key];
        }
      }
      copy3[label] = value;
      return copy3;
    };
  };
};

// output/Data.Semigroup/index.js
var semigroupUnit = {
  append: function(v) {
    return function(v1) {
      return unit;
    };
  }
};
var semigroupString = {
  append: concatString
};
var semigroupRecordNil = {
  appendRecord: function(v) {
    return function(v1) {
      return function(v2) {
        return {};
      };
    };
  }
};
var semigroupArray = {
  append: concatArray
};
var appendRecord = function(dict) {
  return dict.appendRecord;
};
var semigroupRecord = function() {
  return function(dictSemigroupRecord) {
    return {
      append: appendRecord(dictSemigroupRecord)($$Proxy.value)
    };
  };
};
var append = function(dict) {
  return dict.append;
};
var semigroupFn = function(dictSemigroup) {
  var append19 = append(dictSemigroup);
  return {
    append: function(f) {
      return function(g) {
        return function(x) {
          return append19(f(x))(g(x));
        };
      };
    }
  };
};
var semigroupRecordCons = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return function() {
    return function(dictSemigroupRecord) {
      var appendRecord1 = appendRecord(dictSemigroupRecord);
      return function(dictSemigroup) {
        var append19 = append(dictSemigroup);
        return {
          appendRecord: function(v) {
            return function(ra) {
              return function(rb) {
                var tail4 = appendRecord1($$Proxy.value)(ra)(rb);
                var key = reflectSymbol2($$Proxy.value);
                var insert11 = unsafeSet(key);
                var get5 = unsafeGet(key);
                return insert11(append19(get5(ra))(get5(rb)))(tail4);
              };
            };
          }
        };
      };
    };
  };
};

// output/Control.Alt/index.js
var alt = function(dict) {
  return dict.alt;
};

// output/Control.Apply/foreign.js
var arrayApply = function(fs) {
  return function(xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l * k);
    var n = 0;
    for (var i = 0; i < l; i++) {
      var f = fs[i];
      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }
    return result;
  };
};

// output/Control.Apply/index.js
var identity2 = /* @__PURE__ */ identity(categoryFn);
var applyFn = {
  apply: function(f) {
    return function(g) {
      return function(x) {
        return f(x)(g(x));
      };
    };
  },
  Functor0: function() {
    return functorFn;
  }
};
var applyArray = {
  apply: arrayApply,
  Functor0: function() {
    return functorArray;
  }
};
var apply2 = function(dict) {
  return dict.apply;
};
var applyFirst = function(dictApply) {
  var apply12 = apply2(dictApply);
  var map31 = map(dictApply.Functor0());
  return function(a) {
    return function(b) {
      return apply12(map31($$const)(a))(b);
    };
  };
};
var applySecond = function(dictApply) {
  var apply12 = apply2(dictApply);
  var map31 = map(dictApply.Functor0());
  return function(a) {
    return function(b) {
      return apply12(map31($$const(identity2))(a))(b);
    };
  };
};
var lift2 = function(dictApply) {
  var apply12 = apply2(dictApply);
  var map31 = map(dictApply.Functor0());
  return function(f) {
    return function(a) {
      return function(b) {
        return apply12(map31(f)(a))(b);
      };
    };
  };
};

// output/Control.Applicative/index.js
var pure = function(dict) {
  return dict.pure;
};
var unless = function(dictApplicative) {
  var pure111 = pure(dictApplicative);
  return function(v) {
    return function(v1) {
      if (!v) {
        return v1;
      }
      ;
      if (v) {
        return pure111(unit);
      }
      ;
      throw new Error("Failed pattern match at Control.Applicative (line 68, column 1 - line 68, column 65): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};
var when = function(dictApplicative) {
  var pure111 = pure(dictApplicative);
  return function(v) {
    return function(v1) {
      if (v) {
        return v1;
      }
      ;
      if (!v) {
        return pure111(unit);
      }
      ;
      throw new Error("Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};
var liftA1 = function(dictApplicative) {
  var apply8 = apply2(dictApplicative.Apply0());
  var pure111 = pure(dictApplicative);
  return function(f) {
    return function(a) {
      return apply8(pure111(f))(a);
    };
  };
};
var applicativeArray = {
  pure: function(x) {
    return [x];
  },
  Apply0: function() {
    return applyArray;
  }
};

// output/Control.Plus/index.js
var empty = function(dict) {
  return dict.empty;
};

// output/Control.Alternative/index.js
var guard = function(dictAlternative) {
  var pure20 = pure(dictAlternative.Applicative0());
  var empty7 = empty(dictAlternative.Plus1());
  return function(v) {
    if (v) {
      return pure20(unit);
    }
    ;
    if (!v) {
      return empty7;
    }
    ;
    throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [v.constructor.name]);
  };
};

// output/Control.Bind/foreign.js
var arrayBind = function(arr) {
  return function(f) {
    var result = [];
    for (var i = 0, l = arr.length; i < l; i++) {
      Array.prototype.push.apply(result, f(arr[i]));
    }
    return result;
  };
};

// output/Control.Bind/index.js
var identity3 = /* @__PURE__ */ identity(categoryFn);
var discard = function(dict) {
  return dict.discard;
};
var bindFn = {
  bind: function(m) {
    return function(f) {
      return function(x) {
        return f(m(x))(x);
      };
    };
  },
  Apply0: function() {
    return applyFn;
  }
};
var bindArray = {
  bind: arrayBind,
  Apply0: function() {
    return applyArray;
  }
};
var bind = function(dict) {
  return dict.bind;
};
var bindFlipped = function(dictBind) {
  return flip(bind(dictBind));
};
var composeKleisliFlipped = function(dictBind) {
  var bindFlipped13 = bindFlipped(dictBind);
  return function(f) {
    return function(g) {
      return function(a) {
        return bindFlipped13(f)(g(a));
      };
    };
  };
};
var discardUnit = {
  discard: function(dictBind) {
    return bind(dictBind);
  }
};
var join = function(dictBind) {
  var bind17 = bind(dictBind);
  return function(m) {
    return bind17(m)(identity3);
  };
};

// output/Data.Array/foreign.js
var range = function(start) {
  return function(end) {
    var step3 = start > end ? -1 : 1;
    var result = new Array(step3 * (end - start) + 1);
    var i = start, n = 0;
    while (i !== end) {
      result[n++] = i;
      i += step3;
    }
    result[n] = i;
    return result;
  };
};
var replicateFill = function(count) {
  return function(value) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value);
  };
};
var replicatePolyfill = function(count) {
  return function(value) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count; i++) {
      result[n++] = value;
    }
    return result;
  };
};
var replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
var fromFoldableImpl = function() {
  function Cons3(head5, tail4) {
    this.head = head5;
    this.tail = tail4;
  }
  var emptyList = {};
  function curryCons(head5) {
    return function(tail4) {
      return new Cons3(head5, tail4);
    };
  }
  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;
    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }
    return result;
  }
  return function(foldr9) {
    return function(xs) {
      return listToArray(foldr9(curryCons)(emptyList)(xs));
    };
  };
}();
var length = function(xs) {
  return xs.length;
};
var unconsImpl = function(empty7) {
  return function(next2) {
    return function(xs) {
      return xs.length === 0 ? empty7({}) : next2(xs[0])(xs.slice(1));
    };
  };
};
var indexImpl = function(just) {
  return function(nothing) {
    return function(xs) {
      return function(i) {
        return i < 0 || i >= xs.length ? nothing : just(xs[i]);
      };
    };
  };
};
var findMapImpl = function(nothing) {
  return function(isJust2) {
    return function(f) {
      return function(xs) {
        for (var i = 0; i < xs.length; i++) {
          var result = f(xs[i]);
          if (isJust2(result))
            return result;
        }
        return nothing;
      };
    };
  };
};
var findIndexImpl = function(just) {
  return function(nothing) {
    return function(f) {
      return function(xs) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (f(xs[i]))
            return just(i);
        }
        return nothing;
      };
    };
  };
};
var reverse = function(l) {
  return l.slice().reverse();
};
var filter = function(f) {
  return function(xs) {
    return xs.filter(f);
  };
};
var partition = function(f) {
  return function(xs) {
    var yes = [];
    var no = [];
    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x))
        yes.push(x);
      else
        no.push(x);
    }
    return { yes, no };
  };
};
var sortByImpl = function() {
  function mergeFromTo(compare10, fromOrdering, xs1, xs2, from2, to) {
    var mid;
    var i;
    var j;
    var k;
    var x;
    var y;
    var c;
    mid = from2 + (to - from2 >> 1);
    if (mid - from2 > 1)
      mergeFromTo(compare10, fromOrdering, xs2, xs1, from2, mid);
    if (to - mid > 1)
      mergeFromTo(compare10, fromOrdering, xs2, xs1, mid, to);
    i = from2;
    j = mid;
    k = from2;
    while (i < mid && j < to) {
      x = xs2[i];
      y = xs2[j];
      c = fromOrdering(compare10(x)(y));
      if (c > 0) {
        xs1[k++] = y;
        ++j;
      } else {
        xs1[k++] = x;
        ++i;
      }
    }
    while (i < mid) {
      xs1[k++] = xs2[i++];
    }
    while (j < to) {
      xs1[k++] = xs2[j++];
    }
  }
  return function(compare10) {
    return function(fromOrdering) {
      return function(xs) {
        var out;
        if (xs.length < 2)
          return xs;
        out = xs.slice(0);
        mergeFromTo(compare10, fromOrdering, out, xs.slice(0), 0, xs.length);
        return out;
      };
    };
  };
}();
var slice = function(s) {
  return function(e) {
    return function(l) {
      return l.slice(s, e);
    };
  };
};
var zipWith = function(f) {
  return function(xs) {
    return function(ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }
      return result;
    };
  };
};
var all = function(p) {
  return function(xs) {
    var len = xs.length;
    for (var i = 0; i < len; i++) {
      if (!p(xs[i]))
        return false;
    }
    return true;
  };
};
var unsafeIndexImpl = function(xs) {
  return function(n) {
    return xs[n];
  };
};

// output/Control.Lazy/index.js
var defer = function(dict) {
  return dict.defer;
};

// output/Control.Monad/index.js
var ap = function(dictMonad) {
  var bind17 = bind(dictMonad.Bind1());
  var pure20 = pure(dictMonad.Applicative0());
  return function(f) {
    return function(a) {
      return bind17(f)(function(f$prime) {
        return bind17(a)(function(a$prime) {
          return pure20(f$prime(a$prime));
        });
      });
    };
  };
};

// output/Data.Bounded/foreign.js
var topInt = 2147483647;
var bottomInt = -2147483648;
var topChar = String.fromCharCode(65535);
var bottomChar = String.fromCharCode(0);
var topNumber = Number.POSITIVE_INFINITY;
var bottomNumber = Number.NEGATIVE_INFINITY;

// output/Data.Ord/foreign.js
var unsafeCompareImpl = function(lt) {
  return function(eq11) {
    return function(gt) {
      return function(x) {
        return function(y) {
          return x < y ? lt : x === y ? eq11 : gt;
        };
      };
    };
  };
};
var ordBooleanImpl = unsafeCompareImpl;
var ordIntImpl = unsafeCompareImpl;
var ordNumberImpl = unsafeCompareImpl;
var ordStringImpl = unsafeCompareImpl;
var ordCharImpl = unsafeCompareImpl;
var ordArrayImpl = function(f) {
  return function(xs) {
    return function(ys) {
      var i = 0;
      var xlen = xs.length;
      var ylen = ys.length;
      while (i < xlen && i < ylen) {
        var x = xs[i];
        var y = ys[i];
        var o = f(x)(y);
        if (o !== 0) {
          return o;
        }
        i++;
      }
      if (xlen === ylen) {
        return 0;
      } else if (xlen > ylen) {
        return -1;
      } else {
        return 1;
      }
    };
  };
};

// output/Data.Eq/foreign.js
var refEq = function(r1) {
  return function(r2) {
    return r1 === r2;
  };
};
var eqBooleanImpl = refEq;
var eqIntImpl = refEq;
var eqNumberImpl = refEq;
var eqCharImpl = refEq;
var eqStringImpl = refEq;
var eqArrayImpl = function(f) {
  return function(xs) {
    return function(ys) {
      if (xs.length !== ys.length)
        return false;
      for (var i = 0; i < xs.length; i++) {
        if (!f(xs[i])(ys[i]))
          return false;
      }
      return true;
    };
  };
};

// output/Data.Eq/index.js
var eqString = {
  eq: eqStringImpl
};
var eqNumber = {
  eq: eqNumberImpl
};
var eqInt = {
  eq: eqIntImpl
};
var eqChar = {
  eq: eqCharImpl
};
var eqBoolean = {
  eq: eqBooleanImpl
};
var eq1 = function(dict) {
  return dict.eq1;
};
var eq = function(dict) {
  return dict.eq;
};
var eq2 = /* @__PURE__ */ eq(eqBoolean);
var eqArray = function(dictEq) {
  return {
    eq: eqArrayImpl(eq(dictEq))
  };
};
var notEq = function(dictEq) {
  var eq33 = eq(dictEq);
  return function(x) {
    return function(y) {
      return eq2(eq33(x)(y))(false);
    };
  };
};

// output/Data.Ordering/index.js
var LT = /* @__PURE__ */ function() {
  function LT2() {
  }
  ;
  LT2.value = new LT2();
  return LT2;
}();
var GT = /* @__PURE__ */ function() {
  function GT2() {
  }
  ;
  GT2.value = new GT2();
  return GT2;
}();
var EQ = /* @__PURE__ */ function() {
  function EQ2() {
  }
  ;
  EQ2.value = new EQ2();
  return EQ2;
}();
var eqOrdering = {
  eq: function(v) {
    return function(v1) {
      if (v instanceof LT && v1 instanceof LT) {
        return true;
      }
      ;
      if (v instanceof GT && v1 instanceof GT) {
        return true;
      }
      ;
      if (v instanceof EQ && v1 instanceof EQ) {
        return true;
      }
      ;
      return false;
    };
  }
};

// output/Data.Ring/foreign.js
var intSub = function(x) {
  return function(y) {
    return x - y | 0;
  };
};

// output/Data.Semiring/foreign.js
var intAdd = function(x) {
  return function(y) {
    return x + y | 0;
  };
};
var intMul = function(x) {
  return function(y) {
    return x * y | 0;
  };
};

// output/Data.Semiring/index.js
var zero = function(dict) {
  return dict.zero;
};
var semiringInt = {
  add: intAdd,
  zero: 0,
  mul: intMul,
  one: 1
};
var add = function(dict) {
  return dict.add;
};

// output/Data.Ring/index.js
var sub = function(dict) {
  return dict.sub;
};
var ringInt = {
  sub: intSub,
  Semiring0: function() {
    return semiringInt;
  }
};
var negate = function(dictRing) {
  var sub1 = sub(dictRing);
  var zero2 = zero(dictRing.Semiring0());
  return function(a) {
    return sub1(zero2)(a);
  };
};

// output/Data.Ord/index.js
var ordString = /* @__PURE__ */ function() {
  return {
    compare: ordStringImpl(LT.value)(EQ.value)(GT.value),
    Eq0: function() {
      return eqString;
    }
  };
}();
var ordNumber = /* @__PURE__ */ function() {
  return {
    compare: ordNumberImpl(LT.value)(EQ.value)(GT.value),
    Eq0: function() {
      return eqNumber;
    }
  };
}();
var ordInt = /* @__PURE__ */ function() {
  return {
    compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
    Eq0: function() {
      return eqInt;
    }
  };
}();
var ordChar = /* @__PURE__ */ function() {
  return {
    compare: ordCharImpl(LT.value)(EQ.value)(GT.value),
    Eq0: function() {
      return eqChar;
    }
  };
}();
var ordBoolean = /* @__PURE__ */ function() {
  return {
    compare: ordBooleanImpl(LT.value)(EQ.value)(GT.value),
    Eq0: function() {
      return eqBoolean;
    }
  };
}();
var compare1 = function(dict) {
  return dict.compare1;
};
var compare = function(dict) {
  return dict.compare;
};
var compare2 = /* @__PURE__ */ compare(ordInt);
var comparing = function(dictOrd) {
  var compare33 = compare(dictOrd);
  return function(f) {
    return function(x) {
      return function(y) {
        return compare33(f(x))(f(y));
      };
    };
  };
};
var greaterThanOrEq = function(dictOrd) {
  var compare33 = compare(dictOrd);
  return function(a1) {
    return function(a2) {
      var v = compare33(a1)(a2);
      if (v instanceof LT) {
        return false;
      }
      ;
      return true;
    };
  };
};
var max = function(dictOrd) {
  var compare33 = compare(dictOrd);
  return function(x) {
    return function(y) {
      var v = compare33(x)(y);
      if (v instanceof LT) {
        return y;
      }
      ;
      if (v instanceof EQ) {
        return x;
      }
      ;
      if (v instanceof GT) {
        return x;
      }
      ;
      throw new Error("Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12): " + [v.constructor.name]);
    };
  };
};
var min = function(dictOrd) {
  var compare33 = compare(dictOrd);
  return function(x) {
    return function(y) {
      var v = compare33(x)(y);
      if (v instanceof LT) {
        return x;
      }
      ;
      if (v instanceof EQ) {
        return x;
      }
      ;
      if (v instanceof GT) {
        return y;
      }
      ;
      throw new Error("Failed pattern match at Data.Ord (line 172, column 3 - line 175, column 12): " + [v.constructor.name]);
    };
  };
};
var ordArray = function(dictOrd) {
  var compare33 = compare(dictOrd);
  var eqArray2 = eqArray(dictOrd.Eq0());
  return {
    compare: function() {
      var toDelta = function(x) {
        return function(y) {
          var v = compare33(x)(y);
          if (v instanceof EQ) {
            return 0;
          }
          ;
          if (v instanceof LT) {
            return 1;
          }
          ;
          if (v instanceof GT) {
            return -1 | 0;
          }
          ;
          throw new Error("Failed pattern match at Data.Ord (line 79, column 7 - line 82, column 17): " + [v.constructor.name]);
        };
      };
      return function(xs) {
        return function(ys) {
          return compare2(0)(ordArrayImpl(toDelta)(xs)(ys));
        };
      };
    }(),
    Eq0: function() {
      return eqArray2;
    }
  };
};
var clamp = function(dictOrd) {
  var min1 = min(dictOrd);
  var max13 = max(dictOrd);
  return function(low) {
    return function(hi) {
      return function(x) {
        return min1(hi)(max13(low)(x));
      };
    };
  };
};
var abs = function(dictOrd) {
  var greaterThanOrEq1 = greaterThanOrEq(dictOrd);
  return function(dictRing) {
    var zero2 = zero(dictRing.Semiring0());
    var negate1 = negate(dictRing);
    return function(x) {
      var $99 = greaterThanOrEq1(x)(zero2);
      if ($99) {
        return x;
      }
      ;
      return negate1(x);
    };
  };
};

// output/Data.Bounded/index.js
var top = function(dict) {
  return dict.top;
};
var boundedInt = {
  top: topInt,
  bottom: bottomInt,
  Ord0: function() {
    return ordInt;
  }
};
var boundedChar = {
  top: topChar,
  bottom: bottomChar,
  Ord0: function() {
    return ordChar;
  }
};
var bottom = function(dict) {
  return dict.bottom;
};

// output/Data.Show/foreign.js
var showIntImpl = function(n) {
  return n.toString();
};

// output/Data.Show/index.js
var showInt = {
  show: showIntImpl
};
var show = function(dict) {
  return dict.show;
};

// output/Data.Maybe/index.js
var identity4 = /* @__PURE__ */ identity(categoryFn);
var Nothing = /* @__PURE__ */ function() {
  function Nothing2() {
  }
  ;
  Nothing2.value = new Nothing2();
  return Nothing2;
}();
var Just = /* @__PURE__ */ function() {
  function Just2(value0) {
    this.value0 = value0;
  }
  ;
  Just2.create = function(value0) {
    return new Just2(value0);
  };
  return Just2;
}();
var semigroupMaybe = function(dictSemigroup) {
  var append19 = append(dictSemigroup);
  return {
    append: function(v) {
      return function(v1) {
        if (v instanceof Nothing) {
          return v1;
        }
        ;
        if (v1 instanceof Nothing) {
          return v;
        }
        ;
        if (v instanceof Just && v1 instanceof Just) {
          return new Just(append19(v.value0)(v1.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 182, column 1 - line 185, column 43): " + [v.constructor.name, v1.constructor.name]);
      };
    }
  };
};
var monoidMaybe = function(dictSemigroup) {
  var semigroupMaybe1 = semigroupMaybe(dictSemigroup);
  return {
    mempty: Nothing.value,
    Semigroup0: function() {
      return semigroupMaybe1;
    }
  };
};
var maybe = function(v) {
  return function(v1) {
    return function(v2) {
      if (v2 instanceof Nothing) {
        return v;
      }
      ;
      if (v2 instanceof Just) {
        return v1(v2.value0);
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};
var isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
var isJust = /* @__PURE__ */ maybe(false)(/* @__PURE__ */ $$const(true));
var functorMaybe = {
  map: function(v) {
    return function(v1) {
      if (v1 instanceof Just) {
        return new Just(v(v1.value0));
      }
      ;
      return Nothing.value;
    };
  }
};
var map2 = /* @__PURE__ */ map(functorMaybe);
var fromMaybe = function(a) {
  return maybe(a)(identity4);
};
var fromJust = function() {
  return function(v) {
    if (v instanceof Just) {
      return v.value0;
    }
    ;
    throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v.constructor.name]);
  };
};
var eqMaybe = function(dictEq) {
  var eq11 = eq(dictEq);
  return {
    eq: function(x) {
      return function(y) {
        if (x instanceof Nothing && y instanceof Nothing) {
          return true;
        }
        ;
        if (x instanceof Just && y instanceof Just) {
          return eq11(x.value0)(y.value0);
        }
        ;
        return false;
      };
    }
  };
};
var ordMaybe = function(dictOrd) {
  var compare10 = compare(dictOrd);
  var eqMaybe1 = eqMaybe(dictOrd.Eq0());
  return {
    compare: function(x) {
      return function(y) {
        if (x instanceof Nothing && y instanceof Nothing) {
          return EQ.value;
        }
        ;
        if (x instanceof Nothing) {
          return LT.value;
        }
        ;
        if (y instanceof Nothing) {
          return GT.value;
        }
        ;
        if (x instanceof Just && y instanceof Just) {
          return compare10(x.value0)(y.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqMaybe1;
    }
  };
};
var applyMaybe = {
  apply: function(v) {
    return function(v1) {
      if (v instanceof Just) {
        return map2(v.value0)(v1);
      }
      ;
      if (v instanceof Nothing) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Functor0: function() {
    return functorMaybe;
  }
};
var bindMaybe = {
  bind: function(v) {
    return function(v1) {
      if (v instanceof Just) {
        return v1(v.value0);
      }
      ;
      if (v instanceof Nothing) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Apply0: function() {
    return applyMaybe;
  }
};
var applicativeMaybe = /* @__PURE__ */ function() {
  return {
    pure: Just.create,
    Apply0: function() {
      return applyMaybe;
    }
  };
}();
var altMaybe = {
  alt: function(v) {
    return function(v1) {
      if (v instanceof Nothing) {
        return v1;
      }
      ;
      return v;
    };
  },
  Functor0: function() {
    return functorMaybe;
  }
};
var plusMaybe = /* @__PURE__ */ function() {
  return {
    empty: Nothing.value,
    Alt0: function() {
      return altMaybe;
    }
  };
}();
var alternativeMaybe = {
  Applicative0: function() {
    return applicativeMaybe;
  },
  Plus1: function() {
    return plusMaybe;
  }
};

// output/Data.Either/index.js
var Left = /* @__PURE__ */ function() {
  function Left2(value0) {
    this.value0 = value0;
  }
  ;
  Left2.create = function(value0) {
    return new Left2(value0);
  };
  return Left2;
}();
var Right = /* @__PURE__ */ function() {
  function Right2(value0) {
    this.value0 = value0;
  }
  ;
  Right2.create = function(value0) {
    return new Right2(value0);
  };
  return Right2;
}();
var note = function(a) {
  return maybe(new Left(a))(Right.create);
};
var functorEither = {
  map: function(f) {
    return function(m) {
      if (m instanceof Left) {
        return new Left(m.value0);
      }
      ;
      if (m instanceof Right) {
        return new Right(f(m.value0));
      }
      ;
      throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m.constructor.name]);
    };
  }
};
var map3 = /* @__PURE__ */ map(functorEither);
var fromRight$prime = function(v) {
  return function(v1) {
    if (v1 instanceof Right) {
      return v1.value0;
    }
    ;
    return v(unit);
  };
};
var either = function(v) {
  return function(v1) {
    return function(v2) {
      if (v2 instanceof Left) {
        return v(v2.value0);
      }
      ;
      if (v2 instanceof Right) {
        return v1(v2.value0);
      }
      ;
      throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};
var isLeft = /* @__PURE__ */ either(/* @__PURE__ */ $$const(true))(/* @__PURE__ */ $$const(false));
var applyEither = {
  apply: function(v) {
    return function(v1) {
      if (v instanceof Left) {
        return new Left(v.value0);
      }
      ;
      if (v instanceof Right) {
        return map3(v.value0)(v1);
      }
      ;
      throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Functor0: function() {
    return functorEither;
  }
};
var bindEither = {
  bind: /* @__PURE__ */ either(function(e) {
    return function(v) {
      return new Left(e);
    };
  })(function(a) {
    return function(f) {
      return f(a);
    };
  }),
  Apply0: function() {
    return applyEither;
  }
};
var applicativeEither = /* @__PURE__ */ function() {
  return {
    pure: Right.create,
    Apply0: function() {
      return applyEither;
    }
  };
}();
var monadEither = {
  Applicative0: function() {
    return applicativeEither;
  },
  Bind1: function() {
    return bindEither;
  }
};

// output/Data.EuclideanRing/foreign.js
var intDegree = function(x) {
  return Math.min(Math.abs(x), 2147483647);
};
var intDiv = function(x) {
  return function(y) {
    if (y === 0)
      return 0;
    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
  };
};
var intMod = function(x) {
  return function(y) {
    if (y === 0)
      return 0;
    var yy = Math.abs(y);
    return (x % yy + yy) % yy;
  };
};

// output/Data.CommutativeRing/index.js
var commutativeRingInt = {
  Ring0: function() {
    return ringInt;
  }
};

// output/Data.EuclideanRing/index.js
var mod = function(dict) {
  return dict.mod;
};
var euclideanRingInt = {
  degree: intDegree,
  div: intDiv,
  mod: intMod,
  CommutativeRing0: function() {
    return commutativeRingInt;
  }
};
var div = function(dict) {
  return dict.div;
};

// output/Data.Monoid/index.js
var semigroupRecord2 = /* @__PURE__ */ semigroupRecord();
var mod2 = /* @__PURE__ */ mod(euclideanRingInt);
var div2 = /* @__PURE__ */ div(euclideanRingInt);
var monoidUnit = {
  mempty: unit,
  Semigroup0: function() {
    return semigroupUnit;
  }
};
var monoidString = {
  mempty: "",
  Semigroup0: function() {
    return semigroupString;
  }
};
var monoidRecordNil = {
  memptyRecord: function(v) {
    return {};
  },
  SemigroupRecord0: function() {
    return semigroupRecordNil;
  }
};
var monoidArray = {
  mempty: [],
  Semigroup0: function() {
    return semigroupArray;
  }
};
var memptyRecord = function(dict) {
  return dict.memptyRecord;
};
var monoidRecord = function() {
  return function(dictMonoidRecord) {
    var semigroupRecord1 = semigroupRecord2(dictMonoidRecord.SemigroupRecord0());
    return {
      mempty: memptyRecord(dictMonoidRecord)($$Proxy.value),
      Semigroup0: function() {
        return semigroupRecord1;
      }
    };
  };
};
var mempty = function(dict) {
  return dict.mempty;
};
var monoidFn = function(dictMonoid) {
  var mempty16 = mempty(dictMonoid);
  var semigroupFn2 = semigroupFn(dictMonoid.Semigroup0());
  return {
    mempty: function(v) {
      return mempty16;
    },
    Semigroup0: function() {
      return semigroupFn2;
    }
  };
};
var monoidRecordCons = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  var semigroupRecordCons2 = semigroupRecordCons(dictIsSymbol)();
  return function(dictMonoid) {
    var mempty16 = mempty(dictMonoid);
    var Semigroup0 = dictMonoid.Semigroup0();
    return function() {
      return function(dictMonoidRecord) {
        var memptyRecord1 = memptyRecord(dictMonoidRecord);
        var semigroupRecordCons1 = semigroupRecordCons2(dictMonoidRecord.SemigroupRecord0())(Semigroup0);
        return {
          memptyRecord: function(v) {
            var tail4 = memptyRecord1($$Proxy.value);
            var key = reflectSymbol2($$Proxy.value);
            var insert11 = unsafeSet(key);
            return insert11(mempty16)(tail4);
          },
          SemigroupRecord0: function() {
            return semigroupRecordCons1;
          }
        };
      };
    };
  };
};
var power = function(dictMonoid) {
  var mempty16 = mempty(dictMonoid);
  var append9 = append(dictMonoid.Semigroup0());
  return function(x) {
    var go = function(p) {
      if (p <= 0) {
        return mempty16;
      }
      ;
      if (p === 1) {
        return x;
      }
      ;
      if (mod2(p)(2) === 0) {
        var x$prime = go(div2(p)(2));
        return append9(x$prime)(x$prime);
      }
      ;
      if (otherwise) {
        var x$prime = go(div2(p)(2));
        return append9(x$prime)(append9(x$prime)(x));
      }
      ;
      throw new Error("Failed pattern match at Data.Monoid (line 88, column 3 - line 88, column 17): " + [p.constructor.name]);
    };
    return go;
  };
};
var guard2 = function(dictMonoid) {
  var mempty16 = mempty(dictMonoid);
  return function(v) {
    return function(v1) {
      if (v) {
        return v1;
      }
      ;
      if (!v) {
        return mempty16;
      }
      ;
      throw new Error("Failed pattern match at Data.Monoid (line 96, column 1 - line 96, column 49): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

// output/Effect/foreign.js
var pureE = function(a) {
  return function() {
    return a;
  };
};
var bindE = function(a) {
  return function(f) {
    return function() {
      return f(a())();
    };
  };
};

// output/Effect/index.js
var $runtime_lazy = function(name2, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var monadEffect = {
  Applicative0: function() {
    return applicativeEffect;
  },
  Bind1: function() {
    return bindEffect;
  }
};
var bindEffect = {
  bind: bindE,
  Apply0: function() {
    return $lazy_applyEffect(0);
  }
};
var applicativeEffect = {
  pure: pureE,
  Apply0: function() {
    return $lazy_applyEffect(0);
  }
};
var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
  return {
    map: liftA1(applicativeEffect)
  };
});
var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
  return {
    apply: ap(monadEffect),
    Functor0: function() {
      return $lazy_functorEffect(0);
    }
  };
});
var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);
var lift22 = /* @__PURE__ */ lift2(applyEffect);
var semigroupEffect = function(dictSemigroup) {
  return {
    append: lift22(append(dictSemigroup))
  };
};
var monoidEffect = function(dictMonoid) {
  var semigroupEffect1 = semigroupEffect(dictMonoid.Semigroup0());
  return {
    mempty: pureE(mempty(dictMonoid)),
    Semigroup0: function() {
      return semigroupEffect1;
    }
  };
};

// output/Effect.Ref/foreign.js
var _new = function(val) {
  return function() {
    return { value: val };
  };
};
var read = function(ref) {
  return function() {
    return ref.value;
  };
};
var modifyImpl = function(f) {
  return function(ref) {
    return function() {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};

// output/Effect.Ref/index.js
var $$void2 = /* @__PURE__ */ $$void(functorEffect);
var $$new = _new;
var modify$prime = modifyImpl;
var modify = function(f) {
  return modify$prime(function(s) {
    var s$prime = f(s);
    return {
      state: s$prime,
      value: s$prime
    };
  });
};
var modify_ = function(f) {
  return function(s) {
    return $$void2(modify(f)(s));
  };
};

// output/Control.Monad.ST.Internal/foreign.js
var map_ = function(f) {
  return function(a) {
    return function() {
      return f(a());
    };
  };
};
var pure_ = function(a) {
  return function() {
    return a;
  };
};
var bind_ = function(a) {
  return function(f) {
    return function() {
      return f(a())();
    };
  };
};
function forST(lo) {
  return function(hi) {
    return function(f) {
      return function() {
        for (var i = lo; i < hi; i++) {
          f(i)();
        }
      };
    };
  };
}
var foreach = function(as) {
  return function(f) {
    return function() {
      for (var i = 0, l = as.length; i < l; i++) {
        f(as[i])();
      }
    };
  };
};
function newSTRef(val) {
  return function() {
    return { value: val };
  };
}
var read2 = function(ref) {
  return function() {
    return ref.value;
  };
};
var modifyImpl2 = function(f) {
  return function(ref) {
    return function() {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};
var write2 = function(a) {
  return function(ref) {
    return function() {
      return ref.value = a;
    };
  };
};

// output/Control.Monad.ST.Internal/index.js
var $runtime_lazy2 = function(name2, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var modify$prime2 = modifyImpl2;
var modify2 = function(f) {
  return modify$prime2(function(s) {
    var s$prime = f(s);
    return {
      state: s$prime,
      value: s$prime
    };
  });
};
var functorST = {
  map: map_
};
var monadST = {
  Applicative0: function() {
    return applicativeST;
  },
  Bind1: function() {
    return bindST;
  }
};
var bindST = {
  bind: bind_,
  Apply0: function() {
    return $lazy_applyST(0);
  }
};
var applicativeST = {
  pure: pure_,
  Apply0: function() {
    return $lazy_applyST(0);
  }
};
var $lazy_applyST = /* @__PURE__ */ $runtime_lazy2("applyST", "Control.Monad.ST.Internal", function() {
  return {
    apply: ap(monadST),
    Functor0: function() {
      return functorST;
    }
  };
});

// output/Data.Array.ST/foreign.js
function newSTArray() {
  return [];
}
var pushAll = function(as) {
  return function(xs) {
    return function() {
      return xs.push.apply(xs, as);
    };
  };
};
var unsafeFreeze = function(xs) {
  return function() {
    return xs;
  };
};
var unsafeThaw = function(xs) {
  return function() {
    return xs;
  };
};
function copyImpl(xs) {
  return function() {
    return xs.slice();
  };
}
var thaw = copyImpl;
var sortByImpl2 = function() {
  function mergeFromTo(compare10, fromOrdering, xs1, xs2, from2, to) {
    var mid;
    var i;
    var j;
    var k;
    var x;
    var y;
    var c;
    mid = from2 + (to - from2 >> 1);
    if (mid - from2 > 1)
      mergeFromTo(compare10, fromOrdering, xs2, xs1, from2, mid);
    if (to - mid > 1)
      mergeFromTo(compare10, fromOrdering, xs2, xs1, mid, to);
    i = from2;
    j = mid;
    k = from2;
    while (i < mid && j < to) {
      x = xs2[i];
      y = xs2[j];
      c = fromOrdering(compare10(x)(y));
      if (c > 0) {
        xs1[k++] = y;
        ++j;
      } else {
        xs1[k++] = x;
        ++i;
      }
    }
    while (i < mid) {
      xs1[k++] = xs2[i++];
    }
    while (j < to) {
      xs1[k++] = xs2[j++];
    }
  }
  return function(compare10) {
    return function(fromOrdering) {
      return function(xs) {
        return function() {
          if (xs.length < 2)
            return xs;
          mergeFromTo(compare10, fromOrdering, xs, xs.slice(0), 0, xs.length);
          return xs;
        };
      };
    };
  };
}();

// output/Data.Array.ST/index.js
var bind2 = /* @__PURE__ */ bind(bindST);
var withArray = function(f) {
  return function(xs) {
    return function __do() {
      var result = thaw(xs)();
      f(result)();
      return unsafeFreeze(result)();
    };
  };
};
var run2 = function(st) {
  return bind2(st)(unsafeFreeze)();
};
var push = function(a) {
  return pushAll([a]);
};

// output/Data.HeytingAlgebra/foreign.js
var boolConj = function(b1) {
  return function(b2) {
    return b1 && b2;
  };
};
var boolDisj = function(b1) {
  return function(b2) {
    return b1 || b2;
  };
};
var boolNot = function(b) {
  return !b;
};

// output/Data.HeytingAlgebra/index.js
var tt = function(dict) {
  return dict.tt;
};
var not = function(dict) {
  return dict.not;
};
var implies = function(dict) {
  return dict.implies;
};
var ff = function(dict) {
  return dict.ff;
};
var disj = function(dict) {
  return dict.disj;
};
var heytingAlgebraBoolean = {
  ff: false,
  tt: true,
  implies: function(a) {
    return function(b) {
      return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
    };
  },
  conj: boolConj,
  disj: boolDisj,
  not: boolNot
};
var conj = function(dict) {
  return dict.conj;
};
var heytingAlgebraFunction = function(dictHeytingAlgebra) {
  var ff1 = ff(dictHeytingAlgebra);
  var tt1 = tt(dictHeytingAlgebra);
  var implies1 = implies(dictHeytingAlgebra);
  var conj1 = conj(dictHeytingAlgebra);
  var disj1 = disj(dictHeytingAlgebra);
  var not1 = not(dictHeytingAlgebra);
  return {
    ff: function(v) {
      return ff1;
    },
    tt: function(v) {
      return tt1;
    },
    implies: function(f) {
      return function(g) {
        return function(a) {
          return implies1(f(a))(g(a));
        };
      };
    },
    conj: function(f) {
      return function(g) {
        return function(a) {
          return conj1(f(a))(g(a));
        };
      };
    },
    disj: function(f) {
      return function(g) {
        return function(a) {
          return disj1(f(a))(g(a));
        };
      };
    },
    not: function(f) {
      return function(a) {
        return not1(f(a));
      };
    }
  };
};

// output/Data.Array.ST.Iterator/index.js
var map4 = /* @__PURE__ */ map(functorST);
var not2 = /* @__PURE__ */ not(heytingAlgebraBoolean);
var $$void3 = /* @__PURE__ */ $$void(functorST);
var Iterator = /* @__PURE__ */ function() {
  function Iterator2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Iterator2.create = function(value0) {
    return function(value1) {
      return new Iterator2(value0, value1);
    };
  };
  return Iterator2;
}();
var peek = function(v) {
  return function __do() {
    var i = read2(v.value1)();
    return v.value0(i);
  };
};
var next = function(v) {
  return function __do() {
    var i = read2(v.value1)();
    modify2(function(v1) {
      return v1 + 1 | 0;
    })(v.value1)();
    return v.value0(i);
  };
};
var pushWhile = function(p) {
  return function(iter) {
    return function(array) {
      return function __do() {
        var $$break3 = newSTRef(false)();
        while (map4(not2)(read2($$break3))()) {
          (function __do2() {
            var mx = peek(iter)();
            if (mx instanceof Just && p(mx.value0)) {
              push(mx.value0)(array)();
              return $$void3(next(iter))();
            }
            ;
            return $$void3(write2(true)($$break3))();
          })();
        }
        ;
        return {};
      };
    };
  };
};
var iterator = function(f) {
  return map4(Iterator.create(f))(newSTRef(0));
};
var iterate = function(iter) {
  return function(f) {
    return function __do() {
      var $$break3 = newSTRef(false)();
      while (map4(not2)(read2($$break3))()) {
        (function __do2() {
          var mx = next(iter)();
          if (mx instanceof Just) {
            return f(mx.value0)();
          }
          ;
          if (mx instanceof Nothing) {
            return $$void3(write2(true)($$break3))();
          }
          ;
          throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [mx.constructor.name]);
        })();
      }
      ;
      return {};
    };
  };
};

// output/Data.Foldable/foreign.js
var foldrArray = function(f) {
  return function(init3) {
    return function(xs) {
      var acc = init3;
      var len = xs.length;
      for (var i = len - 1; i >= 0; i--) {
        acc = f(xs[i])(acc);
      }
      return acc;
    };
  };
};
var foldlArray = function(f) {
  return function(init3) {
    return function(xs) {
      var acc = init3;
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
};

// output/Data.Tuple/index.js
var Tuple = /* @__PURE__ */ function() {
  function Tuple2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Tuple2.create = function(value0) {
    return function(value1) {
      return new Tuple2(value0, value1);
    };
  };
  return Tuple2;
}();
var uncurry = function(f) {
  return function(v) {
    return f(v.value0)(v.value1);
  };
};
var snd = function(v) {
  return v.value1;
};
var fst = function(v) {
  return v.value0;
};
var eqTuple = function(dictEq) {
  var eq11 = eq(dictEq);
  return function(dictEq1) {
    var eq18 = eq(dictEq1);
    return {
      eq: function(x) {
        return function(y) {
          return eq11(x.value0)(y.value0) && eq18(x.value1)(y.value1);
        };
      }
    };
  };
};
var ordTuple = function(dictOrd) {
  var compare10 = compare(dictOrd);
  var eqTuple1 = eqTuple(dictOrd.Eq0());
  return function(dictOrd1) {
    var compare15 = compare(dictOrd1);
    var eqTuple2 = eqTuple1(dictOrd1.Eq0());
    return {
      compare: function(x) {
        return function(y) {
          var v = compare10(x.value0)(y.value0);
          if (v instanceof LT) {
            return LT.value;
          }
          ;
          if (v instanceof GT) {
            return GT.value;
          }
          ;
          return compare15(x.value1)(y.value1);
        };
      },
      Eq0: function() {
        return eqTuple2;
      }
    };
  };
};

// output/Data.Bifunctor/index.js
var identity5 = /* @__PURE__ */ identity(categoryFn);
var bimap = function(dict) {
  return dict.bimap;
};
var lmap = function(dictBifunctor) {
  var bimap1 = bimap(dictBifunctor);
  return function(f) {
    return bimap1(f)(identity5);
  };
};
var bifunctorTuple = {
  bimap: function(f) {
    return function(g) {
      return function(v) {
        return new Tuple(f(v.value0), g(v.value1));
      };
    };
  }
};
var bifunctorEither = {
  bimap: function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Left) {
          return new Left(v(v2.value0));
        }
        ;
        if (v2 instanceof Right) {
          return new Right(v1(v2.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  }
};

// output/Data.Monoid.Conj/index.js
var Conj = function(x) {
  return x;
};
var semigroupConj = function(dictHeytingAlgebra) {
  var conj2 = conj(dictHeytingAlgebra);
  return {
    append: function(v) {
      return function(v1) {
        return conj2(v)(v1);
      };
    }
  };
};
var monoidConj = function(dictHeytingAlgebra) {
  var semigroupConj1 = semigroupConj(dictHeytingAlgebra);
  return {
    mempty: tt(dictHeytingAlgebra),
    Semigroup0: function() {
      return semigroupConj1;
    }
  };
};

// output/Data.Monoid.Disj/index.js
var Disj = function(x) {
  return x;
};
var semigroupDisj = function(dictHeytingAlgebra) {
  var disj2 = disj(dictHeytingAlgebra);
  return {
    append: function(v) {
      return function(v1) {
        return disj2(v)(v1);
      };
    }
  };
};
var monoidDisj = function(dictHeytingAlgebra) {
  var semigroupDisj1 = semigroupDisj(dictHeytingAlgebra);
  return {
    mempty: ff(dictHeytingAlgebra),
    Semigroup0: function() {
      return semigroupDisj1;
    }
  };
};

// output/Unsafe.Coerce/foreign.js
var unsafeCoerce2 = function(x) {
  return x;
};

// output/Safe.Coerce/index.js
var coerce = function() {
  return unsafeCoerce2;
};

// output/Data.Newtype/index.js
var coerce2 = /* @__PURE__ */ coerce();
var unwrap = function() {
  return coerce2;
};
var unwrap1 = /* @__PURE__ */ unwrap();
var un = function() {
  return function(v) {
    return unwrap1;
  };
};
var alaF = function() {
  return function() {
    return function() {
      return function() {
        return function(v) {
          return coerce2;
        };
      };
    };
  };
};

// output/Data.Foldable/index.js
var identity6 = /* @__PURE__ */ identity(categoryFn);
var alaF2 = /* @__PURE__ */ alaF()()()();
var foldr = function(dict) {
  return dict.foldr;
};
var oneOf = function(dictFoldable) {
  var foldr22 = foldr(dictFoldable);
  return function(dictPlus) {
    return foldr22(alt(dictPlus.Alt0()))(empty(dictPlus));
  };
};
var traverse_ = function(dictApplicative) {
  var applySecond4 = applySecond(dictApplicative.Apply0());
  var pure20 = pure(dictApplicative);
  return function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(f) {
      return foldr22(function($449) {
        return applySecond4(f($449));
      })(pure20(unit));
    };
  };
};
var for_ = function(dictApplicative) {
  var traverse_1 = traverse_(dictApplicative);
  return function(dictFoldable) {
    return flip(traverse_1(dictFoldable));
  };
};
var foldl = function(dict) {
  return dict.foldl;
};
var intercalate2 = function(dictFoldable) {
  var foldl22 = foldl(dictFoldable);
  return function(dictMonoid) {
    var append9 = append(dictMonoid.Semigroup0());
    var mempty9 = mempty(dictMonoid);
    return function(sep2) {
      return function(xs) {
        var go = function(v) {
          return function(x) {
            if (v.init) {
              return {
                init: false,
                acc: x
              };
            }
            ;
            return {
              init: false,
              acc: append9(v.acc)(append9(sep2)(x))
            };
          };
        };
        return foldl22(go)({
          init: true,
          acc: mempty9
        })(xs).acc;
      };
    };
  };
};
var foldableMaybe = {
  foldr: function(v) {
    return function(z) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return z;
        }
        ;
        if (v1 instanceof Just) {
          return v(v1.value0)(z);
        }
        ;
        throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
      };
    };
  },
  foldl: function(v) {
    return function(z) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return z;
        }
        ;
        if (v1 instanceof Just) {
          return v(z)(v1.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
      };
    };
  },
  foldMap: function(dictMonoid) {
    var mempty9 = mempty(dictMonoid);
    return function(v) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return mempty9;
        }
        ;
        if (v1 instanceof Just) {
          return v(v1.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  }
};
var foldMapDefaultR = function(dictFoldable) {
  var foldr22 = foldr(dictFoldable);
  return function(dictMonoid) {
    var append9 = append(dictMonoid.Semigroup0());
    var mempty9 = mempty(dictMonoid);
    return function(f) {
      return foldr22(function(x) {
        return function(acc) {
          return append9(f(x))(acc);
        };
      })(mempty9);
    };
  };
};
var foldableArray = {
  foldr: foldrArray,
  foldl: foldlArray,
  foldMap: function(dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
  }
};
var foldMap = function(dict) {
  return dict.foldMap;
};
var fold = function(dictFoldable) {
  var foldMap23 = foldMap(dictFoldable);
  return function(dictMonoid) {
    return foldMap23(dictMonoid)(identity6);
  };
};
var find = function(dictFoldable) {
  var foldl22 = foldl(dictFoldable);
  return function(p) {
    var go = function(v) {
      return function(v1) {
        if (v instanceof Nothing && p(v1)) {
          return new Just(v1);
        }
        ;
        return v;
      };
    };
    return foldl22(go)(Nothing.value);
  };
};
var any = function(dictFoldable) {
  var foldMap23 = foldMap(dictFoldable);
  return function(dictHeytingAlgebra) {
    return alaF2(Disj)(foldMap23(monoidDisj(dictHeytingAlgebra)));
  };
};
var elem = function(dictFoldable) {
  var any1 = any(dictFoldable)(heytingAlgebraBoolean);
  return function(dictEq) {
    var $457 = eq(dictEq);
    return function($458) {
      return any1($457($458));
    };
  };
};
var all2 = function(dictFoldable) {
  var foldMap23 = foldMap(dictFoldable);
  return function(dictHeytingAlgebra) {
    return alaF2(Conj)(foldMap23(monoidConj(dictHeytingAlgebra)));
  };
};

// output/Data.Traversable/foreign.js
var traverseArrayImpl = function() {
  function array1(a) {
    return [a];
  }
  function array2(a) {
    return function(b) {
      return [a, b];
    };
  }
  function array3(a) {
    return function(b) {
      return function(c) {
        return [a, b, c];
      };
    };
  }
  function concat22(xs) {
    return function(ys) {
      return xs.concat(ys);
    };
  }
  return function(apply8) {
    return function(map31) {
      return function(pure20) {
        return function(f) {
          return function(array) {
            function go(bot, top6) {
              switch (top6 - bot) {
                case 0:
                  return pure20([]);
                case 1:
                  return map31(array1)(f(array[bot]));
                case 2:
                  return apply8(map31(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3:
                  return apply8(apply8(map31(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  var pivot = bot + Math.floor((top6 - bot) / 4) * 2;
                  return apply8(map31(concat22)(go(bot, pivot)))(go(pivot, top6));
              }
            }
            return go(0, array.length);
          };
        };
      };
    };
  };
}();

// output/Data.Traversable/index.js
var identity7 = /* @__PURE__ */ identity(categoryFn);
var traverse = function(dict) {
  return dict.traverse;
};
var traversableMaybe = {
  traverse: function(dictApplicative) {
    var pure20 = pure(dictApplicative);
    var map31 = map(dictApplicative.Apply0().Functor0());
    return function(v) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return pure20(Nothing.value);
        }
        ;
        if (v1 instanceof Just) {
          return map31(Just.create)(v(v1.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  },
  sequence: function(dictApplicative) {
    var pure20 = pure(dictApplicative);
    var map31 = map(dictApplicative.Apply0().Functor0());
    return function(v) {
      if (v instanceof Nothing) {
        return pure20(Nothing.value);
      }
      ;
      if (v instanceof Just) {
        return map31(Just.create)(v.value0);
      }
      ;
      throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name]);
    };
  },
  Functor0: function() {
    return functorMaybe;
  },
  Foldable1: function() {
    return foldableMaybe;
  }
};
var sequenceDefault = function(dictTraversable) {
  var traverse22 = traverse(dictTraversable);
  return function(dictApplicative) {
    return traverse22(dictApplicative)(identity7);
  };
};
var traversableArray = {
  traverse: function(dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    return traverseArrayImpl(apply2(Apply0))(map(Apply0.Functor0()))(pure(dictApplicative));
  },
  sequence: function(dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
  },
  Functor0: function() {
    return functorArray;
  },
  Foldable1: function() {
    return foldableArray;
  }
};
var sequence = function(dict) {
  return dict.sequence;
};
var $$for = function(dictApplicative) {
  return function(dictTraversable) {
    var traverse22 = traverse(dictTraversable)(dictApplicative);
    return function(x) {
      return function(f) {
        return traverse22(f)(x);
      };
    };
  };
};

// output/Data.Unfoldable/foreign.js
var unfoldrArrayImpl = function(isNothing2) {
  return function(fromJust6) {
    return function(fst2) {
      return function(snd2) {
        return function(f) {
          return function(b) {
            var result = [];
            var value = b;
            while (true) {
              var maybe2 = f(value);
              if (isNothing2(maybe2))
                return result;
              var tuple = fromJust6(maybe2);
              result.push(fst2(tuple));
              value = snd2(tuple);
            }
          };
        };
      };
    };
  };
};

// output/Data.Unfoldable1/foreign.js
var unfoldr1ArrayImpl = function(isNothing2) {
  return function(fromJust6) {
    return function(fst2) {
      return function(snd2) {
        return function(f) {
          return function(b) {
            var result = [];
            var value = b;
            while (true) {
              var tuple = f(value);
              result.push(fst2(tuple));
              var maybe2 = snd2(tuple);
              if (isNothing2(maybe2))
                return result;
              value = fromJust6(maybe2);
            }
          };
        };
      };
    };
  };
};

// output/Data.Semigroup.Foldable/index.js
var foldr1 = function(dict) {
  return dict.foldr1;
};
var foldl1 = function(dict) {
  return dict.foldl1;
};
var foldMap1DefaultL = function(dictFoldable1) {
  var foldl11 = foldl1(dictFoldable1);
  return function(dictFunctor) {
    var map31 = map(dictFunctor);
    return function(dictSemigroup) {
      var append9 = append(dictSemigroup);
      return function(f) {
        var $162 = foldl11(append9);
        var $163 = map31(f);
        return function($164) {
          return $162($163($164));
        };
      };
    };
  };
};

// output/Data.Unfoldable1/index.js
var fromJust2 = /* @__PURE__ */ fromJust();
var unfoldr1 = function(dict) {
  return dict.unfoldr1;
};
var unfoldable1Array = {
  unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust2)(fst)(snd)
};

// output/Data.Unfoldable/index.js
var fromJust3 = /* @__PURE__ */ fromJust();
var unfoldr = function(dict) {
  return dict.unfoldr;
};
var unfoldableArray = {
  unfoldr: /* @__PURE__ */ unfoldrArrayImpl(isNothing)(fromJust3)(fst)(snd),
  Unfoldable10: function() {
    return unfoldable1Array;
  }
};

// output/Data.Array/index.js
var map5 = /* @__PURE__ */ map(functorST);
var when2 = /* @__PURE__ */ when(applicativeST);
var $$void4 = /* @__PURE__ */ $$void(functorST);
var intercalate1 = /* @__PURE__ */ intercalate2(foldableArray);
var apply3 = /* @__PURE__ */ apply2(applyMaybe);
var map1 = /* @__PURE__ */ map(functorMaybe);
var map22 = /* @__PURE__ */ map(functorArray);
var fromJust4 = /* @__PURE__ */ fromJust();
var notEq2 = /* @__PURE__ */ notEq(eqOrdering);
var append2 = /* @__PURE__ */ append(semigroupArray);
var zip = /* @__PURE__ */ function() {
  return zipWith(Tuple.create);
}();
var unsafeIndex = function() {
  return unsafeIndexImpl;
};
var unsafeIndex1 = /* @__PURE__ */ unsafeIndex();
var uncons = /* @__PURE__ */ function() {
  return unconsImpl($$const(Nothing.value))(function(x) {
    return function(xs) {
      return new Just({
        head: x,
        tail: xs
      });
    };
  });
}();
var tail = /* @__PURE__ */ function() {
  return unconsImpl($$const(Nothing.value))(function(v) {
    return function(xs) {
      return new Just(xs);
    };
  });
}();
var sortBy = function(comp) {
  return sortByImpl(comp)(function(v) {
    if (v instanceof GT) {
      return 1;
    }
    ;
    if (v instanceof EQ) {
      return 0;
    }
    ;
    if (v instanceof LT) {
      return -1 | 0;
    }
    ;
    throw new Error("Failed pattern match at Data.Array (line 829, column 31 - line 832, column 11): " + [v.constructor.name]);
  });
};
var sortWith = function(dictOrd) {
  var comparing4 = comparing(dictOrd);
  return function(f) {
    return sortBy(comparing4(f));
  };
};
var sortWith1 = /* @__PURE__ */ sortWith(ordInt);
var sort = function(dictOrd) {
  var compare10 = compare(dictOrd);
  return function(xs) {
    return sortBy(compare10)(xs);
  };
};
var snoc = function(xs) {
  return function(x) {
    return withArray(push(x))(xs)();
  };
};
var singleton2 = function(a) {
  return [a];
};
var $$null = function(xs) {
  return length(xs) === 0;
};
var mapWithIndex = function(f) {
  return function(xs) {
    return zipWith(f)(range(0)(length(xs) - 1 | 0))(xs);
  };
};
var intersperse = function(a) {
  return function(arr) {
    var v = length(arr);
    if (v < 2) {
      return arr;
    }
    ;
    if (otherwise) {
      return run2(function() {
        var unsafeGetElem = function(idx) {
          return unsafeIndex1(arr)(idx);
        };
        return function __do() {
          var out = newSTArray();
          push(unsafeGetElem(0))(out)();
          forST(1)(v)(function(idx) {
            return function __do2() {
              push(a)(out)();
              return $$void4(push(unsafeGetElem(idx))(out))();
            };
          })();
          return out;
        };
      }());
    }
    ;
    throw new Error("Failed pattern match at Data.Array (line 611, column 21 - line 620, column 19): " + [v.constructor.name]);
  };
};
var intercalate3 = function(dictMonoid) {
  return intercalate1(dictMonoid);
};
var init = function(xs) {
  if ($$null(xs)) {
    return Nothing.value;
  }
  ;
  if (otherwise) {
    return new Just(slice(0)(length(xs) - 1 | 0)(xs));
  }
  ;
  throw new Error("Failed pattern match at Data.Array (line 338, column 1 - line 338, column 45): " + [xs.constructor.name]);
};
var index = /* @__PURE__ */ function() {
  return indexImpl(Just.create)(Nothing.value);
}();
var last = function(xs) {
  return index(xs)(length(xs) - 1 | 0);
};
var unsnoc = function(xs) {
  return apply3(map1(function(v) {
    return function(v1) {
      return {
        init: v,
        last: v1
      };
    };
  })(init(xs)))(last(xs));
};
var unzip = function(xs) {
  return function __do() {
    var fsts = newSTArray();
    var snds = newSTArray();
    var iter = iterator(function(v) {
      return index(xs)(v);
    })();
    iterate(iter)(function(v) {
      return function __do2() {
        $$void4(push(v.value0)(fsts))();
        return $$void4(push(v.value1)(snds))();
      };
    })();
    var fsts$prime = unsafeFreeze(fsts)();
    var snds$prime = unsafeFreeze(snds)();
    return new Tuple(fsts$prime, snds$prime);
  }();
};
var head = function(xs) {
  return index(xs)(0);
};
var nubBy = function(comp) {
  return function(xs) {
    var indexedAndSorted = sortBy(function(x) {
      return function(y) {
        return comp(snd(x))(snd(y));
      };
    })(mapWithIndex(Tuple.create)(xs));
    var v = head(indexedAndSorted);
    if (v instanceof Nothing) {
      return [];
    }
    ;
    if (v instanceof Just) {
      return map22(snd)(sortWith1(fst)(function __do() {
        var result = unsafeThaw(singleton2(v.value0))();
        foreach(indexedAndSorted)(function(v1) {
          return function __do2() {
            var lst = map5(function() {
              var $179 = function($181) {
                return fromJust4(last($181));
              };
              return function($180) {
                return snd($179($180));
              };
            }())(unsafeFreeze(result))();
            return when2(notEq2(comp(lst)(v1.value1))(EQ.value))($$void4(push(v1)(result)))();
          };
        })();
        return unsafeFreeze(result)();
      }()));
    }
    ;
    throw new Error("Failed pattern match at Data.Array (line 1044, column 17 - line 1052, column 29): " + [v.constructor.name]);
  };
};
var nub = function(dictOrd) {
  return nubBy(compare(dictOrd));
};
var groupBy = function(op) {
  return function(xs) {
    return function __do() {
      var result = newSTArray();
      var iter = iterator(function(v) {
        return index(xs)(v);
      })();
      iterate(iter)(function(x) {
        return $$void4(function __do2() {
          var sub1 = newSTArray();
          push(x)(sub1)();
          pushWhile(op(x))(iter)(sub1)();
          var grp = unsafeFreeze(sub1)();
          return push(grp)(result)();
        });
      })();
      return unsafeFreeze(result)();
    }();
  };
};
var fromFoldable = function(dictFoldable) {
  return fromFoldableImpl(foldr(dictFoldable));
};
var foldr2 = /* @__PURE__ */ foldr(foldableArray);
var findMap = /* @__PURE__ */ function() {
  return findMapImpl(Nothing.value)(isJust);
}();
var findIndex = /* @__PURE__ */ function() {
  return findIndexImpl(Just.create)(Nothing.value);
}();
var elemIndex = function(dictEq) {
  var eq25 = eq(dictEq);
  return function(x) {
    return findIndex(function(v) {
      return eq25(v)(x);
    });
  };
};
var elem2 = function(dictEq) {
  var elemIndex1 = elemIndex(dictEq);
  return function(a) {
    return function(arr) {
      return isJust(elemIndex1(a)(arr));
    };
  };
};
var drop = function(n) {
  return function(xs) {
    var $167 = n < 1;
    if ($167) {
      return xs;
    }
    ;
    return slice(n)(length(xs))(xs);
  };
};
var cons2 = function(x) {
  return function(xs) {
    return append2([x])(xs);
  };
};
var concatMap = /* @__PURE__ */ flip(/* @__PURE__ */ bind(bindArray));
var mapMaybe = function(f) {
  return concatMap(function() {
    var $185 = maybe([])(singleton2);
    return function($186) {
      return $185(f($186));
    };
  }());
};

// output/Data.Array.NonEmpty.Internal/foreign.js
var foldr1Impl = function(f) {
  return function(xs) {
    var acc = xs[xs.length - 1];
    for (var i = xs.length - 2; i >= 0; i--) {
      acc = f(xs[i])(acc);
    }
    return acc;
  };
};
var foldl1Impl = function(f) {
  return function(xs) {
    var acc = xs[0];
    var len = xs.length;
    for (var i = 1; i < len; i++) {
      acc = f(acc)(xs[i]);
    }
    return acc;
  };
};
var traverse1Impl = function() {
  function Cont(fn) {
    this.fn = fn;
  }
  var emptyList = {};
  var ConsCell = function(head5, tail4) {
    this.head = head5;
    this.tail = tail4;
  };
  function finalCell(head5) {
    return new ConsCell(head5, emptyList);
  }
  function consList(x) {
    return function(xs) {
      return new ConsCell(x, xs);
    };
  }
  function listToArray(list) {
    var arr = [];
    var xs = list;
    while (xs !== emptyList) {
      arr.push(xs.head);
      xs = xs.tail;
    }
    return arr;
  }
  return function(apply8) {
    return function(map31) {
      return function(f) {
        var buildFrom = function(x, ys) {
          return apply8(map31(consList)(f(x)))(ys);
        };
        var go = function(acc, currentLen, xs) {
          if (currentLen === 0) {
            return acc;
          } else {
            var last4 = xs[currentLen - 1];
            return new Cont(function() {
              var built = go(buildFrom(last4, acc), currentLen - 1, xs);
              return built;
            });
          }
        };
        return function(array) {
          var acc = map31(finalCell)(f(array[array.length - 1]));
          var result = go(acc, array.length - 1, array);
          while (result instanceof Cont) {
            result = result.fn();
          }
          return map31(listToArray)(result);
        };
      };
    };
  };
}();

// output/Data.FoldableWithIndex/index.js
var foldrWithIndex = function(dict) {
  return dict.foldrWithIndex;
};
var traverseWithIndex_ = function(dictApplicative) {
  var applySecond4 = applySecond(dictApplicative.Apply0());
  var pure20 = pure(dictApplicative);
  return function(dictFoldableWithIndex) {
    var foldrWithIndex1 = foldrWithIndex(dictFoldableWithIndex);
    return function(f) {
      return foldrWithIndex1(function(i) {
        var $287 = f(i);
        return function($288) {
          return applySecond4($287($288));
        };
      })(pure20(unit));
    };
  };
};
var forWithIndex_ = function(dictApplicative) {
  var traverseWithIndex_1 = traverseWithIndex_(dictApplicative);
  return function(dictFoldableWithIndex) {
    return flip(traverseWithIndex_1(dictFoldableWithIndex));
  };
};
var foldlWithIndex = function(dict) {
  return dict.foldlWithIndex;
};
var foldMapWithIndex = function(dict) {
  return dict.foldMapWithIndex;
};

// output/Data.TraversableWithIndex/index.js
var traverseWithIndex = function(dict) {
  return dict.traverseWithIndex;
};

// output/Data.Array.NonEmpty.Internal/index.js
var NonEmptyArray = function(x) {
  return x;
};
var semigroupNonEmptyArray = semigroupArray;
var functorNonEmptyArray = functorArray;
var foldableNonEmptyArray = foldableArray;
var foldable1NonEmptyArray = {
  foldMap1: function(dictSemigroup) {
    return foldMap1DefaultL(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
  },
  foldr1: foldr1Impl,
  foldl1: foldl1Impl,
  Foldable0: function() {
    return foldableNonEmptyArray;
  }
};
var applicativeNonEmptyArray = applicativeArray;

// output/Data.NonEmpty/index.js
var NonEmpty = /* @__PURE__ */ function() {
  function NonEmpty2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  NonEmpty2.create = function(value0) {
    return function(value1) {
      return new NonEmpty2(value0, value1);
    };
  };
  return NonEmpty2;
}();
var singleton3 = function(dictPlus) {
  var empty7 = empty(dictPlus);
  return function(a) {
    return new NonEmpty(a, empty7);
  };
};
var foldableNonEmpty = function(dictFoldable) {
  var foldMap9 = foldMap(dictFoldable);
  var foldl9 = foldl(dictFoldable);
  var foldr9 = foldr(dictFoldable);
  return {
    foldMap: function(dictMonoid) {
      var append19 = append(dictMonoid.Semigroup0());
      var foldMap15 = foldMap9(dictMonoid);
      return function(f) {
        return function(v) {
          return append19(f(v.value0))(foldMap15(f)(v.value1));
        };
      };
    },
    foldl: function(f) {
      return function(b) {
        return function(v) {
          return foldl9(f)(f(b)(v.value0))(v.value1);
        };
      };
    },
    foldr: function(f) {
      return function(b) {
        return function(v) {
          return f(v.value0)(foldr9(f)(b)(v.value1));
        };
      };
    }
  };
};

// output/Data.Array.NonEmpty/index.js
var fromJust5 = /* @__PURE__ */ fromJust();
var unsafeFromArray = NonEmptyArray;
var toArray = function(v) {
  return v;
};
var unzip2 = /* @__PURE__ */ function() {
  var $102 = bimap(bifunctorTuple)(unsafeFromArray)(unsafeFromArray);
  return function($103) {
    return $102(unzip(toArray($103)));
  };
}();
var snoc$prime = function(xs) {
  return function(x) {
    return unsafeFromArray(snoc(xs)(x));
  };
};
var snoc2 = function(xs) {
  return function(x) {
    return unsafeFromArray(snoc(toArray(xs))(x));
  };
};
var singleton4 = function($108) {
  return unsafeFromArray(singleton2($108));
};
var fromArray = function(xs) {
  if (length(xs) > 0) {
    return new Just(unsafeFromArray(xs));
  }
  ;
  if (otherwise) {
    return Nothing.value;
  }
  ;
  throw new Error("Failed pattern match at Data.Array.NonEmpty (line 157, column 1 - line 157, column 58): " + [xs.constructor.name]);
};
var foldr12 = /* @__PURE__ */ foldr1(foldable1NonEmptyArray);
var cons$prime = function(x) {
  return function(xs) {
    return unsafeFromArray(cons2(x)(xs));
  };
};
var adaptMaybe = function(f) {
  return function($123) {
    return fromJust5(f(toArray($123)));
  };
};
var head2 = /* @__PURE__ */ adaptMaybe(head);
var tail2 = /* @__PURE__ */ adaptMaybe(tail);
var unsnoc2 = /* @__PURE__ */ adaptMaybe(unsnoc);
var adaptAny = function(f) {
  return function($125) {
    return f(toArray($125));
  };
};
var length2 = /* @__PURE__ */ adaptAny(length);
var unsafeAdapt = function(f) {
  var $126 = adaptAny(f);
  return function($127) {
    return unsafeFromArray($126($127));
  };
};
var sortWith2 = function(dictOrd) {
  var sortWith13 = sortWith(dictOrd);
  return function(f) {
    return unsafeAdapt(sortWith13(f));
  };
};

// output/Data.Int/foreign.js
var fromNumberImpl = function(just) {
  return function(nothing) {
    return function(n) {
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};
var toNumber = function(n) {
  return n;
};
var fromStringAsImpl = function(just) {
  return function(nothing) {
    return function(radix) {
      var digits;
      if (radix < 11) {
        digits = "[0-" + (radix - 1).toString() + "]";
      } else if (radix === 11) {
        digits = "[0-9a]";
      } else {
        digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
      }
      var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
      return function(s) {
        if (pattern.test(s)) {
          var i = parseInt(s, radix);
          return (i | 0) === i ? just(i) : nothing;
        } else {
          return nothing;
        }
      };
    };
  };
};

// output/Data.Number/foreign.js
var isFiniteImpl = isFinite;
function fromStringImpl(str, isFinite2, just, nothing) {
  var num = parseFloat(str);
  if (isFinite2(num)) {
    return just(num);
  } else {
    return nothing;
  }
}
var ceil = Math.ceil;

// output/Data.Number/index.js
var fromString = function(str) {
  return fromStringImpl(str, isFiniteImpl, Just.create, Nothing.value);
};

// output/Data.Int/index.js
var top2 = /* @__PURE__ */ top(boundedInt);
var bottom2 = /* @__PURE__ */ bottom(boundedInt);
var hexadecimal = 16;
var fromStringAs = /* @__PURE__ */ function() {
  return fromStringAsImpl(Just.create)(Nothing.value);
}();
var fromString2 = /* @__PURE__ */ fromStringAs(10);
var fromNumber = /* @__PURE__ */ function() {
  return fromNumberImpl(Just.create)(Nothing.value);
}();
var unsafeClamp = function(x) {
  if (!isFiniteImpl(x)) {
    return 0;
  }
  ;
  if (x >= toNumber(top2)) {
    return top2;
  }
  ;
  if (x <= toNumber(bottom2)) {
    return bottom2;
  }
  ;
  if (otherwise) {
    return fromMaybe(0)(fromNumber(x));
  }
  ;
  throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x.constructor.name]);
};
var ceil2 = function($40) {
  return unsafeClamp(ceil($40));
};

// output/Data.List.Types/index.js
var Nil = /* @__PURE__ */ function() {
  function Nil3() {
  }
  ;
  Nil3.value = new Nil3();
  return Nil3;
}();
var Cons = /* @__PURE__ */ function() {
  function Cons3(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Cons3.create = function(value0) {
    return function(value1) {
      return new Cons3(value0, value1);
    };
  };
  return Cons3;
}();
var NonEmptyList = function(x) {
  return x;
};
var listMap = function(f) {
  var chunkedRevMap = function($copy_chunksAcc) {
    return function($copy_v) {
      var $tco_var_chunksAcc = $copy_chunksAcc;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(chunksAcc, v) {
        if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
          $tco_var_chunksAcc = new Cons(v, chunksAcc);
          $copy_v = v.value1.value1.value1;
          return;
        }
        ;
        var unrolledMap = function(v1) {
          if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
            return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
          }
          ;
          if (v1 instanceof Cons && v1.value1 instanceof Nil) {
            return new Cons(f(v1.value0), Nil.value);
          }
          ;
          return Nil.value;
        };
        var reverseUnrolledMap = function($copy_v1) {
          return function($copy_acc) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done1 = false;
            var $tco_result2;
            function $tco_loop2(v1, acc) {
              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                $tco_var_v1 = v1.value1;
                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                return;
              }
              ;
              $tco_done1 = true;
              return acc;
            }
            ;
            while (!$tco_done1) {
              $tco_result2 = $tco_loop2($tco_var_v1, $copy_acc);
            }
            ;
            return $tco_result2;
          };
        };
        $tco_done = true;
        return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
      }
      ;
      return $tco_result;
    };
  };
  return chunkedRevMap(Nil.value);
};
var functorList = {
  map: listMap
};
var map6 = /* @__PURE__ */ map(functorList);
var foldableList = {
  foldr: function(f) {
    return function(b) {
      var rev = function() {
        var go = function($copy_acc) {
          return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
              if (v instanceof Nil) {
                $tco_done = true;
                return acc;
              }
              ;
              if (v instanceof Cons) {
                $tco_var_acc = new Cons(v.value0, acc);
                $copy_v = v.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [acc.constructor.name, v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go(Nil.value);
      }();
      var $281 = foldl(foldableList)(flip(f))(b);
      return function($282) {
        return $281(rev($282));
      };
    };
  },
  foldl: function(f) {
    var go = function($copy_b) {
      return function($copy_v) {
        var $tco_var_b = $copy_b;
        var $tco_done1 = false;
        var $tco_result;
        function $tco_loop(b, v) {
          if (v instanceof Nil) {
            $tco_done1 = true;
            return b;
          }
          ;
          if (v instanceof Cons) {
            $tco_var_b = f(b)(v.value0);
            $copy_v = v.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done1) {
          $tco_result = $tco_loop($tco_var_b, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
    return go;
  },
  foldMap: function(dictMonoid) {
    var append25 = append(dictMonoid.Semigroup0());
    var mempty9 = mempty(dictMonoid);
    return function(f) {
      return foldl(foldableList)(function(acc) {
        var $283 = append25(acc);
        return function($284) {
          return $283(f($284));
        };
      })(mempty9);
    };
  }
};
var foldr3 = /* @__PURE__ */ foldr(foldableList);
var foldableNonEmptyList = /* @__PURE__ */ foldableNonEmpty(foldableList);
var semigroupList = {
  append: function(xs) {
    return function(ys) {
      return foldr3(Cons.create)(ys)(xs);
    };
  }
};
var append1 = /* @__PURE__ */ append(semigroupList);
var eq1List = {
  eq1: function(dictEq) {
    var eq11 = eq(dictEq);
    return function(xs) {
      return function(ys) {
        var go = function($copy_v) {
          return function($copy_v1) {
            return function($copy_v2) {
              var $tco_var_v = $copy_v;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1, v2) {
                if (!v2) {
                  $tco_done = true;
                  return false;
                }
                ;
                if (v instanceof Nil && v1 instanceof Nil) {
                  $tco_done = true;
                  return v2;
                }
                ;
                if (v instanceof Cons && v1 instanceof Cons) {
                  $tco_var_v = v.value1;
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = v2 && eq11(v1.value0)(v.value0);
                  return;
                }
                ;
                $tco_done = true;
                return false;
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
              }
              ;
              return $tco_result;
            };
          };
        };
        return go(xs)(ys)(true);
      };
    };
  }
};
var eq12 = /* @__PURE__ */ eq1(eq1List);
var eqList = function(dictEq) {
  return {
    eq: eq12(dictEq)
  };
};
var ord1List = {
  compare1: function(dictOrd) {
    var compare10 = compare(dictOrd);
    return function(xs) {
      return function(ys) {
        var go = function($copy_v) {
          return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
              if (v instanceof Nil && v1 instanceof Nil) {
                $tco_done = true;
                return EQ.value;
              }
              ;
              if (v instanceof Nil) {
                $tco_done = true;
                return LT.value;
              }
              ;
              if (v1 instanceof Nil) {
                $tco_done = true;
                return GT.value;
              }
              ;
              if (v instanceof Cons && v1 instanceof Cons) {
                var v2 = compare10(v.value0)(v1.value0);
                if (v2 instanceof EQ) {
                  $tco_var_v = v.value1;
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                $tco_done = true;
                return v2;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Types (line 60, column 5 - line 60, column 20): " + [v.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
        return go(xs)(ys);
      };
    };
  },
  Eq10: function() {
    return eq1List;
  }
};
var compare12 = /* @__PURE__ */ compare1(ord1List);
var ordList = function(dictOrd) {
  var eqList1 = eqList(dictOrd.Eq0());
  return {
    compare: compare12(dictOrd),
    Eq0: function() {
      return eqList1;
    }
  };
};
var applyList = {
  apply: function(v) {
    return function(v1) {
      if (v instanceof Nil) {
        return Nil.value;
      }
      ;
      if (v instanceof Cons) {
        return append1(map6(v.value0)(v1))(apply2(applyList)(v.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Data.List.Types (line 157, column 1 - line 159, column 48): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Functor0: function() {
    return functorList;
  }
};
var applicativeList = {
  pure: function(a) {
    return new Cons(a, Nil.value);
  },
  Apply0: function() {
    return applyList;
  }
};
var altList = {
  alt: append1,
  Functor0: function() {
    return functorList;
  }
};
var plusList = /* @__PURE__ */ function() {
  return {
    empty: Nil.value,
    Alt0: function() {
      return altList;
    }
  };
}();

// output/Data.List/index.js
var map7 = /* @__PURE__ */ map(functorMaybe);
var uncons2 = function(v) {
  if (v instanceof Nil) {
    return Nothing.value;
  }
  ;
  if (v instanceof Cons) {
    return new Just({
      head: v.value0,
      tail: v.value1
    });
  }
  ;
  throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [v.constructor.name]);
};
var toUnfoldable2 = function(dictUnfoldable) {
  return unfoldr(dictUnfoldable)(function(xs) {
    return map7(function(rec) {
      return new Tuple(rec.head, rec.tail);
    })(uncons2(xs));
  });
};
var reverse2 = /* @__PURE__ */ function() {
  var go = function($copy_acc) {
    return function($copy_v) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(acc, v) {
        if (v instanceof Nil) {
          $tco_done = true;
          return acc;
        }
        ;
        if (v instanceof Cons) {
          $tco_var_acc = new Cons(v.value0, acc);
          $copy_v = v.value1;
          return;
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [acc.constructor.name, v.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_v);
      }
      ;
      return $tco_result;
    };
  };
  return go(Nil.value);
}();
var $$null2 = function(v) {
  if (v instanceof Nil) {
    return true;
  }
  ;
  return false;
};
var fromFoldable2 = function(dictFoldable) {
  return foldr(dictFoldable)(Cons.create)(Nil.value);
};

// output/Partial.Unsafe/foreign.js
var _unsafePartial = function(f) {
  return f();
};

// output/Partial/foreign.js
var _crashWith = function(msg) {
  throw new Error(msg);
};

// output/Partial/index.js
var crashWith = function() {
  return _crashWith;
};

// output/Partial.Unsafe/index.js
var crashWith2 = /* @__PURE__ */ crashWith();
var unsafePartial = _unsafePartial;
var unsafeCrashWith = function(msg) {
  return unsafePartial(function() {
    return crashWith2(msg);
  });
};

// output/Data.List.NonEmpty/index.js
var tail3 = function(v) {
  return v.value1;
};
var singleton5 = /* @__PURE__ */ function() {
  var $199 = singleton3(plusList);
  return function($200) {
    return NonEmptyList($199($200));
  };
}();
var head3 = function(v) {
  return v.value0;
};
var fromList = function(v) {
  if (v instanceof Nil) {
    return Nothing.value;
  }
  ;
  if (v instanceof Cons) {
    return new Just(new NonEmpty(v.value0, v.value1));
  }
  ;
  throw new Error("Failed pattern match at Data.List.NonEmpty (line 121, column 1 - line 121, column 57): " + [v.constructor.name]);
};
var cons3 = function(y) {
  return function(v) {
    return new NonEmpty(y, new Cons(v.value0, v.value1));
  };
};

// output/Data.String.CodePoints/foreign.js
var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";
var _unsafeCodePointAt0 = function(fallback) {
  return hasCodePointAt ? function(str) {
    return str.codePointAt(0);
  } : fallback;
};
var _countPrefix = function(fallback) {
  return function(unsafeCodePointAt02) {
    if (hasStringIterator) {
      return function(pred2) {
        return function(str) {
          var iter = str[Symbol.iterator]();
          for (var cpCount = 0; ; ++cpCount) {
            var o = iter.next();
            if (o.done)
              return cpCount;
            var cp = unsafeCodePointAt02(o.value);
            if (!pred2(cp))
              return cpCount;
          }
        };
      };
    }
    return fallback;
  };
};
var _singleton = function(fallback) {
  return hasFromCodePoint ? String.fromCodePoint : fallback;
};
var _take = function(fallback) {
  return function(n) {
    if (hasStringIterator) {
      return function(str) {
        var accum = "";
        var iter = str[Symbol.iterator]();
        for (var i = 0; i < n; ++i) {
          var o = iter.next();
          if (o.done)
            return accum;
          accum += o.value;
        }
        return accum;
      };
    }
    return fallback(n);
  };
};
var _toCodePointArray = function(fallback) {
  return function(unsafeCodePointAt02) {
    if (hasArrayFrom) {
      return function(str) {
        return Array.from(str, unsafeCodePointAt02);
      };
    }
    return fallback;
  };
};

// output/Data.Enum/foreign.js
function toCharCode(c) {
  return c.charCodeAt(0);
}
function fromCharCode(c) {
  return String.fromCharCode(c);
}

// output/Data.Enum/index.js
var top3 = /* @__PURE__ */ top(boundedInt);
var bottom3 = /* @__PURE__ */ bottom(boundedInt);
var toEnum = function(dict) {
  return dict.toEnum;
};
var fromEnum = function(dict) {
  return dict.fromEnum;
};
var toEnumWithDefaults = function(dictBoundedEnum) {
  var toEnum1 = toEnum(dictBoundedEnum);
  var fromEnum1 = fromEnum(dictBoundedEnum);
  var bottom1 = bottom(dictBoundedEnum.Bounded0());
  return function(low) {
    return function(high) {
      return function(x) {
        var v = toEnum1(x);
        if (v instanceof Just) {
          return v.value0;
        }
        ;
        if (v instanceof Nothing) {
          var $140 = x < fromEnum1(bottom1);
          if ($140) {
            return low;
          }
          ;
          return high;
        }
        ;
        throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
      };
    };
  };
};
var defaultSucc = function(toEnum$prime) {
  return function(fromEnum$prime) {
    return function(a) {
      return toEnum$prime(fromEnum$prime(a) + 1 | 0);
    };
  };
};
var defaultPred = function(toEnum$prime) {
  return function(fromEnum$prime) {
    return function(a) {
      return toEnum$prime(fromEnum$prime(a) - 1 | 0);
    };
  };
};
var charToEnum = function(v) {
  if (v >= bottom3 && v <= top3) {
    return new Just(fromCharCode(v));
  }
  ;
  return Nothing.value;
};
var enumChar = {
  succ: /* @__PURE__ */ defaultSucc(charToEnum)(toCharCode),
  pred: /* @__PURE__ */ defaultPred(charToEnum)(toCharCode),
  Ord0: function() {
    return ordChar;
  }
};
var boundedEnumChar = /* @__PURE__ */ function() {
  return {
    cardinality: toCharCode(top(boundedChar)) - toCharCode(bottom(boundedChar)) | 0,
    toEnum: charToEnum,
    fromEnum: toCharCode,
    Bounded0: function() {
      return boundedChar;
    },
    Enum1: function() {
      return enumChar;
    }
  };
}();

// output/Data.String.CodeUnits/foreign.js
var singleton6 = function(c) {
  return c;
};
var _charAt = function(just) {
  return function(nothing) {
    return function(i) {
      return function(s) {
        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
      };
    };
  };
};
var length4 = function(s) {
  return s.length;
};
var _indexOf = function(just) {
  return function(nothing) {
    return function(x) {
      return function(s) {
        var i = s.indexOf(x);
        return i === -1 ? nothing : just(i);
      };
    };
  };
};
var _indexOfStartingAt = function(just) {
  return function(nothing) {
    return function(x) {
      return function(startAt) {
        return function(s) {
          if (startAt < 0 || startAt > s.length)
            return nothing;
          var i = s.indexOf(x, startAt);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
};
var take3 = function(n) {
  return function(s) {
    return s.substr(0, n);
  };
};
var drop3 = function(n) {
  return function(s) {
    return s.substring(n);
  };
};
var splitAt2 = function(i) {
  return function(s) {
    return { before: s.substring(0, i), after: s.substring(i) };
  };
};

// output/Data.String.Unsafe/foreign.js
var charAt = function(i) {
  return function(s) {
    if (i >= 0 && i < s.length)
      return s.charAt(i);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

// output/Data.String.CodeUnits/index.js
var stripSuffix = function(v) {
  return function(str) {
    var v1 = splitAt2(length4(str) - length4(v) | 0)(str);
    var $14 = v1.after === v;
    if ($14) {
      return new Just(v1.before);
    }
    ;
    return Nothing.value;
  };
};
var stripPrefix = function(v) {
  return function(str) {
    var v1 = splitAt2(length4(v))(str);
    var $20 = v1.before === v;
    if ($20) {
      return new Just(v1.after);
    }
    ;
    return Nothing.value;
  };
};
var indexOf$prime = /* @__PURE__ */ function() {
  return _indexOfStartingAt(Just.create)(Nothing.value);
}();
var indexOf = /* @__PURE__ */ function() {
  return _indexOf(Just.create)(Nothing.value);
}();
var dropRight = function(i) {
  return function(s) {
    return take3(length4(s) - i | 0)(s);
  };
};
var charAt2 = /* @__PURE__ */ function() {
  return _charAt(Just.create)(Nothing.value);
}();

// output/Data.String.Common/foreign.js
var replaceAll = function(s1) {
  return function(s2) {
    return function(s3) {
      return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2);
    };
  };
};
var split = function(sep2) {
  return function(s) {
    return s.split(sep2);
  };
};
var joinWith = function(s) {
  return function(xs) {
    return xs.join(s);
  };
};

// output/Data.String.Common/index.js
var $$null3 = function(s) {
  return s === "";
};

// output/Data.String.CodePoints/index.js
var fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumChar);
var map8 = /* @__PURE__ */ map(functorMaybe);
var unfoldr2 = /* @__PURE__ */ unfoldr(unfoldableArray);
var div3 = /* @__PURE__ */ div(euclideanRingInt);
var mod3 = /* @__PURE__ */ mod(euclideanRingInt);
var CodePoint = function(x) {
  return x;
};
var unsurrogate = function(lead) {
  return function(trail) {
    return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
  };
};
var isTrail = function(cu) {
  return 56320 <= cu && cu <= 57343;
};
var isLead = function(cu) {
  return 55296 <= cu && cu <= 56319;
};
var uncons3 = function(s) {
  var v = length4(s);
  if (v === 0) {
    return Nothing.value;
  }
  ;
  if (v === 1) {
    return new Just({
      head: fromEnum2(charAt(0)(s)),
      tail: ""
    });
  }
  ;
  var cu1 = fromEnum2(charAt(1)(s));
  var cu0 = fromEnum2(charAt(0)(s));
  var $42 = isLead(cu0) && isTrail(cu1);
  if ($42) {
    return new Just({
      head: unsurrogate(cu0)(cu1),
      tail: drop3(2)(s)
    });
  }
  ;
  return new Just({
    head: cu0,
    tail: drop3(1)(s)
  });
};
var unconsButWithTuple = function(s) {
  return map8(function(v) {
    return new Tuple(v.head, v.tail);
  })(uncons3(s));
};
var toCodePointArrayFallback = function(s) {
  return unfoldr2(unconsButWithTuple)(s);
};
var unsafeCodePointAt0Fallback = function(s) {
  var cu0 = fromEnum2(charAt(0)(s));
  var $46 = isLead(cu0) && length4(s) > 1;
  if ($46) {
    var cu1 = fromEnum2(charAt(1)(s));
    var $47 = isTrail(cu1);
    if ($47) {
      return unsurrogate(cu0)(cu1);
    }
    ;
    return cu0;
  }
  ;
  return cu0;
};
var unsafeCodePointAt0 = /* @__PURE__ */ _unsafeCodePointAt0(unsafeCodePointAt0Fallback);
var toCodePointArray = /* @__PURE__ */ _toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
var length5 = function($73) {
  return length(toCodePointArray($73));
};
var fromCharCode2 = /* @__PURE__ */ function() {
  var $74 = toEnumWithDefaults(boundedEnumChar)(bottom(boundedChar))(top(boundedChar));
  return function($75) {
    return singleton6($74($75));
  };
}();
var singletonFallback = function(v) {
  if (v <= 65535) {
    return fromCharCode2(v);
  }
  ;
  var lead = div3(v - 65536 | 0)(1024) + 55296 | 0;
  var trail = mod3(v - 65536 | 0)(1024) + 56320 | 0;
  return fromCharCode2(lead) + fromCharCode2(trail);
};
var singleton7 = /* @__PURE__ */ _singleton(singletonFallback);
var takeFallback = function(n) {
  return function(v) {
    if (n < 1) {
      return "";
    }
    ;
    var v1 = uncons3(v);
    if (v1 instanceof Just) {
      return singleton7(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
    }
    ;
    return v;
  };
};
var take4 = /* @__PURE__ */ _take(takeFallback);
var eqCodePoint = {
  eq: function(x) {
    return function(y) {
      return x === y;
    };
  }
};
var countTail = function($copy_p) {
  return function($copy_s) {
    return function($copy_accum) {
      var $tco_var_p = $copy_p;
      var $tco_var_s = $copy_s;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(p, s, accum) {
        var v = uncons3(s);
        if (v instanceof Just) {
          var $60 = p(v.value0.head);
          if ($60) {
            $tco_var_p = p;
            $tco_var_s = v.value0.tail;
            $copy_accum = accum + 1 | 0;
            return;
          }
          ;
          $tco_done = true;
          return accum;
        }
        ;
        $tco_done = true;
        return accum;
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
      }
      ;
      return $tco_result;
    };
  };
};
var countFallback = function(p) {
  return function(s) {
    return countTail(p)(s)(0);
  };
};
var countPrefix2 = /* @__PURE__ */ _countPrefix(countFallback)(unsafeCodePointAt0);
var takeWhile3 = function(p) {
  return function(s) {
    return take4(countPrefix2(p)(s))(s);
  };
};
var codePointFromChar = function($76) {
  return CodePoint(fromEnum2($76));
};

// output/Data.String.Pattern/index.js
var Pattern = function(x) {
  return x;
};

// output/Data.Function.Uncurried/foreign.js
var runFn4 = function(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return fn(a, b, c, d);
        };
      };
    };
  };
};

// output/Record/index.js
var get = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return function() {
    return function(l) {
      return function(r) {
        return unsafeGet(reflectSymbol2(l))(r);
      };
    };
  };
};

// output/Record.Builder/foreign.js
function copyRecord(rec) {
  var copy3 = {};
  for (var key in rec) {
    if ({}.hasOwnProperty.call(rec, key)) {
      copy3[key] = rec[key];
    }
  }
  return copy3;
}
function unsafeInsert(l) {
  return function(a) {
    return function(rec) {
      rec[l] = a;
      return rec;
    };
  };
}

// output/Record.Builder/index.js
var semigroupoidBuilder = semigroupoidFn;
var insert2 = function() {
  return function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(l) {
        return function(a) {
          return function(r1) {
            return unsafeInsert(reflectSymbol2(l))(a)(r1);
          };
        };
      };
    };
  };
};
var categoryBuilder = categoryFn;
var build = function(v) {
  return function(r1) {
    return v(copyRecord(r1));
  };
};
var buildFromScratch = /* @__PURE__ */ flip(build)({});

// output/ArgParse.Basic/index.js
var bind3 = /* @__PURE__ */ bind(bindEither);
var lmap2 = /* @__PURE__ */ lmap(bifunctorEither);
var append3 = /* @__PURE__ */ append(semigroupString);
var append12 = /* @__PURE__ */ append(semigroupArray);
var intercalate5 = /* @__PURE__ */ intercalate3(monoidString);
var bindFlipped2 = /* @__PURE__ */ bindFlipped(bindArray);
var pure2 = /* @__PURE__ */ pure(applicativeList);
var power2 = /* @__PURE__ */ power(monoidString);
var abs3 = /* @__PURE__ */ abs(ordInt)(ringInt);
var join2 = /* @__PURE__ */ join(bindArray);
var map9 = /* @__PURE__ */ map(functorArray);
var foldr4 = /* @__PURE__ */ foldr(foldableArray);
var max3 = /* @__PURE__ */ max(ordInt);
var bind1 = /* @__PURE__ */ bind(bindArray);
var bindFlipped1 = /* @__PURE__ */ bindFlipped(bindEither);
var map12 = /* @__PURE__ */ map(functorFn);
var map23 = /* @__PURE__ */ map(functorEither);
var elem3 = /* @__PURE__ */ elem2(eqString);
var eq3 = /* @__PURE__ */ eq(/* @__PURE__ */ eqArray(eqString));
var compare3 = /* @__PURE__ */ compare(/* @__PURE__ */ ordArray(ordString));
var compare13 = /* @__PURE__ */ compare(ordString);
var intercalate12 = /* @__PURE__ */ intercalate3(monoidArray);
var alt2 = /* @__PURE__ */ alt(altMaybe);
var intercalate22 = /* @__PURE__ */ intercalate2(foldableList)(monoidString);
var map32 = /* @__PURE__ */ map(functorList);
var foldr13 = /* @__PURE__ */ foldr(foldableList);
var fromFoldable3 = /* @__PURE__ */ fromFoldable2(foldableArray);
var apply4 = /* @__PURE__ */ apply2(applyEither);
var composeFlipped1 = /* @__PURE__ */ composeFlipped(semigroupoidBuilder);
var insert3 = /* @__PURE__ */ insert2()();
var identity8 = /* @__PURE__ */ identity(categoryBuilder);
var voidLeft2 = /* @__PURE__ */ voidLeft(functorMaybe);
var guard3 = /* @__PURE__ */ guard(alternativeMaybe);
var Paras = /* @__PURE__ */ function() {
  function Paras2(value0) {
    this.value0 = value0;
  }
  ;
  Paras2.create = function(value0) {
    return new Paras2(value0);
  };
  return Paras2;
}();
var Lines = /* @__PURE__ */ function() {
  function Lines2(value0) {
    this.value0 = value0;
  }
  ;
  Lines2.create = function(value0) {
    return new Lines2(value0);
  };
  return Lines2;
}();
var Table = /* @__PURE__ */ function() {
  function Table2(value0) {
    this.value0 = value0;
  }
  ;
  Table2.create = function(value0) {
    return new Table2(value0);
  };
  return Table2;
}();
var Indent = /* @__PURE__ */ function() {
  function Indent3(value0) {
    this.value0 = value0;
  }
  ;
  Indent3.create = function(value0) {
    return new Indent3(value0);
  };
  return Indent3;
}();
var Text = /* @__PURE__ */ function() {
  function Text3(value0) {
    this.value0 = value0;
  }
  ;
  Text3.create = function(value0) {
    return new Text3(value0);
  };
  return Text3;
}();
var IsFlag = /* @__PURE__ */ function() {
  function IsFlag2(value0) {
    this.value0 = value0;
  }
  ;
  IsFlag2.create = function(value0) {
    return new IsFlag2(value0);
  };
  return IsFlag2;
}();
var IsAny = /* @__PURE__ */ function() {
  function IsAny2(value0) {
    this.value0 = value0;
  }
  ;
  IsAny2.create = function(value0) {
    return new IsAny2(value0);
  };
  return IsAny2;
}();
var IsCommand = /* @__PURE__ */ function() {
  function IsCommand2(value0) {
    this.value0 = value0;
  }
  ;
  IsCommand2.create = function(value0) {
    return new IsCommand2(value0);
  };
  return IsCommand2;
}();
var HelpFlag = /* @__PURE__ */ function() {
  function HelpFlag2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  HelpFlag2.create = function(value0) {
    return function(value1) {
      return new HelpFlag2(value0, value1);
    };
  };
  return HelpFlag2;
}();
var HelpAny = /* @__PURE__ */ function() {
  function HelpAny2(value0) {
    this.value0 = value0;
  }
  ;
  HelpAny2.create = function(value0) {
    return new HelpAny2(value0);
  };
  return HelpAny2;
}();
var HelpFormat = /* @__PURE__ */ function() {
  function HelpFormat2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  HelpFormat2.create = function(value0) {
    return function(value1) {
      return new HelpFormat2(value0, value1);
    };
  };
  return HelpFormat2;
}();
var HelpArgs = /* @__PURE__ */ function() {
  function HelpArgs2(value0) {
    this.value0 = value0;
  }
  ;
  HelpArgs2.create = function(value0) {
    return new HelpArgs2(value0);
  };
  return HelpArgs2;
}();
var HelpChoose = /* @__PURE__ */ function() {
  function HelpChoose2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  HelpChoose2.create = function(value0) {
    return function(value1) {
      return new HelpChoose2(value0, value1);
    };
  };
  return HelpChoose2;
}();
var HelpCommand = /* @__PURE__ */ function() {
  function HelpCommand2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  HelpCommand2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new HelpCommand2(value0, value1, value2);
      };
    };
  };
  return HelpCommand2;
}();
var HelpRest = /* @__PURE__ */ function() {
  function HelpRest2(value0) {
    this.value0 = value0;
  }
  ;
  HelpRest2.create = function(value0) {
    return new HelpRest2(value0);
  };
  return HelpRest2;
}();
var ExpectedFlag = /* @__PURE__ */ function() {
  function ExpectedFlag2() {
  }
  ;
  ExpectedFlag2.value = new ExpectedFlag2();
  return ExpectedFlag2;
}();
var ExpectedArgValue = /* @__PURE__ */ function() {
  function ExpectedArgValue2() {
  }
  ;
  ExpectedArgValue2.value = new ExpectedArgValue2();
  return ExpectedArgValue2;
}();
var ExpectedRest = /* @__PURE__ */ function() {
  function ExpectedRest2() {
  }
  ;
  ExpectedRest2.value = new ExpectedRest2();
  return ExpectedRest2;
}();
var ExpectedArg = /* @__PURE__ */ function() {
  function ExpectedArg2() {
  }
  ;
  ExpectedArg2.value = new ExpectedArg2();
  return ExpectedArg2;
}();
var DuplicateArg = /* @__PURE__ */ function() {
  function DuplicateArg2() {
  }
  ;
  DuplicateArg2.value = new DuplicateArg2();
  return DuplicateArg2;
}();
var UnformatFailed = /* @__PURE__ */ function() {
  function UnformatFailed2(value0) {
    this.value0 = value0;
  }
  ;
  UnformatFailed2.create = function(value0) {
    return new UnformatFailed2(value0);
  };
  return UnformatFailed2;
}();
var UnknownArg = /* @__PURE__ */ function() {
  function UnknownArg2(value0) {
    this.value0 = value0;
  }
  ;
  UnknownArg2.create = function(value0) {
    return new UnknownArg2(value0);
  };
  return UnknownArg2;
}();
var ShowHelp = /* @__PURE__ */ function() {
  function ShowHelp2() {
  }
  ;
  ShowHelp2.value = new ShowHelp2();
  return ShowHelp2;
}();
var ShowInfo = /* @__PURE__ */ function() {
  function ShowInfo2(value0) {
    this.value0 = value0;
  }
  ;
  ShowInfo2.create = function(value0) {
    return new ShowInfo2(value0);
  };
  return ShowInfo2;
}();
var ArgError = /* @__PURE__ */ function() {
  function ArgError2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ArgError2.create = function(value0) {
    return function(value1) {
      return new ArgError2(value0, value1);
    };
  };
  return ArgError2;
}();
var ArgHalt = /* @__PURE__ */ function() {
  function ArgHalt2(value0) {
    this.value0 = value0;
  }
  ;
  ArgHalt2.create = function(value0) {
    return new ArgHalt2(value0);
  };
  return ArgHalt2;
}();
var ArgMatch = /* @__PURE__ */ function() {
  function ArgMatch2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ArgMatch2.create = function(value0) {
    return function(value1) {
      return new ArgMatch2(value0, value1);
    };
  };
  return ArgMatch2;
}();
var ArgFail = /* @__PURE__ */ function() {
  function ArgFail2() {
  }
  ;
  ArgFail2.value = new ArgFail2();
  return ArgFail2;
}();
var ArgParser = /* @__PURE__ */ function() {
  function ArgParser2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ArgParser2.create = function(value0) {
    return function(value1) {
      return new ArgParser2(value0, value1);
    };
  };
  return ArgParser2;
}();
var unformat = function(doc) {
  return function(unf) {
    return function(v) {
      var help = new HelpFormat(doc, v.value0);
      var go = function(v1) {
        var step3 = function(stk) {
          return function(args) {
            var v2 = v1.step(stk)(args);
            if (v2 instanceof ArgHalt && v2.value0.value0 instanceof Cons) {
              return new ArgHalt(new ArgError(new Cons(help, v2.value0.value0.value1), v2.value0.value1));
            }
            ;
            if (v2 instanceof ArgHalt) {
              return new ArgHalt(v2.value0);
            }
            ;
            if (v2 instanceof ArgMatch) {
              return new ArgMatch(go(v2.value0), v2.value1);
            }
            ;
            if (v2 instanceof ArgFail) {
              return ArgFail.value;
            }
            ;
            throw new Error("Failed pattern match at ArgParse.Basic (line 266, column 7 - line 271, column 27): " + [v2.constructor.name]);
          };
        };
        var done = function(stk) {
          return bind3(v1.done(new Cons(help, stk)))(function(value) {
            return lmap2(function() {
              var $458 = ArgError.create(new Cons(help, stk));
              return function($459) {
                return $458(UnformatFailed.create($459));
              };
            }())(unf(value));
          });
        };
        return {
          step: step3,
          done,
          saturated: v1.saturated
        };
      };
      return new ArgParser(help, go(v.value1));
    };
  };
};
var semigroupHelp = {
  append: function(v) {
    return function(v1) {
      if (v instanceof HelpArgs && v1 instanceof HelpArgs) {
        return new HelpArgs(append12(v.value0)(v1.value0));
      }
      ;
      if (v instanceof HelpArgs) {
        return new HelpArgs(snoc(v.value0)(v1));
      }
      ;
      if (v1 instanceof HelpArgs) {
        return new HelpArgs(cons2(v)(v1.value0));
      }
      ;
      return new HelpArgs([v, v1]);
    };
  }
};
var append22 = /* @__PURE__ */ append(semigroupHelp);
var printHelpTable$prime = function(stk) {
  return function(v) {
    if (v instanceof HelpFlag) {
      var names = intercalate5(",")(v.value0);
      if (stk instanceof Cons && stk.value0 instanceof HelpFormat) {
        return [new Tuple(new IsFlag(v.value0), [new Text(names + (" " + stk.value0.value0)), new Text(v.value1)])];
      }
      ;
      return [new Tuple(new IsFlag(v.value0), [new Text(names), new Text(v.value1)])];
    }
    ;
    if (v instanceof HelpAny) {
      if (stk instanceof Cons && stk.value0 instanceof HelpFormat) {
        return [new Tuple(new IsAny(stk.value0.value0), [new Text(stk.value0.value0), new Text(v.value0)])];
      }
      ;
      return [new Tuple(new IsAny("ANY"), [new Text("ANY"), new Text(v.value0)])];
    }
    ;
    if (v instanceof HelpRest) {
      return [new Tuple(new IsAny("--"), [new Text("--"), new Text(v.value0)])];
    }
    ;
    if (v instanceof HelpCommand) {
      return [new Tuple(new IsCommand(v.value0), [new Text(intercalate5(",")(v.value0)), new Text(v.value1)])];
    }
    ;
    if (v instanceof HelpFormat) {
      return printHelpTable$prime(new Cons(new HelpFormat(v.value0, v.value1), stk))(v.value1);
    }
    ;
    if (v instanceof HelpChoose) {
      return bindFlipped2(printHelpTable$prime(stk))(v.value1);
    }
    ;
    if (v instanceof HelpArgs) {
      return bindFlipped2(printHelpTable$prime(stk))(v.value0);
    }
    ;
    throw new Error("Failed pattern match at ArgParse.Basic (line 744, column 23 - line 767, column 33): " + [v.constructor.name]);
  };
};
var parserHelp = function(v) {
  return v.value0;
};
var parseArgs$prime = function($copy_v) {
  return function($copy_stk) {
    return function($copy_args) {
      var $tco_var_v = $copy_v;
      var $tco_var_stk = $copy_stk;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v, stk, args) {
        var v1 = v.step(stk)(args);
        if (v1 instanceof ArgHalt) {
          $tco_done = true;
          return new Left(v1.value0);
        }
        ;
        if (v1 instanceof ArgMatch) {
          $tco_var_v = v1.value0;
          $tco_var_stk = stk;
          $copy_args = v1.value1;
          return;
        }
        ;
        if (v1 instanceof ArgFail) {
          if (args instanceof Nil) {
            $tco_done = true;
            return v.done(stk);
          }
          ;
          if (args instanceof Cons) {
            $tco_done = true;
            return new Left(new ArgError(stk, new UnknownArg(args.value0)));
          }
          ;
          throw new Error("Failed pattern match at ArgParse.Basic (line 623, column 7 - line 627, column 47): " + [args.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at ArgParse.Basic (line 617, column 3 - line 627, column 47): " + [v1.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $tco_var_stk, $copy_args);
      }
      ;
      return $tco_result;
    };
  };
};
var parseArgs = function(dictFoldable) {
  var fromFoldable14 = fromFoldable2(dictFoldable);
  return function(cmd) {
    return function(doc) {
      return function(v) {
        var $462 = parseArgs$prime(v.value1)(pure2(new HelpCommand([cmd], doc, v.value0)));
        return function($463) {
          return $462(fromFoldable14($463));
        };
      };
    };
  };
};
var number = /* @__PURE__ */ unformat("NUMBER")(/* @__PURE__ */ function() {
  var $464 = note("Invalid number.");
  return function($465) {
    return $464(fromString($465));
  };
}());
var joinColumns = function(width) {
  return function(sep2) {
    return function(leftLines) {
      return function(rightLines) {
        var go = function(left) {
          return function(right) {
            var len = length5(left);
            var $240 = len < width;
            if ($240) {
              return left + (power2(" ")(width - len | 0) + (sep2 + right));
            }
            ;
            var $241 = len > width;
            if ($241) {
              return take4(width)(left) + (sep2 + right);
            }
            ;
            return left + (sep2 + right);
          };
        };
        var diff = length(leftLines) - length(rightLines) | 0;
        var $242 = diff < 0;
        if ($242) {
          return zipWith(go)(append12(leftLines)(replicate(abs3(diff))("")))(rightLines);
        }
        ;
        return zipWith(go)(leftLines)(append12(rightLines)(replicate(diff)("")));
      };
    };
  };
};
var renderDocLines = function(ind) {
  return function(v) {
    if (v instanceof Paras) {
      return join2(intersperse([""])(filter(function($466) {
        return !$$null($466);
      })(map9(renderDocLines(ind))(v.value0))));
    }
    ;
    if (v instanceof Lines) {
      return bindFlipped2(renderDocLines(ind))(v.value0);
    }
    ;
    if (v instanceof Text) {
      return map9(append3(ind))(split("\n")(v.value0));
    }
    ;
    if (v instanceof Indent) {
      return renderDocLines(ind + "    ")(v.value0);
    }
    ;
    if (v instanceof Table) {
      return printTableLines(ind)(v.value0);
    }
    ;
    throw new Error("Failed pattern match at ArgParse.Basic (line 780, column 22 - line 790, column 30): " + [v.constructor.name]);
  };
};
var printTableLines = function(ind) {
  return function(rows) {
    var rows$prime = map9(map9(renderDocLines("")))(rows);
    var numCols = foldr4(function($467) {
      return max3(length($467));
    })(0)(rows);
    var ixs = range(0)(numCols - 1 | 0);
    var colWidths = map9(function(ix) {
      return foldr4(function() {
        var $468 = foldr4(function($472) {
          return max3(length5($472));
        })(0);
        var $469 = fromMaybe([]);
        var $470 = flip(index)(ix);
        return function($471) {
          return max3($468($469($470($471))));
        };
      }())(0)(rows$prime);
    })(ixs);
    return bind1(rows$prime)(function(cols) {
      var v = fromArray(zip(colWidths)(cols));
      if (v instanceof Nothing) {
        return [];
      }
      ;
      if (v instanceof Just) {
        return map9(append3(ind))(snd(foldr12(function(v1) {
          return function(v2) {
            return new Tuple(v1.value0 + v2.value0 | 0, joinColumns(v1.value0)("    ")(v1.value1)(v2.value1));
          };
        })(v.value0)));
      }
      ;
      throw new Error("Failed pattern match at ArgParse.Basic (line 828, column 3 - line 837, column 27): " + [v.constructor.name]);
    });
  };
};
var renderDoc = /* @__PURE__ */ function() {
  var $473 = intercalate5("\n");
  var $474 = renderDocLines("");
  return function($475) {
    return $473($474($475));
  };
}();
var $$int = /* @__PURE__ */ unformat("INTEGER")(/* @__PURE__ */ function() {
  var $476 = note("Invalid integer.");
  return function($477) {
    return $476(fromString2($477));
  };
}());
var functorArgResult = {
  map: function(f) {
    return function(m) {
      if (m instanceof ArgHalt) {
        return new ArgHalt(m.value0);
      }
      ;
      if (m instanceof ArgMatch) {
        return new ArgMatch(f(m.value0), m.value1);
      }
      ;
      if (m instanceof ArgFail) {
        return ArgFail.value;
      }
      ;
      throw new Error("Failed pattern match at ArgParse.Basic (line 0, column 0 - line 0, column 0): " + [m.constructor.name]);
    };
  }
};
var map42 = /* @__PURE__ */ map(functorArgResult);
var partial = function(unf) {
  return function(v) {
    var go = function(v1) {
      var step3 = function(stk) {
        return function(args) {
          return map42(go)(v1.step(stk)(args));
        };
      };
      var done = function(stk) {
        return bindFlipped1(function() {
          var $478 = lmap2(ArgError.create(new Cons(v.value0, stk)));
          return function($479) {
            return $478(unf($479));
          };
        }())(v1.done(stk));
      };
      return {
        step: step3,
        done,
        saturated: false
      };
    };
    return new ArgParser(v.value0, go(v.value1));
  };
};
var functorArgFold = {
  map: function(f) {
    return function(m) {
      return {
        done: map12(map23(f))(m.done),
        step: map12(map12(map42(map(functorArgFold)(f))))(m.step),
        saturated: m.saturated
      };
    };
  }
};
var map52 = /* @__PURE__ */ map(functorArgFold);
var functorArgParser = {
  map: function(f) {
    return function(m) {
      return new ArgParser(m.value0, map52(f)(m.value1));
    };
  }
};
var map62 = /* @__PURE__ */ map(functorArgParser);
var voidRight2 = /* @__PURE__ */ voidRight(functorArgParser);
var flag$prime = function(names) {
  var go = function(v) {
    if (v instanceof Cons && elem3(v.value0)(names)) {
      return new ArgMatch(unit, v.value1);
    }
    ;
    return ArgFail.value;
  };
  return go;
};
var flagHelp = /* @__PURE__ */ function() {
  var name2 = ["--help", "-h"];
  var step3 = function(stk) {
    return function(args) {
      var v = flag$prime(name2)(args);
      if (v instanceof ArgHalt) {
        return new ArgHalt(v.value0);
      }
      ;
      if (v instanceof ArgFail) {
        return ArgFail.value;
      }
      ;
      if (v instanceof ArgMatch) {
        return new ArgHalt(new ArgError(stk, ShowHelp.value));
      }
      ;
      throw new Error("Failed pattern match at ArgParse.Basic (line 462, column 5 - line 465, column 54): " + [v.constructor.name]);
    };
  };
  var help = new HelpFlag(name2, "Show this help message.");
  var done = $$const(new Right(unit));
  return new ArgParser(help, {
    step: step3,
    done,
    saturated: true
  });
}();
var flagInfo = function(name2) {
  return function(doc) {
    return function(info2) {
      var help = new HelpFlag(name2, doc);
      var step3 = function(stk) {
        return function(args) {
          var v = flag$prime(name2)(args);
          if (v instanceof ArgHalt) {
            return new ArgHalt(v.value0);
          }
          ;
          if (v instanceof ArgFail) {
            return ArgFail.value;
          }
          ;
          if (v instanceof ArgMatch) {
            return new ArgHalt(new ArgError(new Cons(help, stk), new ShowInfo(info2)));
          }
          ;
          throw new Error("Failed pattern match at ArgParse.Basic (line 483, column 5 - line 486, column 70): " + [v.constructor.name]);
        };
      };
      var done = $$const(new Right(unit));
      return new ArgParser(help, {
        step: step3,
        done,
        saturated: true
      });
    };
  };
};
var failDup = function(help) {
  return function(errMsg) {
    return function(v) {
      var step3 = function(stk) {
        return function(args) {
          var v1 = v.step(stk)(args);
          if (v1 instanceof ArgHalt) {
            return new ArgHalt(v1.value0);
          }
          ;
          if (v1 instanceof ArgFail) {
            return ArgFail.value;
          }
          ;
          if (v1 instanceof ArgMatch) {
            return new ArgHalt(new ArgError(new Cons(help, stk), errMsg));
          }
          ;
          throw new Error("Failed pattern match at ArgParse.Basic (line 195, column 5 - line 198, column 61): " + [v1.constructor.name]);
        };
      };
      return {
        step: step3,
        done: v.done,
        saturated: true
      };
    };
  };
};
var flag = function(name2) {
  return function(doc) {
    var help = new HelpFlag(name2, doc);
    var step3 = function(v) {
      var $480 = map42(function(value) {
        return failDup(help)(DuplicateArg.value)({
          step: step3,
          done: $$const(new Right(value)),
          saturated: true
        });
      });
      var $481 = flag$prime(name2);
      return function($482) {
        return $480($481($482));
      };
    };
    var done = function(stk) {
      return new Left(new ArgError(new Cons(help, stk), ExpectedFlag.value));
    };
    return new ArgParser(help, {
      step: step3,
      done,
      saturated: false
    });
  };
};
var fail = function(err) {
  return {
    step: function(v) {
      return function(v1) {
        return new ArgHalt(err);
      };
    },
    done: $$const(new Left(err)),
    saturated: true
  };
};
var many = function(v) {
  var go2 = function(acc) {
    return function(stk) {
      return function(v1) {
        if (v1.saturated) {
          var v2 = v1.done(stk);
          if (v2 instanceof Left) {
            return fail(v2.value0);
          }
          ;
          if (v2 instanceof Right) {
            return go1(new Cons(v2.value0, acc))(false)(v.value1);
          }
          ;
          throw new Error("Failed pattern match at ArgParse.Basic (line 343, column 7 - line 347, column 32): " + [v2.constructor.name]);
        }
        ;
        return go1(acc)(true)(v1);
      };
    };
  };
  var go1 = function(acc) {
    return function(parsing) {
      return function(v1) {
        return {
          step: function(stk) {
            var $483 = map42(go2(acc)(stk));
            var $484 = v1.step(stk);
            return function($485) {
              return $483($484($485));
            };
          },
          done: function(stk) {
            if (parsing) {
              return bind3(v1.done(stk))(function(next2) {
                return new Right(reverse2(new Cons(next2, acc)));
              });
            }
            ;
            return new Right(reverse2(acc));
          },
          saturated: false
        };
      };
    };
  };
  return new ArgParser(v.value0, go1(Nil.value)(false)(v.value1));
};
var many1 = /* @__PURE__ */ function() {
  var go = function(values3) {
    var v = fromList(values3);
    if (v instanceof Nothing) {
      return new Left(ExpectedArg.value);
    }
    ;
    if (v instanceof Just) {
      return new Right(v.value0);
    }
    ;
    throw new Error("Failed pattern match at ArgParse.Basic (line 357, column 5 - line 361, column 22): " + [v.constructor.name]);
  };
  var $488 = partial(go);
  return function($489) {
    return $488(many($489));
  };
}();
var unfolded1 = function(dictUnfoldable1) {
  var go = function(nel) {
    return new Tuple(head3(nel), fromList(tail3(nel)));
  };
  var $492 = map62(unfoldr1(dictUnfoldable1)(go));
  return function($493) {
    return $492(many1($493));
  };
};
var eqHelpClass = {
  eq: function(x) {
    return function(y) {
      if (x instanceof IsFlag && y instanceof IsFlag) {
        return eq3(x.value0)(y.value0);
      }
      ;
      if (x instanceof IsAny && y instanceof IsAny) {
        return x.value0 === y.value0;
      }
      ;
      if (x instanceof IsCommand && y instanceof IsCommand) {
        return eq3(x.value0)(y.value0);
      }
      ;
      return false;
    };
  }
};
var ordHelpClass = {
  compare: function(x) {
    return function(y) {
      if (x instanceof IsFlag && y instanceof IsFlag) {
        return compare3(x.value0)(y.value0);
      }
      ;
      if (x instanceof IsFlag) {
        return LT.value;
      }
      ;
      if (y instanceof IsFlag) {
        return GT.value;
      }
      ;
      if (x instanceof IsAny && y instanceof IsAny) {
        return compare13(x.value0)(y.value0);
      }
      ;
      if (x instanceof IsAny) {
        return LT.value;
      }
      ;
      if (y instanceof IsAny) {
        return GT.value;
      }
      ;
      if (x instanceof IsCommand && y instanceof IsCommand) {
        return compare3(x.value0)(y.value0);
      }
      ;
      throw new Error("Failed pattern match at ArgParse.Basic (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
    };
  },
  Eq0: function() {
    return eqHelpClass;
  }
};
var comparing2 = /* @__PURE__ */ comparing(ordHelpClass);
var printHelpTable = function(stk) {
  var groupFn = function(v) {
    return function(v1) {
      if (v instanceof IsFlag && v1 instanceof IsFlag) {
        return true;
      }
      ;
      if (v instanceof IsAny && v1 instanceof IsAny) {
        return true;
      }
      ;
      if (v instanceof IsCommand && v1 instanceof IsCommand) {
        return true;
      }
      ;
      return false;
    };
  };
  var $496 = intercalate12([[new Text("")]]);
  var $497 = map9(function() {
    var $502 = map9(snd);
    return function($503) {
      return $502(toArray($503));
    };
  }());
  var $498 = groupBy(on(groupFn)(fst));
  var $499 = sortBy(comparing2(fst));
  var $500 = printHelpTable$prime(stk);
  return function($501) {
    return $496($497($498($499($500($501)))));
  };
};
var printHelp$prime = function(stk) {
  return function(v) {
    if (v instanceof HelpFormat) {
      return printHelp$prime(new Cons(new HelpFormat(v.value0, v.value1), stk))(v.value1);
    }
    ;
    if (v instanceof HelpCommand) {
      return new Paras([new Lines([new Text(intercalate5(",")(v.value0)), new Indent(new Text(v.value1))]), new Indent(printHelp$prime(stk)(v.value2))]);
    }
    ;
    return new Table(printHelpTable(stk)(v));
  };
};
var printArgError = function(v) {
  var getCmd = function($copy_cmd) {
    return function($copy_desc) {
      return function($copy_help) {
        return function($copy_v1) {
          var $tco_var_cmd = $copy_cmd;
          var $tco_var_desc = $copy_desc;
          var $tco_var_help = $copy_help;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(cmd, desc, help, v1) {
            if (v1 instanceof Nil) {
              $tco_done = true;
              return {
                cmd,
                desc,
                help
              };
            }
            ;
            if (v1 instanceof Cons && v1.value0 instanceof HelpCommand) {
              $tco_var_cmd = new Cons(v1.value0.value0, cmd);
              $tco_var_desc = alt2(desc)(new Just(v1.value0.value1));
              $tco_var_help = alt2(help)(new Just(v1.value0.value2));
              $copy_v1 = v1.value1;
              return;
            }
            ;
            if (v1 instanceof Cons && v1.value0 instanceof HelpFlag) {
              $tco_var_cmd = new Cons(v1.value0.value0, cmd);
              $tco_var_desc = Nothing.value;
              $tco_var_help = new Just(new HelpFlag(v1.value0.value0, v1.value0.value1));
              $copy_v1 = v1.value1;
              return;
            }
            ;
            if (v1 instanceof Cons && v1.value0 instanceof HelpAny) {
              $tco_var_cmd = cmd;
              $tco_var_desc = Nothing.value;
              $tco_var_help = new Just(new HelpAny(v1.value0.value0));
              $copy_v1 = v1.value1;
              return;
            }
            ;
            if (v1 instanceof Cons && v1.value0 instanceof HelpFormat) {
              $tco_var_cmd = cmd;
              $tco_var_desc = desc;
              $tco_var_help = help;
              $copy_v1 = new Cons(v1.value0.value1, v1.value1);
              return;
            }
            ;
            if (v1 instanceof Cons) {
              $tco_var_cmd = cmd;
              $tco_var_desc = desc;
              $tco_var_help = help;
              $copy_v1 = v1.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at ArgParse.Basic (line 671, column 26 - line 682, column 30): " + [v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_cmd, $tco_var_desc, $tco_var_help, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
    };
  };
  var printArgError$prime = function(err) {
    var v1 = getCmd(Nil.value)(Nothing.value)(Nothing.value)(v.value0);
    return new Lines([new Text(intercalate22(" ")(map32(intercalate5(","))(v1.cmd))), new Indent(new Paras([err, maybe(new Lines([]))(Text.create)(v1.desc), maybe(new Lines([]))(printHelp$prime(v.value0))(v1.help)]))]);
  };
  return renderDoc(function() {
    if (v.value1 instanceof ExpectedFlag) {
      return printArgError$prime(new Text("Expected flag."));
    }
    ;
    if (v.value1 instanceof ExpectedArgValue) {
      if (v.value0 instanceof Cons && v.value0.value0 instanceof HelpFormat) {
        return printArgError$prime(new Text("Expected " + (v.value0.value0.value0 + ".")));
      }
      ;
      return printArgError$prime(new Text("Expected argument value."));
    }
    ;
    if (v.value1 instanceof ExpectedArg) {
      if (v.value0 instanceof Cons && v.value0.value0 instanceof HelpFormat) {
        return printArgError$prime(new Text("Expected " + (v.value0.value0.value0 + ".")));
      }
      ;
      if (v.value0 instanceof Cons && v.value0.value0 instanceof HelpChoose) {
        return printArgError$prime(new Text("Expected " + (v.value0.value0.value0 + ".")));
      }
      ;
      return printArgError$prime(new Text("Expected argument."));
    }
    ;
    if (v.value1 instanceof ExpectedRest) {
      return printArgError$prime(new Text("Expected rest arguments."));
    }
    ;
    if (v.value1 instanceof DuplicateArg) {
      if (v.value0 instanceof Cons && v.value0.value0 instanceof HelpChoose) {
        return printArgError$prime(new Text("Duplicate " + (v.value0.value0.value0 + ".")));
      }
      ;
      return printArgError$prime(new Text("Duplicate argument."));
    }
    ;
    if (v.value1 instanceof UnformatFailed) {
      return printArgError$prime(new Text(v.value1.value0));
    }
    ;
    if (v.value1 instanceof ShowHelp) {
      return printArgError$prime(new Lines([]));
    }
    ;
    if (v.value1 instanceof ShowInfo) {
      return new Text(v.value1.value0);
    }
    ;
    if (v.value1 instanceof UnknownArg) {
      return printArgError$prime(new Lines([new Text("Unexpected argument:"), new Indent(new Text(v.value1.value0))]));
    }
    ;
    throw new Error("Failed pattern match at ArgParse.Basic (line 633, column 13 - line 668, column 10): " + [v.value1.constructor.name]);
  }());
};
var $$default = function(value) {
  return function(v) {
    return new ArgParser(v.value0, {
      step: v.value1.step,
      done: function() {
        var $506 = either($$const(new Right(value)))(Right.create);
        return function($507) {
          return $506(v.value1.done($507));
        };
      }(),
      saturated: true
    });
  };
};
var optional = /* @__PURE__ */ function() {
  var $508 = $$default(Nothing.value);
  var $509 = map62(Just.create);
  return function($510) {
    return $508($509($510));
  };
}();
var choose = function(name2) {
  return function(parsers) {
    var help = new HelpChoose(name2, map9(parserHelp)(parsers));
    var go2 = function(stk) {
      return function(args) {
        return function(acc) {
          return function(v) {
            if (v instanceof Cons) {
              var v1 = v.value0.step(stk)(args);
              if (v1 instanceof ArgHalt) {
                return new ArgHalt(v1.value0);
              }
              ;
              if (v1 instanceof ArgFail) {
                return go2(stk)(args)(new Cons(v.value0, acc))(v.value1);
              }
              ;
              if (v1 instanceof ArgMatch) {
                if (v1.value0.saturated) {
                  return new ArgMatch(failDup(help)(DuplicateArg.value)({
                    step: go1(foldr13(Cons.create)(new Cons(v1.value0, v.value1))(acc)),
                    done: v1.value0.done,
                    saturated: true
                  }), v1.value1);
                }
                ;
                return new ArgMatch({
                  step: function(stk$prime) {
                    return function(args$prime$prime) {
                      return go2(stk$prime)(args$prime$prime)(acc)(new Cons(v1.value0, v.value1));
                    };
                  },
                  done: v1.value0.done,
                  saturated: false
                }, v1.value1);
              }
              ;
              throw new Error("Failed pattern match at ArgParse.Basic (line 421, column 7 - line 443, column 20): " + [v1.constructor.name]);
            }
            ;
            if (v instanceof Nil) {
              return ArgFail.value;
            }
            ;
            throw new Error("Failed pattern match at ArgParse.Basic (line 419, column 22 - line 445, column 14): " + [v.constructor.name]);
          };
        };
      };
    };
    var go1 = function(parsers$prime) {
      return function(stk) {
        return function(args) {
          return go2(stk)(args)(Nil.value)(parsers$prime);
        };
      };
    };
    return new ArgParser(help, {
      step: go1(fromFoldable3(map9(function(v) {
        return v.value1;
      })(parsers))),
      done: function(stk) {
        return new Left(new ArgError(new Cons(help, stk), ExpectedArg.value));
      },
      saturated: false
    });
  };
};
var buildRecordArgs = function(dict) {
  return dict.buildRecordArgs;
};
var fromRecord = function() {
  return function(dictBuildRecordArgs) {
    var $511 = map62(buildFromScratch);
    var $512 = buildRecordArgs(dictBuildRecordArgs)($$Proxy.value);
    return function($513) {
      return $511($512($513));
    };
  };
};
var $$boolean = /* @__PURE__ */ function() {
  var $514 = $$default(false);
  return function($515) {
    return $514(function(v) {
      return voidRight2(true)(v);
    }($515));
  };
}();
var argument$prime = function(stk) {
  return function(names) {
    var matchParam = function(arg) {
      return findMap(function() {
        var $516 = flip(stripPrefix)(arg);
        return function($517) {
          return $516(Pattern($517));
        };
      }())(names);
    };
    var go = function(v) {
      var v1 = function(v2) {
        return ArgFail.value;
      };
      if (v instanceof Cons) {
        var $411 = matchParam(v.value0);
        if ($411 instanceof Just) {
          var $412 = take3(1)($411.value0) === "=";
          if ($412) {
            return new ArgMatch(drop3(1)($411.value0), v.value1);
          }
          ;
          var $413 = $411.value0 === "";
          if ($413) {
            if (v.value1 instanceof Cons) {
              return new ArgMatch(v.value1.value0, v.value1.value1);
            }
            ;
            return new ArgHalt(new ArgError(stk, ExpectedArgValue.value));
          }
          ;
          return ArgFail.value;
        }
        ;
        return v1(true);
      }
      ;
      return v1(true);
    };
    return go;
  };
};
var argument = function(name2) {
  return function(doc) {
    var help = new HelpFlag(name2, doc);
    var step3 = function(stk) {
      var $518 = map42(function(value) {
        return failDup(help)(DuplicateArg.value)({
          step: step3,
          done: $$const(new Right(value)),
          saturated: true
        });
      });
      var $519 = argument$prime(new Cons(help, stk))(name2);
      return function($520) {
        return $518($519($520));
      };
    };
    var done = function(stk) {
      return new Left(new ArgError(new Cons(help, stk), ExpectedArg.value));
    };
    return new ArgParser(help, {
      step: step3,
      done,
      saturated: false
    });
  };
};
var applyArgFold = {
  apply: function(v) {
    return function(v1) {
      var step3 = function(stk) {
        return function(args) {
          var v2 = v.step(stk)(args);
          if (v2 instanceof ArgHalt) {
            return new ArgHalt(v2.value0);
          }
          ;
          if (v2 instanceof ArgMatch) {
            return new ArgMatch(apply2(applyArgFold)(v2.value0)(v1), v2.value1);
          }
          ;
          if (v2 instanceof ArgFail) {
            var v3 = v1.step(stk)(args);
            if (v3 instanceof ArgHalt) {
              return new ArgHalt(v3.value0);
            }
            ;
            if (v3 instanceof ArgMatch) {
              return new ArgMatch(apply2(applyArgFold)(v)(v3.value0), v3.value1);
            }
            ;
            if (v3 instanceof ArgFail) {
              return ArgFail.value;
            }
            ;
            throw new Error("Failed pattern match at ArgParse.Basic (line 166, column 11 - line 172, column 22): " + [v3.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at ArgParse.Basic (line 161, column 7 - line 172, column 22): " + [v2.constructor.name]);
        };
      };
      var done = function(stk) {
        return apply4(v.done(stk))(v1.done(stk));
      };
      return {
        step: step3,
        done,
        saturated: v.saturated && v1.saturated
      };
    };
  },
  Functor0: function() {
    return functorArgFold;
  }
};
var apply1 = /* @__PURE__ */ apply2(applyArgFold);
var applyParser = {
  apply: function(v) {
    return function(v1) {
      return new ArgParser(append22(v.value0)(v1.value0), apply1(v.value1)(v1.value1));
    };
  },
  Functor0: function() {
    return functorArgParser;
  }
};
var apply22 = /* @__PURE__ */ apply2(applyParser);
var buildArgsCons = function(dictIsSymbol) {
  var insert1 = insert3(dictIsSymbol);
  var get5 = get(dictIsSymbol)();
  return function() {
    return function() {
      return function() {
        return function(dictBuildRecordArgs) {
          var buildRecordArgs1 = buildRecordArgs(dictBuildRecordArgs);
          return {
            buildRecordArgs: function(v) {
              return function(rs) {
                return apply22(map62(function(a) {
                  return function(b) {
                    return composeFlipped1(insert1($$Proxy.value)(a))(b);
                  };
                })(get5($$Proxy.value)(rs)))(buildRecordArgs1($$Proxy.value)(rs));
              };
            }
          };
        };
      };
    };
  };
};
var applicativeArgFold = {
  pure: function(value) {
    return {
      step: function(v) {
        return function(v1) {
          return ArgFail.value;
        };
      },
      done: $$const(new Right(value)),
      saturated: true
    };
  },
  Apply0: function() {
    return applyArgFold;
  }
};
var pure1 = /* @__PURE__ */ pure(applicativeArgFold);
var buildRecordArgsNil = {
  buildRecordArgs: function(v) {
    return function(v1) {
      return new ArgParser(new HelpArgs([]), pure1(identity8));
    };
  }
};
var command = function(name2) {
  return function(doc) {
    return function(v) {
      var help = new HelpCommand(name2, doc, v.value0);
      var go = function(v1) {
        var step3 = function(stk) {
          return function(args) {
            var v2 = flag$prime(name2)(args);
            if (v2 instanceof ArgHalt) {
              return new ArgHalt(v2.value0);
            }
            ;
            if (v2 instanceof ArgFail) {
              return ArgFail.value;
            }
            ;
            if (v2 instanceof ArgMatch) {
              var v3 = parseArgs$prime(v1)(new Cons(help, stk))(v2.value1);
              if (v3 instanceof Left) {
                return new ArgHalt(v3.value0);
              }
              ;
              if (v3 instanceof Right) {
                return new ArgMatch(pure1(v3.value0), Nil.value);
              }
              ;
              throw new Error("Failed pattern match at ArgParse.Basic (line 555, column 11 - line 559, column 40): " + [v3.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at ArgParse.Basic (line 551, column 7 - line 559, column 40): " + [v2.constructor.name]);
          };
        };
        return {
          step: step3,
          done: v1.done,
          saturated: false
        };
      };
      return new ArgParser(help, go(v.value1));
    };
  };
};
var any3 = function(name2) {
  return function(doc) {
    return function(k) {
      var step3 = function(v) {
        return function(v1) {
          var v2 = function(v3) {
            return ArgFail.value;
          };
          if (v1 instanceof Cons) {
            var $454 = k(v1.value0);
            if ($454 instanceof Just) {
              return new ArgMatch(pure1($454.value0), v1.value1);
            }
            ;
            return v2(true);
          }
          ;
          return v2(true);
        };
      };
      var help = new HelpFormat(name2, new HelpAny(doc));
      var done = function(stk) {
        return new Left(new ArgError(new Cons(help, stk), ExpectedArg.value));
      };
      return new ArgParser(help, {
        step: step3,
        done,
        saturated: false
      });
    };
  };
};
var anyNotFlag = function(name2) {
  return function(doc) {
    return any3(name2)(doc)(function(str) {
      return voidLeft2(guard3(take4(1)(str) !== "-"))(str);
    });
  };
};

// output/Effect.Exception/foreign.js
function error(msg) {
  return new Error(msg);
}
function throwException(e) {
  return function() {
    throw e;
  };
}

// output/Effect.Exception/index.js
var $$throw = function($4) {
  return throwException(error($4));
};

// output/Control.Monad.Error.Class/index.js
var throwError = function(dict) {
  return dict.throwError;
};
var monadThrowEither = /* @__PURE__ */ function() {
  return {
    throwError: Left.create,
    Monad0: function() {
      return monadEither;
    }
  };
}();
var catchError = function(dict) {
  return dict.catchError;
};
var $$try = function(dictMonadError) {
  var catchError1 = catchError(dictMonadError);
  var Monad0 = dictMonadError.MonadThrow0().Monad0();
  var map31 = map(Monad0.Bind1().Apply0().Functor0());
  var pure20 = pure(Monad0.Applicative0());
  return function(a) {
    return catchError1(map31(Right.create)(a))(function($52) {
      return pure20(Left.create($52));
    });
  };
};

// output/Data.Argonaut.Core/foreign.js
function id(x) {
  return x;
}
var jsonNull = null;
function stringify(j) {
  return JSON.stringify(j);
}
function stringifyWithIndent(i) {
  return function(j) {
    return JSON.stringify(j, null, i);
  };
}
function _caseJson(isNull3, isBool, isNum, isStr, isArr, isObj, j) {
  if (j == null)
    return isNull3();
  else if (typeof j === "boolean")
    return isBool(j);
  else if (typeof j === "number")
    return isNum(j);
  else if (typeof j === "string")
    return isStr(j);
  else if (Object.prototype.toString.call(j) === "[object Array]")
    return isArr(j);
  else
    return isObj(j);
}

// output/Foreign.Object/foreign.js
function _copyST(m) {
  return function() {
    var r = {};
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r[k] = m[k];
      }
    }
    return r;
  };
}
var empty2 = {};
function runST(f) {
  return f();
}
function _fmapObject(m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(m0[k]);
    }
  }
  return m;
}
function _mapWithKey(m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(k)(m0[k]);
    }
  }
  return m;
}
function _foldM(bind17) {
  return function(f) {
    return function(mz) {
      return function(m) {
        var acc = mz;
        function g(k2) {
          return function(z) {
            return f(z)(k2)(m[k2]);
          };
        }
        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            acc = bind17(acc)(g(k));
          }
        }
        return acc;
      };
    };
  };
}
function _lookup(no, yes, k, m) {
  return k in m ? yes(m[k]) : no;
}
function toArrayWithKey(f) {
  return function(m) {
    var r = [];
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r.push(f(k)(m[k]));
      }
    }
    return r;
  };
}
var keys = Object.keys || toArrayWithKey(function(k) {
  return function() {
    return k;
  };
});

// output/Foreign.Object.ST/foreign.js
var newImpl = function() {
  return {};
};
function poke2(k) {
  return function(v) {
    return function(m) {
      return function() {
        m[k] = v;
        return m;
      };
    };
  };
}

// output/Foreign.Object/index.js
var bindFlipped3 = /* @__PURE__ */ bindFlipped(bindST);
var $$void5 = /* @__PURE__ */ $$void(functorST);
var foldr5 = /* @__PURE__ */ foldr(foldableArray);
var identity9 = /* @__PURE__ */ identity(categoryFn);
var values = /* @__PURE__ */ toArrayWithKey(function(v) {
  return function(v1) {
    return v1;
  };
});
var thawST = _copyST;
var singleton8 = function(k) {
  return function(v) {
    return runST(bindFlipped3(poke2(k)(v))(newImpl));
  };
};
var mutate = function(f) {
  return function(m) {
    return runST(function __do() {
      var s = thawST(m)();
      f(s)();
      return s;
    });
  };
};
var mapWithKey = function(f) {
  return function(m) {
    return _mapWithKey(m, f);
  };
};
var lookup = /* @__PURE__ */ function() {
  return runFn4(_lookup)(Nothing.value)(Just.create);
}();
var insert4 = function(k) {
  return function(v) {
    return mutate(poke2(k)(v));
  };
};
var functorObject = {
  map: function(f) {
    return function(m) {
      return _fmapObject(m, f);
    };
  }
};
var functorWithIndexObject = {
  mapWithIndex: mapWithKey,
  Functor0: function() {
    return functorObject;
  }
};
var fromFoldable4 = function(dictFoldable) {
  var fromFoldable14 = fromFoldable(dictFoldable);
  return function(l) {
    return runST(function __do() {
      var s = newImpl();
      foreach(fromFoldable14(l))(function(v) {
        return $$void5(poke2(v.value0)(v.value1)(s));
      })();
      return s;
    });
  };
};
var fold2 = /* @__PURE__ */ _foldM(applyFlipped);
var foldMap2 = function(dictMonoid) {
  var append19 = append(dictMonoid.Semigroup0());
  var mempty9 = mempty(dictMonoid);
  return function(f) {
    return fold2(function(acc) {
      return function(k) {
        return function(v) {
          return append19(acc)(f(k)(v));
        };
      };
    })(mempty9);
  };
};
var foldableObject = {
  foldl: function(f) {
    return fold2(function(z) {
      return function(v) {
        return f(z);
      };
    });
  },
  foldr: function(f) {
    return function(z) {
      return function(m) {
        return foldr5(f)(z)(values(m));
      };
    };
  },
  foldMap: function(dictMonoid) {
    var foldMap15 = foldMap2(dictMonoid);
    return function(f) {
      return foldMap15($$const(f));
    };
  }
};
var foldableWithIndexObject = {
  foldlWithIndex: function(f) {
    return fold2(flip(f));
  },
  foldrWithIndex: function(f) {
    return function(z) {
      return function(m) {
        return foldr5(uncurry(f))(z)(toArrayWithKey(Tuple.create)(m));
      };
    };
  },
  foldMapWithIndex: function(dictMonoid) {
    return foldMap2(dictMonoid);
  },
  Foldable0: function() {
    return foldableObject;
  }
};
var traversableWithIndexObject = {
  traverseWithIndex: function(dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply8 = apply2(Apply0);
    var map31 = map(Apply0.Functor0());
    var pure111 = pure(dictApplicative);
    return function(f) {
      return function(ms) {
        return fold2(function(acc) {
          return function(k) {
            return function(v) {
              return apply8(map31(flip(insert4(k)))(acc))(f(k)(v));
            };
          };
        })(pure111(empty2))(ms);
      };
    };
  },
  FunctorWithIndex0: function() {
    return functorWithIndexObject;
  },
  FoldableWithIndex1: function() {
    return foldableWithIndexObject;
  },
  Traversable2: function() {
    return traversableObject;
  }
};
var traversableObject = {
  traverse: function(dictApplicative) {
    var $93 = traverseWithIndex(traversableWithIndexObject)(dictApplicative);
    return function($94) {
      return $93($$const($94));
    };
  },
  sequence: function(dictApplicative) {
    return traverse(traversableObject)(dictApplicative)(identity9);
  },
  Functor0: function() {
    return functorObject;
  },
  Foldable1: function() {
    return foldableObject;
  }
};

// output/Data.Argonaut.Core/index.js
var verbJsonType = function(def) {
  return function(f) {
    return function(g) {
      return g(def)(f);
    };
  };
};
var toJsonType = /* @__PURE__ */ function() {
  return verbJsonType(Nothing.value)(Just.create);
}();
var jsonSingletonObject = function(key) {
  return function(val) {
    return id(singleton8(key)(val));
  };
};
var jsonEmptyObject = /* @__PURE__ */ id(empty2);
var isJsonType = /* @__PURE__ */ verbJsonType(false)(/* @__PURE__ */ $$const(true));
var caseJsonString = function(d) {
  return function(f) {
    return function(j) {
      return _caseJson($$const(d), $$const(d), $$const(d), f, $$const(d), $$const(d), j);
    };
  };
};
var caseJsonObject = function(d) {
  return function(f) {
    return function(j) {
      return _caseJson($$const(d), $$const(d), $$const(d), $$const(d), $$const(d), f, j);
    };
  };
};
var toObject = /* @__PURE__ */ toJsonType(caseJsonObject);
var caseJsonNumber = function(d) {
  return function(f) {
    return function(j) {
      return _caseJson($$const(d), $$const(d), f, $$const(d), $$const(d), $$const(d), j);
    };
  };
};
var caseJsonNull = function(d) {
  return function(f) {
    return function(j) {
      return _caseJson(f, $$const(d), $$const(d), $$const(d), $$const(d), $$const(d), j);
    };
  };
};
var isNull = /* @__PURE__ */ isJsonType(caseJsonNull);

// output/Data.Argonaut.Decode.Error/index.js
var show1 = /* @__PURE__ */ show(showInt);
var TypeMismatch = /* @__PURE__ */ function() {
  function TypeMismatch2(value0) {
    this.value0 = value0;
  }
  ;
  TypeMismatch2.create = function(value0) {
    return new TypeMismatch2(value0);
  };
  return TypeMismatch2;
}();
var UnexpectedValue = /* @__PURE__ */ function() {
  function UnexpectedValue2(value0) {
    this.value0 = value0;
  }
  ;
  UnexpectedValue2.create = function(value0) {
    return new UnexpectedValue2(value0);
  };
  return UnexpectedValue2;
}();
var AtIndex = /* @__PURE__ */ function() {
  function AtIndex2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  AtIndex2.create = function(value0) {
    return function(value1) {
      return new AtIndex2(value0, value1);
    };
  };
  return AtIndex2;
}();
var AtKey = /* @__PURE__ */ function() {
  function AtKey2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  AtKey2.create = function(value0) {
    return function(value1) {
      return new AtKey2(value0, value1);
    };
  };
  return AtKey2;
}();
var Named = /* @__PURE__ */ function() {
  function Named2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Named2.create = function(value0) {
    return function(value1) {
      return new Named2(value0, value1);
    };
  };
  return Named2;
}();
var MissingValue = /* @__PURE__ */ function() {
  function MissingValue2() {
  }
  ;
  MissingValue2.value = new MissingValue2();
  return MissingValue2;
}();
var printJsonDecodeError = function(err) {
  var go = function(v) {
    if (v instanceof TypeMismatch) {
      return "  Expected value of type '" + (v.value0 + "'.");
    }
    ;
    if (v instanceof UnexpectedValue) {
      return "  Unexpected value " + (stringify(v.value0) + ".");
    }
    ;
    if (v instanceof AtIndex) {
      return "  At array index " + (show1(v.value0) + (":\n" + go(v.value1)));
    }
    ;
    if (v instanceof AtKey) {
      return "  At object key '" + (v.value0 + ("':\n" + go(v.value1)));
    }
    ;
    if (v instanceof Named) {
      return "  Under '" + (v.value0 + ("':\n" + go(v.value1)));
    }
    ;
    if (v instanceof MissingValue) {
      return "  No value was found.";
    }
    ;
    throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 37, column 8 - line 43, column 44): " + [v.constructor.name]);
  };
  return "An error occurred while decoding a JSON value:\n" + go(err);
};

// output/Data.Lazy/foreign.js
var defer2 = function(thunk) {
  var v = null;
  return function() {
    if (thunk === void 0)
      return v;
    v = thunk();
    thunk = void 0;
    return v;
  };
};
var force = function(l) {
  return l();
};

// output/Data.Lazy/index.js
var functorLazy = {
  map: function(f) {
    return function(l) {
      return defer2(function(v) {
        return f(force(l));
      });
    };
  }
};

// output/Data.List.Lazy.Types/index.js
var unwrap2 = /* @__PURE__ */ unwrap();
var List = function(x) {
  return x;
};
var Nil2 = /* @__PURE__ */ function() {
  function Nil3() {
  }
  ;
  Nil3.value = new Nil3();
  return Nil3;
}();
var Cons2 = /* @__PURE__ */ function() {
  function Cons3(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Cons3.create = function(value0) {
    return function(value1) {
      return new Cons3(value0, value1);
    };
  };
  return Cons3;
}();
var nil = /* @__PURE__ */ defer2(function(v) {
  return Nil2.value;
});
var step = function($319) {
  return force(unwrap2($319));
};
var lazyList = {
  defer: function(f) {
    return defer2(function($320) {
      return step(f($320));
    });
  }
};
var defer3 = /* @__PURE__ */ defer(lazyList);
var cons4 = function(x) {
  return function(xs) {
    return defer2(function(v) {
      return new Cons2(x, xs);
    });
  };
};
var foldableList2 = {
  foldr: function(op) {
    return function(z) {
      return function(xs) {
        var rev = foldl(foldableList2)(flip(cons4))(nil);
        return foldl(foldableList2)(flip(op))(z)(rev(xs));
      };
    };
  },
  foldl: function(op) {
    var go = function($copy_b) {
      return function($copy_xs) {
        var $tco_var_b = $copy_b;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(b, xs) {
          var v = step(xs);
          if (v instanceof Nil2) {
            $tco_done = true;
            return b;
          }
          ;
          if (v instanceof Cons2) {
            $tco_var_b = op(b)(v.value0);
            $copy_xs = v.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy.Types (line 127, column 7 - line 129, column 40): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_b, $copy_xs);
        }
        ;
        return $tco_result;
      };
    };
    return go;
  },
  foldMap: function(dictMonoid) {
    var append25 = append(dictMonoid.Semigroup0());
    var mempty9 = mempty(dictMonoid);
    return function(f) {
      return foldl(foldableList2)(function(b) {
        return function(a) {
          return append25(b)(f(a));
        };
      })(mempty9);
    };
  }
};
var unfoldable1List = {
  unfoldr1: /* @__PURE__ */ function() {
    var go = function(f) {
      return function(b) {
        return defer3(function(v) {
          var v1 = f(b);
          if (v1.value1 instanceof Just) {
            return cons4(v1.value0)(go(f)(v1.value1.value0));
          }
          ;
          if (v1.value1 instanceof Nothing) {
            return cons4(v1.value0)(nil);
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy.Types (line 151, column 28 - line 153, column 33): " + [v1.constructor.name]);
        });
      };
    };
    return go;
  }()
};
var unfoldableList = {
  unfoldr: /* @__PURE__ */ function() {
    var go = function(f) {
      return function(b) {
        return defer3(function(v) {
          var v1 = f(b);
          if (v1 instanceof Nothing) {
            return nil;
          }
          ;
          if (v1 instanceof Just) {
            return cons4(v1.value0.value0)(go(f)(v1.value0.value1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.Lazy.Types (line 157, column 28 - line 159, column 39): " + [v1.constructor.name]);
        });
      };
    };
    return go;
  }(),
  Unfoldable10: function() {
    return unfoldable1List;
  }
};

// output/Data.List.Lazy/index.js
var map10 = /* @__PURE__ */ map(functorLazy);
var unwrap3 = /* @__PURE__ */ unwrap();
var filter3 = function(p) {
  var go = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      if (v instanceof Nil2) {
        $tco_done = true;
        return Nil2.value;
      }
      ;
      if (v instanceof Cons2) {
        if (p(v.value0)) {
          $tco_done = true;
          return new Cons2(v.value0, filter3(p)(v.value1));
        }
        ;
        if (otherwise) {
          $copy_v = step(v.value1);
          return;
        }
        ;
      }
      ;
      throw new Error("Failed pattern match at Data.List.Lazy (line 416, column 3 - line 416, column 15): " + [v.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var $342 = map10(go);
  return function($343) {
    return List($342(unwrap3($343)));
  };
};

// output/Data.Map.Internal/index.js
var Leaf = /* @__PURE__ */ function() {
  function Leaf2() {
  }
  ;
  Leaf2.value = new Leaf2();
  return Leaf2;
}();
var Two = /* @__PURE__ */ function() {
  function Two2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  Two2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new Two2(value0, value1, value2, value3);
        };
      };
    };
  };
  return Two2;
}();
var Three = /* @__PURE__ */ function() {
  function Three2(value0, value1, value2, value3, value4, value5, value6) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }
  ;
  Three2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return function(value4) {
            return function(value5) {
              return function(value6) {
                return new Three2(value0, value1, value2, value3, value4, value5, value6);
              };
            };
          };
        };
      };
    };
  };
  return Three2;
}();
var TwoLeft = /* @__PURE__ */ function() {
  function TwoLeft2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  TwoLeft2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new TwoLeft2(value0, value1, value2);
      };
    };
  };
  return TwoLeft2;
}();
var TwoRight = /* @__PURE__ */ function() {
  function TwoRight2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  TwoRight2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new TwoRight2(value0, value1, value2);
      };
    };
  };
  return TwoRight2;
}();
var ThreeLeft = /* @__PURE__ */ function() {
  function ThreeLeft2(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }
  ;
  ThreeLeft2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return function(value4) {
            return function(value5) {
              return new ThreeLeft2(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };
  return ThreeLeft2;
}();
var ThreeMiddle = /* @__PURE__ */ function() {
  function ThreeMiddle2(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }
  ;
  ThreeMiddle2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return function(value4) {
            return function(value5) {
              return new ThreeMiddle2(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };
  return ThreeMiddle2;
}();
var ThreeRight = /* @__PURE__ */ function() {
  function ThreeRight2(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }
  ;
  ThreeRight2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return function(value4) {
            return function(value5) {
              return new ThreeRight2(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };
  return ThreeRight2;
}();
var KickUp = /* @__PURE__ */ function() {
  function KickUp2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  KickUp2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new KickUp2(value0, value1, value2, value3);
        };
      };
    };
  };
  return KickUp2;
}();
var singleton9 = function(k) {
  return function(v) {
    return new Two(Leaf.value, k, v, Leaf.value);
  };
};
var toUnfoldable3 = function(dictUnfoldable) {
  var unfoldr3 = unfoldr(dictUnfoldable);
  return function(m) {
    var go = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v instanceof Nil) {
          $tco_done = true;
          return Nothing.value;
        }
        ;
        if (v instanceof Cons) {
          if (v.value0 instanceof Leaf) {
            $copy_v = v.value1;
            return;
          }
          ;
          if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
            $tco_done = true;
            return new Just(new Tuple(new Tuple(v.value0.value1, v.value0.value2), v.value1));
          }
          ;
          if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
            $tco_done = true;
            return new Just(new Tuple(new Tuple(v.value0.value1, v.value0.value2), new Cons(v.value0.value3, v.value1)));
          }
          ;
          if (v.value0 instanceof Two) {
            $copy_v = new Cons(v.value0.value0, new Cons(singleton9(v.value0.value1)(v.value0.value2), new Cons(v.value0.value3, v.value1)));
            return;
          }
          ;
          if (v.value0 instanceof Three) {
            $copy_v = new Cons(v.value0.value0, new Cons(singleton9(v.value0.value1)(v.value0.value2), new Cons(v.value0.value3, new Cons(singleton9(v.value0.value4)(v.value0.value5), new Cons(v.value0.value6, v.value1)))));
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 624, column 18 - line 633, column 71): " + [v.value0.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 623, column 3 - line 623, column 19): " + [v.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    return unfoldr3(go)(new Cons(m, Nil.value));
  };
};
var toUnfoldable1 = /* @__PURE__ */ toUnfoldable3(unfoldableList);
var lookup2 = function(dictOrd) {
  var compare10 = compare(dictOrd);
  return function(k) {
    var go = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v instanceof Leaf) {
          $tco_done = true;
          return Nothing.value;
        }
        ;
        if (v instanceof Two) {
          var v2 = compare10(k)(v.value1);
          if (v2 instanceof EQ) {
            $tco_done = true;
            return new Just(v.value2);
          }
          ;
          if (v2 instanceof LT) {
            $copy_v = v.value0;
            return;
          }
          ;
          $copy_v = v.value3;
          return;
        }
        ;
        if (v instanceof Three) {
          var v3 = compare10(k)(v.value1);
          if (v3 instanceof EQ) {
            $tco_done = true;
            return new Just(v.value2);
          }
          ;
          var v4 = compare10(k)(v.value4);
          if (v4 instanceof EQ) {
            $tco_done = true;
            return new Just(v.value5);
          }
          ;
          if (v3 instanceof LT) {
            $copy_v = v.value0;
            return;
          }
          ;
          if (v4 instanceof GT) {
            $copy_v = v.value6;
            return;
          }
          ;
          $copy_v = v.value3;
          return;
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [v.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    return go;
  };
};
var member = function(dictOrd) {
  var lookup12 = lookup2(dictOrd);
  return function(k) {
    return function(m) {
      return isJust(lookup12(k)(m));
    };
  };
};
var isEmpty = function(v) {
  if (v instanceof Leaf) {
    return true;
  }
  ;
  return false;
};
var functorMap = {
  map: function(v) {
    return function(v1) {
      if (v1 instanceof Leaf) {
        return Leaf.value;
      }
      ;
      if (v1 instanceof Two) {
        return new Two(map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), map(functorMap)(v)(v1.value3));
      }
      ;
      if (v1 instanceof Three) {
        return new Three(map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), map(functorMap)(v)(v1.value6));
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 116, column 1 - line 119, column 110): " + [v.constructor.name, v1.constructor.name]);
    };
  }
};
var fromZipper = function($copy_dictOrd) {
  return function($copy_v) {
    return function($copy_tree) {
      var $tco_var_dictOrd = $copy_dictOrd;
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(dictOrd, v, tree) {
        if (v instanceof Nil) {
          $tco_done = true;
          return tree;
        }
        ;
        if (v instanceof Cons) {
          if (v.value0 instanceof TwoLeft) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
            return;
          }
          ;
          if (v.value0 instanceof TwoRight) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
            return;
          }
          ;
          if (v.value0 instanceof ThreeLeft) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
            return;
          }
          ;
          if (v.value0 instanceof ThreeMiddle) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
            return;
          }
          ;
          if (v.value0 instanceof ThreeRight) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 462, column 3 - line 467, column 88): " + [v.value0.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 459, column 1 - line 459, column 80): " + [v.constructor.name, tree.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
      }
      ;
      return $tco_result;
    };
  };
};
var insert5 = function(dictOrd) {
  var fromZipper1 = fromZipper(dictOrd);
  var compare10 = compare(dictOrd);
  return function(k) {
    return function(v) {
      var up = function($copy_v1) {
        return function($copy_v2) {
          var $tco_var_v1 = $copy_v1;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v1, v2) {
            if (v1 instanceof Nil) {
              $tco_done = true;
              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
            }
            ;
            if (v1 instanceof Cons) {
              if (v1.value0 instanceof TwoLeft) {
                $tco_done = true;
                return fromZipper1(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
              }
              ;
              if (v1.value0 instanceof TwoRight) {
                $tco_done = true;
                return fromZipper1(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
              }
              ;
              if (v1.value0 instanceof ThreeLeft) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                return;
              }
              ;
              if (v1.value0 instanceof ThreeMiddle) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                return;
              }
              ;
              if (v1.value0 instanceof ThreeRight) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 498, column 5 - line 503, column 108): " + [v1.value0.constructor.name, v2.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 3 - line 495, column 56): " + [v1.constructor.name, v2.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v1, $copy_v2);
          }
          ;
          return $tco_result;
        };
      };
      var down = function($copy_ctx) {
        return function($copy_v1) {
          var $tco_var_ctx = $copy_ctx;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(ctx, v1) {
            if (v1 instanceof Leaf) {
              $tco_done1 = true;
              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
            }
            ;
            if (v1 instanceof Two) {
              var v2 = compare10(k)(v1.value1);
              if (v2 instanceof EQ) {
                $tco_done1 = true;
                return fromZipper1(ctx)(new Two(v1.value0, k, v, v1.value3));
              }
              ;
              if (v2 instanceof LT) {
                $tco_var_ctx = new Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                $copy_v1 = v1.value0;
                return;
              }
              ;
              $tco_var_ctx = new Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
              $copy_v1 = v1.value3;
              return;
            }
            ;
            if (v1 instanceof Three) {
              var v3 = compare10(k)(v1.value1);
              if (v3 instanceof EQ) {
                $tco_done1 = true;
                return fromZipper1(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
              }
              ;
              var v4 = compare10(k)(v1.value4);
              if (v4 instanceof EQ) {
                $tco_done1 = true;
                return fromZipper1(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
              }
              ;
              if (v3 instanceof LT) {
                $tco_var_ctx = new Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                $copy_v1 = v1.value0;
                return;
              }
              ;
              if (v3 instanceof GT && v4 instanceof LT) {
                $tco_var_ctx = new Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                $copy_v1 = v1.value3;
                return;
              }
              ;
              $tco_var_ctx = new Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
              $copy_v1 = v1.value6;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 478, column 3 - line 478, column 55): " + [ctx.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return down(Nil.value);
    };
  };
};
var pop = function(dictOrd) {
  var fromZipper1 = fromZipper(dictOrd);
  var compare10 = compare(dictOrd);
  return function(k) {
    var up = function($copy_ctxs) {
      return function($copy_tree) {
        var $tco_var_ctxs = $copy_ctxs;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(ctxs, tree) {
          if (ctxs instanceof Nil) {
            $tco_done = true;
            return tree;
          }
          ;
          if (ctxs instanceof Cons) {
            if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
              $tco_var_ctxs = ctxs.value1;
              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
              return;
            }
            ;
            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
              $tco_var_ctxs = ctxs.value1;
              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
              return;
            }
            ;
            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
            }
            ;
            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
            }
            ;
            if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
            }
            ;
            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
            }
            ;
            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
            }
            ;
            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
            }
            ;
            $tco_done = true;
            return unsafeCrashWith("The impossible happened in partial function `up`.");
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 552, column 5 - line 573, column 86): " + [ctxs.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
        }
        ;
        return $tco_result;
      };
    };
    var removeMaxNode = function($copy_ctx) {
      return function($copy_m) {
        var $tco_var_ctx = $copy_ctx;
        var $tco_done1 = false;
        var $tco_result;
        function $tco_loop(ctx, m) {
          if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
            $tco_done1 = true;
            return up(ctx)(Leaf.value);
          }
          ;
          if (m instanceof Two) {
            $tco_var_ctx = new Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
            $copy_m = m.value3;
            return;
          }
          ;
          if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
            $tco_done1 = true;
            return up(new Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
          }
          ;
          if (m instanceof Three) {
            $tco_var_ctx = new Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
            $copy_m = m.value6;
            return;
          }
          ;
          $tco_done1 = true;
          return unsafeCrashWith("The impossible happened in partial function `removeMaxNode`.");
        }
        ;
        while (!$tco_done1) {
          $tco_result = $tco_loop($tco_var_ctx, $copy_m);
        }
        ;
        return $tco_result;
      };
    };
    var maxNode = function($copy_m) {
      var $tco_done2 = false;
      var $tco_result;
      function $tco_loop(m) {
        if (m instanceof Two && m.value3 instanceof Leaf) {
          $tco_done2 = true;
          return {
            key: m.value1,
            value: m.value2
          };
        }
        ;
        if (m instanceof Two) {
          $copy_m = m.value3;
          return;
        }
        ;
        if (m instanceof Three && m.value6 instanceof Leaf) {
          $tco_done2 = true;
          return {
            key: m.value4,
            value: m.value5
          };
        }
        ;
        if (m instanceof Three) {
          $copy_m = m.value6;
          return;
        }
        ;
        $tco_done2 = true;
        return unsafeCrashWith("The impossible happened in partial function `maxNode`.");
      }
      ;
      while (!$tco_done2) {
        $tco_result = $tco_loop($copy_m);
      }
      ;
      return $tco_result;
    };
    var down = function($copy_ctx) {
      return function($copy_m) {
        var $tco_var_ctx = $copy_ctx;
        var $tco_done3 = false;
        var $tco_result;
        function $tco_loop(ctx, m) {
          if (m instanceof Leaf) {
            $tco_done3 = true;
            return Nothing.value;
          }
          ;
          if (m instanceof Two) {
            var v = compare10(k)(m.value1);
            if (m.value3 instanceof Leaf && v instanceof EQ) {
              $tco_done3 = true;
              return new Just(new Tuple(m.value2, up(ctx)(Leaf.value)));
            }
            ;
            if (v instanceof EQ) {
              var max7 = maxNode(m.value0);
              $tco_done3 = true;
              return new Just(new Tuple(m.value2, removeMaxNode(new Cons(new TwoLeft(max7.key, max7.value, m.value3), ctx))(m.value0)));
            }
            ;
            if (v instanceof LT) {
              $tco_var_ctx = new Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
              $copy_m = m.value0;
              return;
            }
            ;
            $tco_var_ctx = new Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
            $copy_m = m.value3;
            return;
          }
          ;
          if (m instanceof Three) {
            var leaves = function() {
              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                return true;
              }
              ;
              return false;
            }();
            var v = compare10(k)(m.value4);
            var v3 = compare10(k)(m.value1);
            if (leaves && v3 instanceof EQ) {
              $tco_done3 = true;
              return new Just(new Tuple(m.value2, fromZipper1(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
            }
            ;
            if (leaves && v instanceof EQ) {
              $tco_done3 = true;
              return new Just(new Tuple(m.value5, fromZipper1(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
            }
            ;
            if (v3 instanceof EQ) {
              var max7 = maxNode(m.value0);
              $tco_done3 = true;
              return new Just(new Tuple(m.value2, removeMaxNode(new Cons(new ThreeLeft(max7.key, max7.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
            }
            ;
            if (v instanceof EQ) {
              var max7 = maxNode(m.value3);
              $tco_done3 = true;
              return new Just(new Tuple(m.value5, removeMaxNode(new Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max7.key, max7.value, m.value6), ctx))(m.value3)));
            }
            ;
            if (v3 instanceof LT) {
              $tco_var_ctx = new Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
              $copy_m = m.value0;
              return;
            }
            ;
            if (v3 instanceof GT && v instanceof LT) {
              $tco_var_ctx = new Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
              $copy_m = m.value3;
              return;
            }
            ;
            $tco_var_ctx = new Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
            $copy_m = m.value6;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 16 - line 548, column 80): " + [m.constructor.name]);
        }
        ;
        while (!$tco_done3) {
          $tco_result = $tco_loop($tco_var_ctx, $copy_m);
        }
        ;
        return $tco_result;
      };
    };
    return down(Nil.value);
  };
};
var foldableMap = {
  foldr: function(f) {
    return function(z) {
      return function(m) {
        if (m instanceof Leaf) {
          return z;
        }
        ;
        if (m instanceof Two) {
          return foldr(foldableMap)(f)(f(m.value2)(foldr(foldableMap)(f)(z)(m.value3)))(m.value0);
        }
        ;
        if (m instanceof Three) {
          return foldr(foldableMap)(f)(f(m.value2)(foldr(foldableMap)(f)(f(m.value5)(foldr(foldableMap)(f)(z)(m.value6)))(m.value3)))(m.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 133, column 17 - line 136, column 85): " + [m.constructor.name]);
      };
    };
  },
  foldl: function(f) {
    return function(z) {
      return function(m) {
        if (m instanceof Leaf) {
          return z;
        }
        ;
        if (m instanceof Two) {
          return foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(z)(m.value0))(m.value2))(m.value3);
        }
        ;
        if (m instanceof Three) {
          return foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(z)(m.value0))(m.value2))(m.value3))(m.value5))(m.value6);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 137, column 17 - line 140, column 85): " + [m.constructor.name]);
      };
    };
  },
  foldMap: function(dictMonoid) {
    var mempty9 = mempty(dictMonoid);
    var append25 = append(dictMonoid.Semigroup0());
    return function(f) {
      return function(m) {
        if (m instanceof Leaf) {
          return mempty9;
        }
        ;
        if (m instanceof Two) {
          return append25(foldMap(foldableMap)(dictMonoid)(f)(m.value0))(append25(f(m.value2))(foldMap(foldableMap)(dictMonoid)(f)(m.value3)));
        }
        ;
        if (m instanceof Three) {
          return append25(foldMap(foldableMap)(dictMonoid)(f)(m.value0))(append25(f(m.value2))(append25(foldMap(foldableMap)(dictMonoid)(f)(m.value3))(append25(f(m.value5))(foldMap(foldableMap)(dictMonoid)(f)(m.value6)))));
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 141, column 17 - line 144, column 93): " + [m.constructor.name]);
      };
    };
  }
};
var foldableWithIndexMap = {
  foldrWithIndex: function(f) {
    return function(z) {
      return function(m) {
        if (m instanceof Leaf) {
          return z;
        }
        ;
        if (m instanceof Two) {
          return foldrWithIndex(foldableWithIndexMap)(f)(f(m.value1)(m.value2)(foldrWithIndex(foldableWithIndexMap)(f)(z)(m.value3)))(m.value0);
        }
        ;
        if (m instanceof Three) {
          return foldrWithIndex(foldableWithIndexMap)(f)(f(m.value1)(m.value2)(foldrWithIndex(foldableWithIndexMap)(f)(f(m.value4)(m.value5)(foldrWithIndex(foldableWithIndexMap)(f)(z)(m.value6)))(m.value3)))(m.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 147, column 26 - line 150, column 120): " + [m.constructor.name]);
      };
    };
  },
  foldlWithIndex: function(f) {
    return function(z) {
      return function(m) {
        if (m instanceof Leaf) {
          return z;
        }
        ;
        if (m instanceof Two) {
          return foldlWithIndex(foldableWithIndexMap)(f)(f(m.value1)(foldlWithIndex(foldableWithIndexMap)(f)(z)(m.value0))(m.value2))(m.value3);
        }
        ;
        if (m instanceof Three) {
          return foldlWithIndex(foldableWithIndexMap)(f)(f(m.value4)(foldlWithIndex(foldableWithIndexMap)(f)(f(m.value1)(foldlWithIndex(foldableWithIndexMap)(f)(z)(m.value0))(m.value2))(m.value3))(m.value5))(m.value6);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 151, column 26 - line 154, column 120): " + [m.constructor.name]);
      };
    };
  },
  foldMapWithIndex: function(dictMonoid) {
    var mempty9 = mempty(dictMonoid);
    var append25 = append(dictMonoid.Semigroup0());
    return function(f) {
      return function(m) {
        if (m instanceof Leaf) {
          return mempty9;
        }
        ;
        if (m instanceof Two) {
          return append25(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value0))(append25(f(m.value1)(m.value2))(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value3)));
        }
        ;
        if (m instanceof Three) {
          return append25(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value0))(append25(f(m.value1)(m.value2))(append25(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value3))(append25(f(m.value4)(m.value5))(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f)(m.value6)))));
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 155, column 26 - line 158, column 128): " + [m.constructor.name]);
      };
    };
  },
  Foldable0: function() {
    return foldableMap;
  }
};
var foldrWithIndex2 = /* @__PURE__ */ foldrWithIndex(foldableWithIndexMap);
var foldlWithIndex2 = /* @__PURE__ */ foldlWithIndex(foldableWithIndexMap);
var keys2 = /* @__PURE__ */ function() {
  return foldrWithIndex2(function(k) {
    return function(v) {
      return function(acc) {
        return new Cons(k, acc);
      };
    };
  })(Nil.value);
}();
var findMin = /* @__PURE__ */ function() {
  var go = function($copy_v) {
    return function($copy_v1) {
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v, v1) {
        if (v1 instanceof Leaf) {
          $tco_done = true;
          return v;
        }
        ;
        if (v1 instanceof Two) {
          $tco_var_v = new Just({
            key: v1.value1,
            value: v1.value2
          });
          $copy_v1 = v1.value0;
          return;
        }
        ;
        if (v1 instanceof Three) {
          $tco_var_v = new Just({
            key: v1.value1,
            value: v1.value2
          });
          $copy_v1 = v1.value0;
          return;
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 338, column 5 - line 338, column 22): " + [v.constructor.name, v1.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_v, $copy_v1);
      }
      ;
      return $tco_result;
    };
  };
  return go(Nothing.value);
}();
var empty3 = /* @__PURE__ */ function() {
  return Leaf.value;
}();
var fromFoldable5 = function(dictOrd) {
  var insert1 = insert5(dictOrd);
  return function(dictFoldable) {
    return foldl(dictFoldable)(function(m) {
      return function(v) {
        return insert1(v.value0)(v.value1)(m);
      };
    })(empty3);
  };
};
var filterWithKey = function(dictOrd) {
  var fromFoldable14 = fromFoldable5(dictOrd)(foldableList2);
  return function(predicate) {
    var $923 = filter3(uncurry(predicate));
    return function($924) {
      return fromFoldable14($923(toUnfoldable1($924)));
    };
  };
};
var filter4 = function(dictOrd) {
  var filterWithKey1 = filterWithKey(dictOrd);
  return function(predicate) {
    return filterWithKey1($$const(predicate));
  };
};
var filterKeys = function(dictOrd) {
  var filterWithKey1 = filterWithKey(dictOrd);
  return function(predicate) {
    return filterWithKey1(function($925) {
      return $$const(predicate($925));
    });
  };
};
var $$delete2 = function(dictOrd) {
  var pop1 = pop(dictOrd);
  return function(k) {
    return function(m) {
      return maybe(m)(snd)(pop1(k)(m));
    };
  };
};
var alter = function(dictOrd) {
  var lookup12 = lookup2(dictOrd);
  var delete1 = $$delete2(dictOrd);
  var insert1 = insert5(dictOrd);
  return function(f) {
    return function(k) {
      return function(m) {
        var v = f(lookup12(k)(m));
        if (v instanceof Nothing) {
          return delete1(k)(m);
        }
        ;
        if (v instanceof Just) {
          return insert1(k)(v.value0)(m);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 596, column 15 - line 598, column 25): " + [v.constructor.name]);
      };
    };
  };
};
var fromFoldableWith = function(dictOrd) {
  var alter1 = alter(dictOrd);
  return function(dictFoldable) {
    var foldl14 = foldl(dictFoldable);
    return function(f) {
      var combine = function(v) {
        return function(v1) {
          if (v1 instanceof Just) {
            return new Just(f(v)(v1.value0));
          }
          ;
          if (v1 instanceof Nothing) {
            return new Just(v);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 613, column 3 - line 613, column 38): " + [v.constructor.name, v1.constructor.name]);
        };
      };
      return foldl14(function(m) {
        return function(v) {
          return alter1(combine(v.value1))(v.value0)(m);
        };
      })(empty3);
    };
  };
};
var insertWith = function(dictOrd) {
  var alter1 = alter(dictOrd);
  return function(f) {
    return function(k) {
      return function(v) {
        return alter1(function() {
          var $930 = maybe(v)(flip(f)(v));
          return function($931) {
            return Just.create($930($931));
          };
        }())(k);
      };
    };
  };
};
var unionWith = function(dictOrd) {
  var alter1 = alter(dictOrd);
  return function(f) {
    return function(m1) {
      return function(m2) {
        var go = function(k) {
          return function(m) {
            return function(v) {
              return alter1(function() {
                var $932 = maybe(v)(f(v));
                return function($933) {
                  return Just.create($932($933));
                };
              }())(k)(m);
            };
          };
        };
        return foldlWithIndex2(go)(m2)(m1);
      };
    };
  };
};
var union2 = function(dictOrd) {
  return unionWith(dictOrd)($$const);
};

// output/Data.Set/index.js
var foldMap3 = /* @__PURE__ */ foldMap(foldableList);
var foldl2 = /* @__PURE__ */ foldl(foldableList);
var foldr6 = /* @__PURE__ */ foldr(foldableList);
var map13 = /* @__PURE__ */ map(functorMaybe);
var $$Set = function(x) {
  return x;
};
var union3 = function(dictOrd) {
  var union1 = union2(dictOrd);
  return function(v) {
    return function(v1) {
      return union1(v)(v1);
    };
  };
};
var toList = function(v) {
  return keys2(v);
};
var toUnfoldable4 = function(dictUnfoldable) {
  var $127 = toUnfoldable2(dictUnfoldable);
  return function($128) {
    return $127(toList($128));
  };
};
var singleton10 = function(a) {
  return singleton9(a)(unit);
};
var semigroupSet = function(dictOrd) {
  return {
    append: union3(dictOrd)
  };
};
var member2 = function(dictOrd) {
  var member1 = member(dictOrd);
  return function(a) {
    return function(v) {
      return member1(a)(v);
    };
  };
};
var isEmpty2 = function(v) {
  return isEmpty(v);
};
var insert6 = function(dictOrd) {
  var insert1 = insert5(dictOrd);
  return function(a) {
    return function(v) {
      return insert1(a)(unit)(v);
    };
  };
};
var fromMap = $$Set;
var foldableSet = {
  foldMap: function(dictMonoid) {
    var foldMap15 = foldMap3(dictMonoid);
    return function(f) {
      var $129 = foldMap15(f);
      return function($130) {
        return $129(toList($130));
      };
    };
  },
  foldl: function(f) {
    return function(x) {
      var $131 = foldl2(f)(x);
      return function($132) {
        return $131(toList($132));
      };
    };
  },
  foldr: function(f) {
    return function(x) {
      var $133 = foldr6(f)(x);
      return function($134) {
        return $133(toList($134));
      };
    };
  }
};
var findMin2 = function(v) {
  return map13(function(v1) {
    return v1.key;
  })(findMin(v));
};
var empty4 = empty3;
var fromFoldable6 = function(dictFoldable) {
  var foldl22 = foldl(dictFoldable);
  return function(dictOrd) {
    var insert1 = insert6(dictOrd);
    return foldl22(function(m) {
      return function(a) {
        return insert1(a)(m);
      };
    })(empty4);
  };
};
var monoidSet = function(dictOrd) {
  var semigroupSet1 = semigroupSet(dictOrd);
  return {
    mempty: empty4,
    Semigroup0: function() {
      return semigroupSet1;
    }
  };
};
var $$delete3 = function(dictOrd) {
  var delete1 = $$delete2(dictOrd);
  return function(a) {
    return function(v) {
      return delete1(a)(v);
    };
  };
};

// output/Data.Argonaut.Decode.Decoders/index.js
var pure3 = /* @__PURE__ */ pure(applicativeEither);
var map11 = /* @__PURE__ */ map(functorEither);
var lmap3 = /* @__PURE__ */ lmap(bifunctorEither);
var composeKleisliFlipped2 = /* @__PURE__ */ composeKleisliFlipped(bindEither);
var traverse5 = /* @__PURE__ */ traverse(traversableObject)(applicativeEither);
var getFieldOptional$prime = function(decoder) {
  return function(obj) {
    return function(str) {
      var decode = function(json) {
        var $35 = isNull(json);
        if ($35) {
          return pure3(Nothing.value);
        }
        ;
        return map11(Just.create)(lmap3(AtKey.create(str))(decoder(json)));
      };
      return maybe(pure3(Nothing.value))(decode)(lookup(str)(obj));
    };
  };
};
var decodeString = /* @__PURE__ */ function() {
  return caseJsonString(new Left(new TypeMismatch("String")))(Right.create);
}();
var decodeNumber = /* @__PURE__ */ function() {
  return caseJsonNumber(new Left(new TypeMismatch("Number")))(Right.create);
}();
var decodeJObject = /* @__PURE__ */ function() {
  var $50 = note(new TypeMismatch("Object"));
  return function($51) {
    return $50(toObject($51));
  };
}();
var decodeInt = /* @__PURE__ */ composeKleisliFlipped2(/* @__PURE__ */ function() {
  var $84 = note(new TypeMismatch("Integer"));
  return function($85) {
    return $84(fromNumber($85));
  };
}())(decodeNumber);
var decodeForeignObject = function(decoder) {
  return composeKleisliFlipped2(function() {
    var $86 = lmap3(Named.create("ForeignObject"));
    var $87 = traverse5(decoder);
    return function($88) {
      return $86($87($88));
    };
  }())(decodeJObject);
};

// output/Data.Argonaut.Decode.Class/index.js
var decodeJsonString = {
  decodeJson: decodeString
};
var decodeJsonNumber = {
  decodeJson: decodeNumber
};
var decodeJsonJson = /* @__PURE__ */ function() {
  return {
    decodeJson: Right.create
  };
}();
var decodeJsonInt = {
  decodeJson: decodeInt
};
var decodeJson = function(dict) {
  return dict.decodeJson;
};
var decodeForeignObject2 = function(dictDecodeJson) {
  return {
    decodeJson: decodeForeignObject(decodeJson(dictDecodeJson))
  };
};

// output/Data.Argonaut.Decode.Combinators/index.js
var getFieldOptional$prime2 = function(dictDecodeJson) {
  return getFieldOptional$prime(decodeJson(dictDecodeJson));
};

// output/Data.Argonaut.Encode.Encoders/index.js
var extend2 = function(encoder) {
  return function(v) {
    var $40 = caseJsonObject(jsonSingletonObject(v.value0)(v.value1))(function() {
      var $42 = insert4(v.value0)(v.value1);
      return function($43) {
        return id($42($43));
      };
    }());
    return function($41) {
      return $40(encoder($41));
    };
  };
};
var encodeString = id;
var encodeNumber = id;
var encodeInt = function($53) {
  return id(toNumber($53));
};
var assoc = function(encoder) {
  return function(k) {
    var $64 = Tuple.create(k);
    return function($65) {
      return $64(encoder($65));
    };
  };
};

// output/Data.Argonaut.Encode.Class/index.js
var encodeJsonJson = {
  encodeJson: /* @__PURE__ */ identity(categoryFn)
};
var encodeJsonJString = {
  encodeJson: encodeString
};
var encodeJsonJNumber = {
  encodeJson: encodeNumber
};
var encodeJsonInt = {
  encodeJson: encodeInt
};
var encodeJson = function(dict) {
  return dict.encodeJson;
};

// output/Data.Argonaut.Encode.Combinators/index.js
var extend3 = function(dictEncodeJson) {
  return extend2(encodeJson(dictEncodeJson));
};
var assoc2 = function(dictEncodeJson) {
  return assoc(encodeJson(dictEncodeJson));
};

// output/Data.String.Regex/foreign.js
var regexImpl = function(left) {
  return function(right) {
    return function(s1) {
      return function(s2) {
        try {
          return right(new RegExp(s1, s2));
        } catch (e) {
          return left(e.message);
        }
      };
    };
  };
};
var _match = function(just) {
  return function(nothing) {
    return function(r) {
      return function(s) {
        var m = s.match(r);
        if (m == null || m.length === 0) {
          return nothing;
        } else {
          for (var i = 0; i < m.length; i++) {
            m[i] = m[i] == null ? nothing : just(m[i]);
          }
          return just(m);
        }
      };
    };
  };
};
var split2 = function(r) {
  return function(s) {
    return s.split(r);
  };
};

// output/Data.String.Regex.Flags/index.js
var unicode = {
  global: false,
  ignoreCase: false,
  multiline: false,
  dotAll: false,
  sticky: false,
  unicode: true
};
var global = {
  global: true,
  ignoreCase: false,
  multiline: false,
  dotAll: false,
  sticky: false,
  unicode: false
};

// output/Data.String.Regex/index.js
var renderFlags = function(v) {
  return function() {
    if (v.global) {
      return "g";
    }
    ;
    return "";
  }() + (function() {
    if (v.ignoreCase) {
      return "i";
    }
    ;
    return "";
  }() + (function() {
    if (v.multiline) {
      return "m";
    }
    ;
    return "";
  }() + (function() {
    if (v.dotAll) {
      return "s";
    }
    ;
    return "";
  }() + (function() {
    if (v.sticky) {
      return "y";
    }
    ;
    return "";
  }() + function() {
    if (v.unicode) {
      return "u";
    }
    ;
    return "";
  }()))));
};
var regex = function(s) {
  return function(f) {
    return regexImpl(Left.create)(Right.create)(s)(renderFlags(f));
  };
};
var match = /* @__PURE__ */ function() {
  return _match(Just.create)(Nothing.value);
}();

// output/Data.String.Regex.Unsafe/index.js
var identity10 = /* @__PURE__ */ identity(categoryFn);
var unsafeRegex = function(s) {
  return function(f) {
    return either(unsafeCrashWith)(identity10)(regex(s)(f));
  };
};

// output/Dodo.Internal/index.js
var Append = /* @__PURE__ */ function() {
  function Append2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Append2.create = function(value0) {
    return function(value1) {
      return new Append2(value0, value1);
    };
  };
  return Append2;
}();
var Indent2 = /* @__PURE__ */ function() {
  function Indent3(value0) {
    this.value0 = value0;
  }
  ;
  Indent3.create = function(value0) {
    return new Indent3(value0);
  };
  return Indent3;
}();
var Align = /* @__PURE__ */ function() {
  function Align2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Align2.create = function(value0) {
    return function(value1) {
      return new Align2(value0, value1);
    };
  };
  return Align2;
}();
var Annotate = /* @__PURE__ */ function() {
  function Annotate2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Annotate2.create = function(value0) {
    return function(value1) {
      return new Annotate2(value0, value1);
    };
  };
  return Annotate2;
}();
var FlexSelect = /* @__PURE__ */ function() {
  function FlexSelect2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  FlexSelect2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new FlexSelect2(value0, value1, value2);
      };
    };
  };
  return FlexSelect2;
}();
var FlexAlt = /* @__PURE__ */ function() {
  function FlexAlt2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  FlexAlt2.create = function(value0) {
    return function(value1) {
      return new FlexAlt2(value0, value1);
    };
  };
  return FlexAlt2;
}();
var WithPosition = /* @__PURE__ */ function() {
  function WithPosition2(value0) {
    this.value0 = value0;
  }
  ;
  WithPosition2.create = function(value0) {
    return new WithPosition2(value0);
  };
  return WithPosition2;
}();
var Local = /* @__PURE__ */ function() {
  function Local2(value0) {
    this.value0 = value0;
  }
  ;
  Local2.create = function(value0) {
    return new Local2(value0);
  };
  return Local2;
}();
var Text2 = /* @__PURE__ */ function() {
  function Text3(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Text3.create = function(value0) {
    return function(value1) {
      return new Text3(value0, value1);
    };
  };
  return Text3;
}();
var Break = /* @__PURE__ */ function() {
  function Break2() {
  }
  ;
  Break2.value = new Break2();
  return Break2;
}();
var Empty = /* @__PURE__ */ function() {
  function Empty3() {
  }
  ;
  Empty3.value = new Empty3();
  return Empty3;
}();
var notEmpty = function(f) {
  return function(v) {
    if (v instanceof Empty) {
      return Empty.value;
    }
    ;
    return f(v);
  };
};
var isEmpty3 = function(v) {
  if (v instanceof Empty) {
    return true;
  }
  ;
  return false;
};
var bothNotEmpty = function(f) {
  return function(v) {
    return function(v1) {
      if (v instanceof Empty) {
        return v1;
      }
      ;
      if (v1 instanceof Empty) {
        return v;
      }
      ;
      return f(v)(v1);
    };
  };
};
var semigroupDoc = {
  append: /* @__PURE__ */ bothNotEmpty(function(v) {
    return function(v1) {
      if (v instanceof Text2 && v1 instanceof Text2) {
        return new Text2(v.value0 + v1.value0 | 0, v.value1 + v1.value1);
      }
      ;
      return new Append(v, v1);
    };
  })
};
var monoidDoc = /* @__PURE__ */ function() {
  return {
    mempty: Empty.value,
    Semigroup0: function() {
      return semigroupDoc;
    }
  };
}();

// output/Dodo.Internal.Buffer/index.js
var foldr7 = /* @__PURE__ */ foldr(foldableList);
var $$new2 = function(buffer) {
  return {
    buffer,
    queue: Nil.value
  };
};
var modify4 = function(f) {
  return function(v) {
    if (v.queue instanceof Cons) {
      return {
        buffer: v.buffer,
        queue: new Cons(new Cons(f, v.queue.value0), v.queue.value1)
      };
    }
    ;
    return {
      buffer: f(v.buffer),
      queue: v.queue
    };
  };
};
var commit = function(v) {
  return {
    buffer: foldr7(flip(foldr7(apply)))(v.buffer)(v.queue),
    queue: Nil.value
  };
};
var get2 = function($23) {
  return function(v) {
    return v.buffer;
  }(commit($23));
};
var branch = function(v) {
  return {
    buffer: v.buffer,
    queue: new Cons(Nil.value, v.queue)
  };
};

// output/Dodo/index.js
var mempty2 = /* @__PURE__ */ mempty(monoidDoc);
var append13 = /* @__PURE__ */ append(semigroupDoc);
var max4 = /* @__PURE__ */ max(ordInt);
var max1 = /* @__PURE__ */ max(ordNumber);
var min3 = /* @__PURE__ */ min(ordNumber);
var power3 = /* @__PURE__ */ power(monoidString);
var pure4 = /* @__PURE__ */ pure(applicativeList);
var Doc = /* @__PURE__ */ function() {
  function Doc2(value0) {
    this.value0 = value0;
  }
  ;
  Doc2.create = function(value0) {
    return new Doc2(value0);
  };
  return Doc2;
}();
var Dedent = /* @__PURE__ */ function() {
  function Dedent2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Dedent2.create = function(value0) {
    return function(value1) {
      return new Dedent2(value0, value1);
    };
  };
  return Dedent2;
}();
var LeaveAnnotation = /* @__PURE__ */ function() {
  function LeaveAnnotation2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  LeaveAnnotation2.create = function(value0) {
    return function(value1) {
      return new LeaveAnnotation2(value0, value1);
    };
  };
  return LeaveAnnotation2;
}();
var LeaveFlexGroup = /* @__PURE__ */ function() {
  function LeaveFlexGroup2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  LeaveFlexGroup2.create = function(value0) {
    return function(value1) {
      return new LeaveFlexGroup2(value0, value1);
    };
  };
  return LeaveFlexGroup2;
}();
var LeaveLocal = /* @__PURE__ */ function() {
  function LeaveLocal2(value0) {
    this.value0 = value0;
  }
  ;
  LeaveLocal2.create = function(value0) {
    return new LeaveLocal2(value0);
  };
  return LeaveLocal2;
}();
var NoFlexGroup = /* @__PURE__ */ function() {
  function NoFlexGroup2() {
  }
  ;
  NoFlexGroup2.value = new NoFlexGroup2();
  return NoFlexGroup2;
}();
var FlexGroupPending = /* @__PURE__ */ function() {
  function FlexGroupPending2() {
  }
  ;
  FlexGroupPending2.value = new FlexGroupPending2();
  return FlexGroupPending2;
}();
var FlexGroupReset = /* @__PURE__ */ function() {
  function FlexGroupReset2(value0) {
    this.value0 = value0;
  }
  ;
  FlexGroupReset2.create = function(value0) {
    return new FlexGroupReset2(value0);
  };
  return FlexGroupReset2;
}();
var withPosition = /* @__PURE__ */ function() {
  return WithPosition.create;
}();
var text = function(v) {
  if (v === "") {
    return Empty.value;
  }
  ;
  return new Text2(length5(v), v);
};
var storeState = function(stack) {
  return function(v) {
    return {
      position: v.position,
      buffer: v.buffer,
      annotations: v.annotations,
      indentSpaces: v.indentSpaces,
      stack,
      options: v.options
    };
  };
};
var space = /* @__PURE__ */ text(" ");
var resetState = function(v) {
  return {
    position: v.position,
    buffer: v.buffer,
    annotations: v.annotations,
    indentSpaces: v.indentSpaces,
    flexGroup: NoFlexGroup.value,
    options: v.options
  };
};
var plainText = {
  emptyBuffer: "",
  writeText: function(v) {
    return function(str) {
      return function(buff) {
        return buff + str;
      };
    };
  },
  writeIndent: function(v) {
    return function(str) {
      return function(buff) {
        return buff + str;
      };
    };
  },
  writeBreak: function(buff) {
    return buff + "\n";
  },
  enterAnnotation: function(v) {
    return function(v1) {
      return function(buff) {
        return buff;
      };
    };
  },
  leaveAnnotation: function(v) {
    return function(v1) {
      return function(buff) {
        return buff;
      };
    };
  },
  flushBuffer: function(buff) {
    return buff;
  }
};
var locally = function(k) {
  return function(doc) {
    return new Local(function(options) {
      return new Tuple(k(options), doc);
    });
  };
};
var indent = /* @__PURE__ */ function() {
  return notEmpty(Indent2.create);
}();
var flexSelect = function(doc1) {
  return function(doc2) {
    return function(doc3) {
      if (isEmpty3(doc1)) {
        return doc2;
      }
      ;
      if (otherwise) {
        return new FlexSelect(doc1, doc2, doc3);
      }
      ;
      throw new Error("Failed pattern match at Dodo (line 89, column 1 - line 89, column 57): " + [doc1.constructor.name, doc2.constructor.name, doc3.constructor.name]);
    };
  };
};
var flexGroup = /* @__PURE__ */ notEmpty(function(v) {
  if (v instanceof FlexSelect && (isEmpty3(v.value1) && isEmpty3(v.value2))) {
    return v;
  }
  ;
  return new FlexSelect(v, Empty.value, Empty.value);
});
var flexAlt = /* @__PURE__ */ function() {
  return FlexAlt.create;
}();
var calcRibbonWidth = function(v) {
  return function(n) {
    return max4(0)(ceil2(v.ribbonRatio * toNumber(v.pageWidth - n | 0)));
  };
};
var storeOptions = function(prevIndent) {
  return function(localOptions) {
    return function(state3) {
      var newOptions = {
        indentUnit: localOptions.indentUnit,
        indentWidth: localOptions.indentWidth,
        pageWidth: localOptions.pageWidth,
        ribbonRatio: localOptions.ribbonRatio
      };
      return {
        position: {
          line: state3.position.line,
          column: state3.position.column,
          indent: state3.position.indent,
          nextIndent: localOptions.indent,
          pageWidth: newOptions.pageWidth,
          ribbonWidth: calcRibbonWidth(newOptions)(prevIndent)
        },
        buffer: state3.buffer,
        annotations: state3.annotations,
        indentSpaces: localOptions.indentSpaces,
        flexGroup: state3.flexGroup,
        options: newOptions
      };
    };
  };
};
var print = function(v) {
  return function(opts) {
    var initOptions = {
      pageWidth: opts.pageWidth,
      ribbonRatio: max1(0)(min3(1)(opts.ribbonRatio)),
      indentUnit: opts.indentUnit,
      indentWidth: opts.indentWidth
    };
    var initState = {
      position: {
        line: 0,
        column: 0,
        indent: 0,
        nextIndent: 0,
        pageWidth: initOptions.pageWidth,
        ribbonWidth: calcRibbonWidth(initOptions)(0)
      },
      buffer: $$new2(v.emptyBuffer),
      annotations: Nil.value,
      indentSpaces: "",
      flexGroup: NoFlexGroup.value,
      options: initOptions
    };
    var go = function($copy_stack) {
      return function($copy_state) {
        var $tco_var_stack = $copy_stack;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(stack, state3) {
          if (stack instanceof Nil) {
            $tco_done = true;
            return v.flushBuffer(get2(state3.buffer));
          }
          ;
          if (stack instanceof Cons) {
            if (stack.value0 instanceof Doc) {
              if (stack.value0.value0 instanceof Append) {
                $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0), new Cons(new Doc(stack.value0.value0.value1), stack.value1));
                $copy_state = state3;
                return;
              }
              ;
              if (stack.value0.value0 instanceof Text2) {
                if (state3.position.column === 0 && state3.position.indent > 0) {
                  $tco_var_stack = stack;
                  $copy_state = {
                    position: {
                      line: state3.position.line,
                      column: state3.position.indent,
                      indent: state3.position.indent,
                      nextIndent: state3.position.nextIndent,
                      pageWidth: state3.position.pageWidth,
                      ribbonWidth: state3.position.ribbonWidth
                    },
                    buffer: modify4(v.writeIndent(state3.position.indent)(state3.indentSpaces))(state3.buffer),
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces,
                    flexGroup: state3.flexGroup,
                    options: state3.options
                  };
                  return;
                }
                ;
                if ((state3.position.column + stack.value0.value0.value0 | 0) <= (state3.position.indent + state3.position.ribbonWidth | 0)) {
                  $tco_var_stack = stack.value1;
                  $copy_state = {
                    position: {
                      line: state3.position.line,
                      column: state3.position.column + stack.value0.value0.value0 | 0,
                      indent: state3.position.indent,
                      nextIndent: state3.position.nextIndent,
                      pageWidth: state3.position.pageWidth,
                      ribbonWidth: state3.position.ribbonWidth
                    },
                    buffer: modify4(v.writeText(stack.value0.value0.value0)(stack.value0.value0.value1))(state3.buffer),
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces,
                    flexGroup: state3.flexGroup,
                    options: state3.options
                  };
                  return;
                }
                ;
                if (otherwise) {
                  if (state3.flexGroup instanceof FlexGroupReset) {
                    $tco_var_stack = state3.flexGroup.value0.stack;
                    $copy_state = resetState(state3.flexGroup.value0);
                    return;
                  }
                  ;
                  $tco_var_stack = stack.value1;
                  $copy_state = {
                    position: {
                      line: state3.position.line,
                      column: state3.position.column + stack.value0.value0.value0 | 0,
                      indent: state3.position.indent,
                      nextIndent: state3.position.nextIndent,
                      pageWidth: state3.position.pageWidth,
                      ribbonWidth: state3.position.ribbonWidth
                    },
                    buffer: modify4(v.writeText(stack.value0.value0.value0)(stack.value0.value0.value1))(state3.buffer),
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces,
                    flexGroup: NoFlexGroup.value,
                    options: state3.options
                  };
                  return;
                }
                ;
              }
              ;
              if (stack.value0.value0 instanceof Break) {
                if (state3.flexGroup instanceof FlexGroupReset) {
                  $tco_var_stack = state3.flexGroup.value0.stack;
                  $copy_state = resetState(state3.flexGroup.value0);
                  return;
                }
                ;
                $tco_var_stack = stack.value1;
                $copy_state = {
                  position: {
                    line: state3.position.line + 1 | 0,
                    column: 0,
                    indent: state3.position.nextIndent,
                    nextIndent: state3.position.nextIndent,
                    pageWidth: state3.position.pageWidth,
                    ribbonWidth: calcRibbonWidth(state3.options)(state3.position.nextIndent)
                  },
                  buffer: modify4(v.writeBreak)(state3.buffer),
                  annotations: state3.annotations,
                  indentSpaces: state3.indentSpaces,
                  flexGroup: NoFlexGroup.value,
                  options: state3.options
                };
                return;
              }
              ;
              if (stack.value0.value0 instanceof Indent2) {
                if (state3.position.column === 0) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0), new Cons(new Dedent(state3.indentSpaces, state3.position.nextIndent), stack.value1));
                  $copy_state = {
                    position: {
                      line: state3.position.line,
                      column: state3.position.column,
                      indent: state3.position.nextIndent + opts.indentWidth | 0,
                      nextIndent: state3.position.nextIndent + opts.indentWidth | 0,
                      pageWidth: state3.position.pageWidth,
                      ribbonWidth: calcRibbonWidth(state3.options)(state3.position.nextIndent + opts.indentWidth | 0)
                    },
                    buffer: state3.buffer,
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces + opts.indentUnit,
                    flexGroup: state3.flexGroup,
                    options: state3.options
                  };
                  return;
                }
                ;
                if (otherwise) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0), new Cons(new Dedent(state3.indentSpaces, state3.position.nextIndent), stack.value1));
                  $copy_state = {
                    position: {
                      line: state3.position.line,
                      column: state3.position.column,
                      indent: state3.position.indent,
                      nextIndent: state3.position.nextIndent + opts.indentWidth | 0,
                      pageWidth: state3.position.pageWidth,
                      ribbonWidth: state3.position.ribbonWidth
                    },
                    buffer: state3.buffer,
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces + opts.indentUnit,
                    flexGroup: state3.flexGroup,
                    options: state3.options
                  };
                  return;
                }
                ;
              }
              ;
              if (stack.value0.value0 instanceof Align) {
                if (state3.position.column === 0) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value1), new Cons(new Dedent(state3.indentSpaces, state3.position.nextIndent), stack.value1));
                  $copy_state = {
                    position: {
                      line: state3.position.line,
                      column: state3.position.column,
                      indent: state3.position.nextIndent + stack.value0.value0.value0 | 0,
                      nextIndent: state3.position.nextIndent + stack.value0.value0.value0 | 0,
                      pageWidth: state3.position.pageWidth,
                      ribbonWidth: calcRibbonWidth(state3.options)(state3.position.nextIndent + stack.value0.value0.value0 | 0)
                    },
                    buffer: state3.buffer,
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces + power3(" ")(stack.value0.value0.value0),
                    flexGroup: state3.flexGroup,
                    options: state3.options
                  };
                  return;
                }
                ;
                if (otherwise) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value1), new Cons(new Dedent(state3.indentSpaces, state3.position.nextIndent), stack.value1));
                  $copy_state = {
                    position: {
                      line: state3.position.line,
                      column: state3.position.column,
                      indent: state3.position.indent,
                      nextIndent: state3.position.nextIndent + stack.value0.value0.value0 | 0,
                      pageWidth: state3.position.pageWidth,
                      ribbonWidth: state3.position.ribbonWidth
                    },
                    buffer: state3.buffer,
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces + power3(" ")(stack.value0.value0.value0),
                    flexGroup: state3.flexGroup,
                    options: state3.options
                  };
                  return;
                }
                ;
              }
              ;
              if (stack.value0.value0 instanceof FlexSelect) {
                if (state3.flexGroup instanceof NoFlexGroup) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0), new Cons(new LeaveFlexGroup(stack.value0.value0.value1, stack.value0.value0.value2), stack.value1));
                  $copy_state = {
                    position: state3.position,
                    buffer: state3.buffer,
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces,
                    flexGroup: FlexGroupPending.value,
                    options: state3.options
                  };
                  return;
                }
                ;
                if (state3.flexGroup instanceof FlexGroupPending && state3.position.ribbonWidth > 0) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0), new Cons(new Doc(stack.value0.value0.value1), stack.value1));
                  $copy_state = {
                    position: state3.position,
                    buffer: branch(state3.buffer),
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces,
                    flexGroup: new FlexGroupReset(storeState(stack)(state3)),
                    options: state3.options
                  };
                  return;
                }
                ;
                $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0), new Cons(new Doc(stack.value0.value0.value1), stack.value1));
                $copy_state = state3;
                return;
              }
              ;
              if (stack.value0.value0 instanceof FlexAlt) {
                if (state3.flexGroup instanceof FlexGroupReset) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0), stack.value1);
                  $copy_state = state3;
                  return;
                }
                ;
                if (state3.flexGroup instanceof FlexGroupPending && state3.position.ribbonWidth > 0) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0), stack.value1);
                  $copy_state = {
                    position: state3.position,
                    buffer: branch(state3.buffer),
                    annotations: state3.annotations,
                    indentSpaces: state3.indentSpaces,
                    flexGroup: new FlexGroupReset(storeState(new Cons(new Doc(stack.value0.value0.value1), stack.value1))(state3)),
                    options: state3.options
                  };
                  return;
                }
                ;
                $tco_var_stack = new Cons(new Doc(stack.value0.value0.value1), stack.value1);
                $copy_state = state3;
                return;
              }
              ;
              if (stack.value0.value0 instanceof WithPosition) {
                if (state3.position.column === 0 && state3.position.nextIndent > 0) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0({
                    line: state3.position.line,
                    column: state3.position.nextIndent,
                    indent: state3.position.indent,
                    nextIndent: state3.position.nextIndent,
                    pageWidth: state3.position.pageWidth,
                    ribbonWidth: state3.position.ribbonWidth
                  })), stack.value1);
                  $copy_state = state3;
                  return;
                }
                ;
                if (otherwise) {
                  $tco_var_stack = new Cons(new Doc(stack.value0.value0.value0(state3.position)), stack.value1);
                  $copy_state = state3;
                  return;
                }
                ;
              }
              ;
              if (stack.value0.value0 instanceof Annotate) {
                $tco_var_stack = new Cons(new Doc(stack.value0.value0.value1), new Cons(new LeaveAnnotation(stack.value0.value0.value0, state3.annotations), stack.value1));
                $copy_state = {
                  position: state3.position,
                  buffer: modify4(v.enterAnnotation(stack.value0.value0.value0)(state3.annotations))(state3.buffer),
                  annotations: new Cons(stack.value0.value0.value0, state3.annotations),
                  indentSpaces: state3.indentSpaces,
                  flexGroup: state3.flexGroup,
                  options: state3.options
                };
                return;
              }
              ;
              if (stack.value0.value0 instanceof Local) {
                var prevOptions = {
                  indent: state3.position.indent,
                  indentSpaces: state3.indentSpaces,
                  indentUnit: state3.options.indentUnit,
                  indentWidth: state3.options.indentWidth,
                  pageWidth: state3.options.pageWidth,
                  ribbonRatio: state3.options.ribbonRatio
                };
                var v1 = stack.value0.value0.value0(prevOptions);
                $tco_var_stack = new Cons(new Doc(v1.value1), new Cons(new LeaveLocal(prevOptions), stack.value1));
                $copy_state = storeOptions(state3.position.indent)(v1.value0)(state3);
                return;
              }
              ;
              if (stack.value0.value0 instanceof Empty) {
                $tco_var_stack = stack.value1;
                $copy_state = state3;
                return;
              }
              ;
              throw new Error("Failed pattern match at Dodo (line 365, column 18 - line 477, column 23): " + [stack.value0.value0.constructor.name]);
            }
            ;
            if (stack.value0 instanceof LeaveFlexGroup) {
              if (state3.flexGroup instanceof NoFlexGroup) {
                $tco_var_stack = new Cons(new Doc(stack.value0.value1), stack.value1);
                $copy_state = {
                  position: state3.position,
                  buffer: commit(state3.buffer),
                  annotations: state3.annotations,
                  indentSpaces: state3.indentSpaces,
                  flexGroup: state3.flexGroup,
                  options: state3.options
                };
                return;
              }
              ;
              $tco_var_stack = new Cons(new Doc(stack.value0.value0), stack.value1);
              $copy_state = {
                position: state3.position,
                buffer: commit(state3.buffer),
                annotations: state3.annotations,
                indentSpaces: state3.indentSpaces,
                flexGroup: NoFlexGroup.value,
                options: state3.options
              };
              return;
            }
            ;
            if (stack.value0 instanceof Dedent) {
              $tco_var_stack = stack.value1;
              $copy_state = {
                position: {
                  line: state3.position.line,
                  column: state3.position.column,
                  indent: state3.position.indent,
                  nextIndent: stack.value0.value1,
                  pageWidth: state3.position.pageWidth,
                  ribbonWidth: state3.position.ribbonWidth
                },
                buffer: state3.buffer,
                annotations: state3.annotations,
                indentSpaces: stack.value0.value0,
                flexGroup: state3.flexGroup,
                options: state3.options
              };
              return;
            }
            ;
            if (stack.value0 instanceof LeaveAnnotation) {
              $tco_var_stack = stack.value1;
              $copy_state = {
                position: state3.position,
                buffer: modify4(v.leaveAnnotation(stack.value0.value0)(stack.value0.value1))(state3.buffer),
                annotations: stack.value0.value1,
                indentSpaces: state3.indentSpaces,
                flexGroup: state3.flexGroup,
                options: state3.options
              };
              return;
            }
            ;
            if (stack.value0 instanceof LeaveLocal) {
              $tco_var_stack = stack.value1;
              $copy_state = storeOptions(state3.position.indent)(stack.value0.value0)(state3);
              return;
            }
            ;
            throw new Error("Failed pattern match at Dodo (line 364, column 18 - line 499, column 70): " + [stack.value0.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Dodo (line 361, column 20 - line 499, column 70): " + [stack.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_stack, $copy_state);
        }
        ;
        return $tco_result;
      };
    };
    var $135 = flip(go)(initState);
    return function($136) {
      return $135(pure4(Doc.create($136)));
    };
  };
};
var $$break = /* @__PURE__ */ function() {
  return Break.value;
}();
var softBreak = /* @__PURE__ */ flexAlt(mempty2)($$break);
var spaceBreak = /* @__PURE__ */ flexAlt(space)($$break);
var appendBreak = /* @__PURE__ */ bothNotEmpty(function(a) {
  return function(b) {
    return append13(a)(append13($$break)(b));
  };
});
var lines = function(dictFoldable) {
  return foldr(dictFoldable)(appendBreak)(Empty.value);
};
var align = function(n) {
  return function(doc) {
    if (n > 0) {
      return notEmpty(Align.create(n))(doc);
    }
    ;
    if (otherwise) {
      return doc;
    }
    ;
    throw new Error("Failed pattern match at Dodo (line 64, column 1 - line 64, column 41): " + [n.constructor.name, doc.constructor.name]);
  };
};
var alignCurrentColumn = /* @__PURE__ */ notEmpty(function(doc) {
  return withPosition(function(pos) {
    return align(pos.column - pos.nextIndent | 0)(doc);
  });
});

// output/PureScript.CST.Types/index.js
var ASCII = /* @__PURE__ */ function() {
  function ASCII3() {
  }
  ;
  ASCII3.value = new ASCII3();
  return ASCII3;
}();
var Unicode = /* @__PURE__ */ function() {
  function Unicode2() {
  }
  ;
  Unicode2.value = new Unicode2();
  return Unicode2;
}();
var Nominal = /* @__PURE__ */ function() {
  function Nominal2() {
  }
  ;
  Nominal2.value = new Nominal2();
  return Nominal2;
}();
var Representational = /* @__PURE__ */ function() {
  function Representational2() {
  }
  ;
  Representational2.value = new Representational2();
  return Representational2;
}();
var Phantom = /* @__PURE__ */ function() {
  function Phantom2() {
  }
  ;
  Phantom2.value = new Phantom2();
  return Phantom2;
}();
var LF = /* @__PURE__ */ function() {
  function LF2() {
  }
  ;
  LF2.value = new LF2();
  return LF2;
}();
var CRLF = /* @__PURE__ */ function() {
  function CRLF2() {
  }
  ;
  CRLF2.value = new CRLF2();
  return CRLF2;
}();
var SmallInt = /* @__PURE__ */ function() {
  function SmallInt2(value0) {
    this.value0 = value0;
  }
  ;
  SmallInt2.create = function(value0) {
    return new SmallInt2(value0);
  };
  return SmallInt2;
}();
var BigInt = /* @__PURE__ */ function() {
  function BigInt2(value0) {
    this.value0 = value0;
  }
  ;
  BigInt2.create = function(value0) {
    return new BigInt2(value0);
  };
  return BigInt2;
}();
var BigHex = /* @__PURE__ */ function() {
  function BigHex2(value0) {
    this.value0 = value0;
  }
  ;
  BigHex2.create = function(value0) {
    return new BigHex2(value0);
  };
  return BigHex2;
}();
var TokLeftParen = /* @__PURE__ */ function() {
  function TokLeftParen2() {
  }
  ;
  TokLeftParen2.value = new TokLeftParen2();
  return TokLeftParen2;
}();
var TokRightParen = /* @__PURE__ */ function() {
  function TokRightParen2() {
  }
  ;
  TokRightParen2.value = new TokRightParen2();
  return TokRightParen2;
}();
var TokLeftBrace = /* @__PURE__ */ function() {
  function TokLeftBrace2() {
  }
  ;
  TokLeftBrace2.value = new TokLeftBrace2();
  return TokLeftBrace2;
}();
var TokRightBrace = /* @__PURE__ */ function() {
  function TokRightBrace2() {
  }
  ;
  TokRightBrace2.value = new TokRightBrace2();
  return TokRightBrace2;
}();
var TokLeftSquare = /* @__PURE__ */ function() {
  function TokLeftSquare2() {
  }
  ;
  TokLeftSquare2.value = new TokLeftSquare2();
  return TokLeftSquare2;
}();
var TokRightSquare = /* @__PURE__ */ function() {
  function TokRightSquare2() {
  }
  ;
  TokRightSquare2.value = new TokRightSquare2();
  return TokRightSquare2;
}();
var TokLeftArrow = /* @__PURE__ */ function() {
  function TokLeftArrow2(value0) {
    this.value0 = value0;
  }
  ;
  TokLeftArrow2.create = function(value0) {
    return new TokLeftArrow2(value0);
  };
  return TokLeftArrow2;
}();
var TokRightArrow = /* @__PURE__ */ function() {
  function TokRightArrow2(value0) {
    this.value0 = value0;
  }
  ;
  TokRightArrow2.create = function(value0) {
    return new TokRightArrow2(value0);
  };
  return TokRightArrow2;
}();
var TokRightFatArrow = /* @__PURE__ */ function() {
  function TokRightFatArrow2(value0) {
    this.value0 = value0;
  }
  ;
  TokRightFatArrow2.create = function(value0) {
    return new TokRightFatArrow2(value0);
  };
  return TokRightFatArrow2;
}();
var TokDoubleColon = /* @__PURE__ */ function() {
  function TokDoubleColon2(value0) {
    this.value0 = value0;
  }
  ;
  TokDoubleColon2.create = function(value0) {
    return new TokDoubleColon2(value0);
  };
  return TokDoubleColon2;
}();
var TokForall = /* @__PURE__ */ function() {
  function TokForall2(value0) {
    this.value0 = value0;
  }
  ;
  TokForall2.create = function(value0) {
    return new TokForall2(value0);
  };
  return TokForall2;
}();
var TokEquals = /* @__PURE__ */ function() {
  function TokEquals2() {
  }
  ;
  TokEquals2.value = new TokEquals2();
  return TokEquals2;
}();
var TokPipe = /* @__PURE__ */ function() {
  function TokPipe2() {
  }
  ;
  TokPipe2.value = new TokPipe2();
  return TokPipe2;
}();
var TokTick = /* @__PURE__ */ function() {
  function TokTick2() {
  }
  ;
  TokTick2.value = new TokTick2();
  return TokTick2;
}();
var TokDot = /* @__PURE__ */ function() {
  function TokDot2() {
  }
  ;
  TokDot2.value = new TokDot2();
  return TokDot2;
}();
var TokComma = /* @__PURE__ */ function() {
  function TokComma2() {
  }
  ;
  TokComma2.value = new TokComma2();
  return TokComma2;
}();
var TokUnderscore = /* @__PURE__ */ function() {
  function TokUnderscore2() {
  }
  ;
  TokUnderscore2.value = new TokUnderscore2();
  return TokUnderscore2;
}();
var TokBackslash = /* @__PURE__ */ function() {
  function TokBackslash2() {
  }
  ;
  TokBackslash2.value = new TokBackslash2();
  return TokBackslash2;
}();
var TokAt = /* @__PURE__ */ function() {
  function TokAt2() {
  }
  ;
  TokAt2.value = new TokAt2();
  return TokAt2;
}();
var TokLowerName = /* @__PURE__ */ function() {
  function TokLowerName2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokLowerName2.create = function(value0) {
    return function(value1) {
      return new TokLowerName2(value0, value1);
    };
  };
  return TokLowerName2;
}();
var TokUpperName = /* @__PURE__ */ function() {
  function TokUpperName2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokUpperName2.create = function(value0) {
    return function(value1) {
      return new TokUpperName2(value0, value1);
    };
  };
  return TokUpperName2;
}();
var TokOperator = /* @__PURE__ */ function() {
  function TokOperator2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokOperator2.create = function(value0) {
    return function(value1) {
      return new TokOperator2(value0, value1);
    };
  };
  return TokOperator2;
}();
var TokSymbolName = /* @__PURE__ */ function() {
  function TokSymbolName2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokSymbolName2.create = function(value0) {
    return function(value1) {
      return new TokSymbolName2(value0, value1);
    };
  };
  return TokSymbolName2;
}();
var TokSymbolArrow = /* @__PURE__ */ function() {
  function TokSymbolArrow2(value0) {
    this.value0 = value0;
  }
  ;
  TokSymbolArrow2.create = function(value0) {
    return new TokSymbolArrow2(value0);
  };
  return TokSymbolArrow2;
}();
var TokHole = /* @__PURE__ */ function() {
  function TokHole2(value0) {
    this.value0 = value0;
  }
  ;
  TokHole2.create = function(value0) {
    return new TokHole2(value0);
  };
  return TokHole2;
}();
var TokChar = /* @__PURE__ */ function() {
  function TokChar2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokChar2.create = function(value0) {
    return function(value1) {
      return new TokChar2(value0, value1);
    };
  };
  return TokChar2;
}();
var TokString = /* @__PURE__ */ function() {
  function TokString2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokString2.create = function(value0) {
    return function(value1) {
      return new TokString2(value0, value1);
    };
  };
  return TokString2;
}();
var TokRawString = /* @__PURE__ */ function() {
  function TokRawString2(value0) {
    this.value0 = value0;
  }
  ;
  TokRawString2.create = function(value0) {
    return new TokRawString2(value0);
  };
  return TokRawString2;
}();
var TokInt = /* @__PURE__ */ function() {
  function TokInt2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokInt2.create = function(value0) {
    return function(value1) {
      return new TokInt2(value0, value1);
    };
  };
  return TokInt2;
}();
var TokNumber = /* @__PURE__ */ function() {
  function TokNumber2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokNumber2.create = function(value0) {
    return function(value1) {
      return new TokNumber2(value0, value1);
    };
  };
  return TokNumber2;
}();
var TokLayoutStart = /* @__PURE__ */ function() {
  function TokLayoutStart2(value0) {
    this.value0 = value0;
  }
  ;
  TokLayoutStart2.create = function(value0) {
    return new TokLayoutStart2(value0);
  };
  return TokLayoutStart2;
}();
var TokLayoutSep = /* @__PURE__ */ function() {
  function TokLayoutSep2(value0) {
    this.value0 = value0;
  }
  ;
  TokLayoutSep2.create = function(value0) {
    return new TokLayoutSep2(value0);
  };
  return TokLayoutSep2;
}();
var TokLayoutEnd = /* @__PURE__ */ function() {
  function TokLayoutEnd2(value0) {
    this.value0 = value0;
  }
  ;
  TokLayoutEnd2.create = function(value0) {
    return new TokLayoutEnd2(value0);
  };
  return TokLayoutEnd2;
}();
var Infix = /* @__PURE__ */ function() {
  function Infix2() {
  }
  ;
  Infix2.value = new Infix2();
  return Infix2;
}();
var Infixl = /* @__PURE__ */ function() {
  function Infixl2() {
  }
  ;
  Infixl2.value = new Infixl2();
  return Infixl2;
}();
var Infixr = /* @__PURE__ */ function() {
  function Infixr2() {
  }
  ;
  Infixr2.value = new Infixr2();
  return Infixr2;
}();
var Comment = /* @__PURE__ */ function() {
  function Comment2(value0) {
    this.value0 = value0;
  }
  ;
  Comment2.create = function(value0) {
    return new Comment2(value0);
  };
  return Comment2;
}();
var Space = /* @__PURE__ */ function() {
  function Space2(value0) {
    this.value0 = value0;
  }
  ;
  Space2.create = function(value0) {
    return new Space2(value0);
  };
  return Space2;
}();
var Line = /* @__PURE__ */ function() {
  function Line2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Line2.create = function(value0) {
    return function(value1) {
      return new Line2(value0, value1);
    };
  };
  return Line2;
}();
var Name = function(x) {
  return x;
};
var FixityValue = /* @__PURE__ */ function() {
  function FixityValue2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  FixityValue2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new FixityValue2(value0, value1, value2);
      };
    };
  };
  return FixityValue2;
}();
var FixityType = /* @__PURE__ */ function() {
  function FixityType2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  FixityType2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new FixityType2(value0, value1, value2, value3);
        };
      };
    };
  };
  return FixityType2;
}();
var RecordPun = /* @__PURE__ */ function() {
  function RecordPun2(value0) {
    this.value0 = value0;
  }
  ;
  RecordPun2.create = function(value0) {
    return new RecordPun2(value0);
  };
  return RecordPun2;
}();
var RecordField = /* @__PURE__ */ function() {
  function RecordField2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  RecordField2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new RecordField2(value0, value1, value2);
      };
    };
  };
  return RecordField2;
}();
var DataAll = /* @__PURE__ */ function() {
  function DataAll2(value0) {
    this.value0 = value0;
  }
  ;
  DataAll2.create = function(value0) {
    return new DataAll2(value0);
  };
  return DataAll2;
}();
var DataEnumerated = /* @__PURE__ */ function() {
  function DataEnumerated2(value0) {
    this.value0 = value0;
  }
  ;
  DataEnumerated2.create = function(value0) {
    return new DataEnumerated2(value0);
  };
  return DataEnumerated2;
}();
var ExportValue = /* @__PURE__ */ function() {
  function ExportValue2(value0) {
    this.value0 = value0;
  }
  ;
  ExportValue2.create = function(value0) {
    return new ExportValue2(value0);
  };
  return ExportValue2;
}();
var ExportOp = /* @__PURE__ */ function() {
  function ExportOp2(value0) {
    this.value0 = value0;
  }
  ;
  ExportOp2.create = function(value0) {
    return new ExportOp2(value0);
  };
  return ExportOp2;
}();
var ExportType = /* @__PURE__ */ function() {
  function ExportType2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExportType2.create = function(value0) {
    return function(value1) {
      return new ExportType2(value0, value1);
    };
  };
  return ExportType2;
}();
var ExportTypeOp = /* @__PURE__ */ function() {
  function ExportTypeOp2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExportTypeOp2.create = function(value0) {
    return function(value1) {
      return new ExportTypeOp2(value0, value1);
    };
  };
  return ExportTypeOp2;
}();
var ExportClass = /* @__PURE__ */ function() {
  function ExportClass2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExportClass2.create = function(value0) {
    return function(value1) {
      return new ExportClass2(value0, value1);
    };
  };
  return ExportClass2;
}();
var ExportModule = /* @__PURE__ */ function() {
  function ExportModule2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExportModule2.create = function(value0) {
    return function(value1) {
      return new ExportModule2(value0, value1);
    };
  };
  return ExportModule2;
}();
var ExportError = /* @__PURE__ */ function() {
  function ExportError2(value0) {
    this.value0 = value0;
  }
  ;
  ExportError2.create = function(value0) {
    return new ExportError2(value0);
  };
  return ExportError2;
}();
var ImportValue = /* @__PURE__ */ function() {
  function ImportValue2(value0) {
    this.value0 = value0;
  }
  ;
  ImportValue2.create = function(value0) {
    return new ImportValue2(value0);
  };
  return ImportValue2;
}();
var ImportOp = /* @__PURE__ */ function() {
  function ImportOp2(value0) {
    this.value0 = value0;
  }
  ;
  ImportOp2.create = function(value0) {
    return new ImportOp2(value0);
  };
  return ImportOp2;
}();
var ImportType = /* @__PURE__ */ function() {
  function ImportType2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ImportType2.create = function(value0) {
    return function(value1) {
      return new ImportType2(value0, value1);
    };
  };
  return ImportType2;
}();
var ImportTypeOp = /* @__PURE__ */ function() {
  function ImportTypeOp2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ImportTypeOp2.create = function(value0) {
    return function(value1) {
      return new ImportTypeOp2(value0, value1);
    };
  };
  return ImportTypeOp2;
}();
var ImportClass = /* @__PURE__ */ function() {
  function ImportClass2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ImportClass2.create = function(value0) {
    return function(value1) {
      return new ImportClass2(value0, value1);
    };
  };
  return ImportClass2;
}();
var ImportError = /* @__PURE__ */ function() {
  function ImportError2(value0) {
    this.value0 = value0;
  }
  ;
  ImportError2.create = function(value0) {
    return new ImportError2(value0);
  };
  return ImportError2;
}();
var One = /* @__PURE__ */ function() {
  function One2(value0) {
    this.value0 = value0;
  }
  ;
  One2.create = function(value0) {
    return new One2(value0);
  };
  return One2;
}();
var Many = /* @__PURE__ */ function() {
  function Many2(value0) {
    this.value0 = value0;
  }
  ;
  Many2.create = function(value0) {
    return new Many2(value0);
  };
  return Many2;
}();
var TypeVarKinded = /* @__PURE__ */ function() {
  function TypeVarKinded2(value0) {
    this.value0 = value0;
  }
  ;
  TypeVarKinded2.create = function(value0) {
    return new TypeVarKinded2(value0);
  };
  return TypeVarKinded2;
}();
var TypeVarName = /* @__PURE__ */ function() {
  function TypeVarName2(value0) {
    this.value0 = value0;
  }
  ;
  TypeVarName2.create = function(value0) {
    return new TypeVarName2(value0);
  };
  return TypeVarName2;
}();
var TypeVar = /* @__PURE__ */ function() {
  function TypeVar2(value0) {
    this.value0 = value0;
  }
  ;
  TypeVar2.create = function(value0) {
    return new TypeVar2(value0);
  };
  return TypeVar2;
}();
var TypeConstructor = /* @__PURE__ */ function() {
  function TypeConstructor2(value0) {
    this.value0 = value0;
  }
  ;
  TypeConstructor2.create = function(value0) {
    return new TypeConstructor2(value0);
  };
  return TypeConstructor2;
}();
var TypeWildcard = /* @__PURE__ */ function() {
  function TypeWildcard2(value0) {
    this.value0 = value0;
  }
  ;
  TypeWildcard2.create = function(value0) {
    return new TypeWildcard2(value0);
  };
  return TypeWildcard2;
}();
var TypeHole = /* @__PURE__ */ function() {
  function TypeHole2(value0) {
    this.value0 = value0;
  }
  ;
  TypeHole2.create = function(value0) {
    return new TypeHole2(value0);
  };
  return TypeHole2;
}();
var TypeString = /* @__PURE__ */ function() {
  function TypeString2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TypeString2.create = function(value0) {
    return function(value1) {
      return new TypeString2(value0, value1);
    };
  };
  return TypeString2;
}();
var TypeInt = /* @__PURE__ */ function() {
  function TypeInt2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  TypeInt2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new TypeInt2(value0, value1, value2);
      };
    };
  };
  return TypeInt2;
}();
var TypeRow = /* @__PURE__ */ function() {
  function TypeRow2(value0) {
    this.value0 = value0;
  }
  ;
  TypeRow2.create = function(value0) {
    return new TypeRow2(value0);
  };
  return TypeRow2;
}();
var TypeRecord = /* @__PURE__ */ function() {
  function TypeRecord2(value0) {
    this.value0 = value0;
  }
  ;
  TypeRecord2.create = function(value0) {
    return new TypeRecord2(value0);
  };
  return TypeRecord2;
}();
var TypeForall = /* @__PURE__ */ function() {
  function TypeForall2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  TypeForall2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new TypeForall2(value0, value1, value2, value3);
        };
      };
    };
  };
  return TypeForall2;
}();
var TypeKinded = /* @__PURE__ */ function() {
  function TypeKinded2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  TypeKinded2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new TypeKinded2(value0, value1, value2);
      };
    };
  };
  return TypeKinded2;
}();
var TypeApp = /* @__PURE__ */ function() {
  function TypeApp2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TypeApp2.create = function(value0) {
    return function(value1) {
      return new TypeApp2(value0, value1);
    };
  };
  return TypeApp2;
}();
var TypeOp = /* @__PURE__ */ function() {
  function TypeOp2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TypeOp2.create = function(value0) {
    return function(value1) {
      return new TypeOp2(value0, value1);
    };
  };
  return TypeOp2;
}();
var TypeOpName = /* @__PURE__ */ function() {
  function TypeOpName2(value0) {
    this.value0 = value0;
  }
  ;
  TypeOpName2.create = function(value0) {
    return new TypeOpName2(value0);
  };
  return TypeOpName2;
}();
var TypeArrow = /* @__PURE__ */ function() {
  function TypeArrow2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  TypeArrow2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new TypeArrow2(value0, value1, value2);
      };
    };
  };
  return TypeArrow2;
}();
var TypeArrowName = /* @__PURE__ */ function() {
  function TypeArrowName2(value0) {
    this.value0 = value0;
  }
  ;
  TypeArrowName2.create = function(value0) {
    return new TypeArrowName2(value0);
  };
  return TypeArrowName2;
}();
var TypeConstrained = /* @__PURE__ */ function() {
  function TypeConstrained2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  TypeConstrained2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new TypeConstrained2(value0, value1, value2);
      };
    };
  };
  return TypeConstrained2;
}();
var TypeParens = /* @__PURE__ */ function() {
  function TypeParens2(value0) {
    this.value0 = value0;
  }
  ;
  TypeParens2.create = function(value0) {
    return new TypeParens2(value0);
  };
  return TypeParens2;
}();
var $$TypeError = /* @__PURE__ */ function() {
  function $$TypeError2(value0) {
    this.value0 = value0;
  }
  ;
  $$TypeError2.create = function(value0) {
    return new $$TypeError2(value0);
  };
  return $$TypeError2;
}();
var ForeignValue = /* @__PURE__ */ function() {
  function ForeignValue2(value0) {
    this.value0 = value0;
  }
  ;
  ForeignValue2.create = function(value0) {
    return new ForeignValue2(value0);
  };
  return ForeignValue2;
}();
var ForeignData = /* @__PURE__ */ function() {
  function ForeignData2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ForeignData2.create = function(value0) {
    return function(value1) {
      return new ForeignData2(value0, value1);
    };
  };
  return ForeignData2;
}();
var ForeignKind = /* @__PURE__ */ function() {
  function ForeignKind2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ForeignKind2.create = function(value0) {
    return function(value1) {
      return new ForeignKind2(value0, value1);
    };
  };
  return ForeignKind2;
}();
var FundepDetermined = /* @__PURE__ */ function() {
  function FundepDetermined2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  FundepDetermined2.create = function(value0) {
    return function(value1) {
      return new FundepDetermined2(value0, value1);
    };
  };
  return FundepDetermined2;
}();
var FundepDetermines = /* @__PURE__ */ function() {
  function FundepDetermines2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  FundepDetermines2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new FundepDetermines2(value0, value1, value2);
      };
    };
  };
  return FundepDetermines2;
}();
var BinderWildcard = /* @__PURE__ */ function() {
  function BinderWildcard2(value0) {
    this.value0 = value0;
  }
  ;
  BinderWildcard2.create = function(value0) {
    return new BinderWildcard2(value0);
  };
  return BinderWildcard2;
}();
var BinderVar = /* @__PURE__ */ function() {
  function BinderVar2(value0) {
    this.value0 = value0;
  }
  ;
  BinderVar2.create = function(value0) {
    return new BinderVar2(value0);
  };
  return BinderVar2;
}();
var BinderNamed = /* @__PURE__ */ function() {
  function BinderNamed2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  BinderNamed2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new BinderNamed2(value0, value1, value2);
      };
    };
  };
  return BinderNamed2;
}();
var BinderConstructor = /* @__PURE__ */ function() {
  function BinderConstructor2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  BinderConstructor2.create = function(value0) {
    return function(value1) {
      return new BinderConstructor2(value0, value1);
    };
  };
  return BinderConstructor2;
}();
var BinderBoolean = /* @__PURE__ */ function() {
  function BinderBoolean2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  BinderBoolean2.create = function(value0) {
    return function(value1) {
      return new BinderBoolean2(value0, value1);
    };
  };
  return BinderBoolean2;
}();
var BinderChar = /* @__PURE__ */ function() {
  function BinderChar2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  BinderChar2.create = function(value0) {
    return function(value1) {
      return new BinderChar2(value0, value1);
    };
  };
  return BinderChar2;
}();
var BinderString = /* @__PURE__ */ function() {
  function BinderString2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  BinderString2.create = function(value0) {
    return function(value1) {
      return new BinderString2(value0, value1);
    };
  };
  return BinderString2;
}();
var BinderInt = /* @__PURE__ */ function() {
  function BinderInt2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  BinderInt2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new BinderInt2(value0, value1, value2);
      };
    };
  };
  return BinderInt2;
}();
var BinderNumber = /* @__PURE__ */ function() {
  function BinderNumber2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  BinderNumber2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new BinderNumber2(value0, value1, value2);
      };
    };
  };
  return BinderNumber2;
}();
var BinderArray = /* @__PURE__ */ function() {
  function BinderArray2(value0) {
    this.value0 = value0;
  }
  ;
  BinderArray2.create = function(value0) {
    return new BinderArray2(value0);
  };
  return BinderArray2;
}();
var BinderRecord = /* @__PURE__ */ function() {
  function BinderRecord2(value0) {
    this.value0 = value0;
  }
  ;
  BinderRecord2.create = function(value0) {
    return new BinderRecord2(value0);
  };
  return BinderRecord2;
}();
var BinderParens = /* @__PURE__ */ function() {
  function BinderParens2(value0) {
    this.value0 = value0;
  }
  ;
  BinderParens2.create = function(value0) {
    return new BinderParens2(value0);
  };
  return BinderParens2;
}();
var BinderTyped = /* @__PURE__ */ function() {
  function BinderTyped2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  BinderTyped2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new BinderTyped2(value0, value1, value2);
      };
    };
  };
  return BinderTyped2;
}();
var BinderOp = /* @__PURE__ */ function() {
  function BinderOp2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  BinderOp2.create = function(value0) {
    return function(value1) {
      return new BinderOp2(value0, value1);
    };
  };
  return BinderOp2;
}();
var BinderError = /* @__PURE__ */ function() {
  function BinderError2(value0) {
    this.value0 = value0;
  }
  ;
  BinderError2.create = function(value0) {
    return new BinderError2(value0);
  };
  return BinderError2;
}();
var DoLet = /* @__PURE__ */ function() {
  function DoLet2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  DoLet2.create = function(value0) {
    return function(value1) {
      return new DoLet2(value0, value1);
    };
  };
  return DoLet2;
}();
var DoDiscard = /* @__PURE__ */ function() {
  function DoDiscard2(value0) {
    this.value0 = value0;
  }
  ;
  DoDiscard2.create = function(value0) {
    return new DoDiscard2(value0);
  };
  return DoDiscard2;
}();
var DoBind = /* @__PURE__ */ function() {
  function DoBind2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  DoBind2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new DoBind2(value0, value1, value2);
      };
    };
  };
  return DoBind2;
}();
var DoError = /* @__PURE__ */ function() {
  function DoError2(value0) {
    this.value0 = value0;
  }
  ;
  DoError2.create = function(value0) {
    return new DoError2(value0);
  };
  return DoError2;
}();
var LetBindingSignature = /* @__PURE__ */ function() {
  function LetBindingSignature2(value0) {
    this.value0 = value0;
  }
  ;
  LetBindingSignature2.create = function(value0) {
    return new LetBindingSignature2(value0);
  };
  return LetBindingSignature2;
}();
var LetBindingName = /* @__PURE__ */ function() {
  function LetBindingName2(value0) {
    this.value0 = value0;
  }
  ;
  LetBindingName2.create = function(value0) {
    return new LetBindingName2(value0);
  };
  return LetBindingName2;
}();
var LetBindingPattern = /* @__PURE__ */ function() {
  function LetBindingPattern2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  LetBindingPattern2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new LetBindingPattern2(value0, value1, value2);
      };
    };
  };
  return LetBindingPattern2;
}();
var LetBindingError = /* @__PURE__ */ function() {
  function LetBindingError2(value0) {
    this.value0 = value0;
  }
  ;
  LetBindingError2.create = function(value0) {
    return new LetBindingError2(value0);
  };
  return LetBindingError2;
}();
var Unconditional = /* @__PURE__ */ function() {
  function Unconditional2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Unconditional2.create = function(value0) {
    return function(value1) {
      return new Unconditional2(value0, value1);
    };
  };
  return Unconditional2;
}();
var Guarded = /* @__PURE__ */ function() {
  function Guarded2(value0) {
    this.value0 = value0;
  }
  ;
  Guarded2.create = function(value0) {
    return new Guarded2(value0);
  };
  return Guarded2;
}();
var ExprHole = /* @__PURE__ */ function() {
  function ExprHole2(value0) {
    this.value0 = value0;
  }
  ;
  ExprHole2.create = function(value0) {
    return new ExprHole2(value0);
  };
  return ExprHole2;
}();
var ExprSection = /* @__PURE__ */ function() {
  function ExprSection2(value0) {
    this.value0 = value0;
  }
  ;
  ExprSection2.create = function(value0) {
    return new ExprSection2(value0);
  };
  return ExprSection2;
}();
var ExprIdent = /* @__PURE__ */ function() {
  function ExprIdent2(value0) {
    this.value0 = value0;
  }
  ;
  ExprIdent2.create = function(value0) {
    return new ExprIdent2(value0);
  };
  return ExprIdent2;
}();
var ExprConstructor = /* @__PURE__ */ function() {
  function ExprConstructor2(value0) {
    this.value0 = value0;
  }
  ;
  ExprConstructor2.create = function(value0) {
    return new ExprConstructor2(value0);
  };
  return ExprConstructor2;
}();
var ExprBoolean = /* @__PURE__ */ function() {
  function ExprBoolean2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprBoolean2.create = function(value0) {
    return function(value1) {
      return new ExprBoolean2(value0, value1);
    };
  };
  return ExprBoolean2;
}();
var ExprChar = /* @__PURE__ */ function() {
  function ExprChar2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprChar2.create = function(value0) {
    return function(value1) {
      return new ExprChar2(value0, value1);
    };
  };
  return ExprChar2;
}();
var ExprString = /* @__PURE__ */ function() {
  function ExprString2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprString2.create = function(value0) {
    return function(value1) {
      return new ExprString2(value0, value1);
    };
  };
  return ExprString2;
}();
var ExprInt = /* @__PURE__ */ function() {
  function ExprInt2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprInt2.create = function(value0) {
    return function(value1) {
      return new ExprInt2(value0, value1);
    };
  };
  return ExprInt2;
}();
var ExprNumber = /* @__PURE__ */ function() {
  function ExprNumber2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprNumber2.create = function(value0) {
    return function(value1) {
      return new ExprNumber2(value0, value1);
    };
  };
  return ExprNumber2;
}();
var ExprArray = /* @__PURE__ */ function() {
  function ExprArray2(value0) {
    this.value0 = value0;
  }
  ;
  ExprArray2.create = function(value0) {
    return new ExprArray2(value0);
  };
  return ExprArray2;
}();
var ExprRecord = /* @__PURE__ */ function() {
  function ExprRecord2(value0) {
    this.value0 = value0;
  }
  ;
  ExprRecord2.create = function(value0) {
    return new ExprRecord2(value0);
  };
  return ExprRecord2;
}();
var ExprParens = /* @__PURE__ */ function() {
  function ExprParens2(value0) {
    this.value0 = value0;
  }
  ;
  ExprParens2.create = function(value0) {
    return new ExprParens2(value0);
  };
  return ExprParens2;
}();
var ExprTyped = /* @__PURE__ */ function() {
  function ExprTyped2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  ExprTyped2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new ExprTyped2(value0, value1, value2);
      };
    };
  };
  return ExprTyped2;
}();
var ExprInfix = /* @__PURE__ */ function() {
  function ExprInfix2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprInfix2.create = function(value0) {
    return function(value1) {
      return new ExprInfix2(value0, value1);
    };
  };
  return ExprInfix2;
}();
var ExprOp = /* @__PURE__ */ function() {
  function ExprOp2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprOp2.create = function(value0) {
    return function(value1) {
      return new ExprOp2(value0, value1);
    };
  };
  return ExprOp2;
}();
var ExprOpName = /* @__PURE__ */ function() {
  function ExprOpName2(value0) {
    this.value0 = value0;
  }
  ;
  ExprOpName2.create = function(value0) {
    return new ExprOpName2(value0);
  };
  return ExprOpName2;
}();
var ExprNegate = /* @__PURE__ */ function() {
  function ExprNegate2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprNegate2.create = function(value0) {
    return function(value1) {
      return new ExprNegate2(value0, value1);
    };
  };
  return ExprNegate2;
}();
var ExprRecordAccessor = /* @__PURE__ */ function() {
  function ExprRecordAccessor2(value0) {
    this.value0 = value0;
  }
  ;
  ExprRecordAccessor2.create = function(value0) {
    return new ExprRecordAccessor2(value0);
  };
  return ExprRecordAccessor2;
}();
var ExprRecordUpdate = /* @__PURE__ */ function() {
  function ExprRecordUpdate2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprRecordUpdate2.create = function(value0) {
    return function(value1) {
      return new ExprRecordUpdate2(value0, value1);
    };
  };
  return ExprRecordUpdate2;
}();
var ExprApp = /* @__PURE__ */ function() {
  function ExprApp2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExprApp2.create = function(value0) {
    return function(value1) {
      return new ExprApp2(value0, value1);
    };
  };
  return ExprApp2;
}();
var ExprLambda = /* @__PURE__ */ function() {
  function ExprLambda2(value0) {
    this.value0 = value0;
  }
  ;
  ExprLambda2.create = function(value0) {
    return new ExprLambda2(value0);
  };
  return ExprLambda2;
}();
var ExprIf = /* @__PURE__ */ function() {
  function ExprIf2(value0) {
    this.value0 = value0;
  }
  ;
  ExprIf2.create = function(value0) {
    return new ExprIf2(value0);
  };
  return ExprIf2;
}();
var ExprCase = /* @__PURE__ */ function() {
  function ExprCase2(value0) {
    this.value0 = value0;
  }
  ;
  ExprCase2.create = function(value0) {
    return new ExprCase2(value0);
  };
  return ExprCase2;
}();
var ExprLet = /* @__PURE__ */ function() {
  function ExprLet2(value0) {
    this.value0 = value0;
  }
  ;
  ExprLet2.create = function(value0) {
    return new ExprLet2(value0);
  };
  return ExprLet2;
}();
var ExprDo = /* @__PURE__ */ function() {
  function ExprDo2(value0) {
    this.value0 = value0;
  }
  ;
  ExprDo2.create = function(value0) {
    return new ExprDo2(value0);
  };
  return ExprDo2;
}();
var ExprAdo = /* @__PURE__ */ function() {
  function ExprAdo2(value0) {
    this.value0 = value0;
  }
  ;
  ExprAdo2.create = function(value0) {
    return new ExprAdo2(value0);
  };
  return ExprAdo2;
}();
var ExprError = /* @__PURE__ */ function() {
  function ExprError2(value0) {
    this.value0 = value0;
  }
  ;
  ExprError2.create = function(value0) {
    return new ExprError2(value0);
  };
  return ExprError2;
}();
var RecordUpdateLeaf = /* @__PURE__ */ function() {
  function RecordUpdateLeaf2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  RecordUpdateLeaf2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new RecordUpdateLeaf2(value0, value1, value2);
      };
    };
  };
  return RecordUpdateLeaf2;
}();
var RecordUpdateBranch = /* @__PURE__ */ function() {
  function RecordUpdateBranch2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  RecordUpdateBranch2.create = function(value0) {
    return function(value1) {
      return new RecordUpdateBranch2(value0, value1);
    };
  };
  return RecordUpdateBranch2;
}();
var InstanceBindingSignature = /* @__PURE__ */ function() {
  function InstanceBindingSignature2(value0) {
    this.value0 = value0;
  }
  ;
  InstanceBindingSignature2.create = function(value0) {
    return new InstanceBindingSignature2(value0);
  };
  return InstanceBindingSignature2;
}();
var InstanceBindingName = /* @__PURE__ */ function() {
  function InstanceBindingName2(value0) {
    this.value0 = value0;
  }
  ;
  InstanceBindingName2.create = function(value0) {
    return new InstanceBindingName2(value0);
  };
  return InstanceBindingName2;
}();
var DeclData = /* @__PURE__ */ function() {
  function DeclData2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  DeclData2.create = function(value0) {
    return function(value1) {
      return new DeclData2(value0, value1);
    };
  };
  return DeclData2;
}();
var DeclType = /* @__PURE__ */ function() {
  function DeclType2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  DeclType2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new DeclType2(value0, value1, value2);
      };
    };
  };
  return DeclType2;
}();
var DeclNewtype = /* @__PURE__ */ function() {
  function DeclNewtype2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  DeclNewtype2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new DeclNewtype2(value0, value1, value2, value3);
        };
      };
    };
  };
  return DeclNewtype2;
}();
var DeclClass = /* @__PURE__ */ function() {
  function DeclClass2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  DeclClass2.create = function(value0) {
    return function(value1) {
      return new DeclClass2(value0, value1);
    };
  };
  return DeclClass2;
}();
var DeclInstanceChain = /* @__PURE__ */ function() {
  function DeclInstanceChain2(value0) {
    this.value0 = value0;
  }
  ;
  DeclInstanceChain2.create = function(value0) {
    return new DeclInstanceChain2(value0);
  };
  return DeclInstanceChain2;
}();
var DeclDerive = /* @__PURE__ */ function() {
  function DeclDerive2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  DeclDerive2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new DeclDerive2(value0, value1, value2);
      };
    };
  };
  return DeclDerive2;
}();
var DeclKindSignature = /* @__PURE__ */ function() {
  function DeclKindSignature2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  DeclKindSignature2.create = function(value0) {
    return function(value1) {
      return new DeclKindSignature2(value0, value1);
    };
  };
  return DeclKindSignature2;
}();
var DeclSignature = /* @__PURE__ */ function() {
  function DeclSignature2(value0) {
    this.value0 = value0;
  }
  ;
  DeclSignature2.create = function(value0) {
    return new DeclSignature2(value0);
  };
  return DeclSignature2;
}();
var DeclValue = /* @__PURE__ */ function() {
  function DeclValue2(value0) {
    this.value0 = value0;
  }
  ;
  DeclValue2.create = function(value0) {
    return new DeclValue2(value0);
  };
  return DeclValue2;
}();
var DeclFixity = /* @__PURE__ */ function() {
  function DeclFixity2(value0) {
    this.value0 = value0;
  }
  ;
  DeclFixity2.create = function(value0) {
    return new DeclFixity2(value0);
  };
  return DeclFixity2;
}();
var DeclForeign = /* @__PURE__ */ function() {
  function DeclForeign2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  DeclForeign2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new DeclForeign2(value0, value1, value2);
      };
    };
  };
  return DeclForeign2;
}();
var DeclRole = /* @__PURE__ */ function() {
  function DeclRole2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  DeclRole2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new DeclRole2(value0, value1, value2, value3);
        };
      };
    };
  };
  return DeclRole2;
}();
var DeclError = /* @__PURE__ */ function() {
  function DeclError2(value0) {
    this.value0 = value0;
  }
  ;
  DeclError2.create = function(value0) {
    return new DeclError2(value0);
  };
  return DeclError2;
}();
var ordProper = ordString;
var ordOperator = ordString;
var ordModuleName = ordString;
var ordIdent = ordString;
var eqProper = eqString;
var eqOperator = eqString;
var eqModuleName = eqString;
var eqIdent = eqString;

// output/Tidy.Util/index.js
var splitStringEscapeLines = /* @__PURE__ */ split2(/* @__PURE__ */ unsafeRegex("\\\\ *\\r?\\n\\s*\\\\")(global));
var splitLines = /* @__PURE__ */ split2(/* @__PURE__ */ unsafeRegex("\\r?\\n")(global));
var overLabel = function(k) {
  return function(v) {
    return {
      label: k(v.label),
      separator: v.separator,
      value: v.value
    };
  };
};
var nameOf = function(v) {
  return v.name;
};

// output/Tidy.Doc/index.js
var mempty3 = /* @__PURE__ */ mempty(monoidDoc);
var sort2 = /* @__PURE__ */ sort(ordInt);
var eq4 = /* @__PURE__ */ eq(eqCodePoint);
var voidLeft3 = /* @__PURE__ */ voidLeft(functorMaybe);
var guard4 = /* @__PURE__ */ guard(alternativeMaybe);
var power4 = /* @__PURE__ */ power(monoidString);
var map14 = /* @__PURE__ */ map(functorArray);
var lines2 = /* @__PURE__ */ lines(foldableArray);
var intercalate6 = /* @__PURE__ */ intercalate2(foldableArray)(monoidDoc);
var max5 = /* @__PURE__ */ max(ordInt);
var append4 = /* @__PURE__ */ append(semigroupDoc);
var min4 = /* @__PURE__ */ min(ordInt);
var identity11 = /* @__PURE__ */ identity(categoryFn);
var ForceNone = /* @__PURE__ */ function() {
  function ForceNone2() {
  }
  ;
  ForceNone2.value = new ForceNone2();
  return ForceNone2;
}();
var ForceSpace = /* @__PURE__ */ function() {
  function ForceSpace2() {
  }
  ;
  ForceSpace2.value = new ForceSpace2();
  return ForceSpace2;
}();
var ForceBreak = /* @__PURE__ */ function() {
  function ForceBreak2() {
  }
  ;
  ForceBreak2.value = new ForceBreak2();
  return ForceBreak2;
}();
var sourceBreak = function(n) {
  return function(v) {
    return {
      doc: v.doc,
      isEmpty: false,
      leading: {
        doc: v.leading.doc,
        left: v.leading.left,
        lines: v.leading.lines + n | 0,
        multiline: v.leading.multiline,
        right: v.leading.right
      },
      multiline: v.multiline,
      trailing: v.trailing
    };
  };
};
var softSpaceDoc = /* @__PURE__ */ flexAlt(mempty3)(space);
var mapDocs = function(k) {
  return function(v) {
    if (v.isEmpty) {
      return v;
    }
    ;
    if (otherwise) {
      return {
        doc: k(v.doc),
        isEmpty: v.isEmpty,
        leading: {
          doc: k(v.leading.doc),
          left: v.leading.left,
          lines: v.leading.lines,
          multiline: v.leading.multiline,
          right: v.leading.right
        },
        multiline: v.multiline,
        trailing: {
          doc: k(v.trailing.doc),
          left: v.trailing.left,
          multiline: v.trailing.multiline,
          right: v.trailing.right
        }
      };
    }
    ;
    throw new Error("Failed pattern match at Tidy.Doc (line 470, column 1 - line 470, column 68): " + [k.constructor.name, v.constructor.name]);
  };
};
var locally2 = function(k) {
  return function(v) {
    return {
      doc: locally(k)(v.doc),
      isEmpty: v.isEmpty,
      leading: v.leading,
      multiline: v.multiline,
      trailing: v.trailing
    };
  };
};
var isEmpty4 = function(v) {
  return v.isEmpty;
};
var indent2 = /* @__PURE__ */ mapDocs(indent);
var formatBlockComment = function($187) {
  return function(v) {
    if (v instanceof Nothing) {
      return new Tuple(false, mempty3);
    }
    ;
    if (v instanceof Just) {
      var prefixSpaces = head(sort2(mapMaybe(function(str) {
        var spaces = length4(takeWhile3(eq4(codePointFromChar(" ")))(str));
        return voidLeft3(guard4(spaces < length4(str)))(spaces);
      })(v.value0.tail)));
      if (prefixSpaces instanceof Nothing) {
        return new Tuple(false, text(v.value0.head));
      }
      ;
      if (prefixSpaces instanceof Just) {
        return new Tuple(true, withPosition(function(pos) {
          var newIndent = function() {
            var $111 = prefixSpaces.value0 < pos.indent;
            if ($111) {
              return 0;
            }
            ;
            return prefixSpaces.value0;
          }();
          var spaces = power4(" ")(newIndent);
          var tailDocs = map14(function(str) {
            return text(fromMaybe(str)(stripPrefix(spaces)(str)));
          })(v.value0.tail);
          return lines2([text(v.value0.head), locally(function(prev) {
            var $112 = newIndent < prev.indent;
            if ($112) {
              return {
                indent: newIndent,
                indentSpaces: spaces,
                indentUnit: prev.indentUnit,
                indentWidth: prev.indentWidth,
                pageWidth: prev.pageWidth,
                ribbonRatio: prev.ribbonRatio
              };
            }
            ;
            return prev;
          })(intercalate6($$break)(tailDocs))]);
        }));
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 204, column 5 - line 224, column 14): " + [prefixSpaces.constructor.name]);
    }
    ;
    throw new Error("Failed pattern match at Tidy.Doc (line 200, column 54 - line 234, column 21): " + [v.constructor.name]);
  }(uncons(splitLines($187)));
};
var forceMinSourceBreaks = function(n) {
  return function(v) {
    if (v.isEmpty) {
      return v;
    }
    ;
    if (otherwise) {
      return {
        doc: v.doc,
        isEmpty: v.isEmpty,
        leading: {
          doc: v.leading.doc,
          left: v.leading.left,
          lines: max5(v.leading.lines)(n),
          multiline: v.leading.multiline,
          right: v.leading.right
        },
        multiline: v.multiline,
        trailing: v.trailing
      };
    }
    ;
    throw new Error("Failed pattern match at Tidy.Doc (line 314, column 1 - line 314, column 68): " + [n.constructor.name, v.constructor.name]);
  };
};
var force2 = function(k) {
  return function(f) {
    return function(m) {
      return function(doc) {
        if (f instanceof ForceBreak) {
          return new Tuple(true, append4($$break)(doc));
        }
        ;
        return new Tuple(m, k(doc));
      };
    };
  };
};
var flexGroup2 = function(v) {
  if (v.multiline) {
    return v;
  }
  ;
  if (otherwise) {
    return {
      doc: flexGroup(v.doc),
      isEmpty: v.isEmpty,
      leading: v.leading,
      multiline: v.multiline,
      trailing: v.trailing
    };
  }
  ;
  throw new Error("Failed pattern match at Tidy.Doc (line 289, column 1 - line 289, column 50): " + [v.constructor.name]);
};
var flattenMax = function(n) {
  return function(v) {
    return {
      doc: v.doc,
      isEmpty: v.isEmpty,
      leading: {
        doc: v.leading.doc,
        left: v.leading.left,
        lines: min4(v.leading.lines)(n),
        multiline: v.leading.multiline,
        right: v.leading.right
      },
      multiline: v.multiline,
      trailing: v.trailing
    };
  };
};
var flatten = /* @__PURE__ */ flattenMax(0);
var eqForceBreak = {
  eq: function(x) {
    return function(y) {
      if (x instanceof ForceNone && y instanceof ForceNone) {
        return true;
      }
      ;
      if (x instanceof ForceSpace && y instanceof ForceSpace) {
        return true;
      }
      ;
      if (x instanceof ForceBreak && y instanceof ForceBreak) {
        return true;
      }
      ;
      return false;
    };
  }
};
var eq22 = /* @__PURE__ */ eq(eqForceBreak);
var ordForceBreak = {
  compare: function(x) {
    return function(y) {
      if (x instanceof ForceNone && y instanceof ForceNone) {
        return EQ.value;
      }
      ;
      if (x instanceof ForceNone) {
        return LT.value;
      }
      ;
      if (y instanceof ForceNone) {
        return GT.value;
      }
      ;
      if (x instanceof ForceSpace && y instanceof ForceSpace) {
        return EQ.value;
      }
      ;
      if (x instanceof ForceSpace) {
        return LT.value;
      }
      ;
      if (y instanceof ForceSpace) {
        return GT.value;
      }
      ;
      if (x instanceof ForceBreak && y instanceof ForceBreak) {
        return EQ.value;
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
    };
  },
  Eq0: function() {
    return eqForceBreak;
  }
};
var max12 = /* @__PURE__ */ max(ordForceBreak);
var breaks = function(fl) {
  return function(n) {
    if (n >= 2) {
      return append4($$break)($$break);
    }
    ;
    if (n === 1) {
      return $$break;
    }
    ;
    if (otherwise) {
      if (fl instanceof ForceBreak) {
        return $$break;
      }
      ;
      if (fl instanceof ForceSpace) {
        return space;
      }
      ;
      if (fl instanceof ForceNone) {
        return mempty3;
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 430, column 17 - line 433, column 26): " + [fl.constructor.name]);
    }
    ;
    throw new Error("Failed pattern match at Tidy.Doc (line 426, column 1 - line 426, column 47): " + [fl.constructor.name, n.constructor.name]);
  };
};
var breakDoc = function(br) {
  return function(doc) {
    if (isEmpty3(doc)) {
      return doc;
    }
    ;
    if (otherwise) {
      if (br instanceof ForceBreak) {
        return append4($$break)(doc);
      }
      ;
      if (br instanceof ForceSpace) {
        return append4(space)(doc);
      }
      ;
      if (br instanceof ForceNone) {
        return doc;
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 421, column 17 - line 424, column 23): " + [br.constructor.name]);
    }
    ;
    throw new Error("Failed pattern match at Tidy.Doc (line 418, column 1 - line 418, column 51): " + [br.constructor.name, doc.constructor.name]);
  };
};
var flexDoubleBreak = function(v) {
  return function(v1) {
    if (v.isEmpty) {
      return v1;
    }
    ;
    if (v1.isEmpty) {
      return v;
    }
    ;
    if (otherwise) {
      var docLeft = append4(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
      var docRight = append4(v1.leading.doc)(breakDoc(v1.leading.right)(v1.doc));
      var $139 = v1.leading.lines >= 2 || v.multiline;
      if ($139) {
        return {
          doc: append4(docLeft)(append4($$break)(append4($$break)(docRight))),
          isEmpty: v.isEmpty,
          leading: v.leading,
          multiline: true,
          trailing: v1.trailing
        };
      }
      ;
      return {
        doc: append4(flexSelect(docLeft)(mempty3)($$break))(append4($$break)(docRight)),
        isEmpty: v.isEmpty,
        leading: v.leading,
        multiline: true,
        trailing: v1.trailing
      };
    }
    ;
    throw new Error("Failed pattern match at Tidy.Doc (line 393, column 1 - line 393, column 49): " + [v.constructor.name, v1.constructor.name]);
  };
};
var joinDoc = function(spaceFn) {
  return function(v) {
    return function(v1) {
      if (v.isEmpty) {
        return v1;
      }
      ;
      if (v1.isEmpty) {
        return v;
      }
      ;
      if (otherwise) {
        var docLeft = append4(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
        var docRight = append4(v1.leading.doc)(breakDoc(v1.leading.right)(v1.doc));
        var $145 = v1.leading.lines > 0;
        if ($145) {
          return {
            doc: append4(docLeft)(append4(breaks(ForceBreak.value)(v1.leading.lines))(docRight)),
            isEmpty: v.isEmpty,
            leading: v.leading,
            multiline: true,
            trailing: v1.trailing
          };
        }
        ;
        var v2 = spaceFn(max12(v.trailing.right)(v1.leading.left))(v1.leading.multiline || v1.multiline)(docRight);
        return {
          doc: append4(docLeft)(v2.value1),
          isEmpty: v.isEmpty,
          leading: v.leading,
          multiline: v.trailing.multiline || (v.multiline || v2.value0),
          trailing: v1.trailing
        };
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 435, column 1 - line 435, column 102): " + [spaceFn.constructor.name, v.constructor.name, v1.constructor.name]);
    };
  };
};
var flexSoftBreak = /* @__PURE__ */ joinDoc(function(f) {
  return function(m) {
    return function(doc) {
      if (f instanceof ForceBreak) {
        return new Tuple(true, append4($$break)(doc));
      }
      ;
      if (f instanceof ForceSpace) {
        if (m) {
          return new Tuple(true, append4(space)(doc));
        }
        ;
        return new Tuple(false, flexGroup(append4(spaceBreak)(doc)));
      }
      ;
      if (f instanceof ForceNone) {
        if (m) {
          return new Tuple(true, append4($$break)(doc));
        }
        ;
        return new Tuple(false, flexGroup(append4(softBreak)(doc)));
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 358, column 37 - line 370, column 59): " + [f.constructor.name]);
    };
  };
});
var flexSpaceBreak = /* @__PURE__ */ joinDoc(function(f) {
  return function(m) {
    return function(doc) {
      if (f instanceof ForceBreak) {
        return new Tuple(true, append4($$break)(doc));
      }
      ;
      if (m) {
        return new Tuple(true, append4(spaceBreak)(doc));
      }
      ;
      return new Tuple(false, flexGroup(append4(spaceBreak)(doc)));
    };
  };
});
var semigroupFormatDoc = {
  append: /* @__PURE__ */ joinDoc(/* @__PURE__ */ force2(identity11))
};
var softBreak2 = /* @__PURE__ */ joinDoc(function(f) {
  return function(m) {
    return function(doc) {
      if (f instanceof ForceBreak) {
        return new Tuple(true, append4($$break)(doc));
      }
      ;
      if (f instanceof ForceSpace) {
        return new Tuple(m, append4(spaceBreak)(doc));
      }
      ;
      if (f instanceof ForceNone) {
        return new Tuple(m, append4(softBreak)(doc));
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 373, column 33 - line 379, column 36): " + [f.constructor.name]);
    };
  };
});
var softSpace = /* @__PURE__ */ joinDoc(function(f) {
  return function(m) {
    return function(doc) {
      if (f instanceof ForceBreak) {
        return new Tuple(true, append4($$break)(doc));
      }
      ;
      if (f instanceof ForceSpace) {
        return new Tuple(m, append4(space)(doc));
      }
      ;
      if (f instanceof ForceNone) {
        return new Tuple(m, append4(softSpaceDoc)(doc));
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 382, column 33 - line 388, column 34): " + [f.constructor.name]);
    };
  };
});
var space2 = /* @__PURE__ */ joinDoc(/* @__PURE__ */ force2(/* @__PURE__ */ append4(space)));
var spaceBreak2 = /* @__PURE__ */ joinDoc(/* @__PURE__ */ force2(/* @__PURE__ */ append4(spaceBreak)));
var toDoc = function(v) {
  if (v.isEmpty) {
    return mempty3;
  }
  ;
  if (otherwise) {
    return append4(v.leading.doc)(append4(breakDoc(v.leading.right)(v.doc))(breakDoc(v.trailing.left)(v.trailing.doc)));
  }
  ;
  throw new Error("Failed pattern match at Tidy.Doc (line 482, column 1 - line 482, column 40): " + [v.constructor.name]);
};
var semigroupLeadingComment = {
  append: function(v) {
    return function(v1) {
      if (isEmpty3(v.doc)) {
        return {
          doc: v1.doc,
          left: max12(v.left)(v1.left),
          lines: v.lines + v1.lines | 0,
          multiline: v1.multiline,
          right: v1.right
        };
      }
      ;
      if (isEmpty3(v1.doc)) {
        return {
          doc: append4(v.doc)(breaks(ForceNone.value)(v1.lines)),
          left: v.left,
          lines: v.lines,
          multiline: v.multiline || v1.lines > 0,
          right: function() {
            var $164 = v1.lines > 0;
            if ($164) {
              return ForceNone.value;
            }
            ;
            return max12(v.right)(v1.right);
          }()
        };
      }
      ;
      if (otherwise) {
        var br = max12(v.right)(v1.left);
        var $165 = v1.lines > 0 || eq22(br)(ForceBreak.value);
        if ($165) {
          return {
            doc: append4(v.doc)(append4(breaks(ForceBreak.value)(v1.lines))(v1.doc)),
            left: v.left,
            lines: v.lines,
            multiline: true,
            right: v1.right
          };
        }
        ;
        return {
          doc: append4(v.doc)(breakDoc(br)(v1.doc)),
          left: v.left,
          lines: v.lines,
          multiline: v.multiline || v1.multiline,
          right: v1.right
        };
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 74, column 1 - line 104, column 14): " + [v.constructor.name, v1.constructor.name]);
    };
  }
};
var append14 = /* @__PURE__ */ append(semigroupLeadingComment);
var leadingBlockComment = function(str) {
  return function(v) {
    var v1 = formatBlockComment(str);
    var comm = {
      doc: v1.value1,
      left: ForceSpace.value,
      lines: 0,
      multiline: v1.value0,
      right: ForceSpace.value
    };
    return {
      doc: v.doc,
      isEmpty: false,
      leading: append14(comm)(v.leading),
      multiline: v.multiline,
      trailing: v.trailing
    };
  };
};
var leadingLineComment = function(str) {
  return function(v) {
    var comm = {
      doc: text(str),
      left: ForceBreak.value,
      lines: 0,
      multiline: false,
      right: ForceBreak.value
    };
    return {
      doc: v.doc,
      isEmpty: false,
      leading: append14(comm)(v.leading),
      multiline: v.multiline,
      trailing: v.trailing
    };
  };
};
var monoidLeadingComment = /* @__PURE__ */ function() {
  return {
    mempty: {
      doc: mempty3,
      left: ForceNone.value,
      lines: 0,
      multiline: false,
      right: ForceNone.value
    },
    Semigroup0: function() {
      return semigroupLeadingComment;
    }
  };
}();
var mempty1 = /* @__PURE__ */ mempty(monoidLeadingComment);
var semigroupTrailingComment = {
  append: function(v) {
    return function(v1) {
      if (isEmpty3(v.doc)) {
        return {
          doc: v1.doc,
          left: max12(v.left)(v1.left),
          multiline: v1.multiline,
          right: v1.right
        };
      }
      ;
      if (isEmpty3(v1.doc)) {
        return {
          doc: v.doc,
          left: v.left,
          multiline: v.multiline,
          right: max12(v.right)(v1.right)
        };
      }
      ;
      if (otherwise) {
        return {
          doc: append4(v.doc)(breakDoc(max12(v.right)(v1.left))(v1.doc)),
          left: v.left,
          multiline: v.multiline || v1.multiline,
          right: v1.right
        };
      }
      ;
      throw new Error("Failed pattern match at Tidy.Doc (line 115, column 1 - line 126, column 12): " + [v.constructor.name, v1.constructor.name]);
    };
  }
};
var append23 = /* @__PURE__ */ append(semigroupTrailingComment);
var trailingBlockComment = function(str) {
  return function(v) {
    var v1 = formatBlockComment(str);
    var comm = {
      doc: v1.value1,
      left: ForceSpace.value,
      multiline: v1.value0,
      right: ForceSpace.value
    };
    return {
      doc: v.doc,
      isEmpty: false,
      leading: v.leading,
      multiline: v.multiline,
      trailing: append23(comm)(v.trailing)
    };
  };
};
var trailingLineComment = function(str) {
  return function(v) {
    var comm = {
      doc: text(str),
      left: ForceSpace.value,
      multiline: false,
      right: ForceBreak.value
    };
    return {
      doc: v.doc,
      isEmpty: false,
      leading: v.leading,
      multiline: v.multiline,
      trailing: append23(comm)(v.trailing)
    };
  };
};
var monoidTrailingComment = /* @__PURE__ */ function() {
  return {
    mempty: {
      doc: mempty3,
      left: ForceNone.value,
      multiline: false,
      right: ForceNone.value
    },
    Semigroup0: function() {
      return semigroupTrailingComment;
    }
  };
}();
var mempty22 = /* @__PURE__ */ mempty(monoidTrailingComment);
var monoidFormatDoc = {
  mempty: {
    doc: mempty3,
    leading: mempty1,
    isEmpty: true,
    multiline: false,
    trailing: mempty22
  },
  Semigroup0: function() {
    return semigroupFormatDoc;
  }
};
var mempty32 = /* @__PURE__ */ mempty(monoidFormatDoc);
var fromDoc = function(doc) {
  if (isEmpty3(doc)) {
    return mempty32;
  }
  ;
  if (otherwise) {
    return {
      doc,
      leading: mempty1,
      isEmpty: false,
      multiline: false,
      trailing: mempty22
    };
  }
  ;
  throw new Error("Failed pattern match at Tidy.Doc (line 158, column 1 - line 158, column 42): " + [doc.constructor.name]);
};
var text2 = function($188) {
  return fromDoc(text($188));
};
var joinWithMap = function(dictFoldable) {
  var foldl9 = foldl(dictFoldable);
  return function(op) {
    return function(k) {
      var go = function(a) {
        return function(b) {
          if (isEmpty4(a)) {
            return k(b);
          }
          ;
          if (otherwise) {
            return op(a)(k(b));
          }
          ;
          throw new Error("Failed pattern match at Tidy.Doc (line 501, column 3 - line 503, column 29): " + [a.constructor.name, b.constructor.name]);
        };
      };
      return foldl9(go)(mempty32);
    };
  };
};
var joinWith2 = function(dictFoldable) {
  return flip(joinWithMap(dictFoldable))(identity11);
};
var $$break2 = /* @__PURE__ */ joinDoc(/* @__PURE__ */ force2(/* @__PURE__ */ append4($$break)));
var anchor = function(v) {
  if (v.leading.lines > 0) {
    return {
      doc: v.doc,
      isEmpty: v.isEmpty,
      leading: {
        doc: v.leading.doc,
        left: v.leading.left,
        lines: 0,
        multiline: v.leading.multiline,
        right: v.leading.right
      },
      multiline: true,
      trailing: v.trailing
    };
  }
  ;
  return v;
};
var alignCurrentColumn2 = /* @__PURE__ */ mapDocs(alignCurrentColumn);
var align2 = function($189) {
  return mapDocs(align($189));
};

// output/Tidy.Hang/index.js
var pure5 = /* @__PURE__ */ pure(applicativeNonEmptyArray);
var append15 = /* @__PURE__ */ append(semigroupDoc);
var eq5 = /* @__PURE__ */ eq(eqForceBreak);
var mempty4 = /* @__PURE__ */ mempty(monoidDoc);
var notEq3 = /* @__PURE__ */ notEq(eqForceBreak);
var max6 = /* @__PURE__ */ max(ordForceBreak);
var mempty12 = /* @__PURE__ */ mempty(monoidLeadingComment);
var identity12 = /* @__PURE__ */ identity(categoryFn);
var append24 = /* @__PURE__ */ append(semigroupFormatDoc);
var HangBreak = /* @__PURE__ */ function() {
  function HangBreak2(value0) {
    this.value0 = value0;
  }
  ;
  HangBreak2.create = function(value0) {
    return new HangBreak2(value0);
  };
  return HangBreak2;
}();
var HangOps = /* @__PURE__ */ function() {
  function HangOps2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  HangOps2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new HangOps2(value0, value1, value2);
      };
    };
  };
  return HangOps2;
}();
var HangApp = /* @__PURE__ */ function() {
  function HangApp2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  HangApp2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new HangApp2(value0, value1, value2);
      };
    };
  };
  return HangApp2;
}();
var HangingOp = /* @__PURE__ */ function() {
  function HangingOp2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  HangingOp2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new HangingOp2(value0, value1, value2);
      };
    };
  };
  return HangingOp2;
}();
var overHangHead = function(f) {
  var go = function(v) {
    if (v instanceof HangBreak) {
      return new HangBreak(f(v.value0));
    }
    ;
    if (v instanceof HangOps) {
      return new HangOps(v.value0, go(v.value1), v.value2);
    }
    ;
    if (v instanceof HangApp) {
      return new HangApp(v.value0, go(v.value1), v.value2);
    }
    ;
    throw new Error("Failed pattern match at Tidy.Hang (line 62, column 8 - line 65, column 54): " + [v.constructor.name]);
  };
  return go;
};
var hangWithIndent = function(ind) {
  return function(a) {
    var $183 = maybe(a)(HangApp.create(ind)(a));
    return function($184) {
      return $183(fromArray($184));
    };
  };
};
var hangOps = /* @__PURE__ */ function() {
  return HangOps.create(indent2);
}();
var hangHead = function($copy_v) {
  var $tco_done = false;
  var $tco_result;
  function $tco_loop(v) {
    if (v instanceof HangBreak) {
      $tco_done = true;
      return v.value0;
    }
    ;
    if (v instanceof HangOps) {
      $copy_v = v.value1;
      return;
    }
    ;
    if (v instanceof HangApp) {
      $copy_v = v.value1;
      return;
    }
    ;
    throw new Error("Failed pattern match at Tidy.Hang (line 54, column 12 - line 57, column 34): " + [v.constructor.name]);
  }
  ;
  while (!$tco_done) {
    $tco_result = $tco_loop($copy_v);
  }
  ;
  return $tco_result;
};
var hangBreak = function($185) {
  return HangBreak.create(flexGroup2($185));
};
var hangApp = /* @__PURE__ */ function() {
  return HangApp.create(indent2);
}();
var hang = function(a) {
  var $186 = HangApp.create(indent2)(hangBreak(a));
  return function($187) {
    return $186(pure5($187));
  };
};
var forceBreaks = function(n) {
  if (n >= 2) {
    return append15($$break)($$break);
  }
  ;
  if (otherwise) {
    return $$break;
  }
  ;
  throw new Error("Failed pattern match at Tidy.Hang (line 67, column 1 - line 67, column 38): " + [n.constructor.name]);
};
var breaks2 = function(fl) {
  return function(n) {
    if (eq5(fl)(ForceBreak.value) || n > 0) {
      return forceBreaks(n);
    }
    ;
    if (eq5(fl)(ForceSpace.value)) {
      return space;
    }
    ;
    if (otherwise) {
      return mempty4;
    }
    ;
    throw new Error("Failed pattern match at Tidy.Hang (line 72, column 1 - line 72, column 47): " + [fl.constructor.name, n.constructor.name]);
  };
};
var toFormatDoc = /* @__PURE__ */ function() {
  var realignOp = function($copy_op) {
    return function($copy_doc) {
      var $tco_var_op = $copy_op;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(op, doc) {
        var v = hangHead(doc);
        if (notEq3(op.leading.left)(ForceBreak.value) && (op.leading.lines === 0 && (notEq3(op.trailing.right)(ForceBreak.value) && (notEq3(v.leading.left)(ForceBreak.value) && v.leading.lines > 0)))) {
          $tco_var_op = forceMinSourceBreaks(1)(op);
          $copy_doc = overHangHead(flatten)(doc);
          return;
        }
        ;
        var v2 = function(v3) {
          return new Tuple(op, doc);
        };
        if (doc instanceof HangBreak) {
          var $77 = notEq3(op.trailing.right)(ForceBreak.value) && (notEq3(v.leading.left)(ForceBreak.value) && (v.leading.lines === 0 && (v.leading.multiline || op.multiline)));
          if ($77) {
            $tco_done = true;
            return new Tuple(op, overHangHead(forceMinSourceBreaks(1))(doc));
          }
          ;
          $tco_done = true;
          return v2(true);
        }
        ;
        $tco_done = true;
        return v2(true);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_op, $copy_doc);
      }
      ;
      return $tco_result;
    };
  };
  var indMulti = function(head5) {
    return function(ind) {
      return function(doc) {
        if (head5 instanceof HangApp) {
          return doc;
        }
        ;
        return ind(doc);
      };
    };
  };
  var flexSelectJoin = function(v) {
    return function(v1) {
      return function(v2) {
        var $$break3 = function() {
          if (eq5(v.leading.left)(ForceBreak.value) || v.leading.lines > 0) {
            return $$break;
          }
          ;
          if (otherwise) {
            return spaceBreak;
          }
          ;
          throw new Error("Failed pattern match at Tidy.Hang (line 255, column 7 - line 257, column 38): " + []);
        }();
        var doc1$prime = append15($$break3)(append15(v.leading.doc)(append15(breakDoc(v.leading.right)(v.doc))(breakDoc(v.trailing.left)(v.trailing.doc))));
        var doc2$prime = append15(breaks2(max6(v.trailing.right)(v1.leading.left))(v1.leading.lines))(append15(v1.leading.doc)(append15(breakDoc(v1.leading.right)(v1.doc))(breakDoc(v1.trailing.left)(v1.trailing.doc))));
        var m3 = v2.leading.multiline || (v2.multiline || v2.trailing.multiline);
        var m2 = v1.leading.multiline || (v1.multiline || v1.trailing.multiline);
        var m1 = v.leading.multiline || (v.multiline || v.trailing.multiline);
        var doc3$prime = append15(breaks2(max6(v.trailing.right)(v2.leading.left))(v2.leading.lines))(append15(v2.leading.doc)(append15(breakDoc(v1.leading.right)(v2.doc))(breakDoc(v2.trailing.left)(v2.trailing.doc))));
        return {
          doc: flexSelect(doc1$prime)(doc2$prime)(doc3$prime),
          leading: mempty12,
          isEmpty: false,
          multiline: m1 || m2 && m3,
          trailing: {
            doc: mempty4,
            left: ForceNone.value,
            multiline: false,
            right: max6(v1.trailing.right)(v2.trailing.right)
          }
        };
      };
    };
  };
  var flexSelect2 = function(v) {
    return function(v1) {
      return function(v2) {
        var doc1$prime = append15(v.doc)(breakDoc(v.trailing.left)(v.trailing.doc));
        var doc2$prime = append15(breaks2(max6(v.trailing.right)(v1.leading.left))(v1.leading.lines))(append15(v1.leading.doc)(append15(breakDoc(v1.leading.right)(v1.doc))(breakDoc(v1.trailing.left)(v1.trailing.doc))));
        var m3 = v2.leading.multiline || (v2.multiline || v2.trailing.multiline);
        var m2 = v1.leading.multiline || (v1.multiline || v1.trailing.multiline);
        var m1 = v.multiline || v.trailing.multiline;
        var doc3$prime = append15(breaks2(max6(v.trailing.right)(v2.leading.left))(v2.leading.lines))(append15(v2.leading.doc)(append15(breakDoc(v1.leading.right)(v2.doc))(breakDoc(v2.trailing.left)(v2.trailing.doc))));
        return {
          doc: flexSelect(doc1$prime)(doc2$prime)(doc3$prime),
          leading: v.leading,
          isEmpty: false,
          multiline: m1 || m2 && m3,
          trailing: {
            doc: mempty4,
            left: ForceNone.value,
            multiline: false,
            right: max6(v1.trailing.right)(v2.trailing.right)
          }
        };
      };
    };
  };
  var docJoin = function(v) {
    if (v.isEmpty) {
      return v;
    }
    ;
    if (otherwise) {
      var $105 = eq5(v.leading.left)(ForceBreak.value) || v.leading.lines > 0;
      if ($105) {
        return v;
      }
      ;
      var $106 = v.leading.multiline || v.multiline;
      if ($106) {
        return forceMinSourceBreaks(1)(v);
      }
      ;
      return {
        doc: append15(spaceBreak)(append15(v.leading.doc)(breakDoc(v.leading.right)(v.doc))),
        isEmpty: v.isEmpty,
        leading: mempty12,
        multiline: v.multiline,
        trailing: v.trailing
      };
    }
    ;
    throw new Error("Failed pattern match at Tidy.Hang (line 301, column 3 - line 313, column 14): " + [v.constructor.name]);
  };
  var goLastOperand = function(prevAlgn) {
    return function(prevInd) {
      return function(v) {
        if (v instanceof HangBreak) {
          var doc$prime = flexGroup2(docJoin(v.value0));
          return new Tuple(doc$prime, prevInd(doc$prime));
        }
        ;
        if (v instanceof HangApp) {
          var v1 = unsnoc2(v.value2);
          var $$this = fst(goInit(function() {
            if (v.value1 instanceof HangApp) {
              return overHangHead(forceMinSourceBreaks(1))(v.value1);
            }
            ;
            return v.value1;
          }()));
          var next2 = foldr2(goInitApp)(goLastApp(v1.last))(v1.init);
          var docIndent = indMulti(v.value1)(v.value0)(fst(next2));
          var docGroup = flexSelectJoin($$this)(fst(next2))(docIndent);
          var docBreak = flexSelectJoin(prevInd($$this))(prevAlgn(docIndent))(prevInd(docIndent));
          return new Tuple(docGroup, docBreak);
        }
        ;
        if (v instanceof HangOps) {
          var v1 = unsnoc2(v.value2);
          var $$this = fst(goInit(v.value1));
          var next2 = foldr2(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
          var docIndent = v.value0(fst(next2));
          var docGroup = flexSelectJoin($$this)(fst(next2))(docIndent);
          var docBreak = flexSelectJoin(prevInd($$this))(prevAlgn(docIndent))(prevInd(docIndent));
          return new Tuple(docGroup, docBreak);
        }
        ;
        throw new Error("Failed pattern match at Tidy.Hang (line 181, column 36 - line 204, column 30): " + [v.constructor.name]);
      };
    };
  };
  var goLastOp = function(ind) {
    return function(v) {
      var algn = function() {
        var $127 = v.value0 <= 1;
        if ($127) {
          return align2(2);
        }
        ;
        return identity12;
      }();
      var next2 = goLastOperand(algn)(ind)(v.value2);
      var docIndent = snd(next2);
      var docBreak = append24(docJoin(v.value1))(docIndent);
      var docGroup = flexSelectJoin(v.value1)(fst(next2))(docIndent);
      return new Tuple(docGroup, docBreak);
    };
  };
  var goLastApp = function(doc) {
    var $$this = goLast(doc);
    var docGroup = flexGroup2(fst($$this));
    var docBreak = snd($$this);
    return new Tuple(docGroup, docBreak);
  };
  var goLast = function(v) {
    if (v instanceof HangBreak) {
      var doc$prime = docJoin(v.value0);
      return new Tuple(doc$prime, doc$prime);
    }
    ;
    if (v instanceof HangApp) {
      var v1 = unsnoc2(v.value2);
      var $$this = fst(goInit(v.value1));
      var next2 = foldr2(goInitApp)(goLastApp(v1.last))(v1.init);
      var docGroup = flexSelectJoin($$this)(fst(next2))(indMulti(v.value1)(v.value0)(fst(next2)));
      var docBreak = append24(docJoin($$this))(indMulti(v.value1)(v.value0)(fst(next2)));
      return new Tuple(docGroup, docBreak);
    }
    ;
    if (v instanceof HangOps) {
      var v1 = unsnoc2(v.value2);
      var $$this = fst(goInit(v.value1));
      var next2 = foldr2(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
      var docGroup = flexSelectJoin($$this)(fst(next2))(v.value0(fst(next2)));
      var docBreak = $$break2(docJoin($$this))(v.value0(snd(next2)));
      return new Tuple(docGroup, docBreak);
    }
    ;
    throw new Error("Failed pattern match at Tidy.Hang (line 101, column 12 - line 120, column 30): " + [v.constructor.name]);
  };
  var goInitOperand = function(prevAlgn) {
    return function(prevInd) {
      return function(v) {
        if (v instanceof HangBreak) {
          var doc$prime = prevInd(flexGroup2(docJoin(v.value0)));
          return new Tuple(doc$prime, doc$prime);
        }
        ;
        if (v instanceof HangApp) {
          var v1 = unsnoc2(v.value2);
          var $$this = fst(goInit(v.value1));
          var next2 = foldr2(goInitApp)(goLastApp(v1.last))(v1.init);
          var docGroup = flexSelectJoin(prevInd($$this))(indMulti(v.value1)(function($188) {
            return prevAlgn(v.value0($188));
          })(fst(next2)))(prevInd(indMulti(v.value1)(v.value0)(fst(next2))));
          var docBreak = prevInd(append24(docJoin($$this))(v.value0(snd(next2))));
          return new Tuple(docGroup, docBreak);
        }
        ;
        if (v instanceof HangOps) {
          var v1 = unsnoc2(v.value2);
          var $$this = fst(goInit(v.value1));
          var next2 = foldr2(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
          var docGroup = flexSelectJoin(prevInd($$this))(prevAlgn(v.value0(fst(next2))))(prevInd(v.value0(fst(next2))));
          var docBreak = prevInd(append24(docJoin($$this))(v.value0(snd(next2))));
          return new Tuple(docGroup, docBreak);
        }
        ;
        throw new Error("Failed pattern match at Tidy.Hang (line 154, column 36 - line 179, column 30): " + [v.constructor.name]);
      };
    };
  };
  var goInitOp = function(ind) {
    return function(v) {
      return function(next2) {
        var v1 = realignOp(v.value1)(v.value2);
        var algn = function() {
          var $163 = v.value0 <= 1;
          if ($163) {
            return align2(2);
          }
          ;
          return identity12;
        }();
        var docOprd = fst(goInitOperand(algn)(ind)(v1.value1));
        var docBreak = append24(docJoin(v1.value0))(append24(docOprd)(snd(next2)));
        var docGroup = flexSelectJoin(append24(v1.value0)(docOprd))(fst(next2))(snd(next2));
        return new Tuple(docGroup, docBreak);
      };
    };
  };
  var goInitApp = function(doc) {
    return function(next2) {
      var $$this = fst(goInit(doc));
      var docGroup = flexSelectJoin($$this)(fst(next2))(snd(next2));
      var docBreak = append24(docJoin($$this))(snd(next2));
      return new Tuple(docGroup, docBreak);
    };
  };
  var goInit = function(v) {
    if (v instanceof HangBreak) {
      return new Tuple(v.value0, v.value0);
    }
    ;
    if (v instanceof HangApp) {
      var v1 = unsnoc2(v.value2);
      var $$this = fst(goInit(v.value1));
      var next2 = foldr2(goInitApp)(goLastApp(v1.last))(v1.init);
      var docGroup = flexSelect2($$this)(v.value0(fst(next2)))(indMulti(v.value1)(v.value0)(fst(next2)));
      var docBreak = $$break2($$this)(v.value0(snd(next2)));
      return new Tuple(docGroup, docBreak);
    }
    ;
    if (v instanceof HangOps) {
      var v1 = unsnoc2(v.value2);
      var $$this = fst(goInit(v.value1));
      var next2 = foldr2(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
      var docGroup = append24(flexGroup2($$this))(v.value0(fst(next2)));
      var docBreak = $$break2($$this)(v.value0(snd(next2)));
      return new Tuple(docGroup, docBreak);
    }
    ;
    throw new Error("Failed pattern match at Tidy.Hang (line 81, column 12 - line 99, column 30): " + [v.constructor.name]);
  };
  return function($189) {
    return fst(goInit($189));
  };
}();

// output/Tidy.Precedence/index.js
var compare4 = /* @__PURE__ */ compare(ordInt);
var append5 = /* @__PURE__ */ append(semigroupNonEmptyArray);
var eq6 = /* @__PURE__ */ eq(/* @__PURE__ */ eqMaybe(eqModuleName));
var eq13 = /* @__PURE__ */ eq(eqOperator);
var ordMaybe2 = /* @__PURE__ */ ordMaybe(ordModuleName);
var alter2 = /* @__PURE__ */ alter(ordMaybe2);
var bind4 = /* @__PURE__ */ bind(bindMaybe);
var lookup3 = /* @__PURE__ */ lookup2(ordMaybe2);
var pure6 = /* @__PURE__ */ pure(applicativeMaybe);
var map15 = /* @__PURE__ */ map(functorMaybe);
var append16 = /* @__PURE__ */ append(semigroupArray);
var foldMap4 = /* @__PURE__ */ foldMap(foldableArray)(monoidArray);
var foldl3 = /* @__PURE__ */ foldl(foldableArray);
var bindFlipped4 = /* @__PURE__ */ bindFlipped(bindMaybe);
var pure12 = /* @__PURE__ */ pure(applicativeNonEmptyArray);
var pure22 = /* @__PURE__ */ pure(applicativeList);
var foldl12 = /* @__PURE__ */ foldl(foldableNonEmptyArray);
var OperatorType = /* @__PURE__ */ function() {
  function OperatorType2() {
  }
  ;
  OperatorType2.value = new OperatorType2();
  return OperatorType2;
}();
var OperatorValue = /* @__PURE__ */ function() {
  function OperatorValue2() {
  }
  ;
  OperatorValue2.value = new OperatorValue2();
  return OperatorValue2;
}();
var QualifiedOperator = /* @__PURE__ */ function() {
  function QualifiedOperator2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  QualifiedOperator2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new QualifiedOperator2(value0, value1, value2);
      };
    };
  };
  return QualifiedOperator2;
}();
var OpList = /* @__PURE__ */ function() {
  function OpList2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  OpList2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new OpList2(value0, value1, value2);
      };
    };
  };
  return OpList2;
}();
var OpPure = /* @__PURE__ */ function() {
  function OpPure2(value0) {
    this.value0 = value0;
  }
  ;
  OpPure2.create = function(value0) {
    return new OpPure2(value0);
  };
  return OpPure2;
}();
var OpHead = /* @__PURE__ */ function() {
  function OpHead2(value0) {
    this.value0 = value0;
  }
  ;
  OpHead2.create = function(value0) {
    return new OpHead2(value0);
  };
  return OpHead2;
}();
var OpPrec = /* @__PURE__ */ function() {
  function OpPrec2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  OpPrec2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new OpPrec2(value0, value1, value2);
      };
    };
  };
  return OpPrec2;
}();
var snoc4 = function(prevOps) {
  return function(nextPrec) {
    return function(nextOps) {
      var v = unsnoc2(prevOps);
      return snoc$prime(v.init)(new Tuple(v.last.value0, new OpList(v.last.value1, nextPrec, nextOps)));
    };
  };
};
var unwind = /* @__PURE__ */ function() {
  var go = function($copy_prec) {
    return function($copy_ops) {
      return function($copy_v) {
        var $tco_var_prec = $copy_prec;
        var $tco_var_ops = $copy_ops;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(prec, ops, v) {
          if (v instanceof OpHead) {
            $tco_done = true;
            return new OpList(v.value0, prec, ops);
          }
          ;
          if (v instanceof OpPrec) {
            $tco_var_prec = v.value1;
            $tco_var_ops = snoc4(v.value2)(prec)(ops);
            $copy_v = v.value0;
            return;
          }
          ;
          throw new Error("Failed pattern match at Tidy.Precedence (line 101, column 17 - line 104, column 46): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_prec, $tco_var_ops, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
  };
  return function(v) {
    if (v instanceof OpHead) {
      return v.value0;
    }
    ;
    if (v instanceof OpPrec) {
      return go(v.value1)(v.value2)(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy.Precedence (line 97, column 10 - line 99, column 41): " + [v.constructor.name]);
  };
}();
var push2 = function($copy_stk) {
  return function($copy_chs) {
    var $tco_var_stk = $copy_stk;
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(stk, chs) {
      if (chs instanceof Nil) {
        $tco_done = true;
        return stk;
      }
      ;
      if (chs instanceof Cons && chs.value1 instanceof Nil) {
        if (stk instanceof OpHead) {
          $tco_done = true;
          return new OpPrec(stk, chs.value0.value0, chs.value0.value1);
        }
        ;
        if (stk instanceof OpPrec) {
          var v = compare4(chs.value0.value0)(stk.value1);
          if (v instanceof EQ) {
            $tco_done = true;
            return new OpPrec(stk.value0, stk.value1, append5(stk.value2)(chs.value0.value1));
          }
          ;
          if (v instanceof GT) {
            $tco_done = true;
            return new OpPrec(stk, chs.value0.value0, chs.value0.value1);
          }
          ;
          if (v instanceof LT) {
            $tco_var_stk = stk.value0;
            $copy_chs = new Cons(new Tuple(stk.value1, stk.value2), chs);
            return;
          }
          ;
          throw new Error("Failed pattern match at Tidy.Precedence (line 82, column 9 - line 85, column 60): " + [v.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Tidy.Precedence (line 78, column 5 - line 85, column 60): " + [stk.constructor.name]);
      }
      ;
      if (chs instanceof Cons) {
        if (stk instanceof OpHead) {
          $tco_var_stk = new OpHead(new OpList(stk.value0, chs.value0.value0, chs.value0.value1));
          $copy_chs = chs.value1;
          return;
        }
        ;
        if (stk instanceof OpPrec) {
          var v = compare4(chs.value0.value0)(stk.value1);
          if (v instanceof EQ) {
            $tco_var_stk = new OpPrec(stk.value0, stk.value1, append5(stk.value2)(chs.value0.value1));
            $copy_chs = chs.value1;
            return;
          }
          ;
          if (v instanceof GT) {
            $tco_var_stk = new OpPrec(stk.value0, stk.value1, snoc4(stk.value2)(chs.value0.value0)(chs.value0.value1));
            $copy_chs = chs.value1;
            return;
          }
          ;
          if (v instanceof LT) {
            $tco_var_stk = stk.value0;
            $copy_chs = new Cons(new Tuple(stk.value1, snoc4(stk.value2)(chs.value0.value0)(chs.value0.value1)), chs.value1);
            return;
          }
          ;
          throw new Error("Failed pattern match at Tidy.Precedence (line 91, column 9 - line 94, column 85): " + [v.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Tidy.Precedence (line 87, column 5 - line 94, column 85): " + [stk.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Tidy.Precedence (line 75, column 16 - line 94, column 85): " + [chs.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($tco_var_stk, $copy_chs);
    }
    ;
    return $tco_result;
  };
};
var eqOperatorNamespace = {
  eq: function(x) {
    return function(y) {
      if (x instanceof OperatorType && y instanceof OperatorType) {
        return true;
      }
      ;
      if (x instanceof OperatorValue && y instanceof OperatorValue) {
        return true;
      }
      ;
      return false;
    };
  }
};
var eq23 = /* @__PURE__ */ eq(eqOperatorNamespace);
var eqQualifiedOperator = {
  eq: function(x) {
    return function(y) {
      return eq6(x.value0)(y.value0) && eq23(x.value1)(y.value1) && eq13(x.value2)(y.value2);
    };
  }
};
var ordOperatorNamespace = {
  compare: function(x) {
    return function(y) {
      if (x instanceof OperatorType && y instanceof OperatorType) {
        return EQ.value;
      }
      ;
      if (x instanceof OperatorType) {
        return LT.value;
      }
      ;
      if (y instanceof OperatorType) {
        return GT.value;
      }
      ;
      if (x instanceof OperatorValue && y instanceof OperatorValue) {
        return EQ.value;
      }
      ;
      throw new Error("Failed pattern match at Tidy.Precedence (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
    };
  },
  Eq0: function() {
    return eqOperatorNamespace;
  }
};
var ordTuple2 = /* @__PURE__ */ ordTuple(ordOperatorNamespace)(ordOperator);
var insert8 = /* @__PURE__ */ insert5(ordTuple2);
var lookup1 = /* @__PURE__ */ lookup2(ordTuple2);
var union4 = /* @__PURE__ */ union2(ordTuple2);
var filterKeys2 = /* @__PURE__ */ filterKeys(ordTuple2);
var insertOperator = function(v) {
  return function(prec) {
    var opKey = new Tuple(v.value1, v.value2);
    return alter2(function(v1) {
      if (v1 instanceof Nothing) {
        return new Just(singleton9(opKey)(prec));
      }
      ;
      if (v1 instanceof Just) {
        return new Just(insert8(opKey)(prec)(v1.value0));
      }
      ;
      throw new Error("Failed pattern match at Tidy.Precedence (line 159, column 5 - line 163, column 41): " + [v1.constructor.name]);
    })(v.value0);
  };
};
var lookupOperator = function(v) {
  return function(precMap) {
    return bind4(lookup3(v.value0)(precMap))(lookup1(new Tuple(v.value1, v.value2)));
  };
};
var remapOperatorTo = function(newModName) {
  return function(v) {
    return function(precMap) {
      return fromMaybe(precMap)(bind4(lookupOperator(v)(precMap))(function(prec) {
        return pure6(insertOperator(new QualifiedOperator(newModName, v.value1, v.value2))(prec)(precMap));
      }));
    };
  };
};
var remapModuleTo = function(newModName) {
  return function(modName) {
    return function(precMap) {
      return fromMaybe(precMap)(bind4(lookup3(new Just(modName))(precMap))(function(ops) {
        return pure6(alter2(function(v) {
          if (v instanceof Nothing) {
            return new Just(ops);
          }
          ;
          if (v instanceof Just) {
            return new Just(union4(ops)(v.value0));
          }
          ;
          throw new Error("Failed pattern match at Tidy.Precedence (line 184, column 7 - line 188, column 38): " + [v.constructor.name]);
        })(newModName)(precMap));
      }));
    };
  };
};
var remapModuleToHiding = function(dictFoldable) {
  var elem4 = elem(dictFoldable)(eqQualifiedOperator);
  return function(hiding) {
    return function(newModName) {
      return function(modName) {
        return function(precMap) {
          return fromMaybe(precMap)(bind4(lookup3(new Just(modName))(precMap))(function(ops) {
            var filteredOps = filterKeys2(function() {
              var $212 = flip(elem4)(hiding);
              var $213 = uncurry(QualifiedOperator.create(new Just(modName)));
              return function($214) {
                return !$212($213($214));
              };
            }())(ops);
            return pure6(alter2(function(v) {
              if (v instanceof Nothing) {
                return new Just(filteredOps);
              }
              ;
              if (v instanceof Just) {
                return new Just(union4(filteredOps)(v.value0));
              }
              ;
              throw new Error("Failed pattern match at Tidy.Precedence (line 205, column 7 - line 209, column 46): " + [v.constructor.name]);
            })(newModName)(precMap));
          }));
        };
      };
    };
  };
};
var remapModuleToHiding1 = /* @__PURE__ */ remapModuleToHiding(foldableArray);
var remapOperators = /* @__PURE__ */ function() {
  var goImport = function(modName) {
    return function(v) {
      if (v instanceof ImportOp) {
        return [new QualifiedOperator(new Just(modName), OperatorValue.value, v.value0.name)];
      }
      ;
      if (v instanceof ImportTypeOp) {
        return [new QualifiedOperator(new Just(modName), OperatorType.value, v.value1.name)];
      }
      ;
      return [];
    };
  };
  var goImportDecl = function(precMap) {
    return function(v) {
      var newModName = map15(function(v1) {
        return v1.value1.name;
      })(v.qualified);
      if (v.names instanceof Nothing) {
        return remapModuleTo(newModName)(v.module.name)(precMap);
      }
      ;
      if (v.names instanceof Just) {
        var impOps = append16(goImport(v.module.name)(v.names.value0.value1.value.head))(foldMap4(function() {
          var $215 = goImport(v.module.name);
          return function($216) {
            return $215(snd($216));
          };
        }())(v.names.value0.value1.value.tail));
        var $169 = isJust(v.names.value0.value0);
        if ($169) {
          return remapModuleToHiding1(impOps)(newModName)(v.module.name)(precMap);
        }
        ;
        return foldl3(flip(remapOperatorTo(newModName)))(precMap)(impOps);
      }
      ;
      throw new Error("Failed pattern match at Tidy.Precedence (line 121, column 5 - line 132, column 67): " + [v.names.constructor.name]);
    };
  };
  var goDecl = function(modName) {
    return function(precMap) {
      return function(v) {
        if (v instanceof DeclFixity) {
          if (v.value0.operator instanceof FixityValue) {
            return insertOperator(new QualifiedOperator(new Just(modName), OperatorValue.value, v.value0.operator.value2.name))(v.value0.prec.value1)(insertOperator(new QualifiedOperator(Nothing.value, OperatorValue.value, v.value0.operator.value2.name))(v.value0.prec.value1)(precMap));
          }
          ;
          if (v.value0.operator instanceof FixityType) {
            return insertOperator(new QualifiedOperator(new Just(modName), OperatorType.value, v.value0.operator.value3.name))(v.value0.prec.value1)(insertOperator(new QualifiedOperator(Nothing.value, OperatorType.value, v.value0.operator.value3.name))(v.value0.prec.value1)(precMap));
          }
          ;
          throw new Error("Failed pattern match at Tidy.Precedence (line 144, column 7 - line 152, column 85): " + [v.value0.operator.constructor.name]);
        }
        ;
        return precMap;
      };
    };
  };
  var goModule = function(precMap) {
    return function(v) {
      return foldl3(goDecl(v.header.name.name))(foldl3(goImportDecl)(precMap)(v.header.imports))(v.body.decls);
    };
  };
  return goModule;
}();
var defaultPrecedence = 10;
var toOperatorTree = function(precMap) {
  return function(getOperator) {
    return function(init3) {
      var go = function(stk) {
        return function(v) {
          var v1 = getOperator(v.value0);
          var prec = fromMaybe(defaultPrecedence)(bindFlipped4(lookup1(new Tuple(v1.value1, v1.value2)))(lookup3(v1.value0)(precMap)));
          var opCh = pure12(new Tuple(v.value0, new OpPure(v.value1)));
          return push2(stk)(pure22(new Tuple(prec, opCh)));
        };
      };
      var $217 = foldl12(go)(new OpHead(new OpPure(init3)));
      return function($218) {
        return unwind($217($218));
      };
    };
  };
};

// output/Tidy.Token/index.js
var UnicodeSource = /* @__PURE__ */ function() {
  function UnicodeSource2() {
  }
  ;
  UnicodeSource2.value = new UnicodeSource2();
  return UnicodeSource2;
}();
var UnicodeAlways = /* @__PURE__ */ function() {
  function UnicodeAlways2() {
  }
  ;
  UnicodeAlways2.value = new UnicodeAlways2();
  return UnicodeAlways2;
}();
var UnicodeNever = /* @__PURE__ */ function() {
  function UnicodeNever2() {
  }
  ;
  UnicodeNever2.value = new UnicodeNever2();
  return UnicodeNever2;
}();
var printUnicode = function(ascii) {
  return function(uni) {
    return function(style) {
      return function(v) {
        if (v instanceof UnicodeNever) {
          return ascii;
        }
        ;
        if (v instanceof UnicodeAlways) {
          return uni;
        }
        ;
        if (v instanceof UnicodeSource) {
          if (style instanceof ASCII) {
            return ascii;
          }
          ;
          if (style instanceof Unicode) {
            return uni;
          }
          ;
          throw new Error("Failed pattern match at Tidy.Token (line 23, column 5 - line 25, column 21): " + [style.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Tidy.Token (line 19, column 32 - line 25, column 21): " + [v.constructor.name]);
      };
    };
  };
};
var printQualified = function(moduleName) {
  return function(name2) {
    if (moduleName instanceof Nothing) {
      return name2;
    }
    ;
    if (moduleName instanceof Just) {
      return moduleName.value0 + ("." + name2);
    }
    ;
    throw new Error("Failed pattern match at Tidy.Token (line 97, column 34 - line 99, column 44): " + [moduleName.constructor.name]);
  };
};
var printToken = function(option) {
  return function(v) {
    if (v instanceof TokLeftParen) {
      return "(";
    }
    ;
    if (v instanceof TokRightParen) {
      return ")";
    }
    ;
    if (v instanceof TokLeftBrace) {
      return "{";
    }
    ;
    if (v instanceof TokRightBrace) {
      return "}";
    }
    ;
    if (v instanceof TokLeftSquare) {
      return "[";
    }
    ;
    if (v instanceof TokRightSquare) {
      return "]";
    }
    ;
    if (v instanceof TokLeftArrow) {
      return printUnicode("<-")("\u2190")(v.value0)(option);
    }
    ;
    if (v instanceof TokRightArrow) {
      return printUnicode("->")("\u2192")(v.value0)(option);
    }
    ;
    if (v instanceof TokRightFatArrow) {
      return printUnicode("=>")("\u21D2")(v.value0)(option);
    }
    ;
    if (v instanceof TokDoubleColon) {
      return printUnicode("::")("\u2237")(v.value0)(option);
    }
    ;
    if (v instanceof TokForall) {
      return printUnicode("forall")("\u2200")(v.value0)(option);
    }
    ;
    if (v instanceof TokEquals) {
      return "=";
    }
    ;
    if (v instanceof TokPipe) {
      return "|";
    }
    ;
    if (v instanceof TokTick) {
      return "`";
    }
    ;
    if (v instanceof TokDot) {
      return ".";
    }
    ;
    if (v instanceof TokComma) {
      return ",";
    }
    ;
    if (v instanceof TokUnderscore) {
      return "_";
    }
    ;
    if (v instanceof TokBackslash) {
      return "\\";
    }
    ;
    if (v instanceof TokAt) {
      return "@";
    }
    ;
    if (v instanceof TokLowerName) {
      return printQualified(v.value0)(v.value1);
    }
    ;
    if (v instanceof TokUpperName) {
      return printQualified(v.value0)(v.value1);
    }
    ;
    if (v instanceof TokOperator) {
      return printQualified(v.value0)(v.value1);
    }
    ;
    if (v instanceof TokSymbolName) {
      return printQualified(v.value0)("(" + (v.value1 + ")"));
    }
    ;
    if (v instanceof TokSymbolArrow) {
      return printUnicode("(->)")("(\u2192)")(v.value0)(option);
    }
    ;
    if (v instanceof TokHole) {
      return "?" + v.value0;
    }
    ;
    if (v instanceof TokChar) {
      return "'" + (v.value0 + "'");
    }
    ;
    if (v instanceof TokString) {
      return '"' + (v.value0 + '"');
    }
    ;
    if (v instanceof TokRawString) {
      return '"""' + (v.value0 + '"""');
    }
    ;
    if (v instanceof TokInt) {
      return v.value0;
    }
    ;
    if (v instanceof TokNumber) {
      return v.value0;
    }
    ;
    if (v instanceof TokLayoutStart) {
      return "";
    }
    ;
    if (v instanceof TokLayoutSep) {
      return "";
    }
    ;
    if (v instanceof TokLayoutEnd) {
      return "";
    }
    ;
    throw new Error("Failed pattern match at Tidy.Token (line 28, column 21 - line 94, column 7): " + [v.constructor.name]);
  };
};
var eqUnicodeOption = {
  eq: function(x) {
    return function(y) {
      if (x instanceof UnicodeSource && y instanceof UnicodeSource) {
        return true;
      }
      ;
      if (x instanceof UnicodeAlways && y instanceof UnicodeAlways) {
        return true;
      }
      ;
      if (x instanceof UnicodeNever && y instanceof UnicodeNever) {
        return true;
      }
      ;
      return false;
    };
  }
};

// output/Tidy/index.js
var $runtime_lazy3 = function(name2, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var pure7 = /* @__PURE__ */ pure(applicativeNonEmptyArray);
var foldMap5 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidFormatDoc);
var joinWithMap2 = /* @__PURE__ */ joinWithMap(foldableArray);
var lines3 = /* @__PURE__ */ lines(foldableArray);
var intercalate7 = /* @__PURE__ */ intercalate3(monoidDoc);
var map16 = /* @__PURE__ */ map(functorArray);
var map17 = /* @__PURE__ */ map(functorNonEmptyArray);
var joinWithMap1 = /* @__PURE__ */ joinWithMap(foldableNonEmptyList);
var mempty5 = /* @__PURE__ */ mempty(monoidFormatDoc);
var foldr8 = /* @__PURE__ */ foldr(foldableArray);
var append17 = /* @__PURE__ */ append(semigroupFormatDoc);
var foldl4 = /* @__PURE__ */ foldl(foldableArray);
var mempty13 = /* @__PURE__ */ mempty(monoidDoc);
var foldMap12 = /* @__PURE__ */ foldMap(foldableArray);
var joinWithMap22 = /* @__PURE__ */ joinWithMap(foldableNonEmptyArray);
var identity13 = /* @__PURE__ */ identity(categoryFn);
var foldl13 = /* @__PURE__ */ foldl(foldableNonEmptyArray);
var guard5 = /* @__PURE__ */ guard2(monoidFormatDoc);
var eq14 = /* @__PURE__ */ eq(eqUnicodeOption);
var eq24 = /* @__PURE__ */ eq(eqProper);
var eq32 = /* @__PURE__ */ eq(eqOperator);
var eq52 = /* @__PURE__ */ eq(/* @__PURE__ */ eqArray(eqProper));
var eq62 = /* @__PURE__ */ eq(eqIdent);
var eq7 = /* @__PURE__ */ eq(eqModuleName);
var eq9 = /* @__PURE__ */ eq(/* @__PURE__ */ eqMaybe(eqModuleName));
var compare5 = /* @__PURE__ */ compare(ordProper);
var compare14 = /* @__PURE__ */ compare(ordOperator);
var compare22 = /* @__PURE__ */ compare(ordBoolean);
var compare32 = /* @__PURE__ */ compare(/* @__PURE__ */ ordArray(ordProper));
var compare42 = /* @__PURE__ */ compare(ordIdent);
var compare52 = /* @__PURE__ */ compare(ordModuleName);
var compare6 = /* @__PURE__ */ compare(ordInt);
var compare7 = /* @__PURE__ */ compare(/* @__PURE__ */ ordMaybe(ordModuleName));
var un2 = /* @__PURE__ */ un();
var bindFlipped5 = /* @__PURE__ */ bindFlipped(bindFn);
var foldMap32 = /* @__PURE__ */ foldMap12(monoidFormatDoc);
var append32 = /* @__PURE__ */ append(semigroupArray);
var pure13 = /* @__PURE__ */ pure(applicativeArray);
var map24 = /* @__PURE__ */ map(functorMaybe);
var joinWith3 = /* @__PURE__ */ joinWith2(foldableArray);
var top4 = /* @__PURE__ */ top(boundedInt);
var TypeArrowFirst = /* @__PURE__ */ function() {
  function TypeArrowFirst2() {
  }
  ;
  TypeArrowFirst2.value = new TypeArrowFirst2();
  return TypeArrowFirst2;
}();
var TypeArrowLast = /* @__PURE__ */ function() {
  function TypeArrowLast2() {
  }
  ;
  TypeArrowLast2.value = new TypeArrowLast2();
  return TypeArrowLast2;
}();
var PolyForall = /* @__PURE__ */ function() {
  function PolyForall2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  PolyForall2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new PolyForall2(value0, value1, value2);
      };
    };
  };
  return PolyForall2;
}();
var PolyArrow = /* @__PURE__ */ function() {
  function PolyArrow2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  PolyArrow2.create = function(value0) {
    return function(value1) {
      return new PolyArrow2(value0, value1);
    };
  };
  return PolyArrow2;
}();
var ImportWrapSource = /* @__PURE__ */ function() {
  function ImportWrapSource2() {
  }
  ;
  ImportWrapSource2.value = new ImportWrapSource2();
  return ImportWrapSource2;
}();
var ImportWrapAuto = /* @__PURE__ */ function() {
  function ImportWrapAuto2() {
  }
  ;
  ImportWrapAuto2.value = new ImportWrapAuto2();
  return ImportWrapAuto2;
}();
var ImportSortSource = /* @__PURE__ */ function() {
  function ImportSortSource2() {
  }
  ;
  ImportSortSource2.value = new ImportSortSource2();
  return ImportSortSource2;
}();
var ImportSortIde = /* @__PURE__ */ function() {
  function ImportSortIde2() {
  }
  ;
  ImportSortIde2.value = new ImportSortIde2();
  return ImportSortIde2;
}();
var ImportClassCmp = /* @__PURE__ */ function() {
  function ImportClassCmp2(value0) {
    this.value0 = value0;
  }
  ;
  ImportClassCmp2.create = function(value0) {
    return new ImportClassCmp2(value0);
  };
  return ImportClassCmp2;
}();
var ImportTypeOpCmp = /* @__PURE__ */ function() {
  function ImportTypeOpCmp2(value0) {
    this.value0 = value0;
  }
  ;
  ImportTypeOpCmp2.create = function(value0) {
    return new ImportTypeOpCmp2(value0);
  };
  return ImportTypeOpCmp2;
}();
var ImportTypeCmp = /* @__PURE__ */ function() {
  function ImportTypeCmp2(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  ;
  ImportTypeCmp2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return new ImportTypeCmp2(value0, value1, value2);
      };
    };
  };
  return ImportTypeCmp2;
}();
var ImportValueCmp = /* @__PURE__ */ function() {
  function ImportValueCmp2(value0) {
    this.value0 = value0;
  }
  ;
  ImportValueCmp2.create = function(value0) {
    return new ImportValueCmp2(value0);
  };
  return ImportValueCmp2;
}();
var ImportOpCmp = /* @__PURE__ */ function() {
  function ImportOpCmp2(value0) {
    this.value0 = value0;
  }
  ;
  ImportOpCmp2.create = function(value0) {
    return new ImportOpCmp2(value0);
  };
  return ImportOpCmp2;
}();
var ImportErrorCmp = /* @__PURE__ */ function() {
  function ImportErrorCmp2() {
  }
  ;
  ImportErrorCmp2.value = new ImportErrorCmp2();
  return ImportErrorCmp2;
}();
var ImportModuleCmp = /* @__PURE__ */ function() {
  function ImportModuleCmp2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  ImportModuleCmp2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new ImportModuleCmp2(value0, value1, value2, value3);
        };
      };
    };
  };
  return ImportModuleCmp2;
}();
var Grouped = /* @__PURE__ */ function() {
  function Grouped2() {
  }
  ;
  Grouped2.value = new Grouped2();
  return Grouped2;
}();
var NotGrouped = /* @__PURE__ */ function() {
  function NotGrouped2() {
  }
  ;
  NotGrouped2.value = new NotGrouped2();
  return NotGrouped2;
}();
var IfThen = /* @__PURE__ */ function() {
  function IfThen2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  IfThen2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new IfThen2(value0, value1, value2, value3);
        };
      };
    };
  };
  return IfThen2;
}();
var ElseIfThen = /* @__PURE__ */ function() {
  function ElseIfThen2(value0, value1, value2, value3, value4) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }
  ;
  ElseIfThen2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return function(value4) {
            return new ElseIfThen2(value0, value1, value2, value3, value4);
          };
        };
      };
    };
  };
  return ElseIfThen2;
}();
var Else = /* @__PURE__ */ function() {
  function Else2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Else2.create = function(value0) {
    return function(value1) {
      return new Else2(value0, value1);
    };
  };
  return Else2;
}();
var DeclGroupSame = /* @__PURE__ */ function() {
  function DeclGroupSame2() {
  }
  ;
  DeclGroupSame2.value = new DeclGroupSame2();
  return DeclGroupSame2;
}();
var DeclGroupHard = /* @__PURE__ */ function() {
  function DeclGroupHard2() {
  }
  ;
  DeclGroupHard2.value = new DeclGroupHard2();
  return DeclGroupHard2;
}();
var DeclGroupSoft = /* @__PURE__ */ function() {
  function DeclGroupSoft2() {
  }
  ;
  DeclGroupSoft2.value = new DeclGroupSoft2();
  return DeclGroupSoft2;
}();
var DeclGroupValueSignature = /* @__PURE__ */ function() {
  function DeclGroupValueSignature2(value0) {
    this.value0 = value0;
  }
  ;
  DeclGroupValueSignature2.create = function(value0) {
    return new DeclGroupValueSignature2(value0);
  };
  return DeclGroupValueSignature2;
}();
var DeclGroupValue = /* @__PURE__ */ function() {
  function DeclGroupValue2(value0) {
    this.value0 = value0;
  }
  ;
  DeclGroupValue2.create = function(value0) {
    return new DeclGroupValue2(value0);
  };
  return DeclGroupValue2;
}();
var DeclGroupTypeSignature = /* @__PURE__ */ function() {
  function DeclGroupTypeSignature2(value0) {
    this.value0 = value0;
  }
  ;
  DeclGroupTypeSignature2.create = function(value0) {
    return new DeclGroupTypeSignature2(value0);
  };
  return DeclGroupTypeSignature2;
}();
var DeclGroupType = /* @__PURE__ */ function() {
  function DeclGroupType2(value0) {
    this.value0 = value0;
  }
  ;
  DeclGroupType2.create = function(value0) {
    return new DeclGroupType2(value0);
  };
  return DeclGroupType2;
}();
var DeclGroupClass = /* @__PURE__ */ function() {
  function DeclGroupClass2(value0) {
    this.value0 = value0;
  }
  ;
  DeclGroupClass2.create = function(value0) {
    return new DeclGroupClass2(value0);
  };
  return DeclGroupClass2;
}();
var DeclGroupInstance = /* @__PURE__ */ function() {
  function DeclGroupInstance2() {
  }
  ;
  DeclGroupInstance2.value = new DeclGroupInstance2();
  return DeclGroupInstance2;
}();
var DeclGroupFixity = /* @__PURE__ */ function() {
  function DeclGroupFixity2() {
  }
  ;
  DeclGroupFixity2.value = new DeclGroupFixity2();
  return DeclGroupFixity2;
}();
var DeclGroupForeign = /* @__PURE__ */ function() {
  function DeclGroupForeign2() {
  }
  ;
  DeclGroupForeign2.value = new DeclGroupForeign2();
  return DeclGroupForeign2;
}();
var DeclGroupRole = /* @__PURE__ */ function() {
  function DeclGroupRole2() {
  }
  ;
  DeclGroupRole2.value = new DeclGroupRole2();
  return DeclGroupRole2;
}();
var DeclGroupUnknown = /* @__PURE__ */ function() {
  function DeclGroupUnknown2() {
  }
  ;
  DeclGroupUnknown2.value = new DeclGroupUnknown2();
  return DeclGroupUnknown2;
}();
var toQualifiedOperatorTree = function(precMap) {
  return function(opNs) {
    return toOperatorTree(precMap)(function(v) {
      return new QualifiedOperator(v.module, opNs, v.name);
    });
  };
};
var toPolytype = /* @__PURE__ */ function() {
  var go = function($copy_init) {
    return function($copy_v) {
      var $tco_var_init = $copy_init;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(init3, v) {
        if (v instanceof TypeForall) {
          $tco_var_init = snoc(init3)(new PolyForall(v.value0, v.value1, v.value2));
          $copy_v = v.value3;
          return;
        }
        ;
        if (v instanceof TypeArrow) {
          $tco_var_init = snoc(init3)(new PolyArrow(v.value0, v.value1));
          $copy_v = v.value2;
          return;
        }
        ;
        if (v instanceof TypeConstrained) {
          $tco_var_init = snoc(init3)(new PolyArrow(v.value0, v.value1));
          $copy_v = v.value2;
          return;
        }
        ;
        $tco_done = true;
        return {
          init: init3,
          last: v
        };
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_init, $copy_v);
      }
      ;
      return $tco_result;
    };
  };
  return go([]);
}();
var toElseIfChain = function(ifte) {
  var go = function($copy_acc) {
    return function($copy_curr) {
      var $tco_var_acc = $copy_acc;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(acc, curr) {
        if (curr["false"] instanceof ExprIf) {
          var chain = new ElseIfThen(curr["else"], curr["false"].value0.keyword, curr["false"].value0.cond, curr["false"].value0.then, curr["false"]["value0"]["true"]);
          $tco_var_acc = snoc2(acc)(chain);
          $copy_curr = curr["false"].value0;
          return;
        }
        ;
        $tco_done = true;
        return snoc2(acc)(new Else(curr["else"], curr["false"]));
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_acc, $copy_curr);
      }
      ;
      return $tco_result;
    };
  };
  return go(pure7(new IfThen(ifte.keyword, ifte.cond, ifte.then, ifte["true"])))(ifte);
};
var formatString = /* @__PURE__ */ function() {
  var $1034 = foldMap5(function(v) {
    var v1 = unsnoc(v.tail);
    if (v1 instanceof Nothing) {
      return text2(v.head);
    }
    ;
    if (v1 instanceof Just) {
      return $$break2($$break2(text2(v.head + "\\"))(joinWithMap2($$break2)(function(str) {
        return text2("\\" + (str + "\\"));
      })(v1.value0.init)))(text2("\\" + v1.value0.last));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 186, column 3 - line 191, column 41): " + [v1.constructor.name]);
  });
  return function($1035) {
    return $1034(uncons(splitStringEscapeLines($1035)));
  };
}();
var formatRawString = /* @__PURE__ */ function() {
  var $1036 = foldMap5(function(v) {
    var $248 = $$null(v.tail);
    if ($248) {
      return text2(v.head);
    }
    ;
    return fromDoc(lines3([text(v.head), locally(function(v1) {
      return {
        indent: 0,
        indentSpaces: "",
        indentUnit: v1.indentUnit,
        indentWidth: v1.indentWidth,
        pageWidth: v1.pageWidth,
        ribbonRatio: v1.ribbonRatio
      };
    })(intercalate7($$break)(map16(text)(v.tail)))]));
  });
  return function($1037) {
    return $1036(uncons(splitLines($1037)));
  };
}();
var formatListElem = function(alignment) {
  return function(format) {
    return function(conf) {
      return function(b) {
        return flexGroup2(align2(alignment)(anchor(format(conf)(b))));
      };
    };
  };
};
var formatHangingOperatorTree = function(formatOperator) {
  return function(format) {
    return function(conf) {
      var opWidth = function(v) {
        return v.token.range.end.column - v.token.range.start.column | 0;
      };
      var go = function(v) {
        if (v instanceof OpPure) {
          return format(conf)(v.value0);
        }
        ;
        if (v instanceof OpList) {
          return hangOps(go(v.value0))(map17(function(v1) {
            return new HangingOp(opWidth(v1.value0), formatOperator(conf)(v1.value0), go(v1.value1));
          })(v.value2));
        }
        ;
        throw new Error("Failed pattern match at Tidy (line 1163, column 8 - line 1168, column 93): " + [v.constructor.name]);
      };
      return go;
    };
  };
};
var formatErrorVoid = {
  formatError: absurd
};
var formatError = function(dict) {
  return dict.formatError;
};
var formatDeclGroups = function(declSeparator) {
  return function(k) {
    return function(format) {
      return function(conf) {
        var joinDecls = function(acc) {
          var newDoc = joinWithMap1($$break2)(format(conf))(acc.decls);
          if (acc.sep instanceof DeclGroupSame) {
            return $$break2(newDoc)(acc.doc);
          }
          ;
          if (acc.sep instanceof DeclGroupSoft) {
            return flexDoubleBreak(newDoc)(acc.doc);
          }
          ;
          if (acc.sep instanceof DeclGroupHard) {
            return $$break2(newDoc)(forceMinSourceBreaks(2)(acc.doc));
          }
          ;
          throw new Error("Failed pattern match at Tidy (line 1375, column 19 - line 1381, column 52): " + [acc.sep.constructor.name]);
        };
        var go = function(decl) {
          return function($1038) {
            return Just.create(function(v) {
              if (v instanceof Nothing) {
                return {
                  doc: mempty5,
                  sep: DeclGroupSame.value,
                  group: k(decl),
                  decls: singleton5(decl)
                };
              }
              ;
              if (v instanceof Just) {
                var group3 = k(decl);
                var v1 = declSeparator(group3)(v.value0.group);
                if (v1 instanceof DeclGroupSame) {
                  return {
                    doc: v.value0.doc,
                    sep: v.value0.sep,
                    group: group3,
                    decls: cons3(decl)(v.value0.decls)
                  };
                }
                ;
                return {
                  doc: joinDecls(v.value0),
                  sep: v1,
                  group: group3,
                  decls: singleton5(decl)
                };
              }
              ;
              throw new Error("Failed pattern match at Tidy (line 1352, column 22 - line 1373, column 12): " + [v.constructor.name]);
            }($1038));
          };
        };
        var $1039 = maybe(mempty5)(joinDecls);
        var $1040 = foldr8(go)(Nothing.value);
        return function($1041) {
          return $1039($1040($1041));
        };
      };
    };
  };
};
var formatComment = function(lineComment2) {
  return function(blockComment) {
    return function(com) {
      return function(next2) {
        if (com instanceof Comment) {
          if (take3(2)(com.value0) === "--") {
            return lineComment2(com.value0)(next2);
          }
          ;
          if (otherwise) {
            return blockComment(com.value0)(next2);
          }
          ;
        }
        ;
        if (com instanceof Line) {
          return sourceBreak(com.value1)(next2);
        }
        ;
        if (com instanceof Space) {
          return next2;
        }
        ;
        throw new Error("Failed pattern match at Tidy (line 146, column 51 - line 155, column 9): " + [com.constructor.name]);
      };
    };
  };
};
var formatWithComments = function(leading) {
  return function(trailing) {
    return function(doc) {
      return foldr8(formatComment(leadingLineComment)(leadingBlockComment))(append17(doc)(foldr8(formatComment(trailingLineComment)(trailingBlockComment))(mempty5)(trailing)))(leading);
    };
  };
};
var formatToken = function(conf) {
  return function(tok) {
    var tokStr = printToken(conf.unicode)(tok.value);
    var tokDoc = function() {
      if (tok.value instanceof TokRawString) {
        return formatRawString(tokStr);
      }
      ;
      if (tok.value instanceof TokString) {
        return formatString(tokStr);
      }
      ;
      return text2(tokStr);
    }();
    return formatWithComments(tok.leadingComments)(tok.trailingComments)(tokDoc);
  };
};
var formatEmptyList = function(conf) {
  return function(v) {
    return append17(formatToken(conf)(v.open))(formatToken(conf)(v.close));
  };
};
var formatListTail = function(alignment) {
  return function(format) {
    return function(conf) {
      return joinWithMap2(softBreak2)(function(v) {
        return space2(formatToken(conf)(v.value0))(formatListElem(alignment)(format)(conf)(v.value1));
      });
    };
  };
};
var formatList = function(openSpace) {
  return function(closeSpace) {
    return function(alignment) {
      return function(grouped) {
        return function(format) {
          return function(conf) {
            return function(v) {
              var listElems = closeSpace(softBreak2(formatListElem(alignment)(format)(conf)(v.head))(formatListTail(alignment)(format)(conf)(v.tail)))(formatToken(conf)(v.close));
              if (grouped instanceof Grouped) {
                return flexGroup2(openSpace(formatToken(conf)(v.open))(listElems));
              }
              ;
              if (grouped instanceof NotGrouped) {
                return openSpace(formatToken(conf)(v.open))(listElems);
              }
              ;
              throw new Error("Failed pattern match at Tidy (line 1222, column 3 - line 1228, column 30): " + [grouped.constructor.name]);
            };
          };
        };
      };
    };
  };
};
var formatDelimited = function(openSpace) {
  return function(closeSpace) {
    return function(alignment) {
      return function(grouped) {
        return function(format) {
          return function(conf) {
            return function(v) {
              if (v.value instanceof Nothing) {
                return formatEmptyList(conf)({
                  open: v.open,
                  close: v.close
                });
              }
              ;
              if (v.value instanceof Just) {
                return formatList(openSpace)(closeSpace)(alignment)(grouped)(format)(conf)({
                  open: v.open,
                  head: v.value.value0.head,
                  tail: v.value.value0.tail,
                  close: v.close
                });
              }
              ;
              throw new Error("Failed pattern match at Tidy (line 1198, column 103 - line 1202, column 94): " + [v.value.constructor.name]);
            };
          };
        };
      };
    };
  };
};
var formatParenList = /* @__PURE__ */ formatDelimited(softSpace)(softBreak2)(2);
var formatDelimitedNonEmpty = function(openSpace) {
  return function(closeSpace) {
    return function(alignment) {
      return function(grouped) {
        return function(format) {
          return function(conf) {
            return function(v) {
              return formatList(openSpace)(closeSpace)(alignment)(grouped)(format)(conf)({
                open: v.open,
                head: v.value.head,
                tail: v.value.tail,
                close: v.close
              });
            };
          };
        };
      };
    };
  };
};
var formatParenListNonEmpty = /* @__PURE__ */ formatDelimitedNonEmpty(softSpace)(softBreak2)(2);
var formatOneOrDelimited = function(format) {
  return function(conf) {
    return function(v) {
      if (v instanceof One) {
        return format(conf)(v.value0);
      }
      ;
      if (v instanceof Many) {
        return formatParenListNonEmpty(NotGrouped.value)(format)(conf)(v.value0);
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 582, column 36 - line 584, column 63): " + [v.constructor.name]);
    };
  };
};
var formatName = function(conf) {
  return function(v) {
    return formatToken(conf)(v.token);
  };
};
var formatDataMembers = function(conf) {
  return function(v) {
    if (v instanceof DataAll) {
      return formatToken(conf)(v.value0);
    }
    ;
    if (v instanceof DataEnumerated) {
      return formatParenList(NotGrouped.value)(formatName)(conf)(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 278, column 26 - line 282, column 50): " + [v.constructor.name]);
  };
};
var formatExport = function(conf) {
  return function(v) {
    if (v instanceof ExportValue) {
      return formatName(conf)(v.value0);
    }
    ;
    if (v instanceof ExportOp) {
      return formatName(conf)(v.value0);
    }
    ;
    if (v instanceof ExportType) {
      return flexGroup2(softBreak2(formatName(conf)(v.value0))(indent2(foldMap5(formatDataMembers(conf))(v.value1))));
    }
    ;
    if (v instanceof ExportTypeOp) {
      return space2(formatToken(conf)(v.value0))(anchor(formatName(conf)(v.value1)));
    }
    ;
    if (v instanceof ExportClass) {
      return space2(formatToken(conf)(v.value0))(anchor(formatName(conf)(v.value1)));
    }
    ;
    if (v instanceof ExportModule) {
      return space2(formatToken(conf)(v.value0))(anchor(formatName(conf)(v.value1)));
    }
    ;
    if (v instanceof ExportError) {
      return conf.formatError(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 261, column 21 - line 275, column 23): " + [v.constructor.name]);
  };
};
var formatFundep = function(conf) {
  return function(v) {
    if (v instanceof FundepDetermined) {
      return space2(formatToken(conf)(v.value0))(joinWithMap22(space2)(formatName(conf))(v.value1));
    }
    ;
    if (v instanceof FundepDetermines) {
      return space2(space2(joinWithMap22(space2)(formatName(conf))(v.value0))(formatToken(conf)(v.value1)))(joinWithMap22(space2)(formatName(conf))(v.value2));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 572, column 21 - line 579, column 57): " + [v.constructor.name]);
  };
};
var formatImport = function(conf) {
  return function(v) {
    if (v instanceof ImportValue) {
      return formatName(conf)(v.value0);
    }
    ;
    if (v instanceof ImportOp) {
      return formatName(conf)(v.value0);
    }
    ;
    if (v instanceof ImportType) {
      return flexGroup2(softBreak2(formatName(conf)(v.value0))(indent2(foldMap5(formatDataMembers(conf))(v.value1))));
    }
    ;
    if (v instanceof ImportTypeOp) {
      return space2(formatToken(conf)(v.value0))(anchor(formatName(conf)(v.value1)));
    }
    ;
    if (v instanceof ImportClass) {
      return space2(formatToken(conf)(v.value0))(anchor(formatName(conf)(v.value1)));
    }
    ;
    if (v instanceof ImportError) {
      return conf.formatError(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 358, column 21 - line 370, column 23): " + [v.constructor.name]);
  };
};
var formatImportDecl = function(conf) {
  return function(v) {
    var formatImportQualified = function(v1) {
      return space2(formatToken(conf)(v1.value0))(anchor(formatName(conf)(v1.value1)));
    };
    var importDeclBody = function() {
      if (v.names instanceof Just && v.names.value0.value0 instanceof Just) {
        return space2(flexSpaceBreak(space2(formatName(conf)(v.module))(anchor(formatToken(conf)(v.names.value0.value0.value0))))(anchor(formatParenListNonEmpty(NotGrouped.value)(formatImport)(conf)(v.names.value0.value1))))(anchor(foldMap5(formatImportQualified)(v.qualified)));
      }
      ;
      if (v.names instanceof Just && v.names.value0.value0 instanceof Nothing) {
        return space2(flexSpaceBreak(formatName(conf)(v.module))(anchor(formatParenListNonEmpty(NotGrouped.value)(formatImport)(conf)(v.names.value0.value1))))(anchor(foldMap5(formatImportQualified)(v.qualified)));
      }
      ;
      if (v.names instanceof Nothing) {
        return space2(formatName(conf)(v.module))(anchor(foldMap5(formatImportQualified)(v.qualified)));
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 288, column 20 - line 300, column 69): " + [v.names.constructor.name]);
    }();
    return space2(formatToken(conf)(v.keyword))(indent2(anchor(importDeclBody)));
  };
};
var formatParens = function(format) {
  return function(conf) {
    return function(v) {
      return append17(formatToken(conf)(v.open))(append17(anchor(format(conf)(v.value)))(formatToken(conf)(v.close)));
    };
  };
};
var formatParensBlock = function(format) {
  return function(conf) {
    return function(v) {
      return flexGroup2(softSpace(formatToken(conf)(v.open))(softBreak2(align2(2)(anchor(format(conf)(v.value))))(formatToken(conf)(v.close))));
    };
  };
};
var formatQualifiedName = function(conf) {
  return function(v) {
    return formatToken(conf)(v.token);
  };
};
var formatBasicListNonEmpty = /* @__PURE__ */ formatDelimitedNonEmpty(space2)(spaceBreak2)(2);
var formatBasicList = /* @__PURE__ */ formatDelimited(space2)(spaceBreak2)(2);
var flatten2 = /* @__PURE__ */ function() {
  var format = function(v) {
    return space2(v.head)(indent2(joinWithMap2(space2)(anchor)(v.tail)));
  };
  var $1044 = foldMap5(format);
  return function($1045) {
    return $1044(uncons($1045));
  };
}();
var formatTypeVarBinding = function(conf) {
  return function(v) {
    if (v instanceof TypeVarKinded) {
      return formatParensBlock(formatKindedTypeVarBinding)(conf)(v.value0);
    }
    ;
    if (v instanceof TypeVarName) {
      return formatName(conf)(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 622, column 29 - line 626, column 22): " + [v.constructor.name]);
  };
};
var formatType = function(conf) {
  var $1046 = formatHangingType(conf);
  return function($1047) {
    return toFormatDoc($1046($1047));
  };
};
var formatRowLabeled = function(conf) {
  return function(v) {
    return space2(formatName(conf)(v.label))(indent2(flexSpaceBreak(anchor(formatToken(conf)(v.separator)))(anchor(formatType(conf)(v.value)))));
  };
};
var formatRow = function(openSpace) {
  return function(closeSpace) {
    return function(conf) {
      return function(v) {
        if (v.value.labels instanceof Nothing && v.value.tail instanceof Nothing) {
          return formatEmptyList(conf)({
            open: v.open,
            close: v.close
          });
        }
        ;
        if (v.value.labels instanceof Just && v.value.tail instanceof Nothing) {
          return formatDelimitedNonEmpty(openSpace)(closeSpace)(2)(Grouped.value)(formatRowLabeled)(conf)({
            open: v.open,
            value: v.value.labels.value0,
            close: v.close
          });
        }
        ;
        if (v.value.labels instanceof Nothing && v.value.tail instanceof Just) {
          return closeSpace(openSpace(formatToken(conf)(v.open))(flatten2([formatToken(conf)(v.value.tail.value0.value0), formatType(conf)(v.value.tail.value0.value1)])))(formatToken(conf)(v.close));
        }
        ;
        if (v.value.labels instanceof Just && v.value.tail instanceof Just) {
          return closeSpace(spaceBreak2(softBreak2(openSpace(formatToken(conf)(v.open))(formatListElem(2)(formatRowLabeled)(conf)(v.value.labels.value0.head)))(formatListTail(2)(formatRowLabeled)(conf)(v.value.labels.value0.tail)))(space2(formatToken(conf)(v.value.tail.value0.value0))(formatListElem(2)(formatType)(conf)(v.value.tail.value0.value1))))(formatToken(conf)(v.close));
        }
        ;
        throw new Error("Failed pattern match at Tidy (line 798, column 94 - line 821, column 31): " + [v.value.labels.constructor.name, v.value.tail.constructor.name]);
      };
    };
  };
};
var formatMonotype = function(conf) {
  var $1048 = formatHangingMonotype(conf);
  return function($1049) {
    return toFormatDoc($1048($1049));
  };
};
var formatKindedTypeVarBinding = function(conf) {
  return function(v) {
    return space2(formatName(conf)(v.label))(indent2(flexSpaceBreak(anchor(formatToken(conf)(v.separator)))(formatType(conf)(v.value))));
  };
};
var formatHangingType = function(conf) {
  var $1050 = formatHangingPolytype(identity13)(conf);
  return function($1051) {
    return $1050(toPolytype($1051));
  };
};
var formatHangingPolytype = function(ind) {
  return function(conf) {
    return function(v) {
      if ($$null(v.init)) {
        return formatHangingMonotype(conf)(v.last);
      }
      ;
      if (conf.typeArrowPlacement instanceof TypeArrowFirst) {
        var isUnicodeArrow = function() {
          if (conf.unicode instanceof UnicodeAlways) {
            return $$const(true);
          }
          ;
          if (conf.unicode instanceof UnicodeNever) {
            return $$const(false);
          }
          ;
          if (conf.unicode instanceof UnicodeSource) {
            return function(v1) {
              if (v1 instanceof PolyArrow && (v1.value1.value instanceof TokRightArrow && v1.value1.value.value0 instanceof Unicode)) {
                return true;
              }
              ;
              if (v1 instanceof PolyArrow && (v1.value1.value instanceof TokRightFatArrow && v1.value1.value.value0 instanceof Unicode)) {
                return true;
              }
              ;
              if (v1 instanceof PolyForall && (v1.value0.value instanceof TokForall && v1.value0.value.value0 instanceof Unicode)) {
                return true;
              }
              ;
              return false;
            };
          }
          ;
          throw new Error("Failed pattern match at Tidy (line 752, column 22 - line 762, column 21): " + [conf.unicode.constructor.name]);
        }();
        var isUnicode = all(isUnicodeArrow)(v.init);
        var formatPolyArrowFirst = function(k) {
          return function(v1) {
            if (v1 instanceof PolyForall) {
              var go = function(doc) {
                return function(tyVar) {
                  return flexSpaceBreak(doc)(indent2(formatTypeVarBinding(conf)(tyVar)));
                };
              };
              return function(doc) {
                return space2(softBreak2(k(foldl13(go)(formatToken(conf)(v1.value0))(v1.value1)))(append17(guard5(!isUnicode)(fromDoc(flexAlt(mempty13)(space))))(anchor(formatToken(conf)(v1.value2)))))(anchor(alignCurrentColumn2(doc)));
              };
            }
            ;
            if (v1 instanceof PolyArrow) {
              return function(doc) {
                return space2(spaceBreak2(k(flexGroup2(formatMonotype(conf)(v1.value0))))(anchor(formatToken(conf)(v1.value1))))(anchor(alignCurrentColumn2(doc)));
              };
            }
            ;
            throw new Error("Failed pattern match at Tidy (line 764, column 30 - line 780, column 52): " + [v1.constructor.name]);
          };
        };
        return hangBreak(foldl4(formatPolyArrowFirst)(ind)(v.init)(anchor(formatMonotype(conf)(v.last))));
      }
      ;
      if (conf.typeArrowPlacement instanceof TypeArrowLast) {
        var formatPolyArrowLast = function(v1) {
          if (v1 instanceof PolyForall) {
            var go = function(doc) {
              return function(tyVar) {
                return flexSpaceBreak(doc)(indent2(formatTypeVarBinding(conf)(tyVar)));
              };
            };
            return append17(foldl13(go)(formatToken(conf)(v1.value0))(v1.value1))(indent2(anchor(formatToken(conf)(v1.value2))));
          }
          ;
          if (v1 instanceof PolyArrow) {
            return space2(flexGroup2(formatType(conf)(v1.value0)))(indent2(anchor(formatToken(conf)(v1.value1))));
          }
          ;
          throw new Error("Failed pattern match at Tidy (line 786, column 27 - line 795, column 57): " + [v1.constructor.name]);
        };
        return hangBreak(spaceBreak2(joinWithMap2(spaceBreak2)(formatPolyArrowLast)(v.init))(flexGroup2(formatMonotype(conf)(v.last))));
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 745, column 49 - line 795, column 57): " + [conf.typeArrowPlacement.constructor.name]);
    };
  };
};
var formatHangingMonotype = function(conf) {
  return function(v) {
    if (v instanceof TypeVar) {
      return hangBreak(formatName(conf)(v.value0));
    }
    ;
    if (v instanceof TypeConstructor) {
      return hangBreak(formatQualifiedName(conf)(v.value0));
    }
    ;
    if (v instanceof TypeWildcard) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof TypeHole) {
      return hangBreak(formatName(conf)(v.value0));
    }
    ;
    if (v instanceof TypeString) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof TypeInt) {
      return hangBreak(append17(foldMap5(formatToken(conf))(v.value0))(formatToken(conf)(v.value1)));
    }
    ;
    if (v instanceof TypeArrowName) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof TypeOpName) {
      return hangBreak(formatQualifiedName(conf)(v.value0));
    }
    ;
    if (v instanceof TypeRow) {
      return hangBreak(formatRow(softSpace)(softBreak2)(conf)(v.value0));
    }
    ;
    if (v instanceof TypeRecord) {
      return hangBreak(formatRow(space2)(spaceBreak2)(conf)(v.value0));
    }
    ;
    if (v instanceof TypeApp) {
      return hangApp(formatHangingType(conf)(v.value0))(map17(formatHangingType(conf))(v.value1));
    }
    ;
    if (v instanceof TypeParens) {
      return hangBreak(formatParensBlock(formatType)(conf)(v.value0));
    }
    ;
    if (v instanceof TypeKinded) {
      return hangBreak(space2(formatType(conf)(v.value0))(indent2(flexSpaceBreak(anchor(formatToken(conf)(v.value1)))(anchor(formatType(conf)(v.value2))))));
    }
    ;
    if (v instanceof TypeOp) {
      return formatHangingOperatorTree(formatQualifiedName)(formatHangingType)(conf)(toQualifiedOperatorTree(conf.operators)(OperatorType.value)(v.value0)(v.value1));
    }
    ;
    if (v instanceof $$TypeError) {
      return hangBreak(conf.formatError(v.value0));
    }
    ;
    if (v instanceof TypeArrow) {
      return unsafeCrashWith("formatMonotype: TypeArrow handled by formatPolytype");
    }
    ;
    if (v instanceof TypeConstrained) {
      return unsafeCrashWith("formatMonotype: TypeConstrained handled by formatPolytype");
    }
    ;
    if (v instanceof TypeForall) {
      return unsafeCrashWith("formatMonotype: TypeForall handled by formatPolytype");
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 674, column 30 - line 714, column 75): " + [v.constructor.name]);
  };
};
var formatHangingDataCtor = function(conf) {
  return function(v) {
    var hangingName = hangBreak(formatName(conf)(v.name));
    var v1 = fromArray(v.fields);
    if (v1 instanceof Nothing) {
      return hangingName;
    }
    ;
    if (v1 instanceof Just) {
      return hangApp(hangingName)(map17(formatHangingType(conf))(v1.value0));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 524, column 3 - line 526, column 69): " + [v1.constructor.name]);
  };
};
var formatDataCtor = function(conf) {
  var $1052 = formatHangingDataCtor(conf);
  return function($1053) {
    return toFormatDoc($1052($1053));
  };
};
var formatConstraints = function(conf) {
  return function(v) {
    var unicodeArr = function() {
      if (v.value1.value instanceof TokOperator && (v.value1.value.value0 instanceof Nothing && (v.value1.value.value1 === "<=" && eq14(conf.unicode)(UnicodeAlways.value)))) {
        return {
          value: new TokOperator(Nothing.value, "\u21D0"),
          leadingComments: v.value1.leadingComments,
          range: v.value1.range,
          trailingComments: v.value1.trailingComments
        };
      }
      ;
      if (v.value1.value instanceof TokOperator && (v.value1.value.value0 instanceof Nothing && (v.value1.value.value1 === "\u21D0" && eq14(conf.unicode)(UnicodeNever.value)))) {
        return {
          value: new TokOperator(Nothing.value, "<="),
          leadingComments: v.value1.leadingComments,
          range: v.value1.range,
          trailingComments: v.value1.trailingComments
        };
      }
      ;
      return v.value1;
    }();
    return space2(formatOneOrDelimited(formatType)(conf)(v.value0))(anchor(formatToken(conf)(unicodeArr)));
  };
};
var formatInstanceHead = function(conf) {
  return function(v) {
    var hdTypes = spaceBreak2(foldMap5(formatConstraints(conf))(v.value0.constraints))(flexGroup2(space2(formatQualifiedName(conf)(v.value0.className))(indent2(joinWithMap2(spaceBreak2)(formatType(conf))(v.value0.types)))));
    if (v.value0.name instanceof Just) {
      return space2(flexSpaceBreak(space2(space2(formatToken(conf)(v.value0.keyword))(anchor(formatName(conf)(v.value0.name.value0.value0))))(anchor(formatToken(conf)(v.value0.name.value0.value1))))(indent2(hdTypes)))(indent2(foldMap5(formatToken(conf))(v.value1)));
    }
    ;
    if (v.value0.name instanceof Nothing) {
      return space2(flexSpaceBreak(formatToken(conf)(v.value0.keyword))(indent2(hdTypes)))(indent2(foldMap5(formatToken(conf))(v.value1)));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 596, column 3 - line 606, column 57): " + [v.value0.name.constructor.name]);
  };
};
var formatClassHead = function(conf) {
  return function(v) {
    var formatFundeps = function(v1) {
      return softBreak2(space2(formatToken(conf)(v1.value0))(formatListElem(2)(formatFundep)(conf)(v1.value1.head)))(joinWithMap2(softBreak2)(function(v2) {
        return space2(formatToken(conf)(v2.value0))(formatListElem(2)(formatFundep)(conf)(v2.value1));
      })(v1.value1.tail));
    };
    return flexSpaceBreak(formatToken(conf)(v.value0.keyword))(indent2(space2(spaceBreak2(spaceBreak2(anchor(foldMap5(formatConstraints(conf))(v["value0"]["super"])))(flexGroup2(spaceBreak2(formatName(conf)(v.value0.name))(joinWithMap2(spaceBreak2)(function() {
      var $1054 = formatTypeVarBinding(conf);
      return function($1055) {
        return indent2($1054($1055));
      };
    }())(v.value0.vars)))))(flexGroup2(anchor(foldMap5(formatFundeps)(v.value0.fundeps)))))(foldMap5(formatToken(conf))(v.value1))));
  };
};
var formatDataHead = function(conf) {
  return function(v) {
    return space2(formatToken(conf)(v.keyword))(indent2(flexSpaceBreak(anchor(formatName(conf)(v.name)))(joinWithMap2(spaceBreak2)(formatTypeVarBinding(conf))(v.vars))));
  };
};
var formatSignature = function(conf) {
  return function(v) {
    if (conf.typeArrowPlacement instanceof TypeArrowFirst) {
      var polytype = toPolytype(v.value);
      var isUnicode = function() {
        if (conf.unicode instanceof UnicodeAlways) {
          return true;
        }
        ;
        if (conf.unicode instanceof UnicodeNever) {
          return false;
        }
        ;
        if (conf.unicode instanceof UnicodeSource) {
          if (v.separator.value instanceof TokDoubleColon && v.separator.value.value0 instanceof Unicode) {
            return true;
          }
          ;
          return false;
        }
        ;
        throw new Error("Failed pattern match at Tidy (line 657, column 19 - line 663, column 23): " + [conf.unicode.constructor.name]);
      }();
      var width = function() {
        if (isUnicode) {
          return 2;
        }
        ;
        if (otherwise) {
          return 3;
        }
        ;
        throw new Error("Failed pattern match at Tidy (line 653, column 7 - line 655, column 24): " + []);
      }();
      var formattedPolytype = formatHangingPolytype(align2(width))(conf)(polytype);
      var $550 = $$null(polytype.init);
      if ($550) {
        return flexSpaceBreak(v.label)(indent2(space2(anchor(formatToken(conf)(v.separator)))(anchor(align2(width)(toFormatDoc(formattedPolytype))))));
      }
      ;
      return flexSpaceBreak(v.label)(indent2(space2(anchor(formatToken(conf)(v.separator)))(anchor(toFormatDoc(formattedPolytype)))));
    }
    ;
    if (conf.typeArrowPlacement instanceof TypeArrowLast) {
      return space2(v.label)(indent2(flexGroup2(spaceBreak2(anchor(formatToken(conf)(v.separator)))(anchor(flexGroup2(formatType(conf)(v.value)))))));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 636, column 3 - line 668, column 66): " + [conf.typeArrowPlacement.constructor.name]);
  };
};
var eqImportComparison = {
  eq: function(x) {
    return function(y) {
      if (x instanceof ImportClassCmp && y instanceof ImportClassCmp) {
        return eq24(x.value0)(y.value0);
      }
      ;
      if (x instanceof ImportTypeOpCmp && y instanceof ImportTypeOpCmp) {
        return eq32(x.value0)(y.value0);
      }
      ;
      if (x instanceof ImportTypeCmp && y instanceof ImportTypeCmp) {
        return eq24(x.value0)(y.value0) && x.value1 === y.value1 && eq52(x.value2)(y.value2);
      }
      ;
      if (x instanceof ImportValueCmp && y instanceof ImportValueCmp) {
        return eq62(x.value0)(y.value0);
      }
      ;
      if (x instanceof ImportOpCmp && y instanceof ImportOpCmp) {
        return eq32(x.value0)(y.value0);
      }
      ;
      if (x instanceof ImportErrorCmp && y instanceof ImportErrorCmp) {
        return true;
      }
      ;
      return false;
    };
  }
};
var eq10 = /* @__PURE__ */ eq(/* @__PURE__ */ eqArray(eqImportComparison));
var eqImportModuleComparison = {
  eq: function(x) {
    return function(y) {
      return eq7(x.value0)(y.value0) && x.value1 === y.value1 && eq10(x.value2)(y.value2) && eq9(x.value3)(y.value3);
    };
  }
};
var ordImportComparison = {
  compare: function(x) {
    return function(y) {
      if (x instanceof ImportClassCmp && y instanceof ImportClassCmp) {
        return compare5(x.value0)(y.value0);
      }
      ;
      if (x instanceof ImportClassCmp) {
        return LT.value;
      }
      ;
      if (y instanceof ImportClassCmp) {
        return GT.value;
      }
      ;
      if (x instanceof ImportTypeOpCmp && y instanceof ImportTypeOpCmp) {
        return compare14(x.value0)(y.value0);
      }
      ;
      if (x instanceof ImportTypeOpCmp) {
        return LT.value;
      }
      ;
      if (y instanceof ImportTypeOpCmp) {
        return GT.value;
      }
      ;
      if (x instanceof ImportTypeCmp && y instanceof ImportTypeCmp) {
        var v = compare5(x.value0)(y.value0);
        if (v instanceof LT) {
          return LT.value;
        }
        ;
        if (v instanceof GT) {
          return GT.value;
        }
        ;
        var v1 = compare22(x.value1)(y.value1);
        if (v1 instanceof LT) {
          return LT.value;
        }
        ;
        if (v1 instanceof GT) {
          return GT.value;
        }
        ;
        return compare32(x.value2)(y.value2);
      }
      ;
      if (x instanceof ImportTypeCmp) {
        return LT.value;
      }
      ;
      if (y instanceof ImportTypeCmp) {
        return GT.value;
      }
      ;
      if (x instanceof ImportValueCmp && y instanceof ImportValueCmp) {
        return compare42(x.value0)(y.value0);
      }
      ;
      if (x instanceof ImportValueCmp) {
        return LT.value;
      }
      ;
      if (y instanceof ImportValueCmp) {
        return GT.value;
      }
      ;
      if (x instanceof ImportOpCmp && y instanceof ImportOpCmp) {
        return compare14(x.value0)(y.value0);
      }
      ;
      if (x instanceof ImportOpCmp) {
        return LT.value;
      }
      ;
      if (y instanceof ImportOpCmp) {
        return GT.value;
      }
      ;
      if (x instanceof ImportErrorCmp && y instanceof ImportErrorCmp) {
        return EQ.value;
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
    };
  },
  Eq0: function() {
    return eqImportComparison;
  }
};
var compare8 = /* @__PURE__ */ compare(/* @__PURE__ */ ordArray(ordImportComparison));
var sortWith3 = /* @__PURE__ */ sortWith2(ordImportComparison);
var ordImportModuleComparison = {
  compare: function(x) {
    return function(y) {
      var v = compare52(x.value0)(y.value0);
      if (v instanceof LT) {
        return LT.value;
      }
      ;
      if (v instanceof GT) {
        return GT.value;
      }
      ;
      var v1 = compare6(x.value1)(y.value1);
      if (v1 instanceof LT) {
        return LT.value;
      }
      ;
      if (v1 instanceof GT) {
        return GT.value;
      }
      ;
      var v2 = compare8(x.value2)(y.value2);
      if (v2 instanceof LT) {
        return LT.value;
      }
      ;
      if (v2 instanceof GT) {
        return GT.value;
      }
      ;
      return compare7(x.value3)(y.value3);
    };
  },
  Eq0: function() {
    return eqImportModuleComparison;
  }
};
var sortWith12 = /* @__PURE__ */ sortWith(ordImportModuleComparison);
var sortImportsIde = function(v) {
  var toComparison = function(v12) {
    if (v12 instanceof ImportValue) {
      return new ImportValueCmp(v12.value0.name);
    }
    ;
    if (v12 instanceof ImportOp) {
      return new ImportOpCmp(v12.value0.name);
    }
    ;
    if (v12 instanceof ImportType && v12.value1 instanceof Nothing) {
      return new ImportTypeCmp(v12.value0.name, true, []);
    }
    ;
    if (v12 instanceof ImportType && (v12.value1 instanceof Just && v12.value1.value0 instanceof DataEnumerated)) {
      if (v12.value1.value0.value0.value instanceof Nothing) {
        return new ImportTypeCmp(v12.value0.name, true, []);
      }
      ;
      if (v12.value1.value0.value0.value instanceof Just) {
        return new ImportTypeCmp(v12.value0.name, true, map16(function() {
          var $1056 = un2(Name);
          return function($1057) {
            return function(v22) {
              return v22.name;
            }($1056($1057));
          };
        }())(cons2(v12.value1.value0.value0.value.value0.head)(map16(snd)(v12.value1.value0.value0.value.value0.tail))));
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 332, column 7 - line 336, column 104): " + [v12.value1.value0.value0.value.constructor.name]);
    }
    ;
    if (v12 instanceof ImportType && (v12.value1 instanceof Just && v12.value1.value0 instanceof DataAll)) {
      return new ImportTypeCmp(v12.value0.name, false, []);
    }
    ;
    if (v12 instanceof ImportTypeOp) {
      return new ImportTypeOpCmp(v12.value1.name);
    }
    ;
    if (v12 instanceof ImportClass) {
      return new ImportClassCmp(v12.value1.name);
    }
    ;
    if (v12 instanceof ImportError) {
      return ImportErrorCmp.value;
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 324, column 18 - line 344, column 21): " + [v12.constructor.name]);
  };
  var v1 = unzip(v.value.tail);
  var v2 = unzip2(sortWith3(fst)(map17(bindFlipped5(Tuple.create)(toComparison))(cons$prime(v.value.head)(v1.value1))));
  return new Tuple(toArray(v2.value0), {
    open: v.open,
    value: {
      head: head2(v2.value1),
      tail: zip(v1.value0)(tail2(v2.value1))
    },
    close: v.close
  });
};
var defaultFormatOptions = function(dictFormatError) {
  return {
    formatError: formatError(dictFormatError),
    unicode: UnicodeSource.value,
    typeArrowPlacement: TypeArrowFirst.value,
    operators: empty3,
    importSort: ImportSortSource.value,
    importWrap: ImportWrapSource.value
  };
};
var declareHanging = function(label) {
  return function(spc) {
    return function(separator) {
      return function(value) {
        return spc(label)(toFormatDoc(hang(indent2(separator))(value)));
      };
    };
  };
};
var formatRecordLabeled = function(format) {
  return function(conf) {
    return function(v) {
      if (v instanceof RecordPun) {
        return formatName(conf)(v.value0);
      }
      ;
      if (v instanceof RecordField) {
        return declareHanging(formatName(conf)(v.value0))(append17)(anchor(formatToken(conf)(v.value1)))(format(conf)(v.value2));
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 1154, column 35 - line 1158, column 106): " + [v.constructor.name]);
    };
  };
};
var formatHangingBinder = function(conf) {
  return function(v) {
    if (v instanceof BinderWildcard) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof BinderVar) {
      return hangBreak(formatName(conf)(v.value0));
    }
    ;
    if (v instanceof BinderNamed) {
      return hangBreak(append17(formatName(conf)(v.value0))(flexSoftBreak(anchor(formatToken(conf)(v.value1)))(indent2(formatBinder(conf)(v.value2)))));
    }
    ;
    if (v instanceof BinderConstructor) {
      var ctorName = hangBreak(formatQualifiedName(conf)(v.value0));
      var v1 = fromArray(v.value1);
      if (v1 instanceof Nothing) {
        return ctorName;
      }
      ;
      if (v1 instanceof Just) {
        return hangApp(ctorName)(map17(formatHangingBinder(conf))(v1.value0));
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 1120, column 5 - line 1124, column 67): " + [v1.constructor.name]);
    }
    ;
    if (v instanceof BinderBoolean) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof BinderChar) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof BinderString) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof BinderInt) {
      return hangBreak(append17(foldMap5(formatToken(conf))(v.value0))(formatToken(conf)(v.value1)));
    }
    ;
    if (v instanceof BinderNumber) {
      return hangBreak(append17(foldMap5(formatToken(conf))(v.value0))(formatToken(conf)(v.value1)));
    }
    ;
    if (v instanceof BinderArray) {
      return hangBreak(formatBasicList(Grouped.value)(formatBinder)(conf)(v.value0));
    }
    ;
    if (v instanceof BinderRecord) {
      return hangBreak(formatBasicList(Grouped.value)(formatRecordLabeled(formatHangingBinder))(conf)(v.value0));
    }
    ;
    if (v instanceof BinderParens) {
      return hangBreak(formatParensBlock(formatBinder)(conf)(v.value0));
    }
    ;
    if (v instanceof BinderTyped) {
      return hangBreak(formatSignature(conf)({
        label: formatBinder(conf)(v.value0),
        separator: v.value1,
        value: v.value2
      }));
    }
    ;
    if (v instanceof BinderOp) {
      return formatHangingOperatorTree(formatQualifiedName)(formatHangingBinder)(conf)(toQualifiedOperatorTree(conf.operators)(OperatorValue.value)(v.value0)(v.value1));
    }
    ;
    if (v instanceof BinderError) {
      return hangBreak(conf.formatError(v.value0));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 1111, column 28 - line 1151, column 35): " + [v.constructor.name]);
  };
};
var formatBinder = function(conf) {
  var $1058 = formatHangingBinder(conf);
  return function($1059) {
    return toFormatDoc($1058($1059));
  };
};
var formatWhere = function(conf) {
  return function(v) {
    return $$break2(formatToken(conf)(v.value0))($lazy_formatLetGroups(1051)(conf)(toArray(v.value1)));
  };
};
var formatValueBinding = function(conf) {
  return function(v) {
    if (v.guarded instanceof Unconditional) {
      return $$break2(space2(flexSpaceBreak(formatName(conf)(v.name))(indent2(joinWithMap2(spaceBreak2)(function() {
        var $1060 = formatBinder(conf);
        return function($1061) {
          return anchor($1060($1061));
        };
      }())(v.binders))))(toFormatDoc(hang(indent2(anchor(formatToken(conf)(v.guarded.value0))))(formatHangingExpr(conf)(v.guarded.value1.expr)))))(indent2(foldMap5(formatWhere(conf))(v.guarded.value1.bindings)));
    }
    ;
    if (v.guarded instanceof Guarded) {
      var valBinders = flexSpaceBreak(formatName(conf)(v.name))(indent2(joinWithMap2(spaceBreak2)(function() {
        var $1062 = formatBinder(conf);
        return function($1063) {
          return anchor(flexGroup2($1062($1063)));
        };
      }())(v.binders)));
      var $718 = length2(v.guarded.value0) === 1;
      if ($718) {
        return toFormatDoc(hang(valBinders)(formatGuardedExpr(conf)(head2(v.guarded.value0))));
      }
      ;
      return flexSpaceBreak(valBinders)(indent2(joinWithMap22($$break2)(function() {
        var $1064 = formatGuardedExpr(conf);
        return function($1065) {
          return toFormatDoc($1064($1065));
        };
      }())(v.guarded.value0)));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 1071, column 3 - line 1091, column 86): " + [v.guarded.constructor.name]);
  };
};
var formatRecordUpdate = function(conf) {
  return function(v) {
    if (v instanceof RecordUpdateLeaf) {
      return declareHanging(formatName(conf)(v.value0))(space2)(formatToken(conf)(v.value1))(formatHangingExpr(conf)(v.value2));
    }
    ;
    if (v instanceof RecordUpdateBranch) {
      return flexSpaceBreak(formatName(conf)(v.value0))(indent2(formatBasicListNonEmpty(Grouped.value)(formatRecordUpdate)(conf)(v.value1)));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 985, column 27 - line 990, column 66): " + [v.constructor.name]);
  };
};
var formatPatternGuard = function(conf) {
  return function(v) {
    if (v.binder instanceof Nothing) {
      return formatExpr(conf)(v.expr);
    }
    ;
    if (v.binder instanceof Just) {
      return space2(formatBinder(conf)(v.binder.value0.value0))(indent2(flexSpaceBreak(anchor(formatToken(conf)(v.binder.value0.value1)))(formatExpr(conf)(v.expr))));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 1040, column 59 - line 1046, column 46): " + [v.binder.constructor.name]);
  };
};
var formatLetBinding = function(conf) {
  return function(v) {
    if (v instanceof LetBindingSignature) {
      return formatSignature(conf)({
        label: formatName(conf)(v.value0.label),
        separator: v.value0.separator,
        value: v.value0.value
      });
    }
    ;
    if (v instanceof LetBindingName) {
      return formatValueBinding(conf)(v.value0);
    }
    ;
    if (v instanceof LetBindingPattern) {
      return $$break2(space2(flexGroup2(formatBinder(conf)(v.value0)))(toFormatDoc(hang(indent2(anchor(formatToken(conf)(v.value1))))(formatHangingExpr(conf)(v.value2.expr)))))(indent2(foldMap5(formatWhere(conf))(v.value2.bindings)));
    }
    ;
    if (v instanceof LetBindingError) {
      return conf.formatError(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 1054, column 25 - line 1067, column 23): " + [v.constructor.name]);
  };
};
var formatHangingExpr = function(conf) {
  return function(v) {
    if (v instanceof ExprHole) {
      return hangBreak(formatName(conf)(v.value0));
    }
    ;
    if (v instanceof ExprSection) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof ExprIdent) {
      return hangBreak(formatQualifiedName(conf)(v.value0));
    }
    ;
    if (v instanceof ExprConstructor) {
      return hangBreak(formatQualifiedName(conf)(v.value0));
    }
    ;
    if (v instanceof ExprBoolean) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof ExprChar) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof ExprString) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof ExprInt) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof ExprNumber) {
      return hangBreak(formatToken(conf)(v.value0));
    }
    ;
    if (v instanceof ExprArray) {
      return hangBreak(formatBasicList(Grouped.value)(formatExpr)(conf)(v.value0));
    }
    ;
    if (v instanceof ExprRecord) {
      return hangBreak(formatBasicList(Grouped.value)(formatRecordLabeled(formatHangingExpr))(conf)(v.value0));
    }
    ;
    if (v instanceof ExprParens) {
      return hangBreak(formatParensBlock(formatExpr)(conf)(v.value0));
    }
    ;
    if (v instanceof ExprTyped) {
      return hangBreak(formatSignature(conf)({
        label: formatExpr(conf)(v.value0),
        separator: v.value1,
        value: v.value2
      }));
    }
    ;
    if (v instanceof ExprInfix) {
      return hangOps(formatHangingExpr(conf)(v.value0))(map17(function(v1) {
        return new HangingOp(3, formatParens(formatExpr)(conf)(v1.value0), formatHangingExpr(conf)(v1.value1));
      })(v.value1));
    }
    ;
    if (v instanceof ExprOp) {
      return formatHangingOperatorTree(formatQualifiedName)(formatHangingExpr)(conf)(toQualifiedOperatorTree(conf.operators)(OperatorValue.value)(v.value0)(v.value1));
    }
    ;
    if (v instanceof ExprOpName) {
      return hangBreak(formatQualifiedName(conf)(v.value0));
    }
    ;
    if (v instanceof ExprNegate) {
      return hangBreak(append17(formatToken(conf)(v.value0))(formatExpr(conf)(v.value1)));
    }
    ;
    if (v instanceof ExprRecordAccessor) {
      return hangBreak(append17(formatExpr(conf)(v.value0.expr))(indent2(foldMap32(anchor)([formatToken(conf)(v.value0.dot), formatName(conf)(v.value0.path.head), foldMap32(function(v1) {
        return append17(anchor(formatToken(conf)(v1.value0)))(anchor(formatName(conf)(v1.value1)));
      })(v.value0.path.tail)]))));
    }
    ;
    if (v instanceof ExprRecordUpdate) {
      return hang(formatExpr(conf)(v.value0))(hangBreak(formatBasicListNonEmpty(Grouped.value)(formatRecordUpdate)(conf)(v.value1)));
    }
    ;
    if (v instanceof ExprApp) {
      return hangApp(formatHangingExpr(conf)(v.value0))(map17(formatHangingExpr(conf))(v.value1));
    }
    ;
    if (v instanceof ExprLambda) {
      var binders = flexGroup2(joinWithMap22(spaceBreak2)(function() {
        var $1066 = formatBinder(conf);
        return function($1067) {
          return anchor($1066($1067));
        };
      }())(v.value0.binders));
      return hang(space2(append17(formatToken(conf)(v.value0.symbol))(alignCurrentColumn2(binders)))(indent2(anchor(formatToken(conf)(v.value0.arrow)))))(formatHangingExpr(conf)(v.value0.body));
    }
    ;
    if (v instanceof ExprIf) {
      return hangBreak(formatElseIfChain(conf)(toElseIfChain(v.value0)));
    }
    ;
    if (v instanceof ExprCase) {
      var caseHeadExprs = foldl4(function(doc) {
        return function(v1) {
          return spaceBreak2(append17(doc)(anchor(formatToken(conf)(v1.value0))))(flexGroup2(formatExpr(conf)(v1.value1)));
        };
      })(flexGroup2(formatExpr(conf)(v.value0.head.head)))(v.value0.head.tail);
      var caseHead = spaceBreak2(caseHeadExprs)(anchor(formatToken(conf)(v.value0.of)));
      return hang(flexSpaceBreak(formatToken(conf)(v.value0.keyword))(indent2(caseHead)))(hangBreak(joinWithMap22($$break2)(function() {
        var $1068 = formatCaseBranch(conf);
        return function($1069) {
          return flexGroup2($1068($1069));
        };
      }())(v.value0.branches)));
    }
    ;
    if (v instanceof ExprLet) {
      return hangBreak(spaceBreak2(spaceBreak2(formatToken(conf)(v.value0.keyword))(indent2($lazy_formatLetGroups(925)(conf)(toArray(v.value0.bindings)))))(spaceBreak2(formatToken(conf)(v["value0"]["in"]))(indent2(flexGroup2(formatExpr(conf)(v.value0.body))))));
    }
    ;
    if (v instanceof ExprDo) {
      return hang(formatToken(conf)(v.value0.keyword))(hangBreak(joinWithMap22($$break2)(function() {
        var $1070 = formatDoStatement(conf);
        return function($1071) {
          return flexGroup2($1070($1071));
        };
      }())(v.value0.statements)));
    }
    ;
    if (v instanceof ExprAdo) {
      return hang(formatToken(conf)(v.value0.keyword))(hangBreak(flexSpaceBreak(joinWithMap2($$break2)(formatDoStatement(conf))(v.value0.statements))(flexSpaceBreak(formatToken(conf)(v["value0"]["in"]))(indent2(formatExpr(conf)(v.value0.result))))));
    }
    ;
    if (v instanceof ExprError) {
      return hangBreak(conf.formatError(v.value0));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 833, column 26 - line 948, column 35): " + [v.constructor.name]);
  };
};
var formatGuardedExpr = function(conf) {
  return function(v) {
    var patternGuards = softBreak2(formatListElem(2)(formatPatternGuard)(conf)(v.patterns.head))(formatListTail(2)(formatPatternGuard)(conf)(v.patterns.tail));
    return hangWithIndent(function() {
      var $1072 = align2(2);
      return function($1073) {
        return $1072(indent2($1073));
      };
    }())(hangBreak(space2(space2(formatToken(conf)(v.bar))(flexGroup2(patternGuards)))(anchor(formatToken(conf)(v.separator)))))(function() {
      if (v.where.bindings instanceof Nothing) {
        return [formatHangingExpr(conf)(v.where.expr)];
      }
      ;
      if (v.where.bindings instanceof Just) {
        return [formatHangingExpr(conf)(v.where.expr), hangBreak(formatWhere(conf)(v.where.bindings.value0))];
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 1027, column 5 - line 1033, column 10): " + [v.where.bindings.constructor.name]);
    }());
  };
};
var formatExpr = function(conf) {
  var $1074 = formatHangingExpr(conf);
  return function($1075) {
    return toFormatDoc($1074($1075));
  };
};
var formatElseIfChain = function(conf) {
  var $1076 = joinWithMap22(spaceBreak2)(function(v) {
    if (v instanceof IfThen) {
      return space2(flexSpaceBreak(formatToken(conf)(v.value0))(indent2(anchor(flexGroup2(formatExpr(conf)(v.value1))))))(toFormatDoc(hang(anchor(formatToken(conf)(v.value2)))(formatHangingExpr(conf)(v.value3))));
    }
    ;
    if (v instanceof ElseIfThen) {
      return space2(flexSpaceBreak(space2(formatToken(conf)(v.value0))(indent2(anchor(formatToken(conf)(v.value1)))))(indent2(anchor(flexGroup2(formatExpr(conf)(v.value2))))))(toFormatDoc(hang(anchor(formatToken(conf)(v.value3)))(formatHangingExpr(conf)(v.value4))));
    }
    ;
    if (v instanceof Else) {
      return toFormatDoc(hang(formatToken(conf)(v.value0))(formatHangingExpr(conf)(v.value1)));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 966, column 63 - line 982, column 79): " + [v.constructor.name]);
  });
  return function($1077) {
    return flexGroup2($1076($1077));
  };
};
var formatDoStatement = function(conf) {
  return function(v) {
    if (v instanceof DoLet) {
      return flexSpaceBreak(formatToken(conf)(v.value0))(indent2($lazy_formatLetGroups(1097)(conf)(toArray(v.value1))));
    }
    ;
    if (v instanceof DoDiscard) {
      return formatExpr(conf)(v.value0);
    }
    ;
    if (v instanceof DoBind) {
      return space2(flexGroup2(formatBinder(conf)(v.value0)))(toFormatDoc(hang(indent2(anchor(formatToken(conf)(v.value1))))(formatHangingExpr(conf)(v.value2))));
    }
    ;
    if (v instanceof DoError) {
      return conf.formatError(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 1094, column 26 - line 1105, column 23): " + [v.constructor.name]);
  };
};
var formatCaseBranch = function(conf) {
  return function(v) {
    var caseBinders = flexGroup2(foldl4(function(doc) {
      return function(v1) {
        return spaceBreak2(append17(doc)(indent2(anchor(formatToken(conf)(v1.value0)))))(flexGroup2(formatBinder(conf)(v1.value1)));
      };
    })(flexGroup2(formatBinder(conf)(v.value0.head)))(v.value0.tail));
    if (v.value1 instanceof Unconditional) {
      return $$break2(space2(caseBinders)(toFormatDoc(hang(formatToken(conf)(v.value1.value0))(formatHangingExpr(conf)(v.value1.value1.expr)))))(indent2(foldMap5(formatWhere(conf))(v.value1.value1.bindings)));
    }
    ;
    if (v.value1 instanceof Guarded) {
      var $843 = length2(v.value1.value0) === 1;
      if ($843) {
        return toFormatDoc(hang(caseBinders)(formatGuardedExpr(conf)(head2(v.value1.value0))));
      }
      ;
      return flexSpaceBreak(caseBinders)(indent2(joinWithMap22($$break2)(function() {
        var $1078 = formatGuardedExpr(conf);
        return function($1079) {
          return toFormatDoc($1078($1079));
        };
      }())(v.value1.value0)));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 994, column 3 - line 1007, column 81): " + [v.value1.constructor.name]);
  };
};
var $lazy_formatLetGroups = /* @__PURE__ */ $runtime_lazy3("formatLetGroups", "Tidy", function() {
  var letGroup = function(v) {
    if (v instanceof LetBindingSignature) {
      return new DeclGroupValueSignature(v.value0.label.name);
    }
    ;
    if (v instanceof LetBindingName) {
      return new DeclGroupValue(v.value0.name.name);
    }
    ;
    if (v instanceof LetBindingPattern) {
      return DeclGroupUnknown.value;
    }
    ;
    if (v instanceof LetBindingError) {
      return DeclGroupUnknown.value;
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 1337, column 14 - line 1341, column 42): " + [v.constructor.name]);
  };
  var letDeclGroupSeparator = function(v) {
    return function(v1) {
      if (v1 instanceof DeclGroupValueSignature) {
        return DeclGroupHard.value;
      }
      ;
      return DeclGroupSame.value;
    };
  };
  return formatDeclGroups(letDeclGroupSeparator)(letGroup)(formatLetBinding);
});
var formatInstanceBinding = function(conf) {
  return function(v) {
    if (v instanceof InstanceBindingSignature) {
      return formatSignature(conf)(overLabel(formatName(conf))(v.value0));
    }
    ;
    if (v instanceof InstanceBindingName) {
      return formatValueBinding(conf)(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 615, column 30 - line 619, column 32): " + [v.constructor.name]);
  };
};
var formatInstance = function(conf) {
  return function(v) {
    if (v.body instanceof Nothing) {
      return formatInstanceHead(conf)(new Tuple(v.head, Nothing.value));
    }
    ;
    if (v.body instanceof Just) {
      return $$break2(formatInstanceHead(conf)(new Tuple(v.head, new Just(v.body.value0.value0))))(indent2(joinWithMap22($$break2)(formatInstanceBinding(conf))(v.body.value0.value1)));
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 587, column 49 - line 592, column 62): " + [v.body.constructor.name]);
  };
};
var formatDecl = function(conf) {
  return function(v) {
    if (v instanceof DeclData && v.value1 instanceof Just) {
      var formatDataElem = function(v1) {
        return space2(formatToken(conf)(v1.value0))(formatListElem(2)(formatDataCtor)(conf)(v1.value1));
      };
      var $878 = $$null(v.value1.value0.value1.tail);
      if ($878) {
        return declareHanging(formatDataHead(conf)(v.value0))(space2)(anchor(formatToken(conf)(v.value1.value0.value0)))(formatHangingDataCtor(conf)(v.value1.value0.value1.head));
      }
      ;
      return flexSpaceBreak(formatDataHead(conf)(v.value0))(indent2(spaceBreak2(formatDataElem(new Tuple(v.value1.value0.value0, v.value1.value0.value1.head)))(joinWithMap2(spaceBreak2)(formatDataElem)(v.value1.value0.value1.tail))));
    }
    ;
    if (v instanceof DeclData) {
      return formatDataHead(conf)(v.value0);
    }
    ;
    if (v instanceof DeclType) {
      return declareHanging(formatDataHead(conf)(v.value0))(space2)(anchor(formatToken(conf)(v.value1)))(formatHangingType(conf)(v.value2));
    }
    ;
    if (v instanceof DeclNewtype) {
      return declareHanging(formatDataHead(conf)(v.value0))(space2)(anchor(formatToken(conf)(v.value1)))(formatHangingDataCtor(conf)({
        name: v.value2,
        fields: [v.value3]
      }));
    }
    ;
    if (v instanceof DeclRole) {
      var words = [formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatName(conf)(v.value2)];
      var roles = map17(function() {
        var $1080 = formatToken(conf);
        return function($1081) {
          return $1080(fst($1081));
        };
      }())(v.value3);
      return flatten2(append32(words)(toArray(roles)));
    }
    ;
    if (v instanceof DeclFixity) {
      if (v.value0.operator instanceof FixityValue) {
        return flatten2([formatToken(conf)(v.value0.keyword.value0), formatToken(conf)(v.value0.prec.value0), formatQualifiedName(conf)(v.value0.operator.value0), formatToken(conf)(v.value0.operator.value1), formatName(conf)(v.value0.operator.value2)]);
      }
      ;
      if (v.value0.operator instanceof FixityType) {
        return flatten2([formatToken(conf)(v.value0.keyword.value0), formatToken(conf)(v.value0.prec.value0), formatToken(conf)(v.value0.operator.value0), formatQualifiedName(conf)(v.value0.operator.value1), formatToken(conf)(v.value0.operator.value2), formatName(conf)(v.value0.operator.value3)]);
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 420, column 5 - line 437, column 12): " + [v.value0.operator.constructor.name]);
    }
    ;
    if (v instanceof DeclKindSignature) {
      return formatSignature(conf)({
        label: flatten2([formatToken(conf)(v.value0), formatName(conf)(v.value1.label)]),
        separator: v.value1.separator,
        value: v.value1.value
      });
    }
    ;
    if (v instanceof DeclForeign) {
      if (v.value2 instanceof ForeignValue) {
        return formatSignature(conf)(overLabel(function(label) {
          return flatten2([formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatName(conf)(label)]);
        })(v.value2.value0));
      }
      ;
      if (v.value2 instanceof ForeignData) {
        return formatSignature(conf)(overLabel(function(label) {
          return flatten2([formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatToken(conf)(v.value2.value0), formatName(conf)(label)]);
        })(v.value2.value1));
      }
      ;
      if (v.value2 instanceof ForeignKind) {
        return flatten2([formatToken(conf)(v.value0), formatToken(conf)(v.value1), formatToken(conf)(v.value2.value0), formatName(conf)(v.value2.value1)]);
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 451, column 5 - line 479, column 12): " + [v.value2.constructor.name]);
    }
    ;
    if (v instanceof DeclClass) {
      if (v.value1 instanceof Nothing) {
        return formatClassHead(conf)(new Tuple(v.value0, Nothing.value));
      }
      ;
      if (v.value1 instanceof Just) {
        return $$break2(formatClassHead(conf)(new Tuple(v.value0, new Just(v.value1.value0.value0))))(indent2(joinWithMap22($$break2)(function() {
          var $1082 = formatSignature(conf);
          var $1083 = overLabel(formatName(conf));
          return function($1084) {
            return $1082($1083($1084));
          };
        }())(v.value1.value0.value1)));
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 482, column 5 - line 490, column 19): " + [v.value1.constructor.name]);
    }
    ;
    if (v instanceof DeclInstanceChain) {
      return $$break2(formatInstance(conf)(v.value0.head))(joinWithMap2($$break2)(function(v1) {
        return space2(formatToken(conf)(v1.value0))(anchor(formatInstance(conf)(v1.value1)));
      })(v.value0.tail));
    }
    ;
    if (v instanceof DeclDerive) {
      return space2(space2(formatToken(conf)(v.value0))(foldMap5(function() {
        var $1085 = formatToken(conf);
        return function($1086) {
          return indent2(anchor($1085($1086)));
        };
      }())(v.value1)))(anchor(formatInstanceHead(conf)(new Tuple(v.value2, Nothing.value))));
    }
    ;
    if (v instanceof DeclSignature) {
      return formatSignature(conf)(overLabel(function() {
        var $1087 = formatName(conf);
        return function($1088) {
          return flatten2(pure13($1087($1088)));
        };
      }())(v.value0));
    }
    ;
    if (v instanceof DeclValue) {
      return formatValueBinding(conf)(v.value0);
    }
    ;
    if (v instanceof DeclError) {
      return conf.formatError(v.value0);
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 373, column 19 - line 511, column 23): " + [v.constructor.name]);
  };
};
var formatTopLevelGroups = /* @__PURE__ */ function() {
  var topDeclGroupSeparator = function(v) {
    return function(v1) {
      if (v instanceof DeclGroupValue && v1 instanceof DeclGroupValue) {
        var $947 = eq62(v.value0)(v1.value0);
        if ($947) {
          return DeclGroupSame.value;
        }
        ;
        return DeclGroupSoft.value;
      }
      ;
      if (v instanceof DeclGroupValueSignature && v1 instanceof DeclGroupValue) {
        var $950 = eq62(v.value0)(v1.value0);
        if ($950) {
          return DeclGroupSame.value;
        }
        ;
        return DeclGroupHard.value;
      }
      ;
      if (v1 instanceof DeclGroupValueSignature) {
        return DeclGroupHard.value;
      }
      ;
      if (v instanceof DeclGroupType && v1 instanceof DeclGroupType) {
        return DeclGroupSoft.value;
      }
      ;
      if (v instanceof DeclGroupTypeSignature && v1 instanceof DeclGroupType) {
        var $956 = eq24(v.value0)(v1.value0);
        if ($956) {
          return DeclGroupSame.value;
        }
        ;
        return DeclGroupHard.value;
      }
      ;
      if (v instanceof DeclGroupTypeSignature && v1 instanceof DeclGroupClass) {
        var $959 = eq24(v.value0)(v1.value0);
        if ($959) {
          return DeclGroupSame.value;
        }
        ;
        return DeclGroupHard.value;
      }
      ;
      if (v1 instanceof DeclGroupTypeSignature) {
        return DeclGroupHard.value;
      }
      ;
      if (v instanceof DeclGroupClass && v1 instanceof DeclGroupClass) {
        return DeclGroupSoft.value;
      }
      ;
      if (v1 instanceof DeclGroupClass) {
        return DeclGroupHard.value;
      }
      ;
      if (v instanceof DeclGroupInstance && v1 instanceof DeclGroupInstance) {
        return DeclGroupSoft.value;
      }
      ;
      if (v1 instanceof DeclGroupInstance) {
        return DeclGroupHard.value;
      }
      ;
      if (v instanceof DeclGroupFixity && v1 instanceof DeclGroupFixity) {
        return DeclGroupSoft.value;
      }
      ;
      if (v1 instanceof DeclGroupFixity) {
        return DeclGroupHard.value;
      }
      ;
      if (v instanceof DeclGroupForeign && v1 instanceof DeclGroupForeign) {
        return DeclGroupSoft.value;
      }
      ;
      if (v1 instanceof DeclGroupForeign) {
        return DeclGroupHard.value;
      }
      ;
      if (v instanceof DeclGroupRole && v1 instanceof DeclGroupRole) {
        return DeclGroupSoft.value;
      }
      ;
      if (v1 instanceof DeclGroupRole) {
        return DeclGroupHard.value;
      }
      ;
      return DeclGroupSoft.value;
    };
  };
  var topDeclGroup = function(v) {
    if (v instanceof DeclData) {
      return new DeclGroupType(v.value0.name.name);
    }
    ;
    if (v instanceof DeclType) {
      return new DeclGroupType(v.value0.name.name);
    }
    ;
    if (v instanceof DeclNewtype) {
      return new DeclGroupType(v.value0.name.name);
    }
    ;
    if (v instanceof DeclClass) {
      return new DeclGroupClass(v.value0.name.name);
    }
    ;
    if (v instanceof DeclKindSignature) {
      return new DeclGroupTypeSignature(v.value1.label.name);
    }
    ;
    if (v instanceof DeclSignature) {
      return new DeclGroupValueSignature(v.value0.label.name);
    }
    ;
    if (v instanceof DeclValue) {
      return new DeclGroupValue(v.value0.name.name);
    }
    ;
    if (v instanceof DeclInstanceChain) {
      return DeclGroupInstance.value;
    }
    ;
    if (v instanceof DeclDerive) {
      return DeclGroupInstance.value;
    }
    ;
    if (v instanceof DeclFixity) {
      return DeclGroupFixity.value;
    }
    ;
    if (v instanceof DeclForeign) {
      return DeclGroupForeign.value;
    }
    ;
    if (v instanceof DeclRole) {
      return DeclGroupRole.value;
    }
    ;
    if (v instanceof DeclError) {
      return DeclGroupUnknown.value;
    }
    ;
    throw new Error("Failed pattern match at Tidy (line 1315, column 18 - line 1328, column 36): " + [v.constructor.name]);
  };
  return formatDeclGroups(topDeclGroupSeparator)(topDeclGroup)(formatDecl);
}();
var formatModule = function(conf) {
  return function(v) {
    var formatImports = function(k) {
      return joinWithMap2($$break2)(function() {
        var $1089 = formatImportDecl(conf);
        return function($1090) {
          return k($1089($1090));
        };
      }());
    };
    var imports = function() {
      if (conf.importSort instanceof ImportSortSource) {
        return formatImports(identity13)(v.header.imports);
      }
      ;
      if (conf.importSort instanceof ImportSortIde) {
        var toComparison = function(v12) {
          var modName = nameOf(v12.module);
          var qualName = map24(function($1091) {
            return nameOf(snd($1091));
          })(v12.qualified);
          if (v12.names instanceof Just) {
            var v2 = sortImportsIde(v12.names.value0.value1);
            var order = function() {
              var $1015 = isJust(v12.names.value0.value0);
              if ($1015) {
                return 3;
              }
              ;
              return 1;
            }();
            return new Tuple(new ImportModuleCmp(modName, order, v2.value0, qualName), {
              keyword: v12.keyword,
              module: v12.module,
              names: new Just(new Tuple(v12.names.value0.value0, v2.value1)),
              qualified: v12.qualified
            });
          }
          ;
          if (v12.names instanceof Nothing) {
            return new Tuple(new ImportModuleCmp(modName, 2, [], qualName), v12);
          }
          ;
          throw new Error("Failed pattern match at Tidy (line 238, column 11 - line 244, column 78): " + [v12.names.constructor.name]);
        };
        var sorted = map16(snd)(sortWith12(fst)(map16(toComparison)(v.header.imports)));
        var isOpenImport = function(v12) {
          if (v12.qualified instanceof Nothing && v12.names instanceof Nothing) {
            return true;
          }
          ;
          if (v12.qualified instanceof Nothing && (v12.names instanceof Just && v12.names.value0.value0 instanceof Just)) {
            return true;
          }
          ;
          return false;
        };
        var v1 = partition(isOpenImport)(sorted);
        return append17(formatImports(flatten)(v1.yes))(forceMinSourceBreaks(2)(formatImports(flatten)(v1.no)));
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 221, column 5 - line 252, column 18): " + [conf.importSort.constructor.name]);
    }();
    return joinWith3($$break2)([space2(anchor(formatToken(conf)(v.header.keyword)))(indent2(space2(flexSpaceBreak(anchor(formatName(conf)(v.header.name)))(anchor(foldMap5(formatParenListNonEmpty(NotGrouped.value)(formatExport)(conf))(v.header.exports))))(anchor(formatToken(conf)(v.header.where))))), forceMinSourceBreaks(2)(function() {
      if (conf.importWrap instanceof ImportWrapAuto) {
        return imports;
      }
      ;
      if (conf.importWrap instanceof ImportWrapSource) {
        return locally2(function(v1) {
          return {
            indent: v1.indent,
            indentSpaces: v1.indentSpaces,
            indentUnit: v1.indentUnit,
            indentWidth: v1.indentWidth,
            pageWidth: top4,
            ribbonRatio: 1
          };
        })(imports);
      }
      ;
      throw new Error("Failed pattern match at Tidy (line 208, column 30 - line 212, column 69): " + [conf.importWrap.constructor.name]);
    }()), forceMinSourceBreaks(2)(formatTopLevelGroups(conf)(v.body.decls)), foldr8(formatComment(leadingLineComment)(leadingBlockComment))(mempty5)(v.body.trailingComments)]);
  };
};

// output/Bin.FormatOptions/index.js
var pure8 = /* @__PURE__ */ pure(applicativeEither);
var throwError2 = /* @__PURE__ */ throwError(monadThrowEither);
var extend4 = /* @__PURE__ */ extend3(encodeJsonJson);
var assoc3 = /* @__PURE__ */ assoc2(encodeJsonJson);
var encodeJson2 = /* @__PURE__ */ encodeJson(encodeJsonInt);
var assoc1 = /* @__PURE__ */ assoc2(encodeJsonJString);
var assoc22 = /* @__PURE__ */ assoc2(encodeJsonJNumber);
var encodeJson1 = /* @__PURE__ */ encodeJson(encodeJsonJString);
var assoc32 = /* @__PURE__ */ assoc2(encodeJsonInt);
var bind5 = /* @__PURE__ */ bind(bindEither);
var decodeJson2 = /* @__PURE__ */ decodeJson(/* @__PURE__ */ decodeForeignObject2(decodeJsonJson));
var bindFlipped6 = /* @__PURE__ */ bindFlipped(bindEither);
var traverse2 = /* @__PURE__ */ traverse(traversableMaybe)(applicativeEither);
var getFieldOptional$prime3 = /* @__PURE__ */ getFieldOptional$prime2(decodeJsonString);
var getFieldOptional$prime1 = /* @__PURE__ */ getFieldOptional$prime2(decodeJsonInt);
var getFieldOptional$prime22 = /* @__PURE__ */ getFieldOptional$prime2(decodeJsonNumber);
var alt3 = /* @__PURE__ */ alt(altMaybe);
var voidLeft4 = /* @__PURE__ */ voidLeft(functorArgParser);
var unicodeToString = function(v) {
  if (v instanceof UnicodeSource) {
    return "source";
  }
  ;
  if (v instanceof UnicodeAlways) {
    return "always";
  }
  ;
  if (v instanceof UnicodeNever) {
    return "never";
  }
  ;
  throw new Error("Failed pattern match at Bin.FormatOptions (line 165, column 19 - line 168, column 26): " + [v.constructor.name]);
};
var unicodeFromString = function(v) {
  if (v === "source") {
    return pure8(UnicodeSource.value);
  }
  ;
  if (v === "always") {
    return pure8(UnicodeAlways.value);
  }
  ;
  if (v === "never") {
    return pure8(UnicodeNever.value);
  }
  ;
  return throwError2(new UnexpectedValue(id(v)));
};
var typeArrowPlacementToString = function(v) {
  if (v instanceof TypeArrowFirst) {
    return "first";
  }
  ;
  if (v instanceof TypeArrowLast) {
    return "last";
  }
  ;
  throw new Error("Failed pattern match at Bin.FormatOptions (line 153, column 30 - line 155, column 26): " + [v.constructor.name]);
};
var typeArrowPlacementFromString = function(v) {
  if (v === "first") {
    return pure8(TypeArrowFirst.value);
  }
  ;
  if (v === "last") {
    return pure8(TypeArrowLast.value);
  }
  ;
  return throwError2(new UnexpectedValue(id(v)));
};
var importWrapToString = function(v) {
  if (v instanceof ImportWrapSource) {
    return "source";
  }
  ;
  if (v instanceof ImportWrapAuto) {
    return "auto";
  }
  ;
  throw new Error("Failed pattern match at Bin.FormatOptions (line 177, column 22 - line 179, column 27): " + [v.constructor.name]);
};
var importWrapFromString = function(v) {
  if (v === "source") {
    return pure8(ImportWrapSource.value);
  }
  ;
  if (v === "auto") {
    return pure8(ImportWrapAuto.value);
  }
  ;
  return throwError2(new UnexpectedValue(id(v)));
};
var importSortToString = function(v) {
  if (v instanceof ImportSortSource) {
    return "source";
  }
  ;
  if (v instanceof ImportSortIde) {
    return "ide";
  }
  ;
  throw new Error("Failed pattern match at Bin.FormatOptions (line 188, column 22 - line 190, column 25): " + [v.constructor.name]);
};
var toJson = function(options) {
  return extend4(assoc3("width")(maybe(jsonNull)(encodeJson2)(options.width)))(extend4(assoc1("unicode")(unicodeToString(options.unicode)))(extend4(assoc1("typeArrowPlacement")(typeArrowPlacementToString(options.typeArrowPlacement)))(extend4(assoc22("ribbon")(options.ribbon))(extend4(assoc3("operatorsFile")(maybe(jsonNull)(encodeJson1)(options.operatorsFile)))(extend4(assoc32("indent")(options.indent))(extend4(assoc1("importWrap")(importWrapToString(options.importWrap)))(extend4(assoc1("importSort")(importSortToString(options.importSort)))(jsonEmptyObject))))))));
};
var importSortFromString = function(v) {
  if (v === "source") {
    return pure8(ImportSortSource.value);
  }
  ;
  if (v === "ide") {
    return pure8(ImportSortIde.value);
  }
  ;
  return throwError2(new UnexpectedValue(id(v)));
};
var defaults = /* @__PURE__ */ function() {
  return {
    importSort: ImportSortSource.value,
    importWrap: ImportWrapSource.value,
    indent: 2,
    operatorsFile: Nothing.value,
    ribbon: 1,
    typeArrowPlacement: TypeArrowFirst.value,
    unicode: UnicodeSource.value,
    width: Nothing.value
  };
}();
var fromJson = function(json) {
  return bind5(decodeJson2(json))(function(obj) {
    return bind5(bindFlipped6(traverse2(importSortFromString))(getFieldOptional$prime3(obj)("importSort")))(function(importSort) {
      return bind5(bindFlipped6(traverse2(importWrapFromString))(getFieldOptional$prime3(obj)("importWrap")))(function(importWrap) {
        return bind5(getFieldOptional$prime1(obj)("indent"))(function(indent3) {
          return bind5(getFieldOptional$prime3(obj)("operatorsFile"))(function(operatorsFile) {
            return bind5(getFieldOptional$prime22(obj)("ribbon"))(function(ribbon) {
              return bind5(bindFlipped6(traverse2(typeArrowPlacementFromString))(getFieldOptional$prime3(obj)("typeArrowPlacement")))(function(typeArrowPlacement) {
                return bind5(bindFlipped6(traverse2(unicodeFromString))(getFieldOptional$prime3(obj)("unicode")))(function(unicode2) {
                  return bind5(getFieldOptional$prime1(obj)("width"))(function(width) {
                    return pure8({
                      importSort: fromMaybe(defaults.importSort)(importSort),
                      importWrap: fromMaybe(defaults.importWrap)(importWrap),
                      indent: fromMaybe(defaults.indent)(indent3),
                      operatorsFile: alt3(operatorsFile)(defaults.operatorsFile),
                      ribbon: fromMaybe(defaults.ribbon)(ribbon),
                      typeArrowPlacement: fromMaybe(defaults.typeArrowPlacement)(typeArrowPlacement),
                      unicode: fromMaybe(defaults.unicode)(unicode2),
                      width: alt3(width)(defaults.width)
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
};
var unicodeOption = /* @__PURE__ */ function() {
  return $$default(defaults.unicode)(choose("unicode argument")([voidLeft4(flag(["--unicode-source", "-us"])("Unicode punctuation is rendered as it appears in the source input.\nDefault."))(UnicodeSource.value), voidLeft4(flag(["--unicode-always", "-ua"])("Unicode punctuation is always preferred."))(UnicodeAlways.value), voidLeft4(flag(["--unicode-never", "-un"])("Unicode punctuation is never preferred."))(UnicodeNever.value)]));
}();
var formatOptions = /* @__PURE__ */ function() {
  return fromRecord()(buildArgsCons({
    reflectSymbol: function() {
      return "importSort";
    }
  })()()()(buildArgsCons({
    reflectSymbol: function() {
      return "importWrap";
    }
  })()()()(buildArgsCons({
    reflectSymbol: function() {
      return "indent";
    }
  })()()()(buildArgsCons({
    reflectSymbol: function() {
      return "operatorsFile";
    }
  })()()()(buildArgsCons({
    reflectSymbol: function() {
      return "ribbon";
    }
  })()()()(buildArgsCons({
    reflectSymbol: function() {
      return "typeArrowPlacement";
    }
  })()()()(buildArgsCons({
    reflectSymbol: function() {
      return "unicode";
    }
  })()()()(buildArgsCons({
    reflectSymbol: function() {
      return "width";
    }
  })()()()(buildRecordArgsNil)))))))))({
    importSort: $$default(defaults.importSort)(choose("import sort")([voidLeft4(flag(["--import-sort-source", "-iss"])("Imports are not automatically sorted and keep the same order as in the source.\nDefault."))(ImportSortSource.value), voidLeft4(flag(["--import-sort-ide", "-isi"])("Imports are automatically sorted like purs-ide."))(ImportSortIde.value)])),
    importWrap: $$default(defaults.importWrap)(choose("import wrap")([voidLeft4(flag(["--import-wrap-source", "-iws"])("Imports are wrapped only when breaks are in the source.\nDefault. Works well with IDE imports."))(ImportWrapSource.value), voidLeft4(flag(["--import-wrap-auto", "-iwa"])("Imports are wrapped based on the `--width` option."))(ImportWrapAuto.value)])),
    indent: $$default(defaults.indent)($$int(argument(["--indent", "-i"])("Number of spaces to use as indentation.\nDefaults to 2."))),
    operatorsFile: optional(unformat("FILE_PATH")(pure8)(argument(["--operators", "-o"])("Path to an operator table generated by `generate-operators`.\nDefault is to use a pre-generated table of core and contrib."))),
    ribbon: $$default(defaults.ribbon)(number(argument(["--ribbon", "-r"])("The ratio of printable width to maximum width.\nFrom 0 to 1. Defaults to 1."))),
    typeArrowPlacement: $$default(defaults.typeArrowPlacement)(choose("type arrow placement")([voidLeft4(flag(["--arrow-first", "-af"])("Type signatures put arrows first on the line.\nDefault."))(TypeArrowFirst.value), voidLeft4(flag(["--arrow-last", "-al"])("Type signatures put arrows last on the line."))(TypeArrowLast.value)])),
    unicode: unicodeOption,
    width: optional($$int(argument(["--width", "-w"])("The maximum width of the document in columns.\nDefaults to no maximum.")))
  });
}();

// output/Bin.Version/foreign.js
var version = "v0.9.1";

// output/Bin.Timing/foreign.js
import process2 from "process";
function hrtime() {
  var t = process2.hrtime();
  return { seconds: t[0], nanos: t[1] };
}
function hrtimeDiff(old) {
  return function() {
    var t = process2.hrtime([old.seconds, old.nanos]);
    return { seconds: t[0], nanos: t[1] };
  };
}

// output/Bin.Timing/index.js
var toMilliseconds = function(v) {
  return v.seconds * 1e3 + v.nanos / 1e6;
};

// output/Effect.Aff/foreign.js
var Aff = function() {
  var EMPTY = {};
  var PURE = "Pure";
  var THROW = "Throw";
  var CATCH = "Catch";
  var SYNC = "Sync";
  var ASYNC = "Async";
  var BIND = "Bind";
  var BRACKET = "Bracket";
  var FORK = "Fork";
  var SEQ = "Sequential";
  var MAP = "Map";
  var APPLY = "Apply";
  var ALT = "Alt";
  var CONS = "Cons";
  var RESUME = "Resume";
  var RELEASE = "Release";
  var FINALIZER = "Finalizer";
  var FINALIZED = "Finalized";
  var FORKED = "Forked";
  var FIBER = "Fiber";
  var THUNK = "Thunk";
  function Aff2(tag, _1, _2, _3) {
    this.tag = tag;
    this._1 = _1;
    this._2 = _2;
    this._3 = _3;
  }
  function AffCtr(tag) {
    var fn = function(_1, _2, _3) {
      return new Aff2(tag, _1, _2, _3);
    };
    fn.tag = tag;
    return fn;
  }
  function nonCanceler2(error5) {
    return new Aff2(PURE, void 0);
  }
  function runEff(eff) {
    try {
      eff();
    } catch (error5) {
      setTimeout(function() {
        throw error5;
      }, 0);
    }
  }
  function runSync(left, right, eff) {
    try {
      return right(eff());
    } catch (error5) {
      return left(error5);
    }
  }
  function runAsync(left, eff, k) {
    try {
      return eff(k)();
    } catch (error5) {
      k(left(error5))();
      return nonCanceler2;
    }
  }
  var Scheduler = function() {
    var limit = 1024;
    var size6 = 0;
    var ix = 0;
    var queue = new Array(limit);
    var draining = false;
    function drain() {
      var thunk;
      draining = true;
      while (size6 !== 0) {
        size6--;
        thunk = queue[ix];
        queue[ix] = void 0;
        ix = (ix + 1) % limit;
        thunk();
      }
      draining = false;
    }
    return {
      isDraining: function() {
        return draining;
      },
      enqueue: function(cb) {
        var i, tmp;
        if (size6 === limit) {
          tmp = draining;
          drain();
          draining = tmp;
        }
        queue[(ix + size6) % limit] = cb;
        size6++;
        if (!draining) {
          drain();
        }
      }
    };
  }();
  function Supervisor(util) {
    var fibers = {};
    var fiberId = 0;
    var count = 0;
    return {
      register: function(fiber) {
        var fid = fiberId++;
        fiber.onComplete({
          rethrow: true,
          handler: function(result) {
            return function() {
              count--;
              delete fibers[fid];
            };
          }
        })();
        fibers[fid] = fiber;
        count++;
      },
      isEmpty: function() {
        return count === 0;
      },
      killAll: function(killError, cb) {
        return function() {
          if (count === 0) {
            return cb();
          }
          var killCount = 0;
          var kills = {};
          function kill3(fid) {
            kills[fid] = fibers[fid].kill(killError, function(result) {
              return function() {
                delete kills[fid];
                killCount--;
                if (util.isLeft(result) && util.fromLeft(result)) {
                  setTimeout(function() {
                    throw util.fromLeft(result);
                  }, 0);
                }
                if (killCount === 0) {
                  cb();
                }
              };
            })();
          }
          for (var k in fibers) {
            if (fibers.hasOwnProperty(k)) {
              killCount++;
              kill3(k);
            }
          }
          fibers = {};
          fiberId = 0;
          count = 0;
          return function(error5) {
            return new Aff2(SYNC, function() {
              for (var k2 in kills) {
                if (kills.hasOwnProperty(k2)) {
                  kills[k2]();
                }
              }
            });
          };
        };
      }
    };
  }
  var SUSPENDED = 0;
  var CONTINUE = 1;
  var STEP_BIND = 2;
  var STEP_RESULT = 3;
  var PENDING = 4;
  var RETURN = 5;
  var COMPLETED = 6;
  function Fiber(util, supervisor, aff) {
    var runTick = 0;
    var status2 = SUSPENDED;
    var step3 = aff;
    var fail3 = null;
    var interrupt = null;
    var bhead = null;
    var btail = null;
    var attempts = null;
    var bracketCount = 0;
    var joinId = 0;
    var joins = null;
    var rethrow = true;
    function run3(localRunTick) {
      var tmp, result, attempt2;
      while (true) {
        tmp = null;
        result = null;
        attempt2 = null;
        switch (status2) {
          case STEP_BIND:
            status2 = CONTINUE;
            try {
              step3 = bhead(step3);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status2 = RETURN;
              fail3 = util.left(e);
              step3 = null;
            }
            break;
          case STEP_RESULT:
            if (util.isLeft(step3)) {
              status2 = RETURN;
              fail3 = step3;
              step3 = null;
            } else if (bhead === null) {
              status2 = RETURN;
            } else {
              status2 = STEP_BIND;
              step3 = util.fromRight(step3);
            }
            break;
          case CONTINUE:
            switch (step3.tag) {
              case BIND:
                if (bhead) {
                  btail = new Aff2(CONS, bhead, btail);
                }
                bhead = step3._2;
                status2 = CONTINUE;
                step3 = step3._1;
                break;
              case PURE:
                if (bhead === null) {
                  status2 = RETURN;
                  step3 = util.right(step3._1);
                } else {
                  status2 = STEP_BIND;
                  step3 = step3._1;
                }
                break;
              case SYNC:
                status2 = STEP_RESULT;
                step3 = runSync(util.left, util.right, step3._1);
                break;
              case ASYNC:
                status2 = PENDING;
                step3 = runAsync(util.left, step3._1, function(result2) {
                  return function() {
                    if (runTick !== localRunTick) {
                      return;
                    }
                    runTick++;
                    Scheduler.enqueue(function() {
                      if (runTick !== localRunTick + 1) {
                        return;
                      }
                      status2 = STEP_RESULT;
                      step3 = result2;
                      run3(runTick);
                    });
                  };
                });
                return;
              case THROW:
                status2 = RETURN;
                fail3 = util.left(step3._1);
                step3 = null;
                break;
              case CATCH:
                if (bhead === null) {
                  attempts = new Aff2(CONS, step3, attempts, interrupt);
                } else {
                  attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }
                bhead = null;
                btail = null;
                status2 = CONTINUE;
                step3 = step3._1;
                break;
              case BRACKET:
                bracketCount++;
                if (bhead === null) {
                  attempts = new Aff2(CONS, step3, attempts, interrupt);
                } else {
                  attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }
                bhead = null;
                btail = null;
                status2 = CONTINUE;
                step3 = step3._1;
                break;
              case FORK:
                status2 = STEP_RESULT;
                tmp = Fiber(util, supervisor, step3._2);
                if (supervisor) {
                  supervisor.register(tmp);
                }
                if (step3._1) {
                  tmp.run();
                }
                step3 = util.right(tmp);
                break;
              case SEQ:
                status2 = CONTINUE;
                step3 = sequential3(util, supervisor, step3._1);
                break;
            }
            break;
          case RETURN:
            bhead = null;
            btail = null;
            if (attempts === null) {
              status2 = COMPLETED;
              step3 = interrupt || fail3 || step3;
            } else {
              tmp = attempts._3;
              attempt2 = attempts._1;
              attempts = attempts._2;
              switch (attempt2.tag) {
                case CATCH:
                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    status2 = RETURN;
                  } else if (fail3) {
                    status2 = CONTINUE;
                    step3 = attempt2._2(util.fromLeft(fail3));
                    fail3 = null;
                  }
                  break;
                case RESUME:
                  if (interrupt && interrupt !== tmp && bracketCount === 0 || fail3) {
                    status2 = RETURN;
                  } else {
                    bhead = attempt2._1;
                    btail = attempt2._2;
                    status2 = STEP_BIND;
                    step3 = util.fromRight(step3);
                  }
                  break;
                case BRACKET:
                  bracketCount--;
                  if (fail3 === null) {
                    result = util.fromRight(step3);
                    attempts = new Aff2(CONS, new Aff2(RELEASE, attempt2._2, result), attempts, tmp);
                    if (interrupt === tmp || bracketCount > 0) {
                      status2 = CONTINUE;
                      step3 = attempt2._3(result);
                    }
                  }
                  break;
                case RELEASE:
                  attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail3), attempts, interrupt);
                  status2 = CONTINUE;
                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    step3 = attempt2._1.killed(util.fromLeft(interrupt))(attempt2._2);
                  } else if (fail3) {
                    step3 = attempt2._1.failed(util.fromLeft(fail3))(attempt2._2);
                  } else {
                    step3 = attempt2._1.completed(util.fromRight(step3))(attempt2._2);
                  }
                  fail3 = null;
                  bracketCount++;
                  break;
                case FINALIZER:
                  bracketCount++;
                  attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail3), attempts, interrupt);
                  status2 = CONTINUE;
                  step3 = attempt2._1;
                  break;
                case FINALIZED:
                  bracketCount--;
                  status2 = RETURN;
                  step3 = attempt2._1;
                  fail3 = attempt2._2;
                  break;
              }
            }
            break;
          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step3));
              }
            }
            joins = null;
            if (interrupt && fail3) {
              setTimeout(function() {
                throw util.fromLeft(fail3);
              }, 0);
            } else if (util.isLeft(step3) && rethrow) {
              setTimeout(function() {
                if (rethrow) {
                  throw util.fromLeft(step3);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status2 = CONTINUE;
            break;
          case PENDING:
            return;
        }
      }
    }
    function onComplete(join4) {
      return function() {
        if (status2 === COMPLETED) {
          rethrow = rethrow && join4.rethrow;
          join4.handler(step3)();
          return function() {
          };
        }
        var jid = joinId++;
        joins = joins || {};
        joins[jid] = join4;
        return function() {
          if (joins !== null) {
            delete joins[jid];
          }
        };
      };
    }
    function kill3(error5, cb) {
      return function() {
        if (status2 === COMPLETED) {
          cb(util.right(void 0))();
          return function() {
          };
        }
        var canceler = onComplete({
          rethrow: false,
          handler: function() {
            return cb(util.right(void 0));
          }
        })();
        switch (status2) {
          case SUSPENDED:
            interrupt = util.left(error5);
            status2 = COMPLETED;
            step3 = interrupt;
            run3(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error5);
            }
            if (bracketCount === 0) {
              if (status2 === PENDING) {
                attempts = new Aff2(CONS, new Aff2(FINALIZER, step3(error5)), attempts, interrupt);
              }
              status2 = RETURN;
              step3 = null;
              fail3 = null;
              run3(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error5);
            }
            if (bracketCount === 0) {
              status2 = RETURN;
              step3 = null;
              fail3 = null;
            }
        }
        return canceler;
      };
    }
    function join3(cb) {
      return function() {
        var canceler = onComplete({
          rethrow: false,
          handler: cb
        })();
        if (status2 === SUSPENDED) {
          run3(runTick);
        }
        return canceler;
      };
    }
    return {
      kill: kill3,
      join: join3,
      onComplete,
      isSuspended: function() {
        return status2 === SUSPENDED;
      },
      run: function() {
        if (status2 === SUSPENDED) {
          if (!Scheduler.isDraining()) {
            Scheduler.enqueue(function() {
              run3(runTick);
            });
          } else {
            run3(runTick);
          }
        }
      }
    };
  }
  function runPar(util, supervisor, par, cb) {
    var fiberId = 0;
    var fibers = {};
    var killId = 0;
    var kills = {};
    var early = new Error("[ParAff] Early exit");
    var interrupt = null;
    var root = EMPTY;
    function kill3(error5, par2, cb2) {
      var step3 = par2;
      var head5 = null;
      var tail4 = null;
      var count = 0;
      var kills2 = {};
      var tmp, kid;
      loop:
        while (true) {
          tmp = null;
          switch (step3.tag) {
            case FORKED:
              if (step3._3 === EMPTY) {
                tmp = fibers[step3._1];
                kills2[count++] = tmp.kill(error5, function(result) {
                  return function() {
                    count--;
                    if (count === 0) {
                      cb2(result)();
                    }
                  };
                });
              }
              if (head5 === null) {
                break loop;
              }
              step3 = head5._2;
              if (tail4 === null) {
                head5 = null;
              } else {
                head5 = tail4._1;
                tail4 = tail4._2;
              }
              break;
            case MAP:
              step3 = step3._2;
              break;
            case APPLY:
            case ALT:
              if (head5) {
                tail4 = new Aff2(CONS, head5, tail4);
              }
              head5 = step3;
              step3 = step3._1;
              break;
          }
        }
      if (count === 0) {
        cb2(util.right(void 0))();
      } else {
        kid = 0;
        tmp = count;
        for (; kid < tmp; kid++) {
          kills2[kid] = kills2[kid]();
        }
      }
      return kills2;
    }
    function join3(result, head5, tail4) {
      var fail3, step3, lhs, rhs, tmp, kid;
      if (util.isLeft(result)) {
        fail3 = result;
        step3 = null;
      } else {
        step3 = result;
        fail3 = null;
      }
      loop:
        while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;
          if (interrupt !== null) {
            return;
          }
          if (head5 === null) {
            cb(fail3 || step3)();
            return;
          }
          if (head5._3 !== EMPTY) {
            return;
          }
          switch (head5.tag) {
            case MAP:
              if (fail3 === null) {
                head5._3 = util.right(head5._1(util.fromRight(step3)));
                step3 = head5._3;
              } else {
                head5._3 = fail3;
              }
              break;
            case APPLY:
              lhs = head5._1._3;
              rhs = head5._2._3;
              if (fail3) {
                head5._3 = fail3;
                tmp = true;
                kid = killId++;
                kills[kid] = kill3(early, fail3 === lhs ? head5._2 : head5._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail4 === null) {
                      join3(fail3, null, null);
                    } else {
                      join3(fail3, tail4._1, tail4._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              } else if (lhs === EMPTY || rhs === EMPTY) {
                return;
              } else {
                step3 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                head5._3 = step3;
              }
              break;
            case ALT:
              lhs = head5._1._3;
              rhs = head5._2._3;
              if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                return;
              }
              if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                fail3 = step3 === lhs ? rhs : lhs;
                step3 = null;
                head5._3 = fail3;
              } else {
                head5._3 = step3;
                tmp = true;
                kid = killId++;
                kills[kid] = kill3(early, step3 === lhs ? head5._2 : head5._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail4 === null) {
                      join3(step3, null, null);
                    } else {
                      join3(step3, tail4._1, tail4._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              }
              break;
          }
          if (tail4 === null) {
            head5 = null;
          } else {
            head5 = tail4._1;
            tail4 = tail4._2;
          }
        }
    }
    function resolve2(fiber) {
      return function(result) {
        return function() {
          delete fibers[fiber._1];
          fiber._3 = result;
          join3(result, fiber._2._1, fiber._2._2);
        };
      };
    }
    function run3() {
      var status2 = CONTINUE;
      var step3 = par;
      var head5 = null;
      var tail4 = null;
      var tmp, fid;
      loop:
        while (true) {
          tmp = null;
          fid = null;
          switch (status2) {
            case CONTINUE:
              switch (step3.tag) {
                case MAP:
                  if (head5) {
                    tail4 = new Aff2(CONS, head5, tail4);
                  }
                  head5 = new Aff2(MAP, step3._1, EMPTY, EMPTY);
                  step3 = step3._2;
                  break;
                case APPLY:
                  if (head5) {
                    tail4 = new Aff2(CONS, head5, tail4);
                  }
                  head5 = new Aff2(APPLY, EMPTY, step3._2, EMPTY);
                  step3 = step3._1;
                  break;
                case ALT:
                  if (head5) {
                    tail4 = new Aff2(CONS, head5, tail4);
                  }
                  head5 = new Aff2(ALT, EMPTY, step3._2, EMPTY);
                  step3 = step3._1;
                  break;
                default:
                  fid = fiberId++;
                  status2 = RETURN;
                  tmp = step3;
                  step3 = new Aff2(FORKED, fid, new Aff2(CONS, head5, tail4), EMPTY);
                  tmp = Fiber(util, supervisor, tmp);
                  tmp.onComplete({
                    rethrow: false,
                    handler: resolve2(step3)
                  })();
                  fibers[fid] = tmp;
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
              }
              break;
            case RETURN:
              if (head5 === null) {
                break loop;
              }
              if (head5._1 === EMPTY) {
                head5._1 = step3;
                status2 = CONTINUE;
                step3 = head5._2;
                head5._2 = EMPTY;
              } else {
                head5._2 = step3;
                step3 = head5;
                if (tail4 === null) {
                  head5 = null;
                } else {
                  head5 = tail4._1;
                  tail4 = tail4._2;
                }
              }
          }
        }
      root = step3;
      for (fid = 0; fid < fiberId; fid++) {
        fibers[fid].run();
      }
    }
    function cancel(error5, cb2) {
      interrupt = util.left(error5);
      var innerKills;
      for (var kid in kills) {
        if (kills.hasOwnProperty(kid)) {
          innerKills = kills[kid];
          for (kid in innerKills) {
            if (innerKills.hasOwnProperty(kid)) {
              innerKills[kid]();
            }
          }
        }
      }
      kills = null;
      var newKills = kill3(error5, root, cb2);
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            for (var kid2 in newKills) {
              if (newKills.hasOwnProperty(kid2)) {
                newKills[kid2]();
              }
            }
            return nonCanceler2;
          };
        });
      };
    }
    run3();
    return function(killError) {
      return new Aff2(ASYNC, function(killCb) {
        return function() {
          return cancel(killError, killCb);
        };
      });
    };
  }
  function sequential3(util, supervisor, par) {
    return new Aff2(ASYNC, function(cb) {
      return function() {
        return runPar(util, supervisor, par, cb);
      };
    });
  }
  Aff2.EMPTY = EMPTY;
  Aff2.Pure = AffCtr(PURE);
  Aff2.Throw = AffCtr(THROW);
  Aff2.Catch = AffCtr(CATCH);
  Aff2.Sync = AffCtr(SYNC);
  Aff2.Async = AffCtr(ASYNC);
  Aff2.Bind = AffCtr(BIND);
  Aff2.Bracket = AffCtr(BRACKET);
  Aff2.Fork = AffCtr(FORK);
  Aff2.Seq = AffCtr(SEQ);
  Aff2.ParMap = AffCtr(MAP);
  Aff2.ParApply = AffCtr(APPLY);
  Aff2.ParAlt = AffCtr(ALT);
  Aff2.Fiber = Fiber;
  Aff2.Supervisor = Supervisor;
  Aff2.Scheduler = Scheduler;
  Aff2.nonCanceler = nonCanceler2;
  return Aff2;
}();
var _pure = Aff.Pure;
var _throwError = Aff.Throw;
function _catchError(aff) {
  return function(k) {
    return Aff.Catch(aff, k);
  };
}
function _map(f) {
  return function(aff) {
    if (aff.tag === Aff.Pure.tag) {
      return Aff.Pure(f(aff._1));
    } else {
      return Aff.Bind(aff, function(value) {
        return Aff.Pure(f(value));
      });
    }
  };
}
function _bind(aff) {
  return function(k) {
    return Aff.Bind(aff, k);
  };
}
function _fork(immediate) {
  return function(aff) {
    return Aff.Fork(immediate, aff);
  };
}
var _liftEffect = Aff.Sync;
function _parAffMap(f) {
  return function(aff) {
    return Aff.ParMap(f, aff);
  };
}
function _parAffApply(aff1) {
  return function(aff2) {
    return Aff.ParApply(aff1, aff2);
  };
}
var makeAff = Aff.Async;
function generalBracket(acquire) {
  return function(options) {
    return function(k) {
      return Aff.Bracket(acquire, options, k);
    };
  };
}
function _makeFiber(util, aff) {
  return function() {
    return Aff.Fiber(util, null, aff);
  };
}
var _delay = function() {
  function setDelay(n, k) {
    if (n === 0 && typeof setImmediate !== "undefined") {
      return setImmediate(k);
    } else {
      return setTimeout(k, n);
    }
  }
  function clearDelay(n, t) {
    if (n === 0 && typeof clearImmediate !== "undefined") {
      return clearImmediate(t);
    } else {
      return clearTimeout(t);
    }
  }
  return function(right, ms) {
    return Aff.Async(function(cb) {
      return function() {
        var timer = setDelay(ms, cb(right()));
        return function() {
          return Aff.Sync(function() {
            return right(clearDelay(ms, timer));
          });
        };
      };
    });
  };
}();
var _sequential = Aff.Seq;

// output/Control.Monad.State.Class/index.js
var state = function(dict) {
  return dict.state;
};
var get3 = function(dictMonadState) {
  return state(dictMonadState)(function(s) {
    return new Tuple(s, s);
  });
};

// output/Control.Monad.Trans.Class/index.js
var lift = function(dict) {
  return dict.lift;
};

// output/Effect.Class/index.js
var monadEffectEffect = {
  liftEffect: /* @__PURE__ */ identity(categoryFn),
  Monad0: function() {
    return monadEffect;
  }
};
var liftEffect = function(dict) {
  return dict.liftEffect;
};

// output/Control.Parallel.Class/index.js
var sequential = function(dict) {
  return dict.sequential;
};
var parallel = function(dict) {
  return dict.parallel;
};

// output/Control.Parallel/index.js
var identity14 = /* @__PURE__ */ identity(categoryFn);
var parTraverse_ = function(dictParallel) {
  var sequential3 = sequential(dictParallel);
  var traverse_2 = traverse_(dictParallel.Applicative1());
  var parallel3 = parallel(dictParallel);
  return function(dictFoldable) {
    var traverse_1 = traverse_2(dictFoldable);
    return function(f) {
      var $48 = traverse_1(function($50) {
        return parallel3(f($50));
      });
      return function($49) {
        return sequential3($48($49));
      };
    };
  };
};
var parTraverse = function(dictParallel) {
  var sequential3 = sequential(dictParallel);
  var Applicative1 = dictParallel.Applicative1();
  var parallel3 = parallel(dictParallel);
  return function(dictTraversable) {
    var traverse4 = traverse(dictTraversable)(Applicative1);
    return function(f) {
      var $51 = traverse4(function($53) {
        return parallel3(f($53));
      });
      return function($52) {
        return sequential3($51($52));
      };
    };
  };
};
var parSequence_ = function(dictParallel) {
  var parTraverse_1 = parTraverse_(dictParallel);
  return function(dictFoldable) {
    return parTraverse_1(dictFoldable)(identity14);
  };
};

// output/Effect.Aff/index.js
var $runtime_lazy4 = function(name2, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var pure9 = /* @__PURE__ */ pure(applicativeEffect);
var $$void6 = /* @__PURE__ */ $$void(functorEffect);
var map18 = /* @__PURE__ */ map(functorEffect);
var Canceler = function(x) {
  return x;
};
var functorParAff = {
  map: _parAffMap
};
var functorAff = {
  map: _map
};
var forkAff = /* @__PURE__ */ _fork(true);
var ffiUtil = /* @__PURE__ */ function() {
  var unsafeFromRight = function(v) {
    if (v instanceof Right) {
      return v.value0;
    }
    ;
    if (v instanceof Left) {
      return unsafeCrashWith("unsafeFromRight: Left");
    }
    ;
    throw new Error("Failed pattern match at Effect.Aff (line 407, column 21 - line 409, column 54): " + [v.constructor.name]);
  };
  var unsafeFromLeft = function(v) {
    if (v instanceof Left) {
      return v.value0;
    }
    ;
    if (v instanceof Right) {
      return unsafeCrashWith("unsafeFromLeft: Right");
    }
    ;
    throw new Error("Failed pattern match at Effect.Aff (line 402, column 20 - line 404, column 55): " + [v.constructor.name]);
  };
  var isLeft2 = function(v) {
    if (v instanceof Left) {
      return true;
    }
    ;
    if (v instanceof Right) {
      return false;
    }
    ;
    throw new Error("Failed pattern match at Effect.Aff (line 397, column 12 - line 399, column 21): " + [v.constructor.name]);
  };
  return {
    isLeft: isLeft2,
    fromLeft: unsafeFromLeft,
    fromRight: unsafeFromRight,
    left: Left.create,
    right: Right.create
  };
}();
var makeFiber = function(aff) {
  return _makeFiber(ffiUtil, aff);
};
var launchAff = function(aff) {
  return function __do() {
    var fiber = makeFiber(aff)();
    fiber.run();
    return fiber;
  };
};
var launchAff_ = function($73) {
  return $$void6(launchAff($73));
};
var bracket = function(acquire) {
  return function(completed) {
    return generalBracket(acquire)({
      killed: $$const(completed),
      failed: $$const(completed),
      completed: $$const(completed)
    });
  };
};
var applyParAff = {
  apply: _parAffApply,
  Functor0: function() {
    return functorParAff;
  }
};
var monadAff = {
  Applicative0: function() {
    return applicativeAff;
  },
  Bind1: function() {
    return bindAff;
  }
};
var bindAff = {
  bind: _bind,
  Apply0: function() {
    return $lazy_applyAff(0);
  }
};
var applicativeAff = {
  pure: _pure,
  Apply0: function() {
    return $lazy_applyAff(0);
  }
};
var $lazy_applyAff = /* @__PURE__ */ $runtime_lazy4("applyAff", "Effect.Aff", function() {
  return {
    apply: ap(monadAff),
    Functor0: function() {
      return functorAff;
    }
  };
});
var applyAff = /* @__PURE__ */ $lazy_applyAff(71);
var pure23 = /* @__PURE__ */ pure(applicativeAff);
var bind12 = /* @__PURE__ */ bind(bindAff);
var lift21 = /* @__PURE__ */ lift2(applyAff);
var invincible = function(a) {
  return bracket(a)($$const(pure23(unit)))(pure23);
};
var semigroupAff = function(dictSemigroup) {
  return {
    append: lift21(append(dictSemigroup))
  };
};
var monadEffectAff = {
  liftEffect: _liftEffect,
  Monad0: function() {
    return monadAff;
  }
};
var liftEffect2 = /* @__PURE__ */ liftEffect(monadEffectAff);
var effectCanceler = function($74) {
  return Canceler($$const(liftEffect2($74)));
};
var killFiber = function(e) {
  return function(v) {
    return bind12(liftEffect2(v.isSuspended))(function(suspended) {
      if (suspended) {
        return liftEffect2($$void6(v.kill(e, $$const(pure9(unit)))));
      }
      ;
      return makeAff(function(k) {
        return map18(effectCanceler)(v.kill(e, k));
      });
    });
  };
};
var monadThrowAff = {
  throwError: _throwError,
  Monad0: function() {
    return monadAff;
  }
};
var monadErrorAff = {
  catchError: _catchError,
  MonadThrow0: function() {
    return monadThrowAff;
  }
};
var $$try2 = /* @__PURE__ */ $$try(monadErrorAff);
var catchError2 = /* @__PURE__ */ catchError(monadErrorAff);
var attempt = $$try2;
var parallelAff = {
  parallel: unsafeCoerce2,
  sequential: _sequential,
  Monad0: function() {
    return monadAff;
  },
  Applicative1: function() {
    return $lazy_applicativeParAff(0);
  }
};
var $lazy_applicativeParAff = /* @__PURE__ */ $runtime_lazy4("applicativeParAff", "Effect.Aff", function() {
  return {
    pure: function() {
      var $79 = parallel(parallelAff);
      return function($80) {
        return $79(pure23($80));
      };
    }(),
    Apply0: function() {
      return applyParAff;
    }
  };
});
var applicativeParAff = /* @__PURE__ */ $lazy_applicativeParAff(131);
var parSequence_2 = /* @__PURE__ */ parSequence_(parallelAff)(foldableArray);
var semigroupCanceler = {
  append: function(v) {
    return function(v1) {
      return function(err) {
        return parSequence_2([v(err), v1(err)]);
      };
    };
  }
};
var monoidAff = function(dictMonoid) {
  var semigroupAff1 = semigroupAff(dictMonoid.Semigroup0());
  return {
    mempty: pure23(mempty(dictMonoid)),
    Semigroup0: function() {
      return semigroupAff1;
    }
  };
};
var nonCanceler = /* @__PURE__ */ $$const(/* @__PURE__ */ pure23(unit));
var monoidCanceler = {
  mempty: nonCanceler,
  Semigroup0: function() {
    return semigroupCanceler;
  }
};
var altAff = {
  alt: function(a1) {
    return function(a2) {
      return catchError2(a1)($$const(a2));
    };
  },
  Functor0: function() {
    return functorAff;
  }
};
var plusAff = {
  empty: /* @__PURE__ */ throwError(monadThrowAff)(/* @__PURE__ */ error("Always fails")),
  Alt0: function() {
    return altAff;
  }
};

// output/Node.Encoding/index.js
var ASCII2 = /* @__PURE__ */ function() {
  function ASCII3() {
  }
  ;
  ASCII3.value = new ASCII3();
  return ASCII3;
}();
var UTF8 = /* @__PURE__ */ function() {
  function UTF82() {
  }
  ;
  UTF82.value = new UTF82();
  return UTF82;
}();
var UTF16LE = /* @__PURE__ */ function() {
  function UTF16LE2() {
  }
  ;
  UTF16LE2.value = new UTF16LE2();
  return UTF16LE2;
}();
var UCS2 = /* @__PURE__ */ function() {
  function UCS22() {
  }
  ;
  UCS22.value = new UCS22();
  return UCS22;
}();
var Base64 = /* @__PURE__ */ function() {
  function Base642() {
  }
  ;
  Base642.value = new Base642();
  return Base642;
}();
var Latin1 = /* @__PURE__ */ function() {
  function Latin12() {
  }
  ;
  Latin12.value = new Latin12();
  return Latin12;
}();
var Binary = /* @__PURE__ */ function() {
  function Binary2() {
  }
  ;
  Binary2.value = new Binary2();
  return Binary2;
}();
var Hex = /* @__PURE__ */ function() {
  function Hex2() {
  }
  ;
  Hex2.value = new Hex2();
  return Hex2;
}();
var showEncoding = {
  show: function(v) {
    if (v instanceof ASCII2) {
      return "ASCII";
    }
    ;
    if (v instanceof UTF8) {
      return "UTF8";
    }
    ;
    if (v instanceof UTF16LE) {
      return "UTF16LE";
    }
    ;
    if (v instanceof UCS2) {
      return "UCS2";
    }
    ;
    if (v instanceof Base64) {
      return "Base64";
    }
    ;
    if (v instanceof Latin1) {
      return "Latin1";
    }
    ;
    if (v instanceof Binary) {
      return "Binary";
    }
    ;
    if (v instanceof Hex) {
      return "Hex";
    }
    ;
    throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [v.constructor.name]);
  }
};
var encodingToNode = function(v) {
  if (v instanceof ASCII2) {
    return "ascii";
  }
  ;
  if (v instanceof UTF8) {
    return "utf8";
  }
  ;
  if (v instanceof UTF16LE) {
    return "utf16le";
  }
  ;
  if (v instanceof UCS2) {
    return "ucs2";
  }
  ;
  if (v instanceof Base64) {
    return "base64";
  }
  ;
  if (v instanceof Latin1) {
    return "latin1";
  }
  ;
  if (v instanceof Binary) {
    return "binary";
  }
  ;
  if (v instanceof Hex) {
    return "hex";
  }
  ;
  throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [v.constructor.name]);
};

// output/Node.FS.Async/foreign.js
import {
  rename,
  truncate,
  chown,
  chmod,
  stat,
  link,
  symlink,
  readlink,
  realpath,
  unlink,
  rmdir,
  mkdir,
  readdir,
  utimes,
  readFile,
  writeFile,
  appendFile,
  open,
  read as read3,
  write as write3,
  close
} from "fs";
function handleCallbackImpl(left, right, f) {
  return function(err, value) {
    if (err) {
      f(left(err))();
    } else {
      f(right(value))();
    }
  };
}

// output/Data.Nullable/foreign.js
function nullable(a, r, f) {
  return a == null ? r : f(a);
}

// output/Data.Nullable/index.js
var toMaybe = function(n) {
  return nullable(n, Nothing.value, Just.create);
};

// output/Node.Buffer.Class/index.js
var toString3 = function(dict) {
  return dict.toString;
};
var concat2 = function(dict) {
  return dict.concat;
};

// output/Node.Buffer.Internal/foreign.js
function copyAll(a) {
  return () => {
    return Buffer.from(a);
  };
}
function writeInternal(ty) {
  return (value) => {
    return (offset) => {
      return (buf) => {
        return () => {
          buf["write" + ty](value, offset);
        };
      };
    };
  };
}
function writeStringInternal(encoding) {
  return (offset) => {
    return (length6) => {
      return (value) => {
        return (buff) => {
          return () => {
            return buff.write(value, offset, length6, encoding);
          };
        };
      };
    };
  };
}
function setAtOffset(value) {
  return (offset) => {
    return (buff) => {
      return () => {
        buff[offset] = value;
      };
    };
  };
}
function copy(srcStart) {
  return (srcEnd) => {
    return (src) => {
      return (targStart) => {
        return (targ) => {
          return () => {
            return src.copy(targ, targStart, srcStart, srcEnd);
          };
        };
      };
    };
  };
}
function fill(octet) {
  return (start) => {
    return (end) => {
      return (buf) => {
        return () => {
          buf.fill(octet, start, end);
        };
      };
    };
  };
}

// output/Node.Buffer.Immutable/foreign.js
function create(size6) {
  return Buffer.alloc(size6);
}
function fromArray2(octets) {
  return Buffer.from(octets);
}
function size3(buff) {
  return buff.length;
}
function toArray3(buff) {
  var json = buff.toJSON();
  return json.data || json;
}
function toArrayBuffer(buff) {
  return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
}
function fromArrayBuffer(ab) {
  return Buffer.from(ab);
}
function fromStringImpl2(str) {
  return (encoding) => {
    return Buffer.from(str, encoding);
  };
}
function readImpl(ty) {
  return (offset) => {
    return (buf) => {
      return buf["read" + ty](offset);
    };
  };
}
function readStringImpl(enc) {
  return (start) => {
    return (end) => {
      return (buff) => {
        return buff.toString(enc, start, end);
      };
    };
  };
}
function getAtOffsetImpl(just) {
  return (nothing) => {
    return (offset) => {
      return (buff) => {
        var octet = buff[offset];
        return octet == null ? nothing : just(octet);
      };
    };
  };
}
function toStringImpl(enc) {
  return (buff) => {
    return buff.toString(enc);
  };
}
function slice3(start) {
  return (end) => {
    return (buff) => {
      return buff.slice(start, end);
    };
  };
}
function concat3(buffs) {
  return Buffer.concat(buffs);
}
function concatToLength(buffs) {
  return (totalLength) => {
    return Buffer.concat(buffs, totalLength);
  };
}

// output/Node.Buffer.Types/index.js
var UInt8 = /* @__PURE__ */ function() {
  function UInt82() {
  }
  ;
  UInt82.value = new UInt82();
  return UInt82;
}();
var UInt16LE = /* @__PURE__ */ function() {
  function UInt16LE2() {
  }
  ;
  UInt16LE2.value = new UInt16LE2();
  return UInt16LE2;
}();
var UInt16BE = /* @__PURE__ */ function() {
  function UInt16BE2() {
  }
  ;
  UInt16BE2.value = new UInt16BE2();
  return UInt16BE2;
}();
var UInt32LE = /* @__PURE__ */ function() {
  function UInt32LE2() {
  }
  ;
  UInt32LE2.value = new UInt32LE2();
  return UInt32LE2;
}();
var UInt32BE = /* @__PURE__ */ function() {
  function UInt32BE2() {
  }
  ;
  UInt32BE2.value = new UInt32BE2();
  return UInt32BE2;
}();
var Int8 = /* @__PURE__ */ function() {
  function Int82() {
  }
  ;
  Int82.value = new Int82();
  return Int82;
}();
var Int16LE = /* @__PURE__ */ function() {
  function Int16LE2() {
  }
  ;
  Int16LE2.value = new Int16LE2();
  return Int16LE2;
}();
var Int16BE = /* @__PURE__ */ function() {
  function Int16BE2() {
  }
  ;
  Int16BE2.value = new Int16BE2();
  return Int16BE2;
}();
var Int32LE = /* @__PURE__ */ function() {
  function Int32LE2() {
  }
  ;
  Int32LE2.value = new Int32LE2();
  return Int32LE2;
}();
var Int32BE = /* @__PURE__ */ function() {
  function Int32BE2() {
  }
  ;
  Int32BE2.value = new Int32BE2();
  return Int32BE2;
}();
var FloatLE = /* @__PURE__ */ function() {
  function FloatLE2() {
  }
  ;
  FloatLE2.value = new FloatLE2();
  return FloatLE2;
}();
var FloatBE = /* @__PURE__ */ function() {
  function FloatBE2() {
  }
  ;
  FloatBE2.value = new FloatBE2();
  return FloatBE2;
}();
var DoubleLE = /* @__PURE__ */ function() {
  function DoubleLE2() {
  }
  ;
  DoubleLE2.value = new DoubleLE2();
  return DoubleLE2;
}();
var DoubleBE = /* @__PURE__ */ function() {
  function DoubleBE2() {
  }
  ;
  DoubleBE2.value = new DoubleBE2();
  return DoubleBE2;
}();
var showBufferValueType = {
  show: function(v) {
    if (v instanceof UInt8) {
      return "UInt8";
    }
    ;
    if (v instanceof UInt16LE) {
      return "UInt16LE";
    }
    ;
    if (v instanceof UInt16BE) {
      return "UInt16BE";
    }
    ;
    if (v instanceof UInt32LE) {
      return "UInt32LE";
    }
    ;
    if (v instanceof UInt32BE) {
      return "UInt32BE";
    }
    ;
    if (v instanceof Int8) {
      return "Int8";
    }
    ;
    if (v instanceof Int16LE) {
      return "Int16LE";
    }
    ;
    if (v instanceof Int16BE) {
      return "Int16BE";
    }
    ;
    if (v instanceof Int32LE) {
      return "Int32LE";
    }
    ;
    if (v instanceof Int32BE) {
      return "Int32BE";
    }
    ;
    if (v instanceof FloatLE) {
      return "FloatLE";
    }
    ;
    if (v instanceof FloatBE) {
      return "FloatBE";
    }
    ;
    if (v instanceof DoubleLE) {
      return "DoubleLE";
    }
    ;
    if (v instanceof DoubleBE) {
      return "DoubleBE";
    }
    ;
    throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [v.constructor.name]);
  }
};

// output/Node.Buffer.Immutable/index.js
var toString4 = function($7) {
  return toStringImpl(encodingToNode($7));
};
var readString = function($8) {
  return readStringImpl(encodingToNode($8));
};
var read4 = /* @__PURE__ */ function() {
  var $9 = show(showBufferValueType);
  return function($10) {
    return readImpl($9($10));
  };
}();
var getAtOffset = /* @__PURE__ */ function() {
  return getAtOffsetImpl(Just.create)(Nothing.value);
}();
var fromString4 = function(str) {
  var $11 = fromStringImpl2(str);
  return function($12) {
    return $11(encodingToNode($12));
  };
};
var concat$prime = concatToLength;

// output/Node.Buffer.Internal/index.js
var show2 = /* @__PURE__ */ show(showBufferValueType);
var writeString = function(dictMonad) {
  return function($43) {
    return writeStringInternal(encodingToNode($43));
  };
};
var write4 = function(dictMonad) {
  return function($44) {
    return writeInternal(show2($44));
  };
};
var unsafeThaw2 = function(dictMonad) {
  var $45 = pure(dictMonad.Applicative0());
  return function($46) {
    return $45($46);
  };
};
var usingToImmutable = function(dictMonad) {
  var unsafeThaw1 = unsafeThaw2(dictMonad);
  return function(f) {
    return function(x) {
      return unsafeThaw1(f(x));
    };
  };
};
var unsafeFreeze2 = function(dictMonad) {
  var $47 = pure(dictMonad.Applicative0());
  return function($48) {
    return $47($48);
  };
};
var usingFromImmutable = function(dictMonad) {
  var map31 = map(dictMonad.Bind1().Apply0().Functor0());
  var unsafeFreeze1 = unsafeFreeze2(dictMonad);
  return function(f) {
    return function(buf) {
      return map31(f)(unsafeFreeze1(buf));
    };
  };
};
var toString5 = function(dictMonad) {
  var usingFromImmutable1 = usingFromImmutable(dictMonad);
  return function(m) {
    return usingFromImmutable1(toString4(m));
  };
};
var toArrayBuffer2 = function(dictMonad) {
  return usingFromImmutable(dictMonad)(toArrayBuffer);
};
var toArray4 = function(dictMonad) {
  return usingFromImmutable(dictMonad)(toArray3);
};
var slice4 = slice3;
var size4 = function(dictMonad) {
  return usingFromImmutable(dictMonad)(size3);
};
var readString2 = function(dictMonad) {
  var usingFromImmutable1 = usingFromImmutable(dictMonad);
  return function(m) {
    return function(o) {
      return function(o$prime) {
        return usingFromImmutable1(readString(m)(o)(o$prime));
      };
    };
  };
};
var read5 = function(dictMonad) {
  var usingFromImmutable1 = usingFromImmutable(dictMonad);
  return function(t) {
    return function(o) {
      return usingFromImmutable1(read4(t)(o));
    };
  };
};
var getAtOffset2 = function(dictMonad) {
  var usingFromImmutable1 = usingFromImmutable(dictMonad);
  return function(o) {
    return usingFromImmutable1(getAtOffset(o));
  };
};
var fromString5 = function(dictMonad) {
  var usingToImmutable1 = usingToImmutable(dictMonad);
  return function(s) {
    return usingToImmutable1(fromString4(s));
  };
};
var fromArrayBuffer2 = function(dictMonad) {
  return usingToImmutable(dictMonad)(fromArrayBuffer);
};
var fromArray3 = function(dictMonad) {
  return usingToImmutable(dictMonad)(fromArray2);
};
var create2 = function(dictMonad) {
  return usingToImmutable(dictMonad)(create);
};
var concat$prime2 = function(dictMonad) {
  return function(arrs) {
    return function(n) {
      return function(v) {
        return concat$prime(arrs)(n);
      };
    };
  };
};
var concat4 = function(arrs) {
  return function(v) {
    return concat3(arrs);
  };
};

// output/Node.Buffer/index.js
var mutableBufferEffect = {
  create: /* @__PURE__ */ create2(monadEffect),
  freeze: copyAll,
  unsafeFreeze: /* @__PURE__ */ unsafeFreeze2(monadEffect),
  thaw: copyAll,
  unsafeThaw: /* @__PURE__ */ unsafeThaw2(monadEffect),
  fromArray: /* @__PURE__ */ fromArray3(monadEffect),
  fromString: /* @__PURE__ */ fromString5(monadEffect),
  fromArrayBuffer: /* @__PURE__ */ fromArrayBuffer2(monadEffect),
  toArrayBuffer: /* @__PURE__ */ toArrayBuffer2(monadEffect),
  read: /* @__PURE__ */ read5(monadEffect),
  readString: /* @__PURE__ */ readString2(monadEffect),
  toString: /* @__PURE__ */ toString5(monadEffect),
  write: /* @__PURE__ */ write4(monadEffect),
  writeString: /* @__PURE__ */ writeString(monadEffect),
  toArray: /* @__PURE__ */ toArray4(monadEffect),
  getAtOffset: /* @__PURE__ */ getAtOffset2(monadEffect),
  setAtOffset,
  slice: slice4,
  size: /* @__PURE__ */ size4(monadEffect),
  concat: concat4,
  "concat'": /* @__PURE__ */ concat$prime2(monadEffect),
  copy,
  fill,
  Monad0: function() {
    return monadEffect;
  }
};

// output/Node.FS.Internal/index.js
var mkEffect = unsafeCoerce2;

// output/Node.FS.Stats/foreign.js
function statsMethod(m, s) {
  return s[m]();
}

// output/Foreign/foreign.js
var isArray = Array.isArray || function(value) {
  return Object.prototype.toString.call(value) === "[object Array]";
};

// output/Node.FS.Stats/index.js
var Stats = /* @__PURE__ */ function() {
  function Stats2(value0) {
    this.value0 = value0;
  }
  ;
  Stats2.create = function(value0) {
    return new Stats2(value0);
  };
  return Stats2;
}();
var isFile = function(v) {
  return statsMethod("isFile", v.value0);
};
var isDirectory = function(v) {
  return statsMethod("isDirectory", v.value0);
};

// output/Node.FS.Async/index.js
var show3 = /* @__PURE__ */ show(showEncoding);
var map19 = /* @__PURE__ */ map(functorEither);
var handleCallback = function(cb) {
  return handleCallbackImpl(Left.create, Right.create, cb);
};
var readFile2 = function(file) {
  return function(cb) {
    return mkEffect(function(v) {
      return readFile(file, {}, handleCallback(cb));
    });
  };
};
var readTextFile = function(encoding) {
  return function(file) {
    return function(cb) {
      return mkEffect(function(v) {
        return readFile(file, {
          encoding: show3(encoding)
        }, handleCallback(cb));
      });
    };
  };
};
var readdir2 = function(file) {
  return function(cb) {
    return mkEffect(function(v) {
      return readdir(file, handleCallback(cb));
    });
  };
};
var stat2 = function(file) {
  return function(cb) {
    return mkEffect(function(v) {
      return stat(file, handleCallback(function() {
        var $39 = map19(Stats.create);
        return function($40) {
          return cb($39($40));
        };
      }()));
    });
  };
};
var writeTextFile = function(encoding) {
  return function(file) {
    return function(buff) {
      return function(cb) {
        return mkEffect(function(v) {
          return writeFile(file, buff, {
            encoding: show3(encoding)
          }, handleCallback(cb));
        });
      };
    };
  };
};

// output/Node.FS.Aff/index.js
var voidLeft5 = /* @__PURE__ */ voidLeft(functorEffect);
var toAff = function(p) {
  return makeAff(function(k) {
    return voidLeft5(p(k))(nonCanceler);
  });
};
var toAff1 = function(f) {
  return function(a) {
    return toAff(f(a));
  };
};
var toAff2 = function(f) {
  return function(a) {
    return function(b) {
      return toAff(f(a)(b));
    };
  };
};
var toAff3 = function(f) {
  return function(a) {
    return function(b) {
      return function(c) {
        return toAff(f(a)(b)(c));
      };
    };
  };
};
var writeTextFile2 = /* @__PURE__ */ toAff3(writeTextFile);
var stat3 = /* @__PURE__ */ toAff1(stat2);
var readdir3 = /* @__PURE__ */ toAff1(readdir2);
var readTextFile2 = /* @__PURE__ */ toAff2(readTextFile);
var readFile3 = /* @__PURE__ */ toAff1(readFile2);

// output/Node.WorkerBees/foreign.js
import workerThreads from "worker_threads";
function spawnImpl(left, right, worker, options, cb) {
  worker.resolve(function(err, res) {
    if (err) {
      return cb(left(err))();
    }
    var thread;
    var importPath = res.filePath;
    try {
      thread = new workerThreads.Worker(importPath, {
        workerData: options.workerData
      });
      thread.on("message", function(value) {
        return options.onMessage(value)();
      });
      thread.on("error", function(err2) {
        return options.onError(err2)();
      });
      thread.on("exit", function(code) {
        return options.onExit(code)();
      });
      thread.on("online", function() {
        cb(right(thread))();
      });
    } catch (e) {
      cb(left(e))();
    }
  });
}
function unsafeMakeImpl(params) {
  return {
    resolve: function(cb) {
      cb(void 0, params);
    },
    spawn: function() {
      throw new Error("Cannot spawn unsafe worker directly.");
    }
  };
}
function postImpl(value, worker) {
  worker.postMessage(value);
}
function terminateImpl(left, right, worker, cb) {
  worker.terminate().then(function() {
    cb(right(void 0))();
  }).catch(function(err) {
    cb(left(err))();
  });
}

// output/Effect.Uncurried/foreign.js
var runEffectFn2 = function runEffectFn22(fn) {
  return function(a) {
    return function(b) {
      return function() {
        return fn(a, b);
      };
    };
  };
};
var runEffectFn4 = function runEffectFn42(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function() {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
};
var runEffectFn5 = function runEffectFn52(fn) {
  return function(a) {
    return function(b) {
      return function(c) {
        return function(d) {
          return function(e) {
            return function() {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };
};

// output/Node.WorkerBees/index.js
var unsafeWorkerFromPath = function() {
  return function($41) {
    return unsafeMakeImpl(function(v) {
      return {
        filePath: v
      };
    }($41));
  };
};
var terminate = /* @__PURE__ */ function() {
  return runEffectFn4(terminateImpl)(Left.create)(Right.create);
}();
var spawn = function() {
  return runEffectFn5(spawnImpl)(Left.create)(Right.create);
};
var post = function() {
  return runEffectFn2(postImpl);
};

// output/Data.Char/index.js
var fromCharCode3 = /* @__PURE__ */ toEnum(boundedEnumChar);

// output/PureScript.CST.Print/index.js
var unwrap4 = /* @__PURE__ */ unwrap();
var printQualified2 = function(moduleName) {
  return function(name2) {
    if (moduleName instanceof Nothing) {
      return name2;
    }
    ;
    if (moduleName instanceof Just) {
      return unwrap4(moduleName.value0) + ("." + name2);
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Print (line 124, column 34 - line 126, column 38): " + [moduleName.constructor.name]);
  };
};

// output/PureScript.CST.Errors/index.js
var UnexpectedEof = /* @__PURE__ */ function() {
  function UnexpectedEof2() {
  }
  ;
  UnexpectedEof2.value = new UnexpectedEof2();
  return UnexpectedEof2;
}();
var ExpectedEof = /* @__PURE__ */ function() {
  function ExpectedEof2(value0) {
    this.value0 = value0;
  }
  ;
  ExpectedEof2.create = function(value0) {
    return new ExpectedEof2(value0);
  };
  return ExpectedEof2;
}();
var UnexpectedToken = /* @__PURE__ */ function() {
  function UnexpectedToken2(value0) {
    this.value0 = value0;
  }
  ;
  UnexpectedToken2.create = function(value0) {
    return new UnexpectedToken2(value0);
  };
  return UnexpectedToken2;
}();
var ExpectedToken = /* @__PURE__ */ function() {
  function ExpectedToken2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExpectedToken2.create = function(value0) {
    return function(value1) {
      return new ExpectedToken2(value0, value1);
    };
  };
  return ExpectedToken2;
}();
var ExpectedClass = /* @__PURE__ */ function() {
  function ExpectedClass2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ExpectedClass2.create = function(value0) {
    return function(value1) {
      return new ExpectedClass2(value0, value1);
    };
  };
  return ExpectedClass2;
}();
var LexExpected = /* @__PURE__ */ function() {
  function LexExpected2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  LexExpected2.create = function(value0) {
    return function(value1) {
      return new LexExpected2(value0, value1);
    };
  };
  return LexExpected2;
}();
var LexInvalidCharEscape = /* @__PURE__ */ function() {
  function LexInvalidCharEscape2(value0) {
    this.value0 = value0;
  }
  ;
  LexInvalidCharEscape2.create = function(value0) {
    return new LexInvalidCharEscape2(value0);
  };
  return LexInvalidCharEscape2;
}();
var LexCharEscapeOutOfRange = /* @__PURE__ */ function() {
  function LexCharEscapeOutOfRange2(value0) {
    this.value0 = value0;
  }
  ;
  LexCharEscapeOutOfRange2.create = function(value0) {
    return new LexCharEscapeOutOfRange2(value0);
  };
  return LexCharEscapeOutOfRange2;
}();
var LexHexOutOfRange = /* @__PURE__ */ function() {
  function LexHexOutOfRange2(value0) {
    this.value0 = value0;
  }
  ;
  LexHexOutOfRange2.create = function(value0) {
    return new LexHexOutOfRange2(value0);
  };
  return LexHexOutOfRange2;
}();
var LexIntOutOfRange = /* @__PURE__ */ function() {
  function LexIntOutOfRange2(value0) {
    this.value0 = value0;
  }
  ;
  LexIntOutOfRange2.create = function(value0) {
    return new LexIntOutOfRange2(value0);
  };
  return LexIntOutOfRange2;
}();
var LexNumberOutOfRange = /* @__PURE__ */ function() {
  function LexNumberOutOfRange2(value0) {
    this.value0 = value0;
  }
  ;
  LexNumberOutOfRange2.create = function(value0) {
    return new LexNumberOutOfRange2(value0);
  };
  return LexNumberOutOfRange2;
}();
var printTokenError = function(v) {
  if (v instanceof TokLeftParen) {
    return "'('";
  }
  ;
  if (v instanceof TokRightParen) {
    return "')'";
  }
  ;
  if (v instanceof TokLeftBrace) {
    return "'{'";
  }
  ;
  if (v instanceof TokRightBrace) {
    return "'}'";
  }
  ;
  if (v instanceof TokLeftSquare) {
    return "'['";
  }
  ;
  if (v instanceof TokRightSquare) {
    return "']'";
  }
  ;
  if (v instanceof TokLeftArrow) {
    if (v.value0 instanceof ASCII) {
      return "'<-'";
    }
    ;
    if (v.value0 instanceof Unicode) {
      return "'\u2190'";
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Errors (line 72, column 5 - line 74, column 23): " + [v.value0.constructor.name]);
  }
  ;
  if (v instanceof TokRightArrow) {
    if (v.value0 instanceof ASCII) {
      return "'->'";
    }
    ;
    if (v.value0 instanceof Unicode) {
      return "'\u2192'";
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Errors (line 76, column 5 - line 78, column 23): " + [v.value0.constructor.name]);
  }
  ;
  if (v instanceof TokRightFatArrow) {
    if (v.value0 instanceof ASCII) {
      return "'=>'";
    }
    ;
    if (v.value0 instanceof Unicode) {
      return "'\u21D2'";
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Errors (line 80, column 5 - line 82, column 23): " + [v.value0.constructor.name]);
  }
  ;
  if (v instanceof TokDoubleColon) {
    if (v.value0 instanceof ASCII) {
      return "'::'";
    }
    ;
    if (v.value0 instanceof Unicode) {
      return "'\u2237'";
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Errors (line 84, column 5 - line 86, column 23): " + [v.value0.constructor.name]);
  }
  ;
  if (v instanceof TokForall) {
    if (v.value0 instanceof ASCII) {
      return "forall";
    }
    ;
    if (v.value0 instanceof Unicode) {
      return "'\u2200'";
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Errors (line 88, column 5 - line 90, column 23): " + [v.value0.constructor.name]);
  }
  ;
  if (v instanceof TokEquals) {
    return "'='";
  }
  ;
  if (v instanceof TokPipe) {
    return "'|'";
  }
  ;
  if (v instanceof TokTick) {
    return "`";
  }
  ;
  if (v instanceof TokDot) {
    return ".";
  }
  ;
  if (v instanceof TokComma) {
    return "','";
  }
  ;
  if (v instanceof TokUnderscore) {
    return "'_'";
  }
  ;
  if (v instanceof TokBackslash) {
    return "'\\'";
  }
  ;
  if (v instanceof TokAt) {
    return "'@'";
  }
  ;
  if (v instanceof TokLowerName) {
    return "identifier " + printQualified2(v.value0)(v.value1);
  }
  ;
  if (v instanceof TokUpperName) {
    return "proper identifier " + printQualified2(v.value0)(v.value1);
  }
  ;
  if (v instanceof TokOperator) {
    return "operator " + printQualified2(v.value0)(v.value1);
  }
  ;
  if (v instanceof TokSymbolName) {
    return "symbol " + printQualified2(v.value0)(v.value1);
  }
  ;
  if (v instanceof TokSymbolArrow) {
    if (v.value0 instanceof ASCII) {
      return "(->)";
    }
    ;
    if (v.value0 instanceof Unicode) {
      return "(\u2192)";
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Errors (line 116, column 5 - line 118, column 23): " + [v.value0.constructor.name]);
  }
  ;
  if (v instanceof TokHole) {
    return "hole ?" + v.value0;
  }
  ;
  if (v instanceof TokChar) {
    return "char literal '" + (v.value0 + "'");
  }
  ;
  if (v instanceof TokString) {
    return "string literal";
  }
  ;
  if (v instanceof TokRawString) {
    return "raw string literal";
  }
  ;
  if (v instanceof TokInt) {
    return "int literal " + v.value0;
  }
  ;
  if (v instanceof TokNumber) {
    return "number literal " + v.value0;
  }
  ;
  if (v instanceof TokLayoutStart) {
    return "start of indented block";
  }
  ;
  if (v instanceof TokLayoutSep) {
    return "new indented block item";
  }
  ;
  if (v instanceof TokLayoutEnd) {
    return "end of indented block";
  }
  ;
  throw new Error("Failed pattern match at PureScript.CST.Errors (line 58, column 19 - line 136, column 28): " + [v.constructor.name]);
};
var printParseError = function(v) {
  if (v instanceof UnexpectedEof) {
    return "Unexpected end of file";
  }
  ;
  if (v instanceof ExpectedEof) {
    return "Expected end of file, saw " + printTokenError(v.value0);
  }
  ;
  if (v instanceof UnexpectedToken) {
    return "Unexpected " + printTokenError(v.value0);
  }
  ;
  if (v instanceof ExpectedToken) {
    return "Expected " + (printTokenError(v.value0) + (", saw " + printTokenError(v.value1)));
  }
  ;
  if (v instanceof ExpectedClass) {
    return "Expected " + (v.value0 + (", saw " + printTokenError(v.value1)));
  }
  ;
  if (v instanceof LexExpected) {
    return "Expected " + (v.value0 + (", saw " + v.value1));
  }
  ;
  if (v instanceof LexInvalidCharEscape) {
    return "Invalid character escape \\" + v.value0;
  }
  ;
  if (v instanceof LexCharEscapeOutOfRange) {
    return "Character escape out of range \\" + v.value0;
  }
  ;
  if (v instanceof LexHexOutOfRange) {
    return "Hex integer out of range 0x" + v.value0;
  }
  ;
  if (v instanceof LexIntOutOfRange) {
    return "Int out of range " + v.value0;
  }
  ;
  if (v instanceof LexNumberOutOfRange) {
    return "Number out of range " + v.value0;
  }
  ;
  throw new Error("Failed pattern match at PureScript.CST.Errors (line 33, column 19 - line 55, column 34): " + [v.constructor.name]);
};

// output/PureScript.CST.Layout/index.js
var find3 = /* @__PURE__ */ find(foldableList);
var LytRoot = /* @__PURE__ */ function() {
  function LytRoot2() {
  }
  ;
  LytRoot2.value = new LytRoot2();
  return LytRoot2;
}();
var LytTopDecl = /* @__PURE__ */ function() {
  function LytTopDecl2() {
  }
  ;
  LytTopDecl2.value = new LytTopDecl2();
  return LytTopDecl2;
}();
var LytTopDeclHead = /* @__PURE__ */ function() {
  function LytTopDeclHead2() {
  }
  ;
  LytTopDeclHead2.value = new LytTopDeclHead2();
  return LytTopDeclHead2;
}();
var LytDeclGuard = /* @__PURE__ */ function() {
  function LytDeclGuard2() {
  }
  ;
  LytDeclGuard2.value = new LytDeclGuard2();
  return LytDeclGuard2;
}();
var LytCase = /* @__PURE__ */ function() {
  function LytCase2() {
  }
  ;
  LytCase2.value = new LytCase2();
  return LytCase2;
}();
var LytCaseBinders = /* @__PURE__ */ function() {
  function LytCaseBinders2() {
  }
  ;
  LytCaseBinders2.value = new LytCaseBinders2();
  return LytCaseBinders2;
}();
var LytCaseGuard = /* @__PURE__ */ function() {
  function LytCaseGuard2() {
  }
  ;
  LytCaseGuard2.value = new LytCaseGuard2();
  return LytCaseGuard2;
}();
var LytLambdaBinders = /* @__PURE__ */ function() {
  function LytLambdaBinders2() {
  }
  ;
  LytLambdaBinders2.value = new LytLambdaBinders2();
  return LytLambdaBinders2;
}();
var LytParen = /* @__PURE__ */ function() {
  function LytParen2() {
  }
  ;
  LytParen2.value = new LytParen2();
  return LytParen2;
}();
var LytBrace = /* @__PURE__ */ function() {
  function LytBrace2() {
  }
  ;
  LytBrace2.value = new LytBrace2();
  return LytBrace2;
}();
var LytSquare = /* @__PURE__ */ function() {
  function LytSquare2() {
  }
  ;
  LytSquare2.value = new LytSquare2();
  return LytSquare2;
}();
var LytIf = /* @__PURE__ */ function() {
  function LytIf2() {
  }
  ;
  LytIf2.value = new LytIf2();
  return LytIf2;
}();
var LytThen = /* @__PURE__ */ function() {
  function LytThen2() {
  }
  ;
  LytThen2.value = new LytThen2();
  return LytThen2;
}();
var LytProperty = /* @__PURE__ */ function() {
  function LytProperty2() {
  }
  ;
  LytProperty2.value = new LytProperty2();
  return LytProperty2;
}();
var LytForall = /* @__PURE__ */ function() {
  function LytForall2() {
  }
  ;
  LytForall2.value = new LytForall2();
  return LytForall2;
}();
var LytTick = /* @__PURE__ */ function() {
  function LytTick2() {
  }
  ;
  LytTick2.value = new LytTick2();
  return LytTick2;
}();
var LytLet = /* @__PURE__ */ function() {
  function LytLet2() {
  }
  ;
  LytLet2.value = new LytLet2();
  return LytLet2;
}();
var LytLetStmt = /* @__PURE__ */ function() {
  function LytLetStmt2() {
  }
  ;
  LytLetStmt2.value = new LytLetStmt2();
  return LytLetStmt2;
}();
var LytWhere = /* @__PURE__ */ function() {
  function LytWhere2() {
  }
  ;
  LytWhere2.value = new LytWhere2();
  return LytWhere2;
}();
var LytOf = /* @__PURE__ */ function() {
  function LytOf2() {
  }
  ;
  LytOf2.value = new LytOf2();
  return LytOf2;
}();
var LytDo = /* @__PURE__ */ function() {
  function LytDo2() {
  }
  ;
  LytDo2.value = new LytDo2();
  return LytDo2;
}();
var LytAdo = /* @__PURE__ */ function() {
  function LytAdo2() {
  }
  ;
  LytAdo2.value = new LytAdo2();
  return LytAdo2;
}();
var lytToken = function(pos) {
  return function(value) {
    return {
      range: {
        start: pos,
        end: pos
      },
      leadingComments: [],
      trailingComments: [],
      value
    };
  };
};
var isTopDecl = function(tokPos) {
  return function(v) {
    if (v instanceof Cons && (v.value0.value1 instanceof LytWhere && (v.value1 instanceof Cons && (v.value1.value0.value1 instanceof LytRoot && (v.value1.value1 instanceof Nil && tokPos.column === v.value0.value0.column))))) {
      return true;
    }
    ;
    return false;
  };
};
var isIndented = function(v) {
  if (v instanceof LytLet) {
    return true;
  }
  ;
  if (v instanceof LytLetStmt) {
    return true;
  }
  ;
  if (v instanceof LytWhere) {
    return true;
  }
  ;
  if (v instanceof LytOf) {
    return true;
  }
  ;
  if (v instanceof LytDo) {
    return true;
  }
  ;
  if (v instanceof LytAdo) {
    return true;
  }
  ;
  return false;
};
var eqLayoutDelim = {
  eq: function(x) {
    return function(y) {
      if (x instanceof LytRoot && y instanceof LytRoot) {
        return true;
      }
      ;
      if (x instanceof LytTopDecl && y instanceof LytTopDecl) {
        return true;
      }
      ;
      if (x instanceof LytTopDeclHead && y instanceof LytTopDeclHead) {
        return true;
      }
      ;
      if (x instanceof LytDeclGuard && y instanceof LytDeclGuard) {
        return true;
      }
      ;
      if (x instanceof LytCase && y instanceof LytCase) {
        return true;
      }
      ;
      if (x instanceof LytCaseBinders && y instanceof LytCaseBinders) {
        return true;
      }
      ;
      if (x instanceof LytCaseGuard && y instanceof LytCaseGuard) {
        return true;
      }
      ;
      if (x instanceof LytLambdaBinders && y instanceof LytLambdaBinders) {
        return true;
      }
      ;
      if (x instanceof LytParen && y instanceof LytParen) {
        return true;
      }
      ;
      if (x instanceof LytBrace && y instanceof LytBrace) {
        return true;
      }
      ;
      if (x instanceof LytSquare && y instanceof LytSquare) {
        return true;
      }
      ;
      if (x instanceof LytIf && y instanceof LytIf) {
        return true;
      }
      ;
      if (x instanceof LytThen && y instanceof LytThen) {
        return true;
      }
      ;
      if (x instanceof LytProperty && y instanceof LytProperty) {
        return true;
      }
      ;
      if (x instanceof LytForall && y instanceof LytForall) {
        return true;
      }
      ;
      if (x instanceof LytTick && y instanceof LytTick) {
        return true;
      }
      ;
      if (x instanceof LytLet && y instanceof LytLet) {
        return true;
      }
      ;
      if (x instanceof LytLetStmt && y instanceof LytLetStmt) {
        return true;
      }
      ;
      if (x instanceof LytWhere && y instanceof LytWhere) {
        return true;
      }
      ;
      if (x instanceof LytOf && y instanceof LytOf) {
        return true;
      }
      ;
      if (x instanceof LytDo && y instanceof LytDo) {
        return true;
      }
      ;
      if (x instanceof LytAdo && y instanceof LytAdo) {
        return true;
      }
      ;
      return false;
    };
  }
};
var eq15 = /* @__PURE__ */ eq(eqLayoutDelim);
var insertLayout = function(v) {
  return function(nextPos) {
    return function(stack) {
      var sepP = function(lytPos) {
        return v.range.start.column === lytPos.column && v.range.start.line !== lytPos.line;
      };
      var pushStack = function(lytPos) {
        return function(lyt) {
          return function(v1) {
            return new Tuple(new Cons(new Tuple(lytPos, lyt), v1.value0), v1.value1);
          };
        };
      };
      var popStack = function(v1) {
        return function(v2) {
          if (v2.value0 instanceof Cons && v1(v2.value0.value0.value1)) {
            return new Tuple(v2.value0.value1, v2.value1);
          }
          ;
          return v2;
        };
      };
      var offsideP = function(lytPos) {
        return function(lyt) {
          return isIndented(lyt) && v.range.start.column < lytPos.column;
        };
      };
      var offsideEndP = function(lytPos) {
        return function(lyt) {
          return isIndented(lyt) && v.range.start.column <= lytPos.column;
        };
      };
      var insertToken = function(token2) {
        return function(v1) {
          return new Tuple(v1.value0, snoc(v1.value1)(new Tuple(token2, v1.value0)));
        };
      };
      var insertStart = function(lyt) {
        return function(v1) {
          var v2 = find3(function($306) {
            return isIndented(snd($306));
          })(v1.value0);
          if (v2 instanceof Just && nextPos.column <= v2.value0.value0.column) {
            return v1;
          }
          ;
          return insertToken(lytToken(nextPos)(new TokLayoutStart(nextPos.column)))(pushStack(nextPos)(lyt)(v1));
        };
      };
      var insertEnd = function(indent3) {
        return insertToken(lytToken(v.range.start)(new TokLayoutEnd(indent3)));
      };
      var indentedP = $$const(isIndented);
      var indentSepP = function(lytPos) {
        return function(lyt) {
          return isIndented(lyt) && sepP(lytPos);
        };
      };
      var insertSep = function(v1) {
        var sepTok = lytToken(v.range.start)(new TokLayoutSep(v.range.start.column));
        if (v1.value0 instanceof Cons && (v1.value0.value0.value1 instanceof LytTopDecl && sepP(v1.value0.value0.value0))) {
          return insertToken(sepTok)(new Tuple(v1.value0.value1, v1.value1));
        }
        ;
        if (v1.value0 instanceof Cons && (v1.value0.value0.value1 instanceof LytTopDeclHead && sepP(v1.value0.value0.value0))) {
          return insertToken(sepTok)(new Tuple(v1.value0.value1, v1.value1));
        }
        ;
        if (v1.value0 instanceof Cons && indentSepP(v1.value0.value0.value0)(v1.value0.value0.value1)) {
          if (v1.value0.value0.value1 instanceof LytOf) {
            return pushStack(v.range.start)(LytCaseBinders.value)(insertToken(sepTok)(v1));
          }
          ;
          return insertToken(sepTok)(v1);
        }
        ;
        return v1;
      };
      var collapse = function(p) {
        var go = function($copy_v1) {
          return function($copy_acc) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v1, acc) {
              if (v1 instanceof Cons && p(v1.value0.value0)(v1.value0.value1)) {
                $tco_var_v1 = v1.value1;
                $copy_acc = function() {
                  var $119 = isIndented(v1.value0.value1);
                  if ($119) {
                    return snoc(acc)(new Tuple(lytToken(v.range.start)(new TokLayoutEnd(v1.value0.value0.column)), v1.value1));
                  }
                  ;
                  return acc;
                }();
                return;
              }
              ;
              $tco_done = true;
              return new Tuple(v1, acc);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
            }
            ;
            return $tco_result;
          };
        };
        return uncurry(go);
      };
      var insertDefault = function(state3) {
        return insertToken(v)(insertSep(collapse(offsideP)(state3)));
      };
      var insertKwProperty = function(k) {
        return function(state3) {
          var v1 = insertDefault(state3);
          if (v1.value0 instanceof Cons && v1.value0.value0.value1 instanceof LytProperty) {
            return new Tuple(v1.value0.value1, v1.value1);
          }
          ;
          return k(v1);
        };
      };
      var insert11 = function(v1) {
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "data")) {
          var v2 = insertDefault(v1);
          if (isTopDecl(v.range.start)(v2.value0)) {
            return pushStack(v.range.start)(LytTopDecl.value)(v2);
          }
          ;
          return popStack(function(v32) {
            return eq15(v32)(LytProperty.value);
          })(v2);
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "class")) {
          var v2 = insertDefault(v1);
          if (isTopDecl(v.range.start)(v2.value0)) {
            return pushStack(v.range.start)(LytTopDeclHead.value)(v2);
          }
          ;
          return popStack(function(v32) {
            return eq15(v32)(LytProperty.value);
          })(v2);
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "where")) {
          var whereP = function(v22) {
            return function(v32) {
              if (v32 instanceof LytDo) {
                return true;
              }
              ;
              return offsideEndP(v22)(v32);
            };
          };
          if (v1.value0 instanceof Cons && v1.value0.value0.value1 instanceof LytTopDeclHead) {
            return insertStart(LytWhere.value)(insertToken(v)(new Tuple(v1.value0.value1, v1.value1)));
          }
          ;
          if (v1.value0 instanceof Cons && v1.value0.value0.value1 instanceof LytProperty) {
            return insertToken(v)(new Tuple(v1.value0.value1, v1.value1));
          }
          ;
          return insertStart(LytWhere.value)(insertToken(v)(collapse(whereP)(v1)));
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "in")) {
          var inP = function(v22) {
            return function(v32) {
              if (v32 instanceof LytLet) {
                return false;
              }
              ;
              if (v32 instanceof LytAdo) {
                return false;
              }
              ;
              return isIndented(v32);
            };
          };
          var v2 = collapse(inP)(v1);
          if (v2.value0 instanceof Cons && (v2.value0.value0.value1 instanceof LytLetStmt && (v2.value0.value1 instanceof Cons && v2.value0.value1.value0.value1 instanceof LytAdo))) {
            return insertToken(v)(insertEnd(v2.value0.value1.value0.value0.column)(insertEnd(v2.value0.value0.value0.column)(new Tuple(v2.value0.value1.value1, v2.value1))));
          }
          ;
          if (v2.value0 instanceof Cons && isIndented(v2.value0.value0.value1)) {
            return insertToken(v)(insertEnd(v2.value0.value0.value0.column)(new Tuple(v2.value0.value1, v2.value1)));
          }
          ;
          return popStack(function(v32) {
            return eq15(v32)(LytProperty.value);
          })(insertDefault(v1));
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "let")) {
          var next2 = function(v22) {
            if (v22.value0 instanceof Cons && (v22.value0.value0.value1 instanceof LytDo && v22.value0.value0.value0.column === v.range.start.column)) {
              return insertStart(LytLetStmt.value)(v22);
            }
            ;
            if (v22.value0 instanceof Cons && (v22.value0.value0.value1 instanceof LytAdo && v22.value0.value0.value0.column === v.range.start.column)) {
              return insertStart(LytLetStmt.value)(v22);
            }
            ;
            return insertStart(LytLet.value)(v22);
          };
          return insertKwProperty(next2)(v1);
        }
        ;
        if (v.value instanceof TokLowerName && v.value.value1 === "do") {
          return insertKwProperty(insertStart(LytDo.value))(v1);
        }
        ;
        if (v.value instanceof TokLowerName && v.value.value1 === "ado") {
          return insertKwProperty(insertStart(LytAdo.value))(v1);
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "case")) {
          return insertKwProperty(pushStack(v.range.start)(LytCase.value))(v1);
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "of")) {
          var v2 = collapse(indentedP)(v1);
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytCase) {
            return pushStack(nextPos)(LytCaseBinders.value)(insertStart(LytOf.value)(insertToken(v)(new Tuple(v2.value0.value1, v2.value1))));
          }
          ;
          return popStack(function(v32) {
            return eq15(v32)(LytProperty.value);
          })(insertDefault(v2));
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "if")) {
          return insertKwProperty(pushStack(v.range.start)(LytIf.value))(v1);
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "then")) {
          var v2 = collapse(indentedP)(v1);
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytIf) {
            return pushStack(v.range.start)(LytThen.value)(insertToken(v)(new Tuple(v2.value0.value1, v2.value1)));
          }
          ;
          return popStack(function(v32) {
            return eq15(v32)(LytProperty.value);
          })(insertDefault(v1));
        }
        ;
        if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "else")) {
          var v2 = collapse(indentedP)(v1);
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytThen) {
            return insertToken(v)(new Tuple(v2.value0.value1, v2.value1));
          }
          ;
          var v3 = collapse(offsideP)(v1);
          if (isTopDecl(v.range.start)(v3.value0)) {
            return insertToken(v)(v3);
          }
          ;
          return popStack(function(v4) {
            return eq15(v4)(LytProperty.value);
          })(insertToken(v)(insertSep(v3)));
        }
        ;
        if (v.value instanceof TokForall) {
          return insertKwProperty(pushStack(v.range.start)(LytForall.value))(v1);
        }
        ;
        if (v.value instanceof TokBackslash) {
          return pushStack(v.range.start)(LytLambdaBinders.value)(insertDefault(v1));
        }
        ;
        if (v.value instanceof TokRightArrow) {
          var guardP = function(v22) {
            if (v22 instanceof LytCaseBinders) {
              return true;
            }
            ;
            if (v22 instanceof LytCaseGuard) {
              return true;
            }
            ;
            if (v22 instanceof LytLambdaBinders) {
              return true;
            }
            ;
            return false;
          };
          var arrowP = function(v22) {
            return function(v32) {
              if (v32 instanceof LytDo) {
                return true;
              }
              ;
              if (v32 instanceof LytOf) {
                return false;
              }
              ;
              return offsideEndP(v22)(v32);
            };
          };
          return insertToken(v)(popStack(guardP)(collapse(arrowP)(v1)));
        }
        ;
        if (v.value instanceof TokEquals) {
          var equalsP = function(v22) {
            return function(v32) {
              if (v32 instanceof LytWhere) {
                return true;
              }
              ;
              if (v32 instanceof LytLet) {
                return true;
              }
              ;
              if (v32 instanceof LytLetStmt) {
                return true;
              }
              ;
              return false;
            };
          };
          var v2 = collapse(equalsP)(v1);
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytDeclGuard) {
            return insertToken(v)(new Tuple(v2.value0.value1, v2.value1));
          }
          ;
          return insertDefault(v1);
        }
        ;
        if (v.value instanceof TokPipe) {
          var v2 = collapse(offsideEndP)(v1);
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytOf) {
            return insertToken(v)(pushStack(v.range.start)(LytCaseGuard.value)(v2));
          }
          ;
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytLet) {
            return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
          }
          ;
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytLetStmt) {
            return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
          }
          ;
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytWhere) {
            return insertToken(v)(pushStack(v.range.start)(LytDeclGuard.value)(v2));
          }
          ;
          return insertDefault(v1);
        }
        ;
        if (v.value instanceof TokTick) {
          var v2 = collapse(indentedP)(v1);
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytTick) {
            return insertToken(v)(new Tuple(v2.value0.value1, v2.value1));
          }
          ;
          return pushStack(v.range.start)(LytTick.value)(insertToken(v)(insertSep(collapse(offsideEndP)(v1))));
        }
        ;
        if (v.value instanceof TokComma) {
          var v2 = collapse(indentedP)(v1);
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytBrace) {
            return pushStack(v.range.start)(LytProperty.value)(insertToken(v)(v2));
          }
          ;
          return insertToken(v)(v2);
        }
        ;
        if (v.value instanceof TokDot) {
          var v2 = insertDefault(v1);
          if (v2.value0 instanceof Cons && v2.value0.value0.value1 instanceof LytForall) {
            return new Tuple(v2.value0.value1, v2.value1);
          }
          ;
          return pushStack(v.range.start)(LytProperty.value)(v2);
        }
        ;
        if (v.value instanceof TokLeftParen) {
          return pushStack(v.range.start)(LytParen.value)(insertDefault(v1));
        }
        ;
        if (v.value instanceof TokLeftBrace) {
          return pushStack(v.range.start)(LytProperty.value)(pushStack(v.range.start)(LytBrace.value)(insertDefault(v1)));
        }
        ;
        if (v.value instanceof TokLeftSquare) {
          return pushStack(v.range.start)(LytSquare.value)(insertDefault(v1));
        }
        ;
        if (v.value instanceof TokRightParen) {
          return insertToken(v)(popStack(function(v22) {
            return eq15(v22)(LytParen.value);
          })(collapse(indentedP)(v1)));
        }
        ;
        if (v.value instanceof TokRightBrace) {
          return insertToken(v)(popStack(function(v22) {
            return eq15(v22)(LytBrace.value);
          })(popStack(function(v22) {
            return eq15(v22)(LytProperty.value);
          })(collapse(indentedP)(v1))));
        }
        ;
        if (v.value instanceof TokRightSquare) {
          return insertToken(v)(popStack(function(v22) {
            return eq15(v22)(LytSquare.value);
          })(collapse(indentedP)(v1)));
        }
        ;
        if (v.value instanceof TokString) {
          return popStack(function(v22) {
            return eq15(v22)(LytProperty.value);
          })(insertDefault(v1));
        }
        ;
        if (v.value instanceof TokLowerName && v.value.value0 instanceof Nothing) {
          return popStack(function(v22) {
            return eq15(v22)(LytProperty.value);
          })(insertDefault(v1));
        }
        ;
        if (v.value instanceof TokOperator) {
          return insertToken(v)(insertSep(collapse(offsideEndP)(v1)));
        }
        ;
        return insertDefault(v1);
      };
      return insert11(new Tuple(stack, []));
    };
  };
};
var currentIndent = /* @__PURE__ */ function() {
  var go = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      if (v instanceof Cons) {
        if (isIndented(v.value0.value1)) {
          $tco_done = true;
          return new Just(v.value0.value0);
        }
        ;
        if (otherwise) {
          $copy_v = v.value1;
          return;
        }
        ;
      }
      ;
      $tco_done = true;
      return Nothing.value;
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  return go;
}();

// output/PureScript.CST.TokenStream/index.js
var TokenEOF = /* @__PURE__ */ function() {
  function TokenEOF2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TokenEOF2.create = function(value0) {
    return function(value1) {
      return new TokenEOF2(value0, value1);
    };
  };
  return TokenEOF2;
}();
var TokenError = /* @__PURE__ */ function() {
  function TokenError2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  TokenError2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new TokenError2(value0, value1, value2, value3);
        };
      };
    };
  };
  return TokenError2;
}();
var TokenCons = /* @__PURE__ */ function() {
  function TokenCons2(value0, value1, value2, value3) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }
  ;
  TokenCons2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return new TokenCons2(value0, value1, value2, value3);
        };
      };
    };
  };
  return TokenCons2;
}();
var step2 = /* @__PURE__ */ function() {
  var $32 = unwrap();
  return function($33) {
    return force($32($33));
  };
}();
var unwindLayout = function(pos) {
  return function(eof2) {
    var go = function(stk) {
      return defer2(function(v) {
        if (stk instanceof Nil) {
          return step2(eof2);
        }
        ;
        if (stk instanceof Cons) {
          if (stk.value0.value1 instanceof LytRoot) {
            return step2(eof2);
          }
          ;
          if (isIndented(stk.value0.value1)) {
            return new TokenCons(lytToken(pos)(new TokLayoutEnd(stk.value0.value0.column)), pos, go(stk.value1), stk.value1);
          }
          ;
          if (otherwise) {
            return step2(go(stk.value1));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 59, column 7 - line 66, column 27): " + [stk.value0.value1.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 56, column 43 - line 66, column 27): " + [stk.constructor.name]);
      });
    };
    return go;
  };
};
var layoutStack = function(stream) {
  var v = step2(stream);
  if (v instanceof TokenEOF) {
    return Nil.value;
  }
  ;
  if (v instanceof TokenError) {
    return v.value3;
  }
  ;
  if (v instanceof TokenCons) {
    return v.value3;
  }
  ;
  throw new Error("Failed pattern match at PureScript.CST.TokenStream (line 48, column 22 - line 51, column 29): " + [v.constructor.name]);
};
var consTokens = function(dictFoldable) {
  var go = function(v) {
    return function(v1) {
      return new Tuple(v.value0.range.start, defer2(function(v2) {
        return new TokenCons(v.value0, v1.value0, v1.value1, v.value1);
      }));
    };
  };
  return flip(foldr(dictFoldable)(go));
};

// output/PureScript.CST.Lexer/index.js
var add2 = /* @__PURE__ */ add(semiringInt);
var div4 = /* @__PURE__ */ div(euclideanRingInt);
var bindFlipped7 = /* @__PURE__ */ bindFlipped(bindMaybe);
var foldMap6 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidString);
var fold3 = /* @__PURE__ */ fold(foldableMaybe)(monoidString);
var fold12 = /* @__PURE__ */ fold(foldableArray)(/* @__PURE__ */ monoidRecord()(/* @__PURE__ */ monoidRecordCons({
  reflectSymbol: function() {
    return "raw";
  }
})(monoidString)()(/* @__PURE__ */ monoidRecordCons({
  reflectSymbol: function() {
    return "string";
  }
})(monoidString)()(monoidRecordNil))));
var foldl5 = /* @__PURE__ */ foldl(foldableArray);
var consTokens2 = /* @__PURE__ */ consTokens(foldableArray);
var LexFail = /* @__PURE__ */ function() {
  function LexFail2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  LexFail2.create = function(value0) {
    return function(value1) {
      return new LexFail2(value0, value1);
    };
  };
  return LexFail2;
}();
var LexSucc = /* @__PURE__ */ function() {
  function LexSucc2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  LexSucc2.create = function(value0) {
    return function(value1) {
      return new LexSucc2(value0, value1);
    };
  };
  return LexSucc2;
}();
var Lex = function(x) {
  return x;
};
var $$try3 = function(v) {
  return function(str) {
    var v1 = v(str);
    if (v1 instanceof LexFail) {
      return new LexFail(v1.value0, str);
    }
    ;
    if (v1 instanceof LexSucc) {
      return new LexSucc(v1.value0, v1.value1);
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Lexer (line 87, column 3 - line 89, column 31): " + [v1.constructor.name]);
  };
};
var toModuleName = function(v) {
  if (v === "") {
    return Nothing.value;
  }
  ;
  return new Just(dropRight(1)(v));
};
var qualLength = /* @__PURE__ */ maybe(0)(/* @__PURE__ */ function() {
  var $292 = add2(1);
  var $293 = unwrap();
  return function($294) {
    return $292(length5($293($294)));
  };
}());
var optional2 = function(v) {
  return function(str) {
    var v1 = v(str);
    if (v1 instanceof LexFail) {
      if (length4(str) === length4(v1.value1)) {
        return new LexSucc(Nothing.value, str);
      }
      ;
      if (otherwise) {
        return new LexFail(v1.value0, v1.value1);
      }
      ;
    }
    ;
    if (v1 instanceof LexSucc) {
      return new LexSucc(new Just(v1.value0), v1.value1);
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Lexer (line 136, column 3 - line 143, column 25): " + [v1.constructor.name]);
  };
};
var mkUnexpected = function(str) {
  var start = take4(6)(str);
  var len = length5(start);
  var $131 = len === 0;
  if ($131) {
    return "end of file";
  }
  ;
  var $132 = len < 6;
  if ($132) {
    return start;
  }
  ;
  return start + "...";
};
var regex2 = function(mkErr) {
  return function(regexStr) {
    var matchRegex = unsafeRegex("^(?:" + (regexStr + ")"))(unicode);
    return function(str) {
      var v = match(matchRegex)(str);
      var v1 = function(v2) {
        return new LexFail(function(v3) {
          return mkErr(mkUnexpected(str));
        }, str);
      };
      if (v instanceof Just) {
        var $134 = head2(v.value0);
        if ($134 instanceof Just) {
          return new LexSucc($134.value0, drop3(length4($134.value0))(str));
        }
        ;
        return v1(true);
      }
      ;
      return v1(true);
    };
  };
};
var satisfy = function(mkErr) {
  return function(p) {
    return function(str) {
      var v = charAt2(0)(str);
      if (v instanceof Just && p(v.value0)) {
        return new LexSucc(v.value0, drop3(1)(str));
      }
      ;
      return new LexFail(function(v1) {
        return mkErr(mkUnexpected(str));
      }, str);
    };
  };
};
var string = function(mkErr) {
  return function(match3) {
    return function(str) {
      var $139 = take3(length4(match3))(str) === match3;
      if ($139) {
        return new LexSucc(match3, drop3(length4(match3))(str));
      }
      ;
      return new LexFail(function(v) {
        return mkErr(mkUnexpected(str));
      }, str);
    };
  };
};
var many2 = function(v) {
  return function(str) {
    return function __do() {
      var valuesRef = newSTArray();
      var strRef = str;
      var contRef = true;
      var resRef = new LexSucc([], str);
      (function() {
        while (contRef) {
          (function __do2() {
            var str$prime = strRef;
            var v1 = v(str$prime);
            if (v1 instanceof LexFail) {
              if (length4(str$prime) === length4(v1.value1)) {
                var values3 = unsafeFreeze(valuesRef)();
                resRef = new LexSucc(values3, v1.value1);
                contRef = false;
                return unit;
              }
              ;
              if (otherwise) {
                resRef = new LexFail(v1.value0, v1.value1);
                contRef = false;
                return unit;
              }
              ;
            }
            ;
            if (v1 instanceof LexSucc) {
              push(v1.value0)(valuesRef)();
              strRef = v1.value1;
              return unit;
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Lexer (line 161, column 5 - line 175, column 18): " + [v1.constructor.name]);
          })();
        }
        ;
        return {};
      })();
      return resRef;
    }();
  };
};
var functorLex = {
  map: function(f) {
    return function(v) {
      return function(str) {
        var v1 = v(str);
        if (v1 instanceof LexFail) {
          return new LexFail(v1.value0, v1.value1);
        }
        ;
        if (v1 instanceof LexSucc) {
          return new LexSucc(f(v1.value0), v1.value1);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 49, column 5 - line 51, column 37): " + [v1.constructor.name]);
      };
    };
  }
};
var map20 = /* @__PURE__ */ map(functorLex);
var spaceComment = /* @__PURE__ */ function() {
  return map20(length4)(regex2(LexExpected.create("spaces"))(" +"));
}();
var fail2 = function($295) {
  return Lex(LexFail.create($$const($295)));
};
var char$prime = function(mkErr) {
  return function(res) {
    return function(match3) {
      return function(str) {
        var $153 = singleton6(match3) === take3(1)(str);
        if ($153) {
          return new LexSucc(res, drop3(1)(str));
        }
        ;
        return new LexFail(function(v) {
          return mkErr(mkUnexpected(str));
        }, str);
      };
    };
  };
};
var $$char = function(mkErr) {
  return function(match3) {
    return function(str) {
      var $154 = singleton6(match3) === take3(1)(str);
      if ($154) {
        return new LexSucc(match3, drop3(1)(str));
      }
      ;
      return new LexFail(function(v) {
        return mkErr(mkUnexpected(str));
      }, str);
    };
  };
};
var bumpText = function(v) {
  return function(colOffset) {
    return function(str) {
      var go = function($copy_n) {
        return function($copy_ix) {
          var $tco_var_n = $copy_n;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(n, ix) {
            var v1 = indexOf$prime("\n")(ix)(str);
            if (v1 instanceof Just) {
              $tco_var_n = n + 1 | 0;
              $copy_ix = v1.value0 + 1 | 0;
              return;
            }
            ;
            if (v1 instanceof Nothing) {
              if (n === 0) {
                $tco_done = true;
                return {
                  line: v.line,
                  column: (v.column + length5(str) | 0) + (colOffset * 2 | 0) | 0
                };
              }
              ;
              if (otherwise) {
                $tco_done = true;
                return {
                  line: v.line + n | 0,
                  column: length5(drop3(ix)(str)) + colOffset | 0
                };
              }
              ;
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Lexer (line 323, column 13 - line 332, column 12): " + [v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_n, $copy_ix);
          }
          ;
          return $tco_result;
        };
      };
      return go(0)(0);
    };
  };
};
var bumpToken = function(v) {
  return function(v1) {
    if (v1 instanceof TokLeftParen) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokRightParen) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokLeftBrace) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokRightBrace) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokLeftSquare) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokRightSquare) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokLeftArrow && v1.value0 instanceof ASCII) {
      return {
        line: v.line,
        column: v.column + 2 | 0
      };
    }
    ;
    if (v1 instanceof TokLeftArrow && v1.value0 instanceof Unicode) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokRightArrow && v1.value0 instanceof ASCII) {
      return {
        line: v.line,
        column: v.column + 2 | 0
      };
    }
    ;
    if (v1 instanceof TokRightArrow && v1.value0 instanceof Unicode) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokRightFatArrow && v1.value0 instanceof ASCII) {
      return {
        line: v.line,
        column: v.column + 2 | 0
      };
    }
    ;
    if (v1 instanceof TokRightFatArrow && v1.value0 instanceof Unicode) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokDoubleColon && v1.value0 instanceof ASCII) {
      return {
        line: v.line,
        column: v.column + 2 | 0
      };
    }
    ;
    if (v1 instanceof TokDoubleColon && v1.value0 instanceof Unicode) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokForall && v1.value0 instanceof ASCII) {
      return {
        line: v.line,
        column: v.column + 6 | 0
      };
    }
    ;
    if (v1 instanceof TokForall && v1.value0 instanceof Unicode) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokEquals) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokPipe) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokTick) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokDot) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokComma) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokUnderscore) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokBackslash) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokAt) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokLowerName) {
      return {
        line: v.line,
        column: (v.column + qualLength(v1.value0) | 0) + length5(v1.value1) | 0
      };
    }
    ;
    if (v1 instanceof TokUpperName) {
      return {
        line: v.line,
        column: (v.column + qualLength(v1.value0) | 0) + length5(v1.value1) | 0
      };
    }
    ;
    if (v1 instanceof TokOperator) {
      return {
        line: v.line,
        column: (v.column + qualLength(v1.value0) | 0) + length5(v1.value1) | 0
      };
    }
    ;
    if (v1 instanceof TokSymbolName) {
      return {
        line: v.line,
        column: (v.column + qualLength(v1.value0) | 0) + length5(v1.value1) | 0
      };
    }
    ;
    if (v1 instanceof TokSymbolArrow && v1.value0 instanceof Unicode) {
      return {
        line: v.line,
        column: v.column + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokSymbolArrow && v1.value0 instanceof ASCII) {
      return {
        line: v.line,
        column: v.column + 4 | 0
      };
    }
    ;
    if (v1 instanceof TokHole) {
      return {
        line: v.line,
        column: (v.column + length5(v1.value0) | 0) + 1 | 0
      };
    }
    ;
    if (v1 instanceof TokChar) {
      return {
        line: v.line,
        column: (v.column + length5(v1.value0) | 0) + 2 | 0
      };
    }
    ;
    if (v1 instanceof TokInt) {
      return {
        line: v.line,
        column: v.column + length5(v1.value0) | 0
      };
    }
    ;
    if (v1 instanceof TokNumber) {
      return {
        line: v.line,
        column: v.column + length5(v1.value0) | 0
      };
    }
    ;
    if (v1 instanceof TokString) {
      return bumpText(v)(1)(v1.value0);
    }
    ;
    if (v1 instanceof TokRawString) {
      return bumpText(v)(3)(v1.value0);
    }
    ;
    if (v1 instanceof TokLayoutStart) {
      return v;
    }
    ;
    if (v1 instanceof TokLayoutSep) {
      return v;
    }
    ;
    if (v1 instanceof TokLayoutEnd) {
      return v;
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Lexer (line 240, column 34 - line 318, column 8): " + [v1.constructor.name]);
  };
};
var bumpComment = function(v) {
  return function(v1) {
    if (v1 instanceof Comment) {
      return bumpText(v)(0)(v1.value0);
    }
    ;
    if (v1 instanceof Space) {
      return {
        line: v.line,
        column: v.column + v1.value0 | 0
      };
    }
    ;
    if (v1 instanceof Line) {
      return {
        line: v.line + v1.value1 | 0,
        column: 0
      };
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Lexer (line 335, column 36 - line 341, column 34): " + [v1.constructor.name]);
  };
};
var applyLex = {
  apply: function(v) {
    return function(v1) {
      return function(str) {
        var v2 = v(str);
        if (v2 instanceof LexFail) {
          return new LexFail(v2.value0, v2.value1);
        }
        ;
        if (v2 instanceof LexSucc) {
          var v3 = v1(v2.value1);
          if (v3 instanceof LexFail) {
            return new LexFail(v3.value0, v3.value1);
          }
          ;
          if (v3 instanceof LexSucc) {
            return new LexSucc(v2.value0(v3.value0), v3.value1);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 58, column 9 - line 61, column 32): " + [v3.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 55, column 5 - line 61, column 32): " + [v2.constructor.name]);
      };
    };
  },
  Functor0: function() {
    return functorLex;
  }
};
var applyFirst2 = /* @__PURE__ */ applyFirst(applyLex);
var applySecond2 = /* @__PURE__ */ applySecond(applyLex);
var apply5 = /* @__PURE__ */ apply2(applyLex);
var bindLex = {
  bind: function(v) {
    return function(k) {
      return function(str) {
        var v1 = v(str);
        if (v1 instanceof LexFail) {
          return new LexFail(v1.value0, v1.value1);
        }
        ;
        if (v1 instanceof LexSucc) {
          var v2 = k(v1.value0);
          return v2(v1.value1);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 68, column 5 - line 72, column 16): " + [v1.constructor.name]);
      };
    };
  },
  Apply0: function() {
    return applyLex;
  }
};
var bind13 = /* @__PURE__ */ bind(bindLex);
var applicativeLex = {
  pure: function($296) {
    return Lex(LexSucc.create($296));
  },
  Apply0: function() {
    return applyLex;
  }
};
var pure14 = /* @__PURE__ */ pure(applicativeLex);
var altLex = {
  alt: function(v) {
    return function(v1) {
      return function(str) {
        var v2 = v(str);
        if (v2 instanceof LexFail) {
          if (length4(str) === length4(v2.value1)) {
            return v1(str);
          }
          ;
          if (otherwise) {
            return new LexFail(v2.value0, v2.value1);
          }
          ;
        }
        ;
        if (v2 instanceof LexSucc) {
          return new LexSucc(v2.value0, v2.value1);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 76, column 5 - line 83, column 20): " + [v2.constructor.name]);
      };
    };
  },
  Functor0: function() {
    return functorLex;
  }
};
var alt4 = /* @__PURE__ */ alt(altLex);
var comment = /* @__PURE__ */ function() {
  return alt4(regex2(LexExpected.create("block comment"))("\\{-(-(?!\\})|[^-]+)*(-\\}|$)"))(regex2(LexExpected.create("line comment"))("--[^\\r\\n]*"));
}();
var lineComment = /* @__PURE__ */ function() {
  return alt4(map20(function() {
    var $297 = Line.create(LF.value);
    return function($298) {
      return $297(length5($298));
    };
  }())(regex2(LexExpected.create("newline"))("\n+")))(map20(function() {
    var $299 = Line.create(CRLF.value);
    return function($300) {
      return $299(function(v) {
        return div4(v)(2);
      }(length5($300)));
    };
  }())(regex2(LexExpected.create("newline"))("(?:\r\n)+")));
}();
var leadingComments = /* @__PURE__ */ function() {
  return many2(alt4(map20(Comment.create)(comment))(alt4(map20(Space.create)(spaceComment))(lineComment)));
}();
var token = /* @__PURE__ */ function() {
  var tokenTick = char$prime(LexExpected.create("backtick"))(TokTick.value)("`");
  var tokenRightSquare = char$prime(LexExpected.create("right square"))(TokRightSquare.value)("]");
  var tokenRightParen = char$prime(LexExpected.create("right paren"))(TokRightParen.value)(")");
  var tokenRightBrace = char$prime(LexExpected.create("right brace"))(TokRightBrace.value)("}");
  var tokenLeftSquare = char$prime(LexExpected.create("left square"))(TokLeftSquare.value)("[");
  var tokenLeftParen = char$prime(LexExpected.create("left paren"))(TokLeftParen.value)("(");
  var tokenLeftBrace = char$prime(LexExpected.create("left brace"))(TokLeftBrace.value)("{");
  var tokenComma = char$prime(LexExpected.create("comma"))(TokComma.value)(",");
  var stripUnderscores = replaceAll("_")("");
  var stringSpaceEscapeRegex = regex2(LexExpected.create("whitespace escape"))("\\\\[ \\r\\n]+\\\\");
  var stringCharsRegex = regex2(LexExpected.create("string characters"))('[^"\\\\]+');
  var rawStringCharsRegex = regex2(LexExpected.create("raw string characters"))('""""{0,2}([^"]+"{1,2})*[^"]*"""');
  var parseSymbolIdent = regex2(LexExpected.create("symbol"))("(?:[:!#$%&*+./<=>?@\\\\^|~-]|(?!\\p{P})\\p{S})+");
  var parseSymbol2 = map20(function(v) {
    return function(v1) {
      if (v1 instanceof Nothing) {
        if (v === "->") {
          return new TokSymbolArrow(ASCII.value);
        }
        ;
        if (v === "\u2192") {
          return new TokSymbolArrow(Unicode.value);
        }
        ;
        return new TokSymbolName(Nothing.value, v);
      }
      ;
      return new TokSymbolName(v1, v);
    };
  })($$try3(applyFirst2(applySecond2(tokenLeftParen)(parseSymbolIdent))(tokenRightParen)));
  var parseStringSpaceEscape = map20(function(v) {
    return {
      raw: v,
      string: ""
    };
  })(stringSpaceEscapeRegex);
  var parseStringChars = map20(function(v) {
    return {
      raw: v,
      string: v
    };
  })(stringCharsRegex);
  var parseRawString = map20(function(v) {
    return new TokRawString(dropRight(3)(drop3(3)(v)));
  })(rawStringCharsRegex);
  var parseProper2 = regex2(LexExpected.create("proper name"))("\\p{Lu}[\\p{L}0-9_']*");
  var parseUpper = map20(flip(TokUpperName.create))(parseProper2);
  var parseOperator2 = map20(function(v) {
    return function(v1) {
      if (v1 instanceof Nothing) {
        if (v === "<-") {
          return new TokLeftArrow(ASCII.value);
        }
        ;
        if (v === "\u2190") {
          return new TokLeftArrow(Unicode.value);
        }
        ;
        if (v === "->") {
          return new TokRightArrow(ASCII.value);
        }
        ;
        if (v === "\u2192") {
          return new TokRightArrow(Unicode.value);
        }
        ;
        if (v === "=>") {
          return new TokRightFatArrow(ASCII.value);
        }
        ;
        if (v === "\u21D2") {
          return new TokRightFatArrow(Unicode.value);
        }
        ;
        if (v === "::") {
          return new TokDoubleColon(ASCII.value);
        }
        ;
        if (v === "\u2237") {
          return new TokDoubleColon(Unicode.value);
        }
        ;
        if (v === "\u2200") {
          return new TokForall(Unicode.value);
        }
        ;
        if (v === "=") {
          return TokEquals.value;
        }
        ;
        if (v === ".") {
          return TokDot.value;
        }
        ;
        if (v === "\\") {
          return TokBackslash.value;
        }
        ;
        if (v === "|") {
          return TokPipe.value;
        }
        ;
        if (v === "@") {
          return TokAt.value;
        }
        ;
        if (v === "`") {
          return TokTick.value;
        }
        ;
        return new TokOperator(Nothing.value, v);
      }
      ;
      return new TokOperator(v1, v);
    };
  })(parseSymbolIdent);
  var parseModuleNamePrefix = regex2(LexExpected.create("module name"))("(?:(?:\\p{Lu}[\\p{L}0-9_']*)\\.)*");
  var parseIdent2 = regex2(LexExpected.create("ident"))("[\\p{Ll}_][\\p{L}0-9_']*");
  var parseLower = map20(function(v) {
    return function(v1) {
      if (v1 instanceof Nothing) {
        if (v === "forall") {
          return new TokForall(ASCII.value);
        }
        ;
        if (v === "_") {
          return TokUnderscore.value;
        }
        ;
        return new TokLowerName(Nothing.value, v);
      }
      ;
      return new TokLowerName(v1, v);
    };
  })(parseIdent2);
  var parseName = alt4(parseLower)(alt4(parseUpper)(alt4(parseOperator2)(parseSymbol2)));
  var parseModuleName2 = apply5(map20(function(v) {
    return function(v1) {
      return v1(toModuleName(v));
    };
  })(parseModuleNamePrefix))(parseName);
  var parseExponentSign = alt4(string(LexExpected.create("negative"))("-"))(string(LexExpected.create("positive"))("+"));
  var intPartRegex = regex2(LexExpected.create("int part"))("(0|[1-9][0-9_]*)");
  var parseExponentPart = apply5(map20(function(v) {
    return function(v1) {
      return {
        sign: v,
        exponent: v1
      };
    };
  })(optional2(parseExponentSign)))(intPartRegex);
  var hexIntRegex = regex2(LexExpected.create("hex int"))("[a-fA-F0-9]+");
  var hexIntPrefix = string(LexExpected.create("hex int prefix"))("0x");
  var parseHexInt = bind13(applySecond2(hexIntPrefix)(hexIntRegex))(function(raw) {
    var v = fromStringAs(hexadecimal)(raw);
    if (v instanceof Just) {
      return pure14(new TokInt("0x" + raw, new SmallInt(v.value0)));
    }
    ;
    if (v instanceof Nothing) {
      return pure14(new TokInt("0x" + raw, new BigHex(raw)));
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Lexer (line 579, column 5 - line 583, column 49): " + [v.constructor.name]);
  });
  var hexEscapeRegex = regex2(LexExpected.create("hex"))("[a-fA-F0-9]{1,6}");
  var parseHexEscape = bind13(hexEscapeRegex)(function(esc) {
    var v = bindFlipped7(fromCharCode3)(fromStringAs(hexadecimal)(esc));
    if (v instanceof Just) {
      return pure14({
        raw: "\\x" + esc,
        "char": v.value0
      });
    }
    ;
    if (v instanceof Nothing) {
      return fail2(new LexCharEscapeOutOfRange(esc));
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Lexer (line 527, column 5 - line 531, column 43): " + [v.constructor.name]);
  });
  var fractionPartRegex = regex2(LexExpected.create("fraction part"))("[0-9_]+");
  var charSingleQuote = $$char(LexExpected.create("single quote"))("'");
  var charQuote = $$char(LexExpected.create("quote"))('"');
  var charQuestionMark = $$char(LexExpected.create("question mark"))("?");
  var parseHole2 = map20(function(v) {
    return new TokHole(v);
  })($$try3(applySecond2(charQuestionMark)(alt4(parseIdent2)(parseProper2))));
  var charExponent = $$char(LexExpected.create("exponent"))("e");
  var parseNumberExponentPart = optional2(applySecond2(charExponent)(parseExponentPart));
  var charDot = $$char(LexExpected.create("dot"))(".");
  var parseNumberFractionPart = optional2($$try3(applySecond2(charDot)(fractionPartRegex)));
  var parseNumber2 = bind13(intPartRegex)(function(intPart) {
    return bind13(parseNumberFractionPart)(function(fractionPart) {
      return bind13(parseNumberExponentPart)(function(exponentPart) {
        var $255 = isNothing(fractionPart) && isNothing(exponentPart);
        if ($255) {
          var intVal = stripUnderscores(intPart);
          var v = fromString2(intVal);
          if (v instanceof Just) {
            return pure14(new TokInt(intPart, new SmallInt(v.value0)));
          }
          ;
          if (v instanceof Nothing) {
            return pure14(new TokInt(intPart, new BigInt(intVal)));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 591, column 7 - line 595, column 48): " + [v.constructor.name]);
        }
        ;
        var raw = intPart + (foldMap6(function(fr) {
          return "." + fr;
        })(fractionPart) + foldMap6(function(ex) {
          return "e" + (fold3(ex.sign) + ex.exponent);
        })(exponentPart));
        var v = fromString(stripUnderscores(raw));
        if (v instanceof Just) {
          return pure14(new TokNumber(raw, v.value0));
        }
        ;
        if (v instanceof Nothing) {
          return fail2(new LexNumberOutOfRange(raw));
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Lexer (line 602, column 7 - line 606, column 41): " + [v.constructor.name]);
      });
    });
  });
  var parseNumericLiteral = alt4(parseHexInt)(parseNumber2);
  var charBackslash = $$char(LexExpected.create("backslash"))("\\");
  var charAny = satisfy(LexExpected.create("char"))($$const(true));
  var parseEscape = bind13(charAny)(function(ch) {
    if (ch === "t") {
      return pure14({
        raw: "\\t",
        "char": "	"
      });
    }
    ;
    if (ch === "r") {
      return pure14({
        raw: "\\r",
        "char": "\r"
      });
    }
    ;
    if (ch === "n") {
      return pure14({
        raw: "\\n",
        "char": "\n"
      });
    }
    ;
    if (ch === '"') {
      return pure14({
        raw: '\\"',
        "char": '"'
      });
    }
    ;
    if (ch === "'") {
      return pure14({
        raw: "\\'",
        "char": "'"
      });
    }
    ;
    if (ch === "\\") {
      return pure14({
        raw: "\\\\",
        "char": "\\"
      });
    }
    ;
    if (ch === "x") {
      return parseHexEscape;
    }
    ;
    return fail2(new LexInvalidCharEscape(singleton6(ch)));
  });
  var parseChar2 = bind13(charAny)(function(ch) {
    if (ch === "\\") {
      return parseEscape;
    }
    ;
    if (ch === "'") {
      return fail2(new LexExpected("character", "empty character literal"));
    }
    ;
    return pure14({
      raw: singleton6(ch),
      "char": ch
    });
  });
  var parseCharLiteral = map20(function(v) {
    return new TokChar(v.raw, v["char"]);
  })(applyFirst2(applySecond2(charSingleQuote)(parseChar2))(charSingleQuote));
  var parseStringEscape = map20(function(v) {
    return {
      raw: v.raw,
      string: singleton6(v["char"])
    };
  })(applySecond2(charBackslash)(parseEscape));
  var parseStringPart = alt4(parseStringChars)(alt4(parseStringSpaceEscape)(parseStringEscape));
  var parseString2 = map20(function(v) {
    var v1 = fold12(v);
    return new TokString(v1.raw, v1.string);
  })(applyFirst2(applySecond2(charQuote)(many2(parseStringPart)))(charQuote));
  var parseStringLiteral = alt4(parseRawString)(parseString2);
  return alt4(parseHole2)(alt4(parseModuleName2)(alt4(parseCharLiteral)(alt4(parseStringLiteral)(alt4(parseNumericLiteral)(alt4(tokenLeftParen)(alt4(tokenRightParen)(alt4(tokenLeftBrace)(alt4(tokenRightBrace)(alt4(tokenLeftSquare)(alt4(tokenRightSquare)(alt4(tokenTick)(tokenComma))))))))))));
}();
var trailingComments = /* @__PURE__ */ function() {
  return many2(alt4(map20(Comment.create)(comment))(map20(Space.create)(spaceComment)));
}();
var lexWithState = /* @__PURE__ */ function() {
  var token$prime = apply5(apply5(map20(function(v) {
    return function(v1) {
      return function(v2) {
        return {
          token: v,
          trailing: v1,
          nextLeading: v2
        };
      };
    };
  })(token))(trailingComments))(leadingComments);
  var go = function(stack) {
    return function(startPos) {
      return function(leading) {
        return function(str) {
          return defer2(function(v) {
            var $276 = str === "";
            if ($276) {
              return step2(unwindLayout(startPos)(defer2(function(v12) {
                return new TokenEOF(startPos, leading);
              }))(stack));
            }
            ;
            var v1 = token$prime(str);
            if (v1 instanceof LexFail) {
              var errPos = bumpText(startPos)(0)(take3(length4(str) - length4(v1.value1) | 0)(str));
              return new TokenError(errPos, v1.value0(unit), Nothing.value, stack);
            }
            ;
            if (v1 instanceof LexSucc) {
              var endPos = bumpToken(startPos)(v1.value0.token);
              var nextStart = foldl5(bumpComment)(foldl5(bumpComment)(endPos)(v1.value0.trailing))(v1.value0.nextLeading);
              var posToken = {
                range: {
                  start: startPos,
                  end: endPos
                },
                leadingComments: leading,
                trailingComments: v1.value0.trailing,
                value: v1.value0.token
              };
              var v2 = insertLayout(posToken)(nextStart)(stack);
              return step2(snd(consTokens2(v2.value1)(new Tuple(nextStart, go(v2.value0)(nextStart)(v1.value0.nextLeading)(v1.value1)))));
            }
            ;
            throw new Error("Failed pattern match at PureScript.CST.Lexer (line 203, column 7 - line 222, column 63): " + [v1.constructor.name]);
          });
        };
      };
    };
  };
  var init3 = function(initStack) {
    return function(initPos) {
      return function(str) {
        return defer2(function(v) {
          var v1 = leadingComments(str);
          if (v1 instanceof LexFail) {
            return unsafeCrashWith("Leading comments can't fail.");
          }
          ;
          if (v1 instanceof LexSucc) {
            var nextPos = foldl5(bumpComment)(initPos)(v1.value0);
            return step2(go(initStack)(nextPos)(v1.value0)(v1.value1));
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Lexer (line 190, column 5 - line 195, column 51): " + [v1.constructor.name]);
        });
      };
    };
  };
  return init3;
}();
var lex = /* @__PURE__ */ function() {
  return lexWithState(new Cons(new Tuple({
    line: 0,
    column: 0
  }, LytRoot.value), Nil.value))({
    line: 0,
    column: 0
  });
}();

// output/PureScript.CST.Parser.Monad/index.js
var $runtime_lazy5 = function(name2, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var toUnfoldable5 = /* @__PURE__ */ toUnfoldable2(unfoldableArray);
var More = /* @__PURE__ */ function() {
  function More2(value0) {
    this.value0 = value0;
  }
  ;
  More2.create = function(value0) {
    return new More2(value0);
  };
  return More2;
}();
var Done2 = /* @__PURE__ */ function() {
  function Done3(value0) {
    this.value0 = value0;
  }
  ;
  Done3.create = function(value0) {
    return new Done3(value0);
  };
  return Done3;
}();
var ParseFail = /* @__PURE__ */ function() {
  function ParseFail2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ParseFail2.create = function(value0) {
    return function(value1) {
      return new ParseFail2(value0, value1);
    };
  };
  return ParseFail2;
}();
var ParseSucc = /* @__PURE__ */ function() {
  function ParseSucc2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ParseSucc2.create = function(value0) {
    return function(value1) {
      return new ParseSucc2(value0, value1);
    };
  };
  return ParseSucc2;
}();
var lazyParser = {
  defer: function(k) {
    var parser2 = defer2(k);
    return function(state3, more, resume2, done) {
      var v = force(parser2);
      return v(state3, more, resume2, done);
    };
  }
};
var functorParser = {
  map: function(f) {
    return function(v) {
      return function(state1, more, resume2, done) {
        return v(state1, more, resume2, function(state22, a) {
          return done(state22, f(a));
        });
      };
    };
  }
};
var map21 = /* @__PURE__ */ map(functorParser);
var applyParser2 = {
  apply: function(v) {
    return function(v1) {
      return function(state1, more, resume2, done) {
        return v(state1, more, resume2, function(state22, f) {
          return more(function(v2) {
            return v1(state22, more, resume2, function(state3, a) {
              return done(state3, f(a));
            });
          });
        });
      };
    };
  },
  Functor0: function() {
    return functorParser;
  }
};
var bindParser = {
  bind: function(v) {
    return function(k) {
      return function(state1, more, resume2, done) {
        return v(state1, more, resume2, function(state22, a) {
          return more(function(v1) {
            var v2 = k(a);
            return v2(state22, more, resume2, done);
          });
        });
      };
    };
  },
  Apply0: function() {
    return applyParser2;
  }
};
var applicativeParser = {
  pure: function(a) {
    return function(state1, v, v1, done) {
      return done(state1, a);
    };
  },
  Apply0: function() {
    return applyParser2;
  }
};
var pure10 = /* @__PURE__ */ pure(applicativeParser);
var altParser = {
  alt: function(v) {
    return function(v1) {
      return function(state1, more, resume2, done) {
        var state22 = function() {
          if (state1.consumed) {
            return {
              consumed: false,
              errors: state1.errors,
              stream: state1.stream
            };
          }
          ;
          return state1;
        }();
        return v(state22, more, function(state3, error5) {
          if (state3.consumed) {
            return resume2(state3, error5);
          }
          ;
          return v1(state1, more, resume2, done);
        }, done);
      };
    };
  },
  Functor0: function() {
    return functorParser;
  }
};
var alt5 = /* @__PURE__ */ alt(altParser);
var $$try4 = function(v) {
  return function(state1, more, resume2, done) {
    return v(state1, more, function(state22, error5) {
      return resume2({
        consumed: state1.consumed,
        errors: state22.errors,
        stream: state22.stream
      }, error5);
    }, done);
  };
};
var take5 = function(k) {
  return function(state3, v, resume2, done) {
    var v1 = step2(state3.stream);
    if (v1 instanceof TokenError) {
      return resume2(state3, {
        error: v1.value1,
        position: v1.value0
      });
    }
    ;
    if (v1 instanceof TokenEOF) {
      return resume2(state3, {
        error: UnexpectedEof.value,
        position: v1.value0
      });
    }
    ;
    if (v1 instanceof TokenCons) {
      var v2 = k(v1.value0);
      if (v2 instanceof Left) {
        return resume2(state3, {
          error: v2.value0,
          position: v1.value0.range.start
        });
      }
      ;
      if (v2 instanceof Right) {
        return done({
          consumed: true,
          stream: v1.value2,
          errors: state3.errors
        }, v2.value0);
      }
      ;
      throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 172, column 11 - line 182, column 18): " + [v2.constructor.name]);
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 166, column 7 - line 182, column 18): " + [v1.constructor.name]);
  };
};
var runParser$prime = function(state1) {
  return function(v) {
    var run3 = function($copy_v1) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v1) {
        if (v1 instanceof More) {
          $copy_v1 = v1.value0(unit);
          return;
        }
        ;
        if (v1 instanceof Done2) {
          $tco_done = true;
          return v1.value0;
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 241, column 9 - line 243, column 16): " + [v1.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v1);
      }
      ;
      return $tco_result;
    };
    return run3(v(state1, More.create, function(state22, error5) {
      return new Done2(new ParseFail(error5, state22));
    }, function(state22, value) {
      return new Done2(new ParseSucc(value, state22));
    }));
  };
};
var recover = function(k) {
  return function(v) {
    return function(state1, more, resume2, done) {
      return v({
        consumed: false,
        errors: state1.errors,
        stream: state1.stream
      }, more, function(state22, error5) {
        var v1 = k(error5)(state1.stream);
        if (v1 instanceof Nothing) {
          return resume2({
            consumed: state1.consumed,
            errors: state22.errors,
            stream: state22.stream
          }, error5);
        }
        ;
        if (v1 instanceof Just) {
          return done({
            consumed: true,
            errors: snoc(state22.errors)(error5),
            stream: v1.value0.value1
          }, v1.value0.value0);
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 149, column 13 - line 158, column 20): " + [v1.constructor.name]);
      }, done);
    };
  };
};
var optional3 = function(p) {
  return alt5(map21(Just.create)(p))(pure10(Nothing.value));
};
var many3 = function(v) {
  return function(state1, more, resume2, done) {
    var $lazy_go = $runtime_lazy5("go", "PureScript.CST.Parser.Monad", function() {
      return function(acc, state22) {
        var state2$prime = function() {
          if (state22.consumed) {
            return {
              consumed: false,
              errors: state22.errors,
              stream: state22.stream
            };
          }
          ;
          return state22;
        }();
        return v(state2$prime, more, function(state3, error5) {
          if (state3.consumed) {
            return resume2(state3, error5);
          }
          ;
          return done(state22, reverse(toUnfoldable5(acc)));
        }, function(state3, value) {
          return $lazy_go(225)(new Cons(value, acc), state3);
        });
      };
    });
    var go = $lazy_go(212);
    return go(Nil.value, state1);
  };
};
var lookAhead = function(v) {
  return function(state1, more, resume2, done) {
    return v(state1, more, function(v1, error5) {
      return resume2(state1, error5);
    }, function(v1, value) {
      return done(state1, value);
    });
  };
};
var initialParserState = function(stream) {
  return {
    consumed: false,
    errors: [],
    stream
  };
};
var fromParserResult = function(v) {
  if (v instanceof ParseFail) {
    return new Left(v.value0);
  }
  ;
  if (v instanceof ParseSucc) {
    return new Right(new Tuple(v.value0, v.value1.errors));
  }
  ;
  throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 253, column 20 - line 257, column 29): " + [v.constructor.name]);
};
var runParser = function(stream) {
  var $109 = runParser$prime(initialParserState(stream));
  return function($110) {
    return fromParserResult($109($110));
  };
};
var eof = function(state3, v, resume2, done) {
  var v1 = step2(state3.stream);
  if (v1 instanceof TokenError) {
    return resume2(state3, {
      error: v1.value1,
      position: v1.value0
    });
  }
  ;
  if (v1 instanceof TokenEOF) {
    return done({
      consumed: true,
      stream: state3.stream,
      errors: state3.errors
    }, new Tuple(v1.value0, v1.value1));
  }
  ;
  if (v1 instanceof TokenCons) {
    return resume2(state3, {
      error: new ExpectedEof(v1.value0.value),
      position: v1.value0.range.start
    });
  }
  ;
  throw new Error("Failed pattern match at PureScript.CST.Parser.Monad (line 188, column 7 - line 197, column 14): " + [v1.constructor.name]);
};

// output/PureScript.CST.Parser/index.js
var $runtime_lazy6 = function(name2, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var bind6 = /* @__PURE__ */ bind(bindParser);
var pure11 = /* @__PURE__ */ pure(applicativeParser);
var apply6 = /* @__PURE__ */ apply2(applyParser2);
var map25 = /* @__PURE__ */ map(functorParser);
var member3 = /* @__PURE__ */ member2(ordString);
var alt6 = /* @__PURE__ */ alt(altParser);
var applyFirst3 = /* @__PURE__ */ applyFirst(applyParser2);
var applySecond3 = /* @__PURE__ */ applySecond(applyParser2);
var bindFlipped8 = /* @__PURE__ */ bindFlipped(bindParser);
var defer4 = /* @__PURE__ */ defer(lazyParser);
var wrapped = function(openTok) {
  return function(closeTok) {
    return function(valueParser) {
      return bind6(openTok)(function(open2) {
        return bind6(valueParser)(function(value) {
          return bind6(closeTok)(function(close2) {
            return pure11({
              open: open2,
              value,
              close: close2
            });
          });
        });
      });
    };
  };
};
var separated = function(sepParser) {
  return function(valueParser) {
    return apply6(map25(function(v) {
      return function(v1) {
        return {
          head: v,
          tail: v1
        };
      };
    })(valueParser))(many3(apply6(map25(Tuple.create)(sepParser))(valueParser)));
  };
};
var reservedKeywords = /* @__PURE__ */ fromFoldable6(foldableArray)(ordString)(["ado", "case", "class", "data", "derive", "do", "else", "false", "foreign", "if", "import", "in", "infix", "infixl", "infixr", "instance", "let", "module", "newtype", "of", "then", "true", "type", "where"]);
var recoverTokensWhile = function(p) {
  return function(initStream) {
    var indent3 = maybe(0)(function(v) {
      return v.column;
    })(currentIndent(layoutStack(initStream)));
    var go = function($copy_acc) {
      return function($copy_stream) {
        var $tco_var_acc = $copy_acc;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(acc, stream) {
          var v = step2(stream);
          if (v instanceof TokenError) {
            $tco_done = true;
            return new Tuple(acc, stream);
          }
          ;
          if (v instanceof TokenEOF) {
            $tco_done = true;
            return new Tuple(acc, stream);
          }
          ;
          if (v instanceof TokenCons) {
            var $132 = p(v.value0)(indent3);
            if ($132) {
              $tco_var_acc = snoc(acc)(v.value0);
              $copy_stream = v.value2;
              return;
            }
            ;
            $tco_done = true;
            return new Tuple(acc, stream);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 1175, column 19 - line 1184, column 25): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_acc, $copy_stream);
        }
        ;
        return $tco_result;
      };
    };
    return go([])(initStream);
  };
};
var recoverIndent = function(mkNode) {
  return recover(function(v) {
    return function(stream) {
      var v1 = recoverTokensWhile(function(tok) {
        return function(indent3) {
          if (tok.value instanceof TokLayoutEnd) {
            return tok.value.value0 > indent3;
          }
          ;
          if (tok.value instanceof TokLayoutSep) {
            return tok.value.value0 > indent3;
          }
          ;
          return true;
        };
      })(stream);
      var $142 = $$null(v1.value0);
      if ($142) {
        return Nothing.value;
      }
      ;
      return new Just(new Tuple(mkNode({
        position: v.position,
        error: v.error,
        tokens: v1.value0
      }), v1.value1));
    };
  });
};
var recoverLetBinding = /* @__PURE__ */ function() {
  return recoverIndent(LetBindingError.create);
}();
var recoverDoStatement = /* @__PURE__ */ function() {
  return recoverIndent(DoError.create);
}();
var recoverDecl = /* @__PURE__ */ function() {
  return recoverIndent(DeclError.create);
}();
var parseSmallInt = /* @__PURE__ */ take5(function(v) {
  if (v.value instanceof TokInt && v.value.value1 instanceof SmallInt) {
    return new Right(new Tuple(v, v.value.value1.value0));
  }
  ;
  if (v.value instanceof TokInt) {
    return new Left(new LexIntOutOfRange(v.value.value0));
  }
  ;
  return new Left(new UnexpectedToken(v.value));
});
var many12 = function(parser2) {
  return apply6(map25(cons$prime)(parser2))(many3(parser2));
};
var expectMap = function(k) {
  return take5(function(tok) {
    var v = k(tok);
    if (v instanceof Just) {
      return new Right(v.value0);
    }
    ;
    if (v instanceof Nothing) {
      return new Left(new UnexpectedToken(tok.value));
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.Parser (line 46, column 3 - line 50, column 39): " + [v.constructor.name]);
  });
};
var parseBoolean = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "true")) {
    return new Just(new Tuple(v, true));
  }
  ;
  if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && v.value.value1 === "false")) {
    return new Just(new Tuple(v, false));
  }
  ;
  return Nothing.value;
});
var parseChar = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokChar) {
    return new Just(new Tuple(v, v.value.value1));
  }
  ;
  return Nothing.value;
});
var parseHole = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokHole) {
    return new Just({
      token: v,
      name: v.value.value0
    });
  }
  ;
  return Nothing.value;
});
var parseIdent = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokLowerName && (v.value.value0 instanceof Nothing && !member3(v.value.value1)(reservedKeywords))) {
    return new Just({
      token: v,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var $$parseInt = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokInt) {
    return new Just(new Tuple(v, v.value.value1));
  }
  ;
  return Nothing.value;
});
var parseLabel = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokRawString) {
    return new Just({
      token: v,
      name: v.value.value0
    });
  }
  ;
  if (v.value instanceof TokString) {
    return new Just({
      token: v,
      name: v.value.value1
    });
  }
  ;
  if (v.value instanceof TokLowerName && v.value.value0 instanceof Nothing) {
    return new Just({
      token: v,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var parseModuleName = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokUpperName && v.value.value0 instanceof Just) {
    return new Just({
      token: v,
      name: v.value.value0.value0 + ("." + v.value.value1)
    });
  }
  ;
  if (v.value instanceof TokUpperName && v.value.value0 instanceof Nothing) {
    return new Just({
      token: v,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var parseNumber = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokNumber) {
    return new Just(new Tuple(v, v.value.value1));
  }
  ;
  return Nothing.value;
});
var parseOperator = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokOperator && v.value.value0 instanceof Nothing) {
    return new Just({
      token: v,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var parseProper = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokUpperName && v.value.value0 instanceof Nothing) {
    return new Just({
      token: v,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var parseQualifiedIdent = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokLowerName && !member3(v.value.value1)(reservedKeywords)) {
    return new Just({
      token: v,
      module: v.value.value0,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var parseQualifiedIdentOrProper = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokLowerName) {
    return new Just({
      token: v,
      module: v.value.value0,
      name: new Left(v.value.value1)
    });
  }
  ;
  if (v.value instanceof TokUpperName) {
    return new Just({
      token: v,
      module: v.value.value0,
      name: new Right(v.value.value1)
    });
  }
  ;
  return Nothing.value;
});
var parseQualifiedOperator = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokOperator) {
    return new Just({
      token: v,
      module: v.value.value0,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var parseQualifiedProper = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokUpperName) {
    return new Just({
      token: v,
      module: v.value.value0,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var parseQualifiedSymbol = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokSymbolName) {
    return new Just({
      token: v,
      module: v.value.value0,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var parseString = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokString) {
    return new Just(new Tuple(v, v.value.value1));
  }
  ;
  if (v.value instanceof TokRawString) {
    return new Just(new Tuple(v, v.value.value0));
  }
  ;
  return Nothing.value;
});
var parseSymbol = /* @__PURE__ */ expectMap(function(v) {
  if (v.value instanceof TokSymbolName && v.value.value0 instanceof Nothing) {
    return new Just({
      token: v,
      name: v.value.value1
    });
  }
  ;
  return Nothing.value;
});
var expect = function(pred2) {
  return expectMap(function(tok) {
    var $241 = pred2(tok.value);
    if ($241) {
      return new Just(tok);
    }
    ;
    return Nothing.value;
  });
};
var tokAt = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokAt) {
    return true;
  }
  ;
  return false;
});
var tokBackslash = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokBackslash) {
    return true;
  }
  ;
  return false;
});
var tokComma = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokComma) {
    return true;
  }
  ;
  return false;
});
var tokDot = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokDot) {
    return true;
  }
  ;
  return false;
});
var parseRecordAccessor = function(expr) {
  return bind6(tokDot)(function(dot) {
    return bind6(separated(tokDot)(parseLabel))(function(path2) {
      return pure11(new ExprRecordAccessor({
        expr,
        dot,
        path: path2
      }));
    });
  });
};
var tokDoubleColon = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokDoubleColon) {
    return true;
  }
  ;
  return false;
});
var parseInstanceName = /* @__PURE__ */ function() {
  return apply6(map25(Tuple.create)(parseIdent))(tokDoubleColon);
}();
var tokEquals = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokEquals) {
    return true;
  }
  ;
  return false;
});
var tokForall = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokForall) {
    return true;
  }
  ;
  return false;
});
var tokKeyOperator = function(sym) {
  return expect(function(v) {
    if (v instanceof TokOperator && v.value0 instanceof Nothing) {
      return sym === v.value1;
    }
    ;
    return false;
  });
};
var parseBinderNegative = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyOperator("-"))(function(negative) {
  return alt6(map25(uncurry(BinderInt.create(new Just(negative))))($$parseInt))(map25(uncurry(BinderNumber.create(new Just(negative))))(parseNumber));
});
var parseRecordLabeled = function(valueParser) {
  var parseRecordField = apply6(map25(uncurry(RecordField.create))($$try4(apply6(map25(Tuple.create)(parseLabel))(tokKeyOperator(":")))))(valueParser);
  return alt6(parseRecordField)(map25(RecordPun.create)(parseIdent));
};
var parseTypeNegative = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyOperator("-"))(function(negative) {
  return map25(uncurry(TypeInt.create(new Just(negative))))($$parseInt);
});
var tokKeySymbol = function(sym) {
  return expect(function(v) {
    if (v instanceof TokSymbolName && v.value0 instanceof Nothing) {
      return sym === v.value1;
    }
    ;
    return false;
  });
};
var tokKeyword = function(kw) {
  return expect(function(v) {
    if (v instanceof TokLowerName && v.value0 instanceof Nothing) {
      return kw === v.value1;
    }
    ;
    return false;
  });
};
var parseFixityKeyword = /* @__PURE__ */ function() {
  return alt6(map25(flip(Tuple.create)(Infix.value))(tokKeyword("infix")))(alt6(map25(flip(Tuple.create)(Infixl.value))(tokKeyword("infixl")))(map25(flip(Tuple.create)(Infixr.value))(tokKeyword("infixr"))));
}();
var parseFixityOp = /* @__PURE__ */ function() {
  return alt6(apply6(apply6(apply6(map25(FixityType.create)(tokKeyword("type")))(parseQualifiedProper))(tokKeyword("as")))(parseOperator))(apply6(apply6(map25(FixityValue.create)(parseQualifiedIdentOrProper))(tokKeyword("as")))(parseOperator));
}();
var parseDeclFixity = /* @__PURE__ */ bind6(parseFixityKeyword)(function(keyword) {
  return bind6(parseSmallInt)(function(prec) {
    return bind6(parseFixityOp)(function(operator) {
      return pure11(new DeclFixity({
        keyword,
        prec,
        operator
      }));
    });
  });
});
var parseForeignKind = /* @__PURE__ */ function() {
  return $$try4(apply6(map25(ForeignKind.create)(tokKeyword("kind")))(parseProper));
}();
var parseRole = /* @__PURE__ */ function() {
  return alt6(map25(flip(Tuple.create)(Representational.value))(tokKeyword("representational")))(alt6(map25(flip(Tuple.create)(Nominal.value))(tokKeyword("nominal")))(map25(flip(Tuple.create)(Phantom.value))(tokKeyword("phantom"))));
}();
var parseDeclRole = function(keyword1) {
  return bind6(tokKeyword("role"))(function(keyword2) {
    return bind6(parseProper)(function(name2) {
      return bind6(many12(parseRole))(function(roles) {
        return pure11(new DeclRole(keyword1, keyword2, name2, roles));
      });
    });
  });
};
var tokLayoutEnd = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokLayoutEnd) {
    return true;
  }
  ;
  return false;
});
var tokLayoutSep = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokLayoutSep) {
    return true;
  }
  ;
  return false;
});
var parseInstanceChainSeparator = /* @__PURE__ */ applyFirst3(/* @__PURE__ */ tokKeyword("else"))(/* @__PURE__ */ optional3(tokLayoutSep));
var tokLayoutStart = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokLayoutStart) {
    return true;
  }
  ;
  return false;
});
var layout = function(valueParser) {
  var tail4 = many3(applySecond3(tokLayoutSep)(valueParser));
  var go = function(head5) {
    return map25(cons2(head5))(tail4);
  };
  var values3 = alt6(bindFlipped8(go)(valueParser))(pure11([]));
  return applyFirst3(applySecond3(tokLayoutStart)(values3))(tokLayoutEnd);
};
var layoutNonEmpty = function(valueParser) {
  return apply6(map25(function(v) {
    return function(v1) {
      return cons$prime(v)(v1);
    };
  })(applySecond3(tokLayoutStart)(valueParser)))(applyFirst3(many3(applySecond3(tokLayoutSep)(valueParser)))(tokLayoutEnd));
};
var tokLeftArrow = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokLeftArrow) {
    return true;
  }
  ;
  return false;
});
var tokLeftBrace = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokLeftBrace) {
    return true;
  }
  ;
  return false;
});
var tokLeftFatArrow = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokOperator && v.value0 instanceof Nothing) {
    return v.value1 === "<=" || v.value1 === "\u21D0";
  }
  ;
  return false;
});
var tokLeftParen = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokLeftParen) {
    return true;
  }
  ;
  return false;
});
var tokLeftSquare = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokLeftSquare) {
    return true;
  }
  ;
  return false;
});
var tokPipe = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokPipe) {
    return true;
  }
  ;
  return false;
});
var tokQualifiedKeyword = function(kw) {
  return expect(function(v) {
    if (v instanceof TokLowerName) {
      return kw === v.value1;
    }
    ;
    return false;
  });
};
var tokRightArrow = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokRightArrow) {
    return true;
  }
  ;
  return false;
});
var parseFundep = /* @__PURE__ */ function() {
  return alt6(apply6(map25(FundepDetermined.create)(tokRightArrow))(many12(parseIdent)))(apply6(apply6(map25(FundepDetermines.create)(many12(parseIdent)))(tokRightArrow))(many12(parseIdent)));
}();
var tokRightBrace = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokRightBrace) {
    return true;
  }
  ;
  return false;
});
var tokRightFatArrow = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokRightFatArrow) {
    return true;
  }
  ;
  return false;
});
var tokRightParen = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokRightParen) {
    return true;
  }
  ;
  return false;
});
var parens = /* @__PURE__ */ wrapped(tokLeftParen)(tokRightParen);
var parseEmptyRow = function(open2) {
  return bind6(tokRightParen)(function(close2) {
    return pure11(new TypeRow({
      open: open2,
      value: {
        labels: Nothing.value,
        tail: Nothing.value
      },
      close: close2
    }));
  });
};
var tokRightSquare = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokRightSquare) {
    return true;
  }
  ;
  return false;
});
var tokSymbolArrow = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokSymbolArrow) {
    return true;
  }
  ;
  return false;
});
var tokTick = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokTick) {
    return true;
  }
  ;
  return false;
});
var tokUnderscore = /* @__PURE__ */ expect(function(v) {
  if (v instanceof TokUnderscore) {
    return true;
  }
  ;
  return false;
});
var delimited = function(openTok) {
  return function(closeTok) {
    return function(sepTok) {
      return function(valueParser) {
        var parseNonEmpty = function(open2) {
          return apply6(map25(function(v) {
            return function(v1) {
              return {
                open: open2,
                value: new Just(v),
                close: v1
              };
            };
          })(separated(sepTok)(valueParser)))(closeTok);
        };
        var parseEmpty = function(open2) {
          return map25(function(v) {
            return {
              open: open2,
              value: Nothing.value,
              close: v
            };
          })(closeTok);
        };
        return bind6(openTok)(function(open2) {
          return alt6(parseEmpty(open2))(parseNonEmpty(open2));
        });
      };
    };
  };
};
var parseDataMembers = /* @__PURE__ */ function() {
  return alt6(map25(DataAll.create)(tokKeySymbol("..")))(map25(DataEnumerated.create)(delimited(tokLeftParen)(tokRightParen)(tokComma)(parseProper)));
}();
var parseExport = /* @__PURE__ */ function() {
  return alt6(apply6(map25(ExportTypeOp.create)(tokKeyword("type")))(parseSymbol))(alt6(apply6(map25(ExportClass.create)(tokKeyword("class")))(parseProper))(alt6(apply6(map25(ExportModule.create)(tokKeyword("module")))(parseModuleName))(alt6(map25(ExportOp.create)(parseSymbol))(alt6(map25(ExportValue.create)(parseIdent))(apply6(map25(ExportType.create)(parseProper))(optional3(parseDataMembers)))))));
}();
var parseImport = /* @__PURE__ */ function() {
  return alt6(map25(ImportOp.create)(parseSymbol))(alt6(apply6(map25(ImportType.create)(parseProper))(optional3(parseDataMembers)))(alt6(apply6(map25(ImportTypeOp.create)(tokKeyword("type")))(parseSymbol))(alt6(apply6(map25(ImportClass.create)(tokKeyword("class")))(parseProper))(map25(ImportValue.create)(parseIdent)))));
}();
var parseImportDecl = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("import"))(function(keyword) {
  return bind6(parseModuleName)(function(module_) {
    return bind6(optional3(apply6(map25(Tuple.create)(optional3(tokKeyword("hiding"))))(parens(separated(tokComma)(parseImport)))))(function(names) {
      return bind6(optional3(apply6(map25(Tuple.create)(tokKeyword("as")))(parseModuleName)))(function(qualified) {
        return pure11({
          keyword,
          module: module_,
          names,
          qualified
        });
      });
    });
  });
});
var parseModuleImportDecls = /* @__PURE__ */ many3(/* @__PURE__ */ applyFirst3(parseImportDecl)(/* @__PURE__ */ alt6(tokLayoutSep)(/* @__PURE__ */ lookAhead(tokLayoutEnd))));
var parseModuleHeader = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("module"))(function(keyword) {
  return bind6(parseModuleName)(function(name2) {
    return bind6(optional3(parens(separated(tokComma)(parseExport))))(function(exports) {
      return bind6(tokKeyword("where"))(function(where_) {
        return bind6(applySecond3(tokLayoutStart)(parseModuleImportDecls))(function(imports) {
          return pure11({
            keyword,
            name: name2,
            exports,
            where: where_,
            imports
          });
        });
      });
    });
  });
});
var braces = /* @__PURE__ */ wrapped(tokLeftBrace)(tokRightBrace);
var parseTypeParen = function(open2) {
  return bind6($lazy_parseType(515))(function(value) {
    return bind6(tokRightParen)(function(close2) {
      return pure11(new TypeParens({
        open: open2,
        value,
        close: close2
      }));
    });
  });
};
var parseRowTailParen = function(open2) {
  return bind6(apply6(map25(Tuple.create)(tokPipe))($lazy_parseType(485)))(function(tail4) {
    return bind6(tokRightParen)(function(close2) {
      return pure11(new TypeRow({
        open: open2,
        value: {
          labels: Nothing.value,
          tail: new Just(tail4)
        },
        close: close2
      }));
    });
  });
};
var parseRowParen = function(open2) {
  return bind6($$try4(apply6(map25(Tuple.create)(parseLabel))(tokDoubleColon)))(function(v) {
    return bind6($lazy_parseType(467))(function(value) {
      return bind6(many3(apply6(map25(Tuple.create)(tokComma))($lazy_parseRowLabel(468))))(function(rest) {
        return bind6(optional3(apply6(map25(Tuple.create)(tokPipe))($lazy_parseType(469))))(function(tail4) {
          return bind6(tokRightParen)(function(close2) {
            return pure11(new TypeRow({
              open: open2,
              value: {
                labels: new Just({
                  head: {
                    label: v.value0,
                    separator: v.value1,
                    value
                  },
                  tail: rest
                }),
                tail: tail4
              },
              close: close2
            }));
          });
        });
      });
    });
  });
};
var parseKindedVar = function(open2) {
  return bind6($$try4(apply6(map25(Tuple.create)(parens(map25(TypeVar.create)(parseIdent))))(tokDoubleColon)))(function(v) {
    return bind6($lazy_parseType(505))(function(kind) {
      return bind6(tokRightParen)(function(close2) {
        return pure11(new TypeParens({
          open: open2,
          value: new TypeKinded(new TypeParens(v.value0), v.value1, kind),
          close: close2
        }));
      });
    });
  });
};
var $lazy_parseForall = /* @__PURE__ */ $runtime_lazy6("parseForall", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return apply6(apply6(apply6(map25(TypeForall.create)(tokForall))(many12($lazy_parseTypeVarBinding(536))))(tokDot))($lazy_parseType1(538));
  });
});
var $lazy_parseRow = /* @__PURE__ */ $runtime_lazy6("parseRow", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6(optional3(separated(tokComma)($lazy_parseRowLabel(521))))(function(labels) {
      return bind6(optional3(apply6(map25(Tuple.create)(tokPipe))($lazy_parseType(522))))(function(tail4) {
        return pure11({
          labels,
          tail: tail4
        });
      });
    });
  });
});
var $lazy_parseRowLabel = /* @__PURE__ */ $runtime_lazy6("parseRowLabel", "PureScript.CST.Parser", function() {
  return bind6(parseLabel)(function(label) {
    return bind6(tokDoubleColon)(function(separator) {
      return bind6($lazy_parseType(529))(function(value) {
        return pure11({
          label,
          separator,
          value
        });
      });
    });
  });
});
var $lazy_parseType = /* @__PURE__ */ $runtime_lazy6("parseType", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseType1(401))(function(ty) {
      return alt6(apply6(map25(TypeKinded.create(ty))(tokDoubleColon))($lazy_parseType(402)))(pure11(ty));
    });
  });
});
var $lazy_parseType1 = /* @__PURE__ */ $runtime_lazy6("parseType1", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6($lazy_parseForall(407))($lazy_parseType2(408));
  });
});
var $lazy_parseType2 = /* @__PURE__ */ $runtime_lazy6("parseType2", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseType3(412))(function(ty) {
      return alt6(apply6(map25(TypeArrow.create(ty))(tokRightArrow))($lazy_parseType1(413)))(alt6(apply6(map25(TypeConstrained.create(ty))(tokRightFatArrow))($lazy_parseType1(414)))(pure11(ty)));
    });
  });
});
var $lazy_parseType3 = /* @__PURE__ */ $runtime_lazy6("parseType3", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseType4(419))(function(ty) {
      return bind6(many3(apply6(map25(Tuple.create)(parseQualifiedOperator))($lazy_parseType4(420))))(function(ops) {
        return pure11(function() {
          var v1 = fromArray(ops);
          if (v1 instanceof Nothing) {
            return ty;
          }
          ;
          if (v1 instanceof Just) {
            return new TypeOp(ty, v1.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 421, column 8 - line 423, column 28): " + [v1.constructor.name]);
        }());
      });
    });
  });
});
var $lazy_parseType4 = /* @__PURE__ */ $runtime_lazy6("parseType4", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6(parseTypeNegative)($lazy_parseType5(427));
  });
});
var $lazy_parseType5 = /* @__PURE__ */ $runtime_lazy6("parseType5", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseTypeAtom(431))(function(ty) {
      return bind6(many3($lazy_parseTypeAtom(432)))(function(args) {
        return pure11(function() {
          var v1 = fromArray(args);
          if (v1 instanceof Nothing) {
            return ty;
          }
          ;
          if (v1 instanceof Just) {
            return new TypeApp(ty, v1.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 433, column 8 - line 435, column 29): " + [v1.constructor.name]);
        }());
      });
    });
  });
});
var $lazy_parseTypeAtom = /* @__PURE__ */ $runtime_lazy6("parseTypeAtom", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6(map25(TypeVar.create)(parseIdent))(alt6(map25(TypeConstructor.create)(parseQualifiedProper))(alt6(map25(uncurry(TypeString.create))(parseString))(alt6(map25(uncurry(TypeInt.create(Nothing.value)))($$parseInt))(alt6($lazy_parseTypeParens(443))(alt6(map25(TypeRecord.create)(braces($lazy_parseRow(444))))(alt6(map25(TypeOpName.create)(parseQualifiedSymbol))(alt6(map25(TypeHole.create)(parseHole))(alt6(map25(TypeWildcard.create)(tokUnderscore))(map25(TypeArrowName.create)(tokSymbolArrow))))))))));
  });
});
var $lazy_parseTypeParens = /* @__PURE__ */ $runtime_lazy6("parseTypeParens", "PureScript.CST.Parser", function() {
  return bind6(tokLeftParen)(function(open2) {
    return alt6(parseRowParen(open2))(alt6(parseRowTailParen(open2))(alt6(parseKindedVar(open2))(alt6(parseTypeParen(open2))(parseEmptyRow(open2)))));
  });
});
var $lazy_parseTypeVarBinding = /* @__PURE__ */ $runtime_lazy6("parseTypeVarBinding", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6($lazy_parseTypeVarKinded(542))(map25(TypeVarName.create)(parseIdent));
  });
});
var $lazy_parseTypeVarKinded = /* @__PURE__ */ $runtime_lazy6("parseTypeVarKinded", "PureScript.CST.Parser", function() {
  return map25(TypeVarKinded.create)(parens(bind6(parseIdent)(function(label) {
    return bind6(tokDoubleColon)(function(separator) {
      return bind6($lazy_parseType(549))(function(value) {
        return pure11({
          label,
          separator,
          value
        });
      });
    });
  })));
});
var parseType = /* @__PURE__ */ $lazy_parseType(399);
var parseType3 = /* @__PURE__ */ $lazy_parseType3(417);
var parseType5 = /* @__PURE__ */ $lazy_parseType5(429);
var parseTypeAtom = /* @__PURE__ */ $lazy_parseTypeAtom(437);
var parseTypeVarBinding = /* @__PURE__ */ $lazy_parseTypeVarBinding(540);
var parseDataCtor = /* @__PURE__ */ apply6(/* @__PURE__ */ map25(function(v) {
  return function(v1) {
    return {
      name: v,
      fields: v1
    };
  };
})(parseProper))(/* @__PURE__ */ many3(parseTypeAtom));
var $lazy_parseBinder = /* @__PURE__ */ $runtime_lazy6("parseBinder", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseBinder1(806))(function(binder) {
      return alt6(apply6(map25(BinderTyped.create(binder))(tokDoubleColon))(parseType))(pure11(binder));
    });
  });
});
var $lazy_parseBinder1 = /* @__PURE__ */ $runtime_lazy6("parseBinder1", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseBinder2(812))(function(binder) {
      return bind6(many3(apply6(map25(Tuple.create)(parseQualifiedOperator))($lazy_parseBinder2(813))))(function(ops) {
        return pure11(function() {
          var v1 = fromArray(ops);
          if (v1 instanceof Nothing) {
            return binder;
          }
          ;
          if (v1 instanceof Just) {
            return new BinderOp(binder, v1.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 814, column 8 - line 816, column 34): " + [v1.constructor.name]);
        }());
      });
    });
  });
});
var $lazy_parseBinder2 = /* @__PURE__ */ $runtime_lazy6("parseBinder2", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6(parseBinderNegative)(alt6($lazy_parseBinderConstructor(821))($lazy_parseBinderAtom(822)));
  });
});
var $lazy_parseBinderAtom = /* @__PURE__ */ $runtime_lazy6("parseBinderAtom", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6($lazy_parseIdentBinder(838))(alt6(map25(flip(BinderConstructor.create)([]))(parseQualifiedProper))(alt6(map25(BinderWildcard.create)(tokUnderscore))(alt6(map25(uncurry(BinderString.create))(parseString))(alt6(map25(uncurry(BinderChar.create))(parseChar))(alt6(map25(uncurry(BinderBoolean.create))(parseBoolean))(alt6(map25(uncurry(BinderInt.create(Nothing.value)))($$parseInt))(alt6(map25(uncurry(BinderNumber.create(Nothing.value)))(parseNumber))(alt6(map25(BinderArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)($lazy_parseBinder(846))))(alt6(map25(BinderRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled($lazy_parseBinder(847)))))(map25(BinderParens.create)(parens($lazy_parseBinder(848)))))))))))));
  });
});
var $lazy_parseBinderConstructor = /* @__PURE__ */ $runtime_lazy6("parseBinderConstructor", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6(parseQualifiedProper)(function(name2) {
      return bind6(many3($lazy_parseBinderAtom(833)))(function(apps) {
        return pure11(new BinderConstructor(name2, apps));
      });
    });
  });
});
var $lazy_parseIdentBinder = /* @__PURE__ */ $runtime_lazy6("parseIdentBinder", "PureScript.CST.Parser", function() {
  return bind6(parseIdent)(function(ident) {
    return alt6(apply6(map25(BinderNamed.create(ident))(tokAt))($lazy_parseBinderAtom(853)))(pure11(new BinderVar(ident)));
  });
});
var parseBinder = /* @__PURE__ */ $lazy_parseBinder(804);
var parseBinder1 = /* @__PURE__ */ $lazy_parseBinder1(810);
var parseBinderAtom = /* @__PURE__ */ $lazy_parseBinderAtom(836);
var parseClassConstraints = function(parseOneConstraint) {
  return alt6(map25(Many.create)(parens(separated(tokComma)(parseType))))(map25(One.create)(parseOneConstraint));
};
var parseDeclDerive = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("derive"))(function(derive_) {
  return bind6(optional3(tokKeyword("newtype")))(function(newtype_) {
    return bind6(tokKeyword("instance"))(function(keyword) {
      return bind6(optional3(parseInstanceName))(function(name2) {
        return bind6(optional3($$try4(apply6(map25(Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function(constraints) {
          return bind6(parseQualifiedProper)(function(className) {
            return bind6(many3(parseTypeAtom))(function(types) {
              return pure11(new DeclDerive(derive_, newtype_, {
                keyword,
                name: name2,
                constraints,
                className,
                types
              }));
            });
          });
        });
      });
    });
  });
});
var parseClassMember = /* @__PURE__ */ bind6(parseIdent)(function(label) {
  return bind6(tokDoubleColon)(function(separator) {
    return bind6(parseType)(function(value) {
      return pure11({
        label,
        separator,
        value
      });
    });
  });
});
var parseDeclClassSignature = function(keyword) {
  return bind6($$try4(apply6(map25(Tuple.create)(parseProper))(tokDoubleColon)))(function(v) {
    return bind6(parseType)(function(value) {
      return pure11(new DeclKindSignature(keyword, {
        label: v.value0,
        separator: v.value1,
        value
      }));
    });
  });
};
var parseDeclKindSignature = function(keyword) {
  return function(label) {
    return bind6(tokDoubleColon)(function(separator) {
      return bind6(parseType)(function(value) {
        return pure11(new DeclKindSignature(keyword, {
          label,
          separator,
          value
        }));
      });
    });
  };
};
var parseDeclSignature = function(label) {
  return bind6(tokDoubleColon)(function(separator) {
    return bind6(parseType)(function(value) {
      return pure11(new DeclSignature({
        label,
        separator,
        value
      }));
    });
  });
};
var parseForeignData = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("data"))(function(keyword) {
  return bind6(parseProper)(function(label) {
    return bind6(tokDoubleColon)(function(separator) {
      return bind6(parseType)(function(value) {
        return pure11(new ForeignData(keyword, {
          label,
          separator,
          value
        }));
      });
    });
  });
});
var parseForeignValue = /* @__PURE__ */ bind6(parseIdent)(function(label) {
  return bind6(tokDoubleColon)(function(separator) {
    return bind6(parseType)(function(value) {
      return pure11(new ForeignValue({
        label,
        separator,
        value
      }));
    });
  });
});
var parseDeclForeign = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("foreign"))(function(keyword1) {
  return bind6(tokKeyword("import"))(function(keyword2) {
    return bind6(alt6(parseForeignData)(alt6(parseForeignKind)(parseForeignValue)))(function(foreign_) {
      return pure11(new DeclForeign(keyword1, keyword2, foreign_));
    });
  });
});
var parseInstanceBindingSignature = function(label) {
  return bind6(tokDoubleColon)(function(separator) {
    return bind6(parseType)(function(value) {
      return pure11(new InstanceBindingSignature({
        label,
        separator,
        value
      }));
    });
  });
};
var parseLetBindingSignature = function(label) {
  return bind6(tokDoubleColon)(function(separator) {
    return bind6(parseType)(function(value) {
      return pure11(new LetBindingSignature({
        label,
        separator,
        value
      }));
    });
  });
};
var parseRecordUpdates = function(expr) {
  return bind6($$try4(applyFirst3(tokLeftBrace)(lookAhead(applySecond3(parseLabel)(alt6(tokEquals)(tokLeftBrace))))))(function(open2) {
    return bind6(separated(tokComma)($lazy_parseRecordUpdate(690)))(function(value) {
      return bind6(tokRightBrace)(function(close2) {
        return pure11(new ExprRecordUpdate(expr, {
          open: open2,
          value,
          close: close2
        }));
      });
    });
  });
};
var parseRecordUpdateLeaf = function(label) {
  return apply6(map25(RecordUpdateLeaf.create(label))(tokEquals))($lazy_parseExpr(704));
};
var parseRecordUpdateBranch = function(label) {
  return map25(RecordUpdateBranch.create(label))(braces(separated(tokComma)($lazy_parseRecordUpdate(709))));
};
var parseLetBindingName = function(name2) {
  return bind6(many3(parseBinderAtom))(function(binders) {
    return bind6(parseGuarded(tokEquals))(function(guarded) {
      return pure11(new LetBindingName({
        name: name2,
        binders,
        guarded
      }));
    });
  });
};
var parseGuarded = function(sepParser) {
  var parsePatternGuard = apply6(map25(function(v) {
    return function(v1) {
      return {
        binder: v,
        expr: v1
      };
    };
  })(optional3($$try4(apply6(map25(Tuple.create)(parseBinder))(tokLeftArrow)))))($lazy_parseExpr(795));
  var parseGuardedExpr = apply6(apply6(apply6(map25(function(v) {
    return function(v1) {
      return function(v2) {
        return function(v3) {
          return {
            bar: v,
            patterns: v1,
            separator: v2,
            where: v3
          };
        };
      };
    };
  })(tokPipe))(separated(tokComma)(parsePatternGuard)))(sepParser))($lazy_parseWhere(789));
  return alt6(apply6(map25(Unconditional.create)(sepParser))($lazy_parseWhere(781)))(map25(Guarded.create)(many12(parseGuardedExpr)));
};
var parseBadSingleCaseWhere = function(binder) {
  return bind6(tokRightArrow)(function(arrow) {
    return bind6(applySecond3(tokLayoutEnd)($lazy_parseWhere(659)))(function(body) {
      return pure11(singleton4(new Tuple({
        head: binder,
        tail: []
      }, new Unconditional(arrow, body))));
    });
  });
};
var parseBadSingleCaseGuarded = function(binder) {
  return bind6(applySecond3(tokLayoutEnd)(parseGuarded(tokRightArrow)))(function(body) {
    return pure11(singleton4(new Tuple({
      head: binder,
      tail: []
    }, body)));
  });
};
var $lazy_parseAdo = /* @__PURE__ */ $runtime_lazy6("parseAdo", "PureScript.CST.Parser", function() {
  return bind6(tokQualifiedKeyword("ado"))(function(keyword) {
    return bind6(layout(recoverDoStatement($lazy_parseDoStatement(676))))(function(statements) {
      return bind6(tokKeyword("in"))(function(in_) {
        return bind6($lazy_parseExpr(678))(function(result) {
          return pure11(new ExprAdo({
            keyword,
            statements,
            "in": in_,
            result
          }));
        });
      });
    });
  });
});
var $lazy_parseBadSingleCaseBranch = /* @__PURE__ */ $runtime_lazy6("parseBadSingleCaseBranch", "PureScript.CST.Parser", function() {
  return bind6(applySecond3(tokLayoutStart)(parseBinder1))(function(binder) {
    return alt6(parseBadSingleCaseWhere(binder))(parseBadSingleCaseGuarded(binder));
  });
});
var $lazy_parseCase = /* @__PURE__ */ $runtime_lazy6("parseCase", "PureScript.CST.Parser", function() {
  return bind6(tokKeyword("case"))(function(keyword) {
    return bind6(separated(tokComma)($lazy_parseExpr(641)))(function(head5) {
      return bind6(tokKeyword("of"))(function(of_) {
        return bind6(alt6($$try4($lazy_parseBadSingleCaseBranch(643)))($lazy_parseCaseBranches(643)))(function(branches) {
          return pure11(new ExprCase({
            keyword,
            head: head5,
            of: of_,
            branches
          }));
        });
      });
    });
  });
});
var $lazy_parseCaseBranches = /* @__PURE__ */ $runtime_lazy6("parseCaseBranches", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return layoutNonEmpty(apply6(map25(Tuple.create)(separated(tokComma)(parseBinder1)))(parseGuarded(tokRightArrow)));
  });
});
var $lazy_parseDo = /* @__PURE__ */ $runtime_lazy6("parseDo", "PureScript.CST.Parser", function() {
  return bind6(tokQualifiedKeyword("do"))(function(keyword) {
    return bind6(layoutNonEmpty(recoverDoStatement($lazy_parseDoStatement(670))))(function(statements) {
      return pure11(new ExprDo({
        keyword,
        statements
      }));
    });
  });
});
var $lazy_parseDoStatement = /* @__PURE__ */ $runtime_lazy6("parseDoStatement", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6(apply6(map25(DoLet.create)(tokKeyword("let")))(layoutNonEmpty(recoverLetBinding($lazy_parseLetBinding(752)))))(alt6(apply6(map25(uncurry(DoBind.create))($$try4(apply6(map25(Tuple.create)(parseBinder))(tokLeftArrow))))($lazy_parseExpr(753)))(map25(DoDiscard.create)($lazy_parseExpr(754))));
  });
});
var $lazy_parseExpr = /* @__PURE__ */ $runtime_lazy6("parseExpr", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseExpr1(554))(function(expr) {
      return alt6(apply6(map25(ExprTyped.create(expr))(tokDoubleColon))(parseType))(pure11(expr));
    });
  });
});
var $lazy_parseExpr1 = /* @__PURE__ */ $runtime_lazy6("parseExpr1", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseExpr2(560))(function(expr) {
      return bind6(many3(apply6(map25(Tuple.create)(parseQualifiedOperator))($lazy_parseExpr2(561))))(function(ops) {
        return pure11(function() {
          var v1 = fromArray(ops);
          if (v1 instanceof Nothing) {
            return expr;
          }
          ;
          if (v1 instanceof Just) {
            return new ExprOp(expr, v1.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 562, column 8 - line 564, column 30): " + [v1.constructor.name]);
        }());
      });
    });
  });
});
var $lazy_parseExpr2 = /* @__PURE__ */ $runtime_lazy6("parseExpr2", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseExpr3(568))(function(expr) {
      return bind6(many3(apply6(map25(Tuple.create)($lazy_parseTickExpr(569)))($lazy_parseExpr3(569))))(function(ops) {
        return pure11(function() {
          var v1 = fromArray(ops);
          if (v1 instanceof Nothing) {
            return expr;
          }
          ;
          if (v1 instanceof Just) {
            return new ExprInfix(expr, v1.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 570, column 8 - line 572, column 33): " + [v1.constructor.name]);
        }());
      });
    });
  });
});
var $lazy_parseExpr3 = /* @__PURE__ */ $runtime_lazy6("parseExpr3", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6(apply6(map25(ExprNegate.create)(tokKeyOperator("-")))($lazy_parseExpr3(591)))($lazy_parseExpr4(592));
  });
});
var $lazy_parseExpr4 = /* @__PURE__ */ $runtime_lazy6("parseExpr4", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseExpr5(596))(function(expr) {
      return bind6(many3($lazy_parseExpr5(597)))(function(args) {
        return pure11(function() {
          var v1 = fromArray(args);
          if (v1 instanceof Nothing) {
            return expr;
          }
          ;
          if (v1 instanceof Just) {
            return new ExprApp(expr, v1.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 598, column 8 - line 600, column 31): " + [v1.constructor.name]);
        }());
      });
    });
  });
});
var $lazy_parseExpr5 = /* @__PURE__ */ $runtime_lazy6("parseExpr5", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6($lazy_parseIf(604))(alt6($lazy_parseLetIn(605))(alt6($lazy_parseLambda(606))(alt6($lazy_parseCase(607))(alt6($lazy_parseDo(608))(alt6($lazy_parseAdo(609))($lazy_parseExpr6(610)))))));
  });
});
var $lazy_parseExpr6 = /* @__PURE__ */ $runtime_lazy6("parseExpr6", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseExpr7(683))(function(expr) {
      return alt6(parseRecordUpdates(expr))(pure11(expr));
    });
  });
});
var $lazy_parseExpr7 = /* @__PURE__ */ $runtime_lazy6("parseExpr7", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseExprAtom(713))(function(expr) {
      return alt6(parseRecordAccessor(expr))(pure11(expr));
    });
  });
});
var $lazy_parseExprAtom = /* @__PURE__ */ $runtime_lazy6("parseExprAtom", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6(map25(ExprIdent.create)(parseQualifiedIdent))(alt6(map25(ExprConstructor.create)(parseQualifiedProper))(alt6(map25(ExprOpName.create)(parseQualifiedSymbol))(alt6(map25(ExprSection.create)(tokUnderscore))(alt6(map25(ExprHole.create)(parseHole))(alt6(map25(uncurry(ExprString.create))(parseString))(alt6(map25(uncurry(ExprChar.create))(parseChar))(alt6(map25(uncurry(ExprBoolean.create))(parseBoolean))(alt6(map25(uncurry(ExprInt.create))($$parseInt))(alt6(map25(uncurry(ExprNumber.create))(parseNumber))(alt6(map25(ExprArray.create)(delimited(tokLeftSquare)(tokRightSquare)(tokComma)($lazy_parseExpr(735))))(alt6(map25(ExprRecord.create)(delimited(tokLeftBrace)(tokRightBrace)(tokComma)(parseRecordLabeled($lazy_parseExpr(736)))))(map25(ExprParens.create)(parens($lazy_parseExpr(737)))))))))))))));
  });
});
var $lazy_parseIdentBinding = /* @__PURE__ */ $runtime_lazy6("parseIdentBinding", "PureScript.CST.Parser", function() {
  return bind6(parseIdent)(function(ident) {
    return alt6(parseLetBindingSignature(ident))(parseLetBindingName(ident));
  });
});
var $lazy_parseIf = /* @__PURE__ */ $runtime_lazy6("parseIf", "PureScript.CST.Parser", function() {
  return bind6(tokKeyword("if"))(function(keyword) {
    return bind6($lazy_parseExpr(615))(function(cond) {
      return bind6(tokKeyword("then"))(function(then_) {
        return bind6($lazy_parseExpr(617))(function(true_) {
          return bind6(tokKeyword("else"))(function(else_) {
            return bind6($lazy_parseExpr(619))(function(false_) {
              return pure11(new ExprIf({
                keyword,
                cond,
                then: then_,
                "true": true_,
                "else": else_,
                "false": false_
              }));
            });
          });
        });
      });
    });
  });
});
var $lazy_parseLambda = /* @__PURE__ */ $runtime_lazy6("parseLambda", "PureScript.CST.Parser", function() {
  return bind6(tokBackslash)(function(symbol) {
    return bind6(many12(parseBinderAtom))(function(binders) {
      return bind6(tokRightArrow)(function(arrow) {
        return bind6($lazy_parseExpr(635))(function(body) {
          return pure11(new ExprLambda({
            symbol,
            binders,
            arrow,
            body
          }));
        });
      });
    });
  });
});
var $lazy_parseLetBinding = /* @__PURE__ */ $runtime_lazy6("parseLetBinding", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return alt6($$try4($lazy_parseIdentBinding(758)))(apply6(apply6(map25(LetBindingPattern.create)(parseBinder1))(tokEquals))($lazy_parseWhere(759)));
  });
});
var $lazy_parseLetIn = /* @__PURE__ */ $runtime_lazy6("parseLetIn", "PureScript.CST.Parser", function() {
  return bind6(tokKeyword("let"))(function(keyword) {
    return bind6(layoutNonEmpty(recoverLetBinding($lazy_parseLetBinding(625))))(function(bindings) {
      return bind6(tokKeyword("in"))(function(in_) {
        return bind6($lazy_parseExpr(627))(function(body) {
          return pure11(new ExprLet({
            keyword,
            bindings,
            "in": in_,
            body
          }));
        });
      });
    });
  });
});
var $lazy_parseRecordUpdate = /* @__PURE__ */ $runtime_lazy6("parseRecordUpdate", "PureScript.CST.Parser", function() {
  return bind6(parseLabel)(function(label) {
    return alt6(parseRecordUpdateLeaf(label))(parseRecordUpdateBranch(label));
  });
});
var $lazy_parseTickExpr = /* @__PURE__ */ $runtime_lazy6("parseTickExpr", "PureScript.CST.Parser", function() {
  return bind6(tokTick)(function(open2) {
    return bind6($lazy_parseTickExpr1(577))(function(value) {
      return bind6(tokTick)(function(close2) {
        return pure11({
          open: open2,
          value,
          close: close2
        });
      });
    });
  });
});
var $lazy_parseTickExpr1 = /* @__PURE__ */ $runtime_lazy6("parseTickExpr1", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseExpr3(583))(function(expr) {
      return bind6(many3(apply6(map25(Tuple.create)(parseQualifiedOperator))($lazy_parseExpr3(584))))(function(ops) {
        return pure11(function() {
          var v1 = fromArray(ops);
          if (v1 instanceof Nothing) {
            return expr;
          }
          ;
          if (v1 instanceof Just) {
            return new ExprOp(expr, v1.value0);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.Parser (line 585, column 8 - line 587, column 30): " + [v1.constructor.name]);
        }());
      });
    });
  });
});
var $lazy_parseWhere = /* @__PURE__ */ $runtime_lazy6("parseWhere", "PureScript.CST.Parser", function() {
  return defer4(function(v) {
    return bind6($lazy_parseExpr(800))(function(expr) {
      return bind6(optional3(apply6(map25(Tuple.create)(tokKeyword("where")))(layoutNonEmpty(recoverLetBinding($lazy_parseLetBinding(801))))))(function(bindings) {
        return pure11({
          expr,
          bindings
        });
      });
    });
  });
});
var parseDeclValue1 = function(name2) {
  return bind6(many3(parseBinderAtom))(function(binders) {
    return bind6(parseGuarded(tokEquals))(function(guarded) {
      return pure11(new DeclValue({
        name: name2,
        binders,
        guarded
      }));
    });
  });
};
var parseDeclValue = /* @__PURE__ */ bind6(parseIdent)(function(ident) {
  return alt6(parseDeclSignature(ident))(parseDeclValue1(ident));
});
var parseInstanceBindingName = function(name2) {
  return bind6(many3(parseBinderAtom))(function(binders) {
    return bind6(parseGuarded(tokEquals))(function(guarded) {
      return pure11(new InstanceBindingName({
        name: name2,
        binders,
        guarded
      }));
    });
  });
};
var parseInstanceBinding = /* @__PURE__ */ bind6(parseIdent)(function(ident) {
  return alt6(parseInstanceBindingSignature(ident))(parseInstanceBindingName(ident));
});
var parseInstance = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("instance"))(function(keyword) {
  return bind6(optional3(parseInstanceName))(function(name2) {
    return bind6(optional3($$try4(apply6(map25(Tuple.create)(parseClassConstraints(parseType3)))(tokRightFatArrow))))(function(constraints) {
      return bind6(parseQualifiedProper)(function(className) {
        return bind6(many3(parseTypeAtom))(function(types) {
          return bind6(optional3(apply6(map25(Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseInstanceBinding))))(function(body) {
            return pure11({
              head: {
                keyword,
                name: name2,
                constraints,
                className,
                types
              },
              body
            });
          });
        });
      });
    });
  });
});
var parseDeclInstanceChain = /* @__PURE__ */ function() {
  return map25(DeclInstanceChain.create)(separated(parseInstanceChainSeparator)(parseInstance));
}();
var parseDeclClass1 = function(keyword) {
  return bind6(optional3($$try4(apply6(map25(Tuple.create)(parseClassConstraints(parseType5)))(tokLeftFatArrow))))(function($$super) {
    return bind6(parseProper)(function(name2) {
      return bind6(many3(parseTypeVarBinding))(function(vars) {
        return bind6(optional3(apply6(map25(Tuple.create)(tokPipe))(separated(tokComma)(parseFundep))))(function(fundeps) {
          return bind6(optional3(apply6(map25(Tuple.create)(tokKeyword("where")))(layoutNonEmpty(parseClassMember))))(function(members) {
            return pure11(new DeclClass({
              keyword,
              "super": $$super,
              name: name2,
              vars,
              fundeps
            }, members));
          });
        });
      });
    });
  });
};
var parseDeclClass = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("class"))(function(keyword) {
  return alt6(parseDeclClassSignature(keyword))(parseDeclClass1(keyword));
});
var parseDeclData1 = function(keyword) {
  return function(name2) {
    return bind6(many3(parseTypeVarBinding))(function(vars) {
      return bind6(optional3(apply6(map25(Tuple.create)(tokEquals))(separated(tokPipe)(parseDataCtor))))(function(ctors) {
        return pure11(new DeclData({
          keyword,
          name: name2,
          vars
        }, ctors));
      });
    });
  };
};
var parseDeclData = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("data"))(function(keyword) {
  return bind6(parseProper)(function(name2) {
    return alt6(parseDeclKindSignature(keyword)(name2))(parseDeclData1(keyword)(name2));
  });
});
var parseDeclNewtype1 = function(keyword) {
  return function(name2) {
    return bind6(many3(parseTypeVarBinding))(function(vars) {
      return bind6(tokEquals)(function(tok) {
        return bind6(parseProper)(function(wrapper) {
          return bind6(parseTypeAtom)(function(body) {
            return pure11(new DeclNewtype({
              keyword,
              name: name2,
              vars
            }, tok, wrapper, body));
          });
        });
      });
    });
  };
};
var parseDeclNewtype = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("newtype"))(function(keyword) {
  return bind6(parseProper)(function(name2) {
    return alt6(parseDeclKindSignature(keyword)(name2))(parseDeclNewtype1(keyword)(name2));
  });
});
var parseDeclType2 = function(keyword) {
  return function(name2) {
    return bind6(many3(parseTypeVarBinding))(function(vars) {
      return bind6(tokEquals)(function(tok) {
        return bind6(parseType)(function(body) {
          return pure11(new DeclType({
            keyword,
            name: name2,
            vars
          }, tok, body));
        });
      });
    });
  };
};
var parseDeclType1 = function(keyword) {
  return bind6(parseProper)(function(name2) {
    return alt6(parseDeclKindSignature(keyword)(name2))(parseDeclType2(keyword)(name2));
  });
};
var parseDeclType = /* @__PURE__ */ bind6(/* @__PURE__ */ tokKeyword("type"))(function(keyword) {
  return alt6(parseDeclRole(keyword))(parseDeclType1(keyword));
});
var parseDecl = /* @__PURE__ */ alt6(parseDeclData)(/* @__PURE__ */ alt6(parseDeclNewtype)(/* @__PURE__ */ alt6(parseDeclType)(/* @__PURE__ */ alt6(parseDeclClass)(/* @__PURE__ */ alt6(parseDeclInstanceChain)(/* @__PURE__ */ alt6(parseDeclDerive)(/* @__PURE__ */ alt6(parseDeclValue)(/* @__PURE__ */ alt6(parseDeclForeign)(parseDeclFixity))))))));
var parseModuleDecls = /* @__PURE__ */ many3(/* @__PURE__ */ applyFirst3(/* @__PURE__ */ recoverDecl(parseDecl))(/* @__PURE__ */ alt6(tokLayoutSep)(/* @__PURE__ */ lookAhead(tokLayoutEnd))));
var parseModuleBody = /* @__PURE__ */ bind6(/* @__PURE__ */ applyFirst3(parseModuleDecls)(tokLayoutEnd))(function(decls) {
  return bind6(eof)(function(v) {
    return pure11({
      decls,
      trailingComments: v.value1,
      end: v.value0
    });
  });
});
var parseModule = /* @__PURE__ */ bind6(parseModuleHeader)(function(header) {
  return bind6(parseModuleBody)(function(body) {
    return pure11({
      header,
      body
    });
  });
});

// output/PureScript.CST/index.js
var ParseSucceeded = /* @__PURE__ */ function() {
  function ParseSucceeded2(value0) {
    this.value0 = value0;
  }
  ;
  ParseSucceeded2.create = function(value0) {
    return new ParseSucceeded2(value0);
  };
  return ParseSucceeded2;
}();
var ParseSucceededWithErrors = /* @__PURE__ */ function() {
  function ParseSucceededWithErrors2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ParseSucceededWithErrors2.create = function(value0) {
    return function(value1) {
      return new ParseSucceededWithErrors2(value0, value1);
    };
  };
  return ParseSucceededWithErrors2;
}();
var ParseFailed = /* @__PURE__ */ function() {
  function ParseFailed2(value0) {
    this.value0 = value0;
  }
  ;
  ParseFailed2.create = function(value0) {
    return new ParseFailed2(value0);
  };
  return ParseFailed2;
}();
var toRecoveredParserResult = function(v) {
  var v1 = function(v2) {
    if (v instanceof Right && otherwise) {
      return new ParseSucceeded(v.value0.value0);
    }
    ;
    if (v instanceof Left) {
      return new ParseFailed(v.value0);
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST (line 41, column 1 - line 44, column 29): " + [v.constructor.name]);
  };
  if (v instanceof Right) {
    var $21 = fromArray(v.value0.value1);
    if ($21 instanceof Just) {
      return new ParseSucceededWithErrors(v.value0.value0, $21.value0);
    }
    ;
    return v1(true);
  }
  ;
  return v1(true);
};
var toRecovered = unsafeCoerce2;
var runRecoveredParser = function(p) {
  var $31 = flip(runParser)(p);
  return function($32) {
    return toRecoveredParserResult($31(lex($32)));
  };
};
var parseModule2 = /* @__PURE__ */ runRecoveredParser(parseModule);

// output/Tidy.Operators/index.js
var bind7 = /* @__PURE__ */ bind(bindMaybe);
var pure15 = /* @__PURE__ */ pure(applicativeMaybe);
var ordMaybe3 = /* @__PURE__ */ ordMaybe(ordModuleName);
var lookup4 = /* @__PURE__ */ lookup2(ordMaybe3);
var insertWith2 = /* @__PURE__ */ insertWith(ordMaybe3);
var union5 = /* @__PURE__ */ union2(/* @__PURE__ */ ordTuple(ordOperatorNamespace)(ordOperator));
var foldl6 = /* @__PURE__ */ foldl(foldableArray);
var map26 = /* @__PURE__ */ map(functorArray);
var resolveOperatorExports = function(precMap) {
  return function(v) {
    var remappedPrecMap = remapOperators(precMap)(v);
    var goExport = function(pm) {
      var $87 = fromMaybe(pm);
      return function($88) {
        return $87(function(v1) {
          if (v1 instanceof ExportOp) {
            return bind7(lookupOperator(new QualifiedOperator(Nothing.value, OperatorValue.value, v1.value0.name))(remappedPrecMap))(function(prec) {
              return pure15(insertOperator(new QualifiedOperator(new Just(v.header.name.name), OperatorValue.value, v1.value0.name))(prec)(pm));
            });
          }
          ;
          if (v1 instanceof ExportTypeOp) {
            return bind7(lookupOperator(new QualifiedOperator(Nothing.value, OperatorType.value, v1.value1.name))(remappedPrecMap))(function(prec) {
              return pure15(insertOperator(new QualifiedOperator(new Just(v.header.name.name), OperatorType.value, v1.value1.name))(prec)(pm));
            });
          }
          ;
          if (v1 instanceof ExportModule) {
            return bind7(lookup4(new Just(v1.value1.name))(remappedPrecMap))(function(prec) {
              return pure15(insertWith2(union5)(new Just(v.header.name.name))(prec)(pm));
            });
          }
          ;
          return Nothing.value;
        }($88));
      };
    };
    var goDecl = function(pm) {
      return function(v1) {
        if (v1 instanceof DeclFixity) {
          if (v1.value0.operator instanceof FixityValue) {
            return insertOperator(new QualifiedOperator(new Just(v.header.name.name), OperatorValue.value, v1.value0.operator.value2.name))(v1.value0.prec.value1)(pm);
          }
          ;
          if (v1.value0.operator instanceof FixityType) {
            return insertOperator(new QualifiedOperator(new Just(v.header.name.name), OperatorType.value, v1.value0.operator.value3.name))(v1.value0.prec.value1)(pm);
          }
          ;
          throw new Error("Failed pattern match at Tidy.Operators (line 75, column 7 - line 79, column 84): " + [v1.value0.operator.constructor.name]);
        }
        ;
        return pm;
      };
    };
    if (v.header.exports instanceof Nothing) {
      return foldl6(goDecl)(precMap)(v.body.decls);
    }
    ;
    if (v.header.exports instanceof Just) {
      return foldl6(goExport)(precMap)(cons2(v.header.exports.value0.value.head)(map26(snd)(v.header.exports.value0.value.tail)));
    }
    ;
    throw new Error("Failed pattern match at Tidy.Operators (line 50, column 3 - line 54, column 62): " + [v.header.exports.constructor.name]);
  };
};
var parseOperatorPrec = /* @__PURE__ */ function() {
  var tokenStreamToArray = function() {
    var go = function(acc) {
      return function($89) {
        return function(v) {
          if (v instanceof TokenEOF) {
            return new Right(acc);
          }
          ;
          if (v instanceof TokenError) {
            return new Left(v.value1);
          }
          ;
          if (v instanceof TokenCons) {
            return go(snoc(acc)(v.value0.value))(v.value2);
          }
          ;
          throw new Error("Failed pattern match at Tidy.Operators (line 33, column 35 - line 39, column 43): " + [v.constructor.name]);
        }(step2($89));
      };
    };
    return go([]);
  }();
  return function($90) {
    return function(v) {
      if (v instanceof Right && (v.value0.length === 2 && (v["value0"][0] instanceof TokSymbolName && (v["value0"][1] instanceof TokInt && v["value0"][1].value1 instanceof SmallInt)))) {
        return new Just(new Tuple(new QualifiedOperator(v["value0"][0].value0, OperatorValue.value, v["value0"][0].value1), v["value0"][1].value1.value0));
      }
      ;
      if (v instanceof Right && (v.value0.length === 3 && (v["value0"][0] instanceof TokSymbolName && (v["value0"][1] instanceof TokLowerName && (v["value0"][1].value0 instanceof Nothing && (v["value0"][1].value1 === "type" && (v["value0"][2] instanceof TokInt && v["value0"][2].value1 instanceof SmallInt))))))) {
        return new Just(new Tuple(new QualifiedOperator(v["value0"][0].value0, OperatorType.value, v["value0"][0].value1), v["value0"][2].value1.value0));
      }
      ;
      return Nothing.value;
    }(tokenStreamToArray(lex($90)));
  };
}();
var parseOperatorTable = /* @__PURE__ */ function() {
  var $91 = foldr(foldableArray)(uncurry(insertOperator))(empty3);
  var $92 = mapMaybe(parseOperatorPrec);
  return function($93) {
    return $91($92($93));
  };
}();

// output/Bin.Worker/index.js
var top5 = /* @__PURE__ */ top(boundedInt);
var power5 = /* @__PURE__ */ power(monoidString);
var bind8 = /* @__PURE__ */ bind(bindAff);
var liftEffect3 = /* @__PURE__ */ liftEffect(monadEffectAff);
var map27 = /* @__PURE__ */ map(functorAff);
var unwrap5 = /* @__PURE__ */ unwrap();
var pure16 = /* @__PURE__ */ pure(applicativeAff);
var discard2 = /* @__PURE__ */ discard(discardUnit)(bindAff);
var toWorkerConfig = function(options) {
  return {
    importSort: importSortToString(options.importSort),
    importWrap: importWrapToString(options.importWrap),
    indent: options.indent,
    operatorsFile: fromMaybe(".tidyoperators.default")(options.operatorsFile),
    ribbon: options.ribbon,
    typeArrowPlacement: typeArrowPlacementToString(options.typeArrowPlacement),
    unicode: unicodeToString(options.unicode),
    width: fromMaybe(top5)(options.width)
  };
};
var formatCommand = function(args) {
  return function(operators) {
    return function(contents) {
      var print2 = print(plainText)({
        pageWidth: fromMaybe(top5)(args.width),
        ribbonRatio: args.ribbon,
        indentWidth: args.indent,
        indentUnit: power5(" ")(args.indent)
      });
      var v = parseModule2(contents);
      if (v instanceof ParseSucceeded) {
        var opts = {
          importSort: args.importSort,
          importWrap: args.importWrap,
          operators: remapOperators(operators)(v.value0),
          typeArrowPlacement: args.typeArrowPlacement,
          unicode: args.unicode,
          formatError: defaultFormatOptions(formatErrorVoid).formatError
        };
        return new Right(print2(toDoc(formatModule(opts)(v.value0))));
      }
      ;
      if (v instanceof ParseSucceededWithErrors) {
        return new Left(head2(v.value1).error);
      }
      ;
      if (v instanceof ParseFailed) {
        return new Left(v.value0.error);
      }
      ;
      throw new Error("Failed pattern match at Bin.Worker (line 83, column 3 - line 97, column 21): " + [v.constructor.name]);
    };
  };
};
var formatInPlaceCommand = function(shouldCheck) {
  return function(operators) {
    return function(v) {
      var formatOptions2 = {
        importSort: fromRight$prime(function(v1) {
          return unsafeCrashWith("Unknown importSort value");
        })(importSortFromString(v.config.importSort)),
        importWrap: fromRight$prime(function(v1) {
          return unsafeCrashWith("Unknown importWrap value");
        })(importWrapFromString(v.config.importWrap)),
        indent: v.config.indent,
        operatorsFile: Nothing.value,
        ribbon: v.config.ribbon,
        typeArrowPlacement: fromRight$prime(function(v1) {
          return unsafeCrashWith("Unknown typeArrowPlacement value");
        })(typeArrowPlacementFromString(v.config.typeArrowPlacement)),
        unicode: fromRight$prime(function(v1) {
          return unsafeCrashWith("Unknown unicode value");
        })(unicodeFromString(v.config.unicode)),
        width: new Just(v.config.width)
      };
      return bind8(readTextFile2(UTF8.value)(v.filePath))(function(contents) {
        return bind8(liftEffect3(hrtime))(function(start) {
          var v1 = formatCommand(formatOptions2)(operators)(contents);
          if (v1 instanceof Right) {
            return bind8(map27(function($49) {
              return unwrap5(toMilliseconds($49));
            })(liftEffect3(hrtimeDiff(start))))(function(timing) {
              if (shouldCheck) {
                var alreadyFormatted = v1.value0 === contents;
                return pure16({
                  filePath: v.filePath,
                  error: "",
                  alreadyFormatted,
                  timing
                });
              }
              ;
              return discard2(writeTextFile2(UTF8.value)(v.filePath)(v1.value0))(function() {
                return pure16({
                  filePath: v.filePath,
                  error: "",
                  alreadyFormatted: false,
                  timing
                });
              });
            });
          }
          ;
          if (v1 instanceof Left) {
            return pure16({
              filePath: v.filePath,
              error: printParseError(v1.value0),
              alreadyFormatted: false,
              timing: 0
            });
          }
          ;
          throw new Error("Failed pattern match at Bin.Worker (line 123, column 3 - line 133, column 91): " + [v1.constructor.name]);
        });
      });
    };
  };
};

// output/Control.Monad.State.Trans/index.js
var monadTransStateT = {
  lift: function(dictMonad) {
    var bind17 = bind(dictMonad.Bind1());
    var pure20 = pure(dictMonad.Applicative0());
    return function(m) {
      return function(s) {
        return bind17(m)(function(x) {
          return pure20(new Tuple(x, s));
        });
      };
    };
  }
};
var functorStateT = function(dictFunctor) {
  var map31 = map(dictFunctor);
  return {
    map: function(f) {
      return function(v) {
        return function(s) {
          return map31(function(v1) {
            return new Tuple(f(v1.value0), v1.value1);
          })(v(s));
        };
      };
    }
  };
};
var evalStateT = function(dictFunctor) {
  var map31 = map(dictFunctor);
  return function(v) {
    return function(s) {
      return map31(fst)(v(s));
    };
  };
};
var monadStateT = function(dictMonad) {
  return {
    Applicative0: function() {
      return applicativeStateT(dictMonad);
    },
    Bind1: function() {
      return bindStateT(dictMonad);
    }
  };
};
var bindStateT = function(dictMonad) {
  var bind17 = bind(dictMonad.Bind1());
  return {
    bind: function(v) {
      return function(f) {
        return function(s) {
          return bind17(v(s))(function(v1) {
            var v3 = f(v1.value0);
            return v3(v1.value1);
          });
        };
      };
    },
    Apply0: function() {
      return applyStateT(dictMonad);
    }
  };
};
var applyStateT = function(dictMonad) {
  var functorStateT1 = functorStateT(dictMonad.Bind1().Apply0().Functor0());
  return {
    apply: ap(monadStateT(dictMonad)),
    Functor0: function() {
      return functorStateT1;
    }
  };
};
var applicativeStateT = function(dictMonad) {
  var pure20 = pure(dictMonad.Applicative0());
  return {
    pure: function(a) {
      return function(s) {
        return pure20(new Tuple(a, s));
      };
    },
    Apply0: function() {
      return applyStateT(dictMonad);
    }
  };
};
var monadStateStateT = function(dictMonad) {
  var pure20 = pure(dictMonad.Applicative0());
  var monadStateT1 = monadStateT(dictMonad);
  return {
    state: function(f) {
      return function($200) {
        return pure20(f($200));
      };
    },
    Monad0: function() {
      return monadStateT1;
    }
  };
};

// output/Data.Argonaut.Parser/foreign.js
function _jsonParser(fail3, succ2, s) {
  try {
    return succ2(JSON.parse(s));
  } catch (e) {
    return fail3(e.message);
  }
}

// output/Data.Argonaut.Parser/index.js
var jsonParser = function(j) {
  return _jsonParser(Left.create, Right.create, j);
};

// output/Data.Argonaut.Decode.Parser/index.js
var parseJson = /* @__PURE__ */ function() {
  var $3 = lmap(bifunctorEither)(function(v) {
    return new TypeMismatch("JSON");
  });
  return function($4) {
    return $3(jsonParser($4));
  };
}();

// output/Data.Map/index.js
var SemigroupMap = function(x) {
  return x;
};
var semigroupSemigroupMap = function(dictOrd) {
  var unionWith2 = unionWith(dictOrd);
  return function(dictSemigroup) {
    var append9 = append(dictSemigroup);
    return {
      append: function(v) {
        return function(v1) {
          return unionWith2(append9)(v)(v1);
        };
      }
    };
  };
};
var monoidSemigroupMap = function(dictOrd) {
  var semigroupSemigroupMap1 = semigroupSemigroupMap(dictOrd);
  return function(dictSemigroup) {
    var semigroupSemigroupMap2 = semigroupSemigroupMap1(dictSemigroup);
    return {
      mempty: empty3,
      Semigroup0: function() {
        return semigroupSemigroupMap2;
      }
    };
  };
};
var keys3 = /* @__PURE__ */ function() {
  var $38 = $$void(functorMap);
  return function($39) {
    return fromMap($38($39));
  };
}();
var foldableWithIndexSemigroupMap = foldableWithIndexMap;

// output/Data.Number.Format/foreign.js
function wrap3(method) {
  return function(d) {
    return function(num) {
      return method.apply(num, [d]);
    };
  };
}
var toPrecisionNative = wrap3(Number.prototype.toPrecision);
var toFixedNative = wrap3(Number.prototype.toFixed);
var toExponentialNative = wrap3(Number.prototype.toExponential);

// output/Data.Number.Format/index.js
var clamp2 = /* @__PURE__ */ clamp(ordInt);
var Precision = /* @__PURE__ */ function() {
  function Precision2(value0) {
    this.value0 = value0;
  }
  ;
  Precision2.create = function(value0) {
    return new Precision2(value0);
  };
  return Precision2;
}();
var Fixed = /* @__PURE__ */ function() {
  function Fixed2(value0) {
    this.value0 = value0;
  }
  ;
  Fixed2.create = function(value0) {
    return new Fixed2(value0);
  };
  return Fixed2;
}();
var Exponential = /* @__PURE__ */ function() {
  function Exponential2(value0) {
    this.value0 = value0;
  }
  ;
  Exponential2.create = function(value0) {
    return new Exponential2(value0);
  };
  return Exponential2;
}();
var toStringWith = function(v) {
  if (v instanceof Precision) {
    return toPrecisionNative(v.value0);
  }
  ;
  if (v instanceof Fixed) {
    return toFixedNative(v.value0);
  }
  ;
  if (v instanceof Exponential) {
    return toExponentialNative(v.value0);
  }
  ;
  throw new Error("Failed pattern match at Data.Number.Format (line 59, column 1 - line 59, column 43): " + [v.constructor.name]);
};
var fixed = /* @__PURE__ */ function() {
  var $9 = clamp2(0)(20);
  return function($10) {
    return Fixed.create($9($10));
  };
}();

// output/Effect.Console/foreign.js
var log2 = function(s) {
  return function() {
    console.log(s);
  };
};
var error2 = function(s) {
  return function() {
    console.error(s);
  };
};

// output/Effect.Class.Console/index.js
var log3 = function(dictMonadEffect) {
  var $51 = liftEffect(dictMonadEffect);
  return function($52) {
    return $51(log2($52));
  };
};
var error3 = function(dictMonadEffect) {
  var $59 = liftEffect(dictMonadEffect);
  return function($60) {
    return $59(error2($60));
  };
};

// output/Node.Path/foreign.js
import path from "path";
var normalize = path.normalize;
function concat5(segments) {
  return path.join.apply(this, segments);
}
function relative(from2) {
  return (to) => path.relative(from2, to);
}
function dirname(p) {
  return path.normalize(path.dirname(p));
}
var basename = path.basename;
var extname = path.extname;
var sep = path.sep;
var delimiter = path.delimiter;
var parse2 = path.parse;
var isAbsolute = path.isAbsolute;

// output/Node.Process/foreign.js
import process3 from "process";
function exit(code) {
  return () => {
    process3.exit(code);
  };
}
function copyArray(xs) {
  return () => xs.slice();
}

// output/Node.Process/index.js
var stdout = /* @__PURE__ */ function() {
  return process3.stdout;
}();
var stdin = /* @__PURE__ */ function() {
  return process3.stdin;
}();
var mkEffect2 = unsafeCoerce2;
var lookupMutableObject = function(k) {
  return function(o) {
    return mkEffect2(function(v) {
      return lookup(k)(o);
    });
  };
};
var lookupEnv = function(k) {
  return lookupMutableObject(k)(process3.env);
};
var cwd = /* @__PURE__ */ function() {
  return process3.cwd;
}();
var argv = /* @__PURE__ */ function() {
  return copyArray(process3.argv);
}();

// output/Node.Glob.Basic/index.js
var fromFoldable1 = /* @__PURE__ */ fromFoldable2(foldableArray);
var eq16 = /* @__PURE__ */ eq(/* @__PURE__ */ eqList(eqString));
var compare9 = /* @__PURE__ */ compare(/* @__PURE__ */ ordList(ordString));
var foldMap7 = /* @__PURE__ */ foldMap(foldableSet);
var bind9 = /* @__PURE__ */ bind(bindAff);
var liftEffect4 = /* @__PURE__ */ liftEffect(monadEffectAff);
var insert9 = /* @__PURE__ */ insert5(ordString);
var catchError3 = /* @__PURE__ */ catchError(monadErrorAff);
var map28 = /* @__PURE__ */ map(functorAff);
var sequential2 = /* @__PURE__ */ sequential(parallelAff);
var forWithIndex_2 = /* @__PURE__ */ forWithIndex_(applicativeParAff);
var forWithIndex_1 = /* @__PURE__ */ forWithIndex_2(foldableWithIndexSemigroupMap);
var parallel2 = /* @__PURE__ */ parallel(parallelAff);
var discard3 = /* @__PURE__ */ discard(discardUnit)(bindAff);
var when3 = /* @__PURE__ */ when(applicativeAff);
var mempty6 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidAff(monoidUnit));
var fromFoldableWith2 = /* @__PURE__ */ fromFoldableWith(ordString)(foldableArray);
var map110 = /* @__PURE__ */ map(functorArray);
var forWithIndex_22 = /* @__PURE__ */ forWithIndex_2(foldableWithIndexMap);
var GlobStar = /* @__PURE__ */ function() {
  function GlobStar2() {
  }
  ;
  GlobStar2.value = new GlobStar2();
  return GlobStar2;
}();
var GlobSegment = /* @__PURE__ */ function() {
  function GlobSegment2(value0) {
    this.value0 = value0;
  }
  ;
  GlobSegment2.create = function(value0) {
    return new GlobSegment2(value0);
  };
  return GlobSegment2;
}();
var Match = /* @__PURE__ */ function() {
  function Match2() {
  }
  ;
  Match2.value = new Match2();
  return Match2;
}();
var MatchMore = /* @__PURE__ */ function() {
  function MatchMore2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  MatchMore2.create = function(value0) {
    return function(value1) {
      return new MatchMore2(value0, value1);
    };
  };
  return MatchMore2;
}();
var rootOrRelative = function(pwd) {
  return function(v) {
    if (v instanceof Cons && (v.value0 instanceof GlobSegment && (v.value0.value0 instanceof Cons && (v.value0.value0.value0 === "" && v.value0.value0.value1 instanceof Nil)))) {
      return new Tuple(sep, singleton10(v.value1));
    }
    ;
    return new Tuple(pwd, singleton10(v));
  };
};
var matchSegment = /* @__PURE__ */ function() {
  var go2 = function($copy_str) {
    return function($copy_v) {
      var $tco_var_str = $copy_str;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(str, v) {
        if (v instanceof Nil) {
          $tco_done = true;
          return str === "";
        }
        ;
        if (v instanceof Cons && (v.value0 === "" && v.value1 instanceof Nil)) {
          $tco_done = true;
          return true;
        }
        ;
        if (v instanceof Cons && v.value0 === "") {
          $tco_var_str = str;
          $copy_v = v.value1;
          return;
        }
        ;
        if (v instanceof Cons) {
          var v1 = indexOf(v.value0)(str);
          if (v1 instanceof Nothing) {
            $tco_done = true;
            return false;
          }
          ;
          if (v1 instanceof Just) {
            $tco_var_str = drop3(v1.value0 + length4(v.value0) | 0)(str);
            $copy_v = v.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Node.Glob.Basic (line 194, column 7 - line 196, column 61): " + [v1.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Node.Glob.Basic (line 189, column 13 - line 196, column 61): " + [v.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_str, $copy_v);
      }
      ;
      return $tco_result;
    };
  };
  var go1 = function(str) {
    return function(v) {
      if (v instanceof Nil) {
        return str === "";
      }
      ;
      if (v instanceof Cons && v.value0 === "") {
        return go2(str)(v.value1);
      }
      ;
      if (v instanceof Cons) {
        var v1 = stripPrefix(v.value0)(str);
        if (v1 instanceof Nothing) {
          return false;
        }
        ;
        if (v1 instanceof Just) {
          return go2(v1.value0)(v.value1);
        }
        ;
        throw new Error("Failed pattern match at Node.Glob.Basic (line 185, column 7 - line 187, column 33): " + [v1.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Node.Glob.Basic (line 181, column 13 - line 187, column 33): " + [v.constructor.name]);
    };
  };
  return go1;
}();
var isMatch = function(v) {
  if (v instanceof Just && v.value0 instanceof Match) {
    return true;
  }
  ;
  return false;
};
var fromString8 = function(v) {
  if (v === "**") {
    return GlobStar.value;
  }
  ;
  return new GlobSegment(fromFoldable1(split("*")(v)));
};
var fromFoldable7 = function(dictFoldable) {
  return foldr(dictFoldable)(function($162) {
    return Cons.create(fromString8($162));
  })(Nil.value);
};
var fromFoldable22 = /* @__PURE__ */ fromFoldable7(foldableArray);
var fromPathWithSeparator = function(sep2) {
  var $163 = split(sep2);
  return function($164) {
    return fromFoldable22($163($164));
  };
};
var fixupGlobPath = function(glob) {
  if (sep !== "/") {
    return replaceAll("/")(sep)(glob);
  }
  ;
  if (otherwise) {
    return glob;
  }
  ;
  throw new Error("Failed pattern match at Node.Glob.Basic (line 96, column 1 - line 96, column 34): " + [glob.constructor.name]);
};
var fixedPrefix = function(v) {
  if (v instanceof Cons && (v.value0 instanceof GlobSegment && (v.value0.value0 instanceof Cons && (v.value0.value0.value1 instanceof Nil && v.value0.value0.value0 !== "")))) {
    var $116 = $$null2(v.value1);
    if ($116) {
      return new Just(singleton9(v.value0.value0.value0)(Match.value));
    }
    ;
    return new Just(singleton9(v.value0.value0.value0)(new MatchMore(false, singleton10(v.value1))));
  }
  ;
  return Nothing.value;
};
var eqGlob = {
  eq: function(x) {
    return function(y) {
      if (x instanceof GlobStar && y instanceof GlobStar) {
        return true;
      }
      ;
      if (x instanceof GlobSegment && y instanceof GlobSegment) {
        return eq16(x.value0)(y.value0);
      }
      ;
      return false;
    };
  }
};
var ordGlob = {
  compare: function(x) {
    return function(y) {
      if (x instanceof GlobStar && y instanceof GlobStar) {
        return EQ.value;
      }
      ;
      if (x instanceof GlobStar) {
        return LT.value;
      }
      ;
      if (y instanceof GlobStar) {
        return GT.value;
      }
      ;
      if (x instanceof GlobSegment && y instanceof GlobSegment) {
        return compare9(x.value0)(y.value0);
      }
      ;
      throw new Error("Failed pattern match at Node.Glob.Basic (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
    };
  },
  Eq0: function() {
    return eqGlob;
  }
};
var ordList3 = /* @__PURE__ */ ordList(ordGlob);
var fromFoldable32 = /* @__PURE__ */ fromFoldable6(foldableArray)(ordList3);
var append6 = /* @__PURE__ */ append(/* @__PURE__ */ semigroupSet(ordList3));
var monoidSet2 = /* @__PURE__ */ monoidSet(ordList3);
var mempty14 = /* @__PURE__ */ mempty(monoidSet2);
var matchListing = function(path2) {
  return function(v) {
    if (v instanceof Cons && (v.value0 instanceof GlobStar && (v.value1 instanceof Cons && v.value1.value0 instanceof GlobStar))) {
      return matchListing(path2)(new Cons(GlobStar.value, v.value1.value1));
    }
    ;
    if (v instanceof Cons && v.value0 instanceof GlobStar) {
      return new Just(new MatchMore(isMatch(matchListing(path2)(v.value1)), fromFoldable32([v.value1, new Cons(GlobStar.value, v.value1)])));
    }
    ;
    if (v instanceof Cons && v.value0 instanceof GlobSegment) {
      var $137 = matchSegment(path2)(v.value0.value0);
      if ($137) {
        var $138 = $$null2(v.value1);
        if ($138) {
          return new Just(Match.value);
        }
        ;
        return new Just(new MatchMore(false, singleton10(v.value1)));
      }
      ;
      return Nothing.value;
    }
    ;
    if (v instanceof Nil) {
      return Nothing.value;
    }
    ;
    throw new Error("Failed pattern match at Node.Glob.Basic (line 162, column 21 - line 176, column 12): " + [v.constructor.name]);
  };
};
var semigroupMatch = {
  append: function(a) {
    return function(b) {
      if (a instanceof MatchMore) {
        if (b instanceof MatchMore) {
          return new MatchMore(a.value0 || b.value0, append6(a.value1)(b.value1));
        }
        ;
        return a;
      }
      ;
      if (a instanceof Match) {
        if (b instanceof MatchMore) {
          return new MatchMore(true, b.value1);
        }
        ;
        return a;
      }
      ;
      throw new Error("Failed pattern match at Node.Glob.Basic (line 151, column 5 - line 159, column 17): " + [a.constructor.name]);
    };
  }
};
var monoidSemigroupMap2 = /* @__PURE__ */ monoidSemigroupMap(ordString)(semigroupMatch);
var foldMap13 = /* @__PURE__ */ foldMap(foldableList)(monoidSemigroupMap2);
var foldMap22 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidSemigroupMap2);
var foldMap33 = /* @__PURE__ */ foldMap7(/* @__PURE__ */ monoidMaybe(semigroupMatch));
var foldMap42 = /* @__PURE__ */ foldMap7(/* @__PURE__ */ monoidRecord()(/* @__PURE__ */ monoidRecordCons({
  reflectSymbol: function() {
    return "left";
  }
})(monoidSet2)()(/* @__PURE__ */ monoidRecordCons({
  reflectSymbol: function() {
    return "right";
  }
})(monoidSemigroupMap2)()(monoidRecordNil))));
var mempty23 = /* @__PURE__ */ mempty(monoidSemigroupMap2);
var monoidAff2 = /* @__PURE__ */ monoidAff(monoidSemigroupMap2);
var guard6 = /* @__PURE__ */ guard2(monoidAff2);
var mempty33 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidFn(monoidAff2));
var append18 = /* @__PURE__ */ append(/* @__PURE__ */ semigroupSemigroupMap(ordString)(semigroupMatch));
var match2 = function(globs) {
  return foldMap13(function(path2) {
    return foldMap22(function() {
      var $165 = singleton9(path2);
      return function($166) {
        return SemigroupMap($165($166));
      };
    }())(foldMap33(matchListing(path2))(globs));
  });
};
var expandGlobsWithStats = function(pwd) {
  return function(initGlobs) {
    return bind9(liftEffect4($$new(empty3)))(function(result) {
      var insertMatch = function(path2) {
        return function(stat4) {
          return liftEffect4(modify_(insert9(path2)(stat4))(result));
        };
      };
      var go = function(cwd2) {
        return function(globs) {
          var prefix = foldMap42(function(glob) {
            var v = fixedPrefix(glob);
            if (v instanceof Nothing) {
              return {
                left: singleton10(glob),
                right: mempty23
              };
            }
            ;
            if (v instanceof Just) {
              return {
                left: mempty14,
                right: v.value0
              };
            }
            ;
            throw new Error("Failed pattern match at Node.Glob.Basic (line 64, column 11 - line 66, column 51): " + [v.constructor.name]);
          })(globs);
          return bind9(guard6(!isEmpty2(prefix.left))(flip(catchError3)(mempty33)(map28(function() {
            var $167 = match2(prefix.left);
            return function($168) {
              return $167(fromFoldable1($168));
            };
          }())(readdir3(cwd2)))))(function(dirMatches) {
            return sequential2(forWithIndex_1(append18(prefix.right)(dirMatches))(function(path2) {
              return function(m) {
                return parallel2(function() {
                  var fullPath = concat5([cwd2, path2]);
                  return bind9(attempt(stat3(fullPath)))(function(v) {
                    if (m instanceof MatchMore && (v instanceof Right && isDirectory(v.value0))) {
                      return discard3(when3(m.value0)(insertMatch(fullPath)(v.value0)))(function() {
                        return go(fullPath)(m.value1);
                      });
                    }
                    ;
                    if (m instanceof MatchMore && (m.value0 && v instanceof Right)) {
                      return insertMatch(fullPath)(v.value0);
                    }
                    ;
                    if (m instanceof Match && v instanceof Right) {
                      return insertMatch(fullPath)(v.value0);
                    }
                    ;
                    return mempty6;
                  });
                }());
              };
            }));
          });
        };
      };
      var globsWithDir = fromFoldableWith2(append6)(map110(function() {
        var $169 = rootOrRelative(pwd);
        var $170 = fromPathWithSeparator(sep);
        return function($171) {
          return $169($170(fixupGlobPath($171)));
        };
      }())(initGlobs));
      return discard3(sequential2(forWithIndex_22(globsWithDir)(function(dir) {
        return function(globs) {
          return parallel2(go(dir)(globs));
        };
      })))(function() {
        return liftEffect4(read(result));
      });
    });
  };
};
var expandGlobs = function(pwd) {
  var $172 = map28(keys3);
  var $173 = expandGlobsWithStats(pwd);
  return function($174) {
    return $172($173($174));
  };
};
var expandGlobsCwd = function(globs) {
  return bind9(liftEffect4(cwd))(function(cwd2) {
    return expandGlobs(cwd2)(globs);
  });
};
var expandGlobsWithStatsCwd = function(globs) {
  return bind9(liftEffect4(cwd))(function(cwd2) {
    return expandGlobsWithStats(cwd2)(globs);
  });
};

// output/Node.Stream/foreign.js
function readChunkImpl(Left2) {
  return (Right2) => (chunk) => {
    if (chunk instanceof Buffer) {
      return Right2(chunk);
    } else if (typeof chunk === "string") {
      return Left2(chunk);
    } else {
      throw new Error("Node.Stream.readChunkImpl: Unrecognised chunk type; expected String or Buffer, got: " + chunk);
    }
  };
}
function onDataEitherImpl(readChunk2) {
  return (r) => (f) => () => {
    r.on("data", (data) => {
      f(readChunk2(data))();
    });
  };
}
function onEnd(s) {
  return (f) => () => {
    s.on("end", f);
  };
}
function writeStringImpl(w) {
  return (enc) => (s) => (done) => () => w.write(s, enc, done);
}

// output/Node.Stream/index.js
var show4 = /* @__PURE__ */ show(showEncoding);
var pure17 = /* @__PURE__ */ pure(applicativeEffect);
var composeKleisliFlipped3 = /* @__PURE__ */ composeKleisliFlipped(bindEffect);
var writeString3 = function(w) {
  return function(enc) {
    return function(s) {
      return function(cb) {
        return writeStringImpl(w)(show4(enc))(s)(function($20) {
          return cb(toMaybe($20))();
        });
      };
    };
  };
};
var readChunk = /* @__PURE__ */ function() {
  return readChunkImpl(Left.create)(Right.create);
}();
var onDataEither = function(r) {
  return function(cb) {
    return onDataEitherImpl(readChunk)(r)(cb);
  };
};
var onData = function(r) {
  return function(cb) {
    var fromEither = function(x) {
      if (x instanceof Left) {
        return $$throw("Stream encoding should not be set");
      }
      ;
      if (x instanceof Right) {
        return pure17(x.value0);
      }
      ;
      throw new Error("Failed pattern match at Node.Stream (line 97, column 5 - line 101, column 17): " + [x.constructor.name]);
    };
    return onDataEither(r)(composeKleisliFlipped3(cb)(fromEither));
  };
};

// output/Effect.AVar/foreign.js
var AVar = function() {
  function MutableQueue() {
    this.head = null;
    this.last = null;
    this.size = 0;
  }
  function MutableCell(queue, value) {
    this.queue = queue;
    this.value = value;
    this.next = null;
    this.prev = null;
  }
  function AVar2(value) {
    this.draining = false;
    this.error = null;
    this.value = value;
    this.takes = new MutableQueue();
    this.reads = new MutableQueue();
    this.puts = new MutableQueue();
  }
  var EMPTY = {};
  function runEff(eff) {
    try {
      eff();
    } catch (error5) {
      setTimeout(function() {
        throw error5;
      }, 0);
    }
  }
  function putLast(queue, value) {
    var cell = new MutableCell(queue, value);
    switch (queue.size) {
      case 0:
        queue.head = cell;
        break;
      case 1:
        cell.prev = queue.head;
        queue.head.next = cell;
        queue.last = cell;
        break;
      default:
        cell.prev = queue.last;
        queue.last.next = cell;
        queue.last = cell;
    }
    queue.size++;
    return cell;
  }
  function takeLast(queue) {
    var cell;
    switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.last;
        queue.head.next = null;
        queue.last = null;
        break;
      default:
        cell = queue.last;
        queue.last = cell.prev;
        queue.last.next = null;
    }
    cell.prev = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }
  function takeHead(queue) {
    var cell;
    switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.head;
        queue.last.prev = null;
        queue.head = queue.last;
        queue.last = null;
        break;
      default:
        cell = queue.head;
        queue.head = cell.next;
        queue.head.prev = null;
    }
    cell.next = null;
    cell.queue = null;
    queue.size--;
    return cell.value;
  }
  function deleteCell(cell) {
    if (cell.queue === null) {
      return;
    }
    if (cell.queue.last === cell) {
      takeLast(cell.queue);
      return;
    }
    if (cell.queue.head === cell) {
      takeHead(cell.queue);
      return;
    }
    if (cell.prev) {
      cell.prev.next = cell.next;
    }
    if (cell.next) {
      cell.next.prev = cell.prev;
    }
    cell.queue.size--;
    cell.queue = null;
    cell.value = null;
    cell.next = null;
    cell.prev = null;
  }
  function drainVar(util, avar) {
    if (avar.draining) {
      return;
    }
    var ps = avar.puts;
    var ts = avar.takes;
    var rs = avar.reads;
    var p, r, t, value, rsize;
    avar.draining = true;
    while (1) {
      p = null;
      r = null;
      t = null;
      value = avar.value;
      rsize = rs.size;
      if (avar.error !== null) {
        value = util.left(avar.error);
        while (p = takeHead(ps)) {
          runEff(p.cb(value));
        }
        while (r = takeHead(rs)) {
          runEff(r(value));
        }
        while (t = takeHead(ts)) {
          runEff(t(value));
        }
        break;
      }
      if (value === EMPTY && (p = takeHead(ps))) {
        avar.value = value = p.value;
      }
      if (value !== EMPTY) {
        t = takeHead(ts);
        while (rsize-- && (r = takeHead(rs))) {
          runEff(r(util.right(value)));
        }
        if (t !== null) {
          avar.value = EMPTY;
          runEff(t(util.right(value)));
        }
      }
      if (p !== null) {
        runEff(p.cb(util.right(void 0)));
      }
      if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
        break;
      }
    }
    avar.draining = false;
  }
  AVar2.EMPTY = EMPTY;
  AVar2.putLast = putLast;
  AVar2.takeLast = takeLast;
  AVar2.takeHead = takeHead;
  AVar2.deleteCell = deleteCell;
  AVar2.drainVar = drainVar;
  return AVar2;
}();
function empty5() {
  return new AVar(AVar.EMPTY);
}
function _killVar(util, error5, avar) {
  return function() {
    if (avar.error === null) {
      avar.error = error5;
      avar.value = AVar.EMPTY;
      AVar.drainVar(util, avar);
    }
  };
}
function _putVar(util, value, avar, cb) {
  return function() {
    var cell = AVar.putLast(avar.puts, { cb, value });
    AVar.drainVar(util, avar);
    return function() {
      AVar.deleteCell(cell);
    };
  };
}
function _takeVar(util, avar, cb) {
  return function() {
    var cell = AVar.putLast(avar.takes, cb);
    AVar.drainVar(util, avar);
    return function() {
      AVar.deleteCell(cell);
    };
  };
}
function _tryReadVar(util, avar) {
  return function() {
    if (avar.value === AVar.EMPTY) {
      return util.nothing;
    } else {
      return util.just(avar.value);
    }
  };
}

// output/Effect.AVar/index.js
var Killed = /* @__PURE__ */ function() {
  function Killed2(value0) {
    this.value0 = value0;
  }
  ;
  Killed2.create = function(value0) {
    return new Killed2(value0);
  };
  return Killed2;
}();
var Filled = /* @__PURE__ */ function() {
  function Filled2(value0) {
    this.value0 = value0;
  }
  ;
  Filled2.create = function(value0) {
    return new Filled2(value0);
  };
  return Filled2;
}();
var Empty2 = /* @__PURE__ */ function() {
  function Empty3() {
  }
  ;
  Empty3.value = new Empty3();
  return Empty3;
}();
var ffiUtil2 = /* @__PURE__ */ function() {
  return {
    left: Left.create,
    right: Right.create,
    nothing: Nothing.value,
    just: Just.create,
    killed: Killed.create,
    filled: Filled.create,
    empty: Empty2.value
  };
}();
var kill = function(err) {
  return function(avar) {
    return _killVar(ffiUtil2, err, avar);
  };
};
var put2 = function(value) {
  return function(avar) {
    return function(cb) {
      return _putVar(ffiUtil2, value, avar, cb);
    };
  };
};
var take6 = function(avar) {
  return function(cb) {
    return _takeVar(ffiUtil2, avar, cb);
  };
};
var tryRead = function(avar) {
  return _tryReadVar(ffiUtil2, avar);
};

// output/Effect.Aff.AVar/index.js
var liftEffect5 = /* @__PURE__ */ liftEffect(monadEffectAff);
var tryRead2 = function($5) {
  return liftEffect5(tryRead($5));
};
var take7 = function(avar) {
  return makeAff(function(k) {
    return function __do() {
      var c = take6(avar)(k)();
      return effectCanceler(c);
    };
  });
};
var put3 = function(value) {
  return function(avar) {
    return makeAff(function(k) {
      return function __do() {
        var c = put2(value)(avar)(k)();
        return effectCanceler(c);
      };
    });
  };
};
var kill2 = function(error5) {
  var $10 = kill(error5);
  return function($11) {
    return liftEffect5($10($11));
  };
};
var empty6 = /* @__PURE__ */ liftEffect5(empty5);

// output/Node.WorkerBees.Aff/index.js
var mempty7 = /* @__PURE__ */ mempty(monoidCanceler);
var bind10 = /* @__PURE__ */ bind(bindAff);
var spawn1 = /* @__PURE__ */ spawn();
var $$void7 = /* @__PURE__ */ $$void(functorEffect);
var mempty15 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidFn(/* @__PURE__ */ monoidEffect(monoidUnit)));
var show5 = /* @__PURE__ */ show(showInt);
var pure18 = /* @__PURE__ */ pure(applicativeAff);
var liftEffect6 = /* @__PURE__ */ liftEffect(monadEffectAff);
var post1 = /* @__PURE__ */ post();
var terminate2 = function(worker) {
  return invincible(makeAff(function(k) {
    return function __do() {
      terminate(worker)(k)();
      return mempty7;
    };
  }));
};
var spawn2 = function() {
  return function(worker) {
    return function(workerData) {
      return bind10(empty6)(function(output) {
        return bind10(makeAff(function(k) {
          return function __do() {
            spawn1(worker)({
              onMessage: function(value) {
                return $$void7(put2(new Right(value))(output)(mempty15));
              },
              onError: function(err) {
                return kill(err)(output);
              },
              onExit: function(code) {
                return function __do2() {
                  put2(new Left(code))(output)(mempty15)();
                  return kill(error("Worker exited: " + show5(code)))(output)();
                };
              },
              workerData
            })(k)();
            return mempty7;
          };
        }))(function(thread) {
          return pure18(new Tuple(thread, output));
        });
      });
    };
  };
};
var post2 = function() {
  return function(i) {
    var $17 = post1(i);
    return function($18) {
      return liftEffect6($17($18));
    };
  };
};

// output/Node.WorkerBees.Aff.Pool/index.js
var discard4 = /* @__PURE__ */ discard(discardUnit)(bindAff);
var parTraverse_2 = /* @__PURE__ */ parTraverse_(parallelAff)(foldableArray);
var bind11 = /* @__PURE__ */ bind(bindAff);
var for_2 = /* @__PURE__ */ for_(applicativeAff)(foldableMaybe);
var post3 = /* @__PURE__ */ post2();
var show6 = /* @__PURE__ */ show(showInt);
var sequence2 = /* @__PURE__ */ sequence(traversableArray)(applicativeAff);
var spawn3 = /* @__PURE__ */ spawn2();
var pure19 = /* @__PURE__ */ pure(applicativeAff);
var parTraverse2 = /* @__PURE__ */ parTraverse(parallelAff);
var terminate3 = function(v) {
  var termError = error("Pool terminated");
  return discard4(parTraverse_2(function() {
    var $42 = killFiber(termError);
    return function($43) {
      return $42(snd($43));
    };
  }())(v.threads))(function() {
    return discard4(parTraverse_2(function($44) {
      return terminate2(fst($44));
    })(v.threads))(function() {
      return bind11(tryRead2(v.queue))(function(pending) {
        return discard4(kill2(termError)(v.queue))(function() {
          return for_2(pending)(function() {
            var $45 = kill2(termError);
            return function($46) {
              return $45(snd($46));
            };
          }());
        });
      });
    });
  });
};
var make = function() {
  return function() {
    return function(worker) {
      return function(workerData) {
        return function(numThreads) {
          var workerLoop = function(queue) {
            return function(thread) {
              return function(out) {
                return bind11(take7(queue))(function(v) {
                  return discard4(post3(v.value0)(thread))(function() {
                    return bind11(take7(out))(function(rep) {
                      if (rep instanceof Left) {
                        return kill2(error("Worker exited: " + show6(rep.value0)))(v.value1);
                      }
                      ;
                      if (rep instanceof Right) {
                        return discard4(put3(rep.value0)(v.value1))(function() {
                          return workerLoop(queue)(thread)(out);
                        });
                      }
                      ;
                      throw new Error("Failed pattern match at Node.WorkerBees.Aff.Pool (line 48, column 5 - line 53, column 36): " + [rep.constructor.name]);
                    });
                  });
                });
              };
            };
          };
          return bind11(empty6)(function(queue) {
            return bind11(sequence2(replicate(numThreads)(bind11(spawn3(worker)(workerData))(function(v) {
              return bind11(forkAff(workerLoop(queue)(v.value0)(v.value1)))(function(fiber) {
                return pure19(new Tuple(v.value0, fiber));
              });
            }))))(function(threads) {
              return pure19({
                queue,
                threads
              });
            });
          });
        };
      };
    };
  };
};
var make1 = /* @__PURE__ */ make()();
var withPool = function() {
  return function() {
    return function(worker) {
      return function(workerData) {
        return function(numThreads) {
          return bracket(make1(worker)(workerData)(numThreads))(terminate3);
        };
      };
    };
  };
};
var withPool1 = /* @__PURE__ */ withPool()();
var invoke = function() {
  return function(v) {
    return function(i) {
      return bind11(empty6)(function(res) {
        return discard4(put3(new Tuple(i, res))(v.queue))(function() {
          return take7(res);
        });
      });
    };
  };
};
var invoke1 = /* @__PURE__ */ invoke();
var poolTraverse = function() {
  return function() {
    return function(dictTraversable) {
      var parTraverse1 = parTraverse2(dictTraversable);
      return function(worker) {
        return function(workerData) {
          return function(numThreads) {
            return function(fs) {
              return withPool1(worker)(workerData)(numThreads)(function() {
                var $47 = flip(parTraverse1)(fs);
                return function($48) {
                  return $47(invoke1($48));
                };
              }());
            };
          };
        };
      };
    };
  };
};

// output/PureScript.CST.ModuleGraph/index.js
var eq8 = /* @__PURE__ */ eq(eqInt);
var add3 = /* @__PURE__ */ add(semiringInt);
var bind14 = /* @__PURE__ */ bind(bindArray);
var toUnfoldable6 = /* @__PURE__ */ toUnfoldable3(unfoldableArray);
var append7 = /* @__PURE__ */ append(semigroupArray);
var map29 = /* @__PURE__ */ map(functorArray);
var toUnfoldable12 = /* @__PURE__ */ toUnfoldable4(unfoldableArray);
var bind15 = /* @__PURE__ */ bind(bindMaybe);
var foldl7 = /* @__PURE__ */ foldl(foldableSet);
var all5 = /* @__PURE__ */ all2(foldableMap)(heytingAlgebraBoolean);
var map111 = /* @__PURE__ */ map(functorEither);
var fromFoldable8 = /* @__PURE__ */ fromFoldable6(foldableArray)(ordModuleName);
var fromFoldable12 = /* @__PURE__ */ fromFoldable5(ordModuleName)(foldableArray);
var lookup5 = /* @__PURE__ */ lookup2(ordModuleName);
var toUnfoldable22 = /* @__PURE__ */ toUnfoldable2(unfoldableArray);
var Sorted = /* @__PURE__ */ function() {
  function Sorted2(value0) {
    this.value0 = value0;
  }
  ;
  Sorted2.create = function(value0) {
    return new Sorted2(value0);
  };
  return Sorted2;
}();
var CycleDetected = /* @__PURE__ */ function() {
  function CycleDetected2(value0) {
    this.value0 = value0;
  }
  ;
  CycleDetected2.create = function(value0) {
    return new CycleDetected2(value0);
  };
  return CycleDetected2;
}();
var topoSort = function(dictOrd) {
  var fromFoldableWith3 = fromFoldableWith(dictOrd)(foldableArray);
  var filterWithKey2 = filterWithKey(dictOrd);
  var member4 = member2(dictOrd);
  var lookup12 = lookup2(dictOrd);
  var insert11 = insert6(dictOrd);
  var insertWith3 = insertWith(dictOrd);
  var $$delete4 = $$delete3(dictOrd);
  return function(graph) {
    var isRoot = function(v) {
      var $44 = v.value1 === 0;
      if ($44) {
        return new Just(v.value0);
      }
      ;
      return Nothing.value;
    };
    var importCounts = fromFoldableWith3(add3)(bind14(toUnfoldable6(graph))(function(v) {
      return append7([new Tuple(v.value0, 0)])(map29(flip(Tuple.create)(1))(toUnfoldable12(v.value1)));
    }));
    var startingModules = keys3(filterWithKey2(function(k) {
      return function(v) {
        return isJust(isRoot(new Tuple(k, v)));
      };
    })(importCounts));
    var depthFirst = function(v) {
      var $51 = member4(v.curr)(v.visited);
      if ($51) {
        return new Just(new Cons(v.curr, v.path));
      }
      ;
      var $52 = maybe(true)(isEmpty2)(lookup12(v.curr)(graph));
      if ($52) {
        return Nothing.value;
      }
      ;
      return bind15(lookup12(v.curr)(graph))(function(reachable) {
        return foldl7(function(b) {
          return function(a) {
            var $53 = isJust(b);
            if ($53) {
              return b;
            }
            ;
            return depthFirst({
              path: new Cons(v.curr, v.path),
              visited: insert11(v.curr)(v.visited),
              curr: a
            });
          };
        })(Nothing.value)(reachable);
      });
    };
    var decrementImport = function(usages) {
      return function(k) {
        return insertWith3(add3)(k)(-1 | 0)(usages);
      };
    };
    var appendRoots = function(usages) {
      return function(roots) {
        return function(curr) {
          return maybe(roots)(flip(insert11)(roots))(bind15(lookup12(curr)(usages))(function(count) {
            return isRoot(new Tuple(curr, count));
          }));
        };
      };
    };
    var go = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        var v1 = findMin2(v.roots);
        if (v1 instanceof Nothing) {
          var $59 = all5(eq8(0))(v.usages);
          if ($59) {
            $tco_done = true;
            return new Right({
              roots: v.roots,
              sorted: v.sorted,
              usages: v.usages
            });
          }
          ;
          var nonLeaf = keys3(filterWithKey2(function(a) {
            return function(count) {
              return count > 0 && !maybe(true)(isEmpty2)(lookup12(a)(graph));
            };
          })(v.usages));
          var detectCycles = foldl7(function(b) {
            return function(a) {
              var $60 = isJust(b);
              if ($60) {
                return b;
              }
              ;
              return depthFirst({
                path: Nil.value,
                visited: empty4,
                curr: a
              });
            };
          })(Nothing.value)(nonLeaf);
          if (detectCycles instanceof Just) {
            $tco_done = true;
            return new Left(detectCycles.value0);
          }
          ;
          if (detectCycles instanceof Nothing) {
            $tco_done = true;
            return new Left(Nil.value);
          }
          ;
          throw new Error("Failed pattern match at PureScript.CST.ModuleGraph (line 79, column 9 - line 81, column 30): " + [detectCycles.constructor.name]);
        }
        ;
        if (v1 instanceof Just) {
          var reachable = fromMaybe(empty4)(lookup12(v1.value0)(graph));
          var usages$prime = foldl7(decrementImport)(v.usages)(reachable);
          $copy_v = {
            roots: foldl7(appendRoots(usages$prime))($$delete4(v1.value0)(v.roots))(reachable),
            sorted: new Cons(v1.value0, v.sorted),
            usages: usages$prime
          };
          return;
        }
        ;
        throw new Error("Failed pattern match at PureScript.CST.ModuleGraph (line 66, column 34 - line 91, column 10): " + [v1.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    return map111(function(v) {
      return v.sorted;
    })(go({
      roots: startingModules,
      sorted: Nil.value,
      usages: importCounts
    }));
  };
};
var topoSort1 = /* @__PURE__ */ topoSort(ordModuleName);
var moduleGraph = function(k) {
  var getImportName = function(v) {
    return v.module.name;
  };
  var go = function(v) {
    return new Tuple(v.name.name, fromFoldable8(map29(getImportName)(v.imports)));
  };
  var $80 = map29(function($82) {
    return go(k($82));
  });
  return function($81) {
    return fromFoldable12($80($81));
  };
};
var sortModules = function(k) {
  return function(moduleHeaders) {
    var graph = moduleGraph(k)(moduleHeaders);
    var getModuleName = function(v2) {
      return v2.name.name;
    };
    var knownModuleHeaders = fromFoldable12(map29(function(a) {
      return new Tuple(getModuleName(k(a)), a);
    })(moduleHeaders));
    var lookupModuleHeaders = function() {
      var $83 = mapMaybe(flip(lookup5)(knownModuleHeaders));
      return function($84) {
        return $83(toUnfoldable22($84));
      };
    }();
    var v = topoSort1(graph);
    if (v instanceof Left) {
      return new CycleDetected(lookupModuleHeaders(v.value0));
    }
    ;
    if (v instanceof Right) {
      return new Sorted(lookupModuleHeaders(v.value0));
    }
    ;
    throw new Error("Failed pattern match at PureScript.CST.ModuleGraph (line 51, column 3 - line 53, column 56): " + [v.constructor.name]);
  };
};

// output/Tidy.Operators.Defaults/index.js
var defaultOperators = ["Control.Alt.($>) 4", "Control.Alt.(<#>) 1", "Control.Alt.(<$) 4", "Control.Alt.(<$>) 4", "Control.Alt.(<@>) 4", "Control.Alt.(<|>) 3", "Control.Alternative.($>) 4", "Control.Alternative.(*>) 4", "Control.Alternative.(<#>) 1", "Control.Alternative.(<$) 4", "Control.Alternative.(<$>) 4", "Control.Alternative.(<*) 4", "Control.Alternative.(<*>) 4", "Control.Alternative.(<@>) 4", "Control.Alternative.(<|>) 3", "Control.Applicative.($>) 4", "Control.Applicative.(*>) 4", "Control.Applicative.(<#>) 1", "Control.Applicative.(<$) 4", "Control.Applicative.(<$>) 4", "Control.Applicative.(<*) 4", "Control.Applicative.(<*>) 4", "Control.Applicative.(<@>) 4", "Control.Apply.($>) 4", "Control.Apply.(*>) 4", "Control.Apply.(<#>) 1", "Control.Apply.(<$) 4", "Control.Apply.(<$>) 4", "Control.Apply.(<*) 4", "Control.Apply.(<*>) 4", "Control.Apply.(<@>) 4", "Control.Biapply.(*>>) 4", "Control.Biapply.(<<$>>) 4", "Control.Biapply.(<<*) 4", "Control.Biapply.(<<*>>) 4", "Control.Bind.($>) 4", "Control.Bind.(*>) 4", "Control.Bind.(<#>) 1", "Control.Bind.(<$) 4", "Control.Bind.(<$>) 4", "Control.Bind.(<*) 4", "Control.Bind.(<*>) 4", "Control.Bind.(<=<) 1", "Control.Bind.(<@>) 4", "Control.Bind.(=<<) 1", "Control.Bind.(>=>) 1", "Control.Bind.(>>=) 1", "Control.Category.(<<<) 9", "Control.Category.(>>>) 9", "Control.Comonad.($>) 4", "Control.Comonad.(<#>) 1", "Control.Comonad.(<$) 4", "Control.Comonad.(<$>) 4", "Control.Comonad.(<<=) 1", "Control.Comonad.(<@>) 4", "Control.Comonad.(=<=) 1", "Control.Comonad.(=>=) 1", "Control.Comonad.(=>>) 1", "Control.Comonad.Cofree.(:<) 5", "Control.Coroutine.($$) 2", "Control.Coroutine.($~) 2", "Control.Coroutine.(/\\) 3", "Control.Coroutine.(\\/) 3", "Control.Coroutine.(~$) 2", "Control.Coroutine.(~~) 2", "Control.Extend.($>) 4", "Control.Extend.(<#>) 1", "Control.Extend.(<$) 4", "Control.Extend.(<$>) 4", "Control.Extend.(<<=) 1", "Control.Extend.(<@>) 4", "Control.Extend.(=<=) 1", "Control.Extend.(=>=) 1", "Control.Extend.(=>>) 1", "Control.Monad.($>) 4", "Control.Monad.(*>) 4", "Control.Monad.(<#>) 1", "Control.Monad.(<$) 4", "Control.Monad.(<$>) 4", "Control.Monad.(<*) 4", "Control.Monad.(<*>) 4", "Control.Monad.(<=<) 1", "Control.Monad.(<@>) 4", "Control.Monad.(=<<) 1", "Control.Monad.(>=>) 1", "Control.Monad.(>>=) 1", "Control.MonadPlus.($>) 4", "Control.MonadPlus.(*>) 4", "Control.MonadPlus.(<#>) 1", "Control.MonadPlus.(<$) 4", "Control.MonadPlus.(<$>) 4", "Control.MonadPlus.(<*) 4", "Control.MonadPlus.(<*>) 4", "Control.MonadPlus.(<=<) 1", "Control.MonadPlus.(<@>) 4", "Control.MonadPlus.(<|>) 3", "Control.MonadPlus.(=<<) 1", "Control.MonadPlus.(>=>) 1", "Control.MonadPlus.(>>=) 1", "Control.Plus.($>) 4", "Control.Plus.(<#>) 1", "Control.Plus.(<$) 4", "Control.Plus.(<$>) 4", "Control.Plus.(<@>) 4", "Control.Plus.(<|>) 3", "Control.Semigroupoid.(<<<) 9", "Control.Semigroupoid.(>>>) 9", "Data.Argonaut.(.!=) 6", "Data.Argonaut.(.:) 7", "Data.Argonaut.(.:!) 7", "Data.Argonaut.(.:?) 7", "Data.Argonaut.(:=) 7", "Data.Argonaut.(:=?) 7", "Data.Argonaut.(~>) 6", "Data.Argonaut.(~>?) 6", "Data.Argonaut.Decode.(.!=) 6", "Data.Argonaut.Decode.(.:) 7", "Data.Argonaut.Decode.(.:!) 7", "Data.Argonaut.Decode.(.:?) 7", "Data.Argonaut.Decode.Combinators.(.!=) 6", "Data.Argonaut.Decode.Combinators.(.:) 7", "Data.Argonaut.Decode.Combinators.(.:!) 7", "Data.Argonaut.Decode.Combinators.(.:?) 7", "Data.Argonaut.Encode.(:=) 7", "Data.Argonaut.Encode.(:=?) 7", "Data.Argonaut.Encode.(~>) 6", "Data.Argonaut.Encode.(~>?) 6", "Data.Argonaut.Encode.Combinators.(:=) 7", "Data.Argonaut.Encode.Combinators.(:=?) 7", "Data.Argonaut.Encode.Combinators.(~>) 6", "Data.Argonaut.Encode.Combinators.(~>?) 6", "Data.Array.(!!) 8", "Data.Array.(..) 8", "Data.Array.(:) 6", "Data.Array.(\\\\) 5", "Data.Array.NonEmpty.(!!) 8", "Data.Array.NonEmpty.(..) 8", "Data.Array.NonEmpty.(:) 6", "Data.Array.NonEmpty.(\\\\) 5", "Data.BooleanAlgebra.(&&) 3", "Data.BooleanAlgebra.(||) 2", "Data.Bounded.(<) 4", "Data.Bounded.(<=) 4", "Data.Bounded.(>) 4", "Data.Bounded.(>=) 4", "Data.CommutativeRing.(*) 7", "Data.CommutativeRing.(+) 6", "Data.CommutativeRing.(-) 6", "Data.DivisionRing.(*) 7", "Data.DivisionRing.(+) 6", "Data.DivisionRing.(-) 6", "Data.Either.Nested.(\\/) type 6", "Data.Either.Nested.(\\/) 6", "Data.Eq.(/=) 4", "Data.Eq.(==) 4", "Data.EuclideanRing.(*) 7", "Data.EuclideanRing.(+) 6", "Data.EuclideanRing.(-) 6", "Data.EuclideanRing.(/) 7", "Data.Field.(*) 7", "Data.Field.(+) 6", "Data.Field.(-) 6", "Data.Field.(/) 7", "Data.Function.(#) 1", "Data.Function.($) 0", "Data.Function.(<<<) 9", "Data.Function.(>>>) 9", "Data.Functor.($>) 4", "Data.Functor.(<#>) 1", "Data.Functor.(<$) 4", "Data.Functor.(<$>) 4", "Data.Functor.(<@>) 4", "Data.Functor.Contravariant.(>#<) 4", "Data.Functor.Contravariant.(>$<) 4", "Data.Functor.Coproduct.Nested.(<\\/>) type 6", "Data.Functor.Coproduct.Nested.(<\\/>) 6", "Data.Functor.Product.Nested.(</\\>) type 6", "Data.Functor.Product.Nested.(</\\>) 6", "Data.HeytingAlgebra.(&&) 3", "Data.HeytingAlgebra.(||) 2", "Data.HugeNum.(^) 8", "Data.Int.Bits.(.&.) 10", "Data.Int.Bits.(.^.) 10", "Data.Int.Bits.(.|.) 10", "Data.Lens.(%=) 4", "Data.Lens.(%~) 4", "Data.Lens.(&&&) 3", "Data.Lens.(&&=) 4", "Data.Lens.(&&~) 4", "Data.Lens.(***) 3", "Data.Lens.(*=) 4", "Data.Lens.(*~) 4", "Data.Lens.(+++) 2", "Data.Lens.(+=) 4", "Data.Lens.(+~) 4", "Data.Lens.(-=) 4", "Data.Lens.(-~) 4", "Data.Lens.(.=) 4", "Data.Lens.(.~) 4", "Data.Lens.(//=) 4", "Data.Lens.(//~) 4", "Data.Lens.(<>=) 4", "Data.Lens.(<>~) 4", "Data.Lens.(?=) 4", "Data.Lens.(?~) 4", "Data.Lens.(^.) 8", "Data.Lens.(^..) 8", "Data.Lens.(^?) 8", "Data.Lens.(||=) 4", "Data.Lens.(|||) 2", "Data.Lens.(||~) 4", "Data.Lens.Common.(&&&) 3", "Data.Lens.Common.(***) 3", "Data.Lens.Common.(+++) 2", "Data.Lens.Common.(|||) 2", "Data.Lens.Fold.(^..) 8", "Data.Lens.Fold.(^?) 8", "Data.Lens.Fold.Partial.(^?!) 8", "Data.Lens.Fold.Partial.(^@?!) 8", "Data.Lens.Getter.(^.) 8", "Data.Lens.Lens.Tuple.(&&&) 3", "Data.Lens.Lens.Tuple.(***) 3", "Data.Lens.Prism.Either.(+++) 2", "Data.Lens.Prism.Either.(|||) 2", "Data.Lens.Setter.(%=) 4", "Data.Lens.Setter.(%~) 4", "Data.Lens.Setter.(&&=) 4", "Data.Lens.Setter.(&&~) 4", "Data.Lens.Setter.(*=) 4", "Data.Lens.Setter.(*~) 4", "Data.Lens.Setter.(+=) 4", "Data.Lens.Setter.(+~) 4", "Data.Lens.Setter.(-=) 4", "Data.Lens.Setter.(-~) 4", "Data.Lens.Setter.(.=) 4", "Data.Lens.Setter.(.~) 4", "Data.Lens.Setter.(//=) 4", "Data.Lens.Setter.(//~) 4", "Data.Lens.Setter.(<>=) 4", "Data.Lens.Setter.(<>~) 4", "Data.Lens.Setter.(?=) 4", "Data.Lens.Setter.(?~) 4", "Data.Lens.Setter.(||=) 4", "Data.Lens.Setter.(||~) 4", "Data.List.(!!) 8", "Data.List.(..) 8", "Data.List.(:) 6", "Data.List.(\\\\) 5", "Data.List.Lazy.(!!) 8", "Data.List.Lazy.(..) 8", "Data.List.Lazy.(:) 6", "Data.List.Lazy.(\\\\) 5", "Data.List.Lazy.NonEmpty.(:) 6", "Data.List.Lazy.Types.(:) 6", "Data.List.NonEmpty.(!!) 8", "Data.List.NonEmpty.(:) 6", "Data.List.Types.(:) 6", "Data.Monoid.(<>) 5", "Data.NaturalTransformation.(~>) type 4", "Data.NonEmpty.(:|) 5", "Data.Number.(%) 7", "Data.Number.Approximate.(~=) 4", "Data.Number.Approximate.(\u2245) 4", "Data.Number.Approximate.(\u2247) 4", "Data.Options.(:=) 6", "Data.Ord.(<) 4", "Data.Ord.(<=) 4", "Data.Ord.(>) 4", "Data.Ord.(>=) 4", "Data.Profunctor.Choice.(+++) 2", "Data.Profunctor.Choice.(|||) 2", "Data.Profunctor.Strong.(&&&) 3", "Data.Profunctor.Strong.(***) 3", "Data.Ring.(*) 7", "Data.Ring.(+) 6", "Data.Ring.(-) 6", "Data.Semigroup.(<>) 5", "Data.Semiring.(*) 7", "Data.Semiring.(+) 6", "Data.Tuple.Nested.(/\\) type 6", "Data.Tuple.Nested.(/\\) 6", "Foreign.Index.(!) 9", "Parsing.Combinators.(!!) 8", "Parsing.Combinators.($>) 4", "Parsing.Combinators.(..) 8", "Parsing.Combinators.(:) 6", "Parsing.Combinators.(<#>) 1", "Parsing.Combinators.(<$) 4", "Parsing.Combinators.(<$>) 4", "Parsing.Combinators.(<?>) 4", "Parsing.Combinators.(<??>) 3", "Parsing.Combinators.(<@>) 4", "Parsing.Combinators.(<|>) 3", "Parsing.Combinators.(<~?>) 4", "Parsing.Combinators.(\\\\) 5", "Parsing.Indent.(<*/>) 11", "Parsing.Indent.(<+/>) 9", "Parsing.Indent.(<-/>) 10", "Parsing.Indent.(<?/>) 12", "Pathy.(<..>) 6", "Pathy.(<.>) 6", "Pathy.(</>) 6", "Pathy.Path.(<..>) 6", "Pathy.Path.(<.>) 6", "Pathy.Path.(</>) 6", "Prelude.(~>) type 4", "Prelude.(#) 1", "Prelude.($) 0", "Prelude.($>) 4", "Prelude.(&&) 3", "Prelude.(*) 7", "Prelude.(*>) 4", "Prelude.(+) 6", "Prelude.(-) 6", "Prelude.(/) 7", "Prelude.(/=) 4", "Prelude.(<) 4", "Prelude.(<#>) 1", "Prelude.(<$) 4", "Prelude.(<$>) 4", "Prelude.(<*) 4", "Prelude.(<*>) 4", "Prelude.(<<<) 9", "Prelude.(<=) 4", "Prelude.(<=<) 1", "Prelude.(<>) 5", "Prelude.(<@>) 4", "Prelude.(=<<) 1", "Prelude.(==) 4", "Prelude.(>) 4", "Prelude.(>=) 4", "Prelude.(>=>) 1", "Prelude.(>>=) 1", "Prelude.(>>>) 9", "Prelude.(||) 2", "StringParser.(<?>) 4", "StringParser.Combinators.(<?>) 4", "Test.QuickCheck.(/==) 2", "Test.QuickCheck.(/=?) 2", "Test.QuickCheck.(<=?) 2", "Test.QuickCheck.(<?) 2", "Test.QuickCheck.(<?>) 2", "Test.QuickCheck.(===) 2", "Test.QuickCheck.(==?) 2", "Test.QuickCheck.(>=?) 2", "Test.QuickCheck.(>?) 2", "Type.Function.(#) type 1", "Type.Function.($) type 0", "Type.Prelude.(+) type 0", "Type.Row.(+) type 0"];

// output/Main/index.js
var discard5 = /* @__PURE__ */ discard(discardUnit);
var $$void8 = /* @__PURE__ */ $$void(functorEffect);
var bindFlipped9 = /* @__PURE__ */ bindFlipped(bindEffect);
var toString8 = /* @__PURE__ */ toString3(mutableBufferEffect);
var concat6 = /* @__PURE__ */ concat2(mutableBufferEffect);
var mempty8 = /* @__PURE__ */ mempty(monoidCanceler);
var pure110 = /* @__PURE__ */ pure(applicativeAff);
var map30 = /* @__PURE__ */ map(functorAff);
var insert10 = /* @__PURE__ */ insert5(ordString);
var lookup6 = /* @__PURE__ */ lookup2(ordString);
var bind16 = /* @__PURE__ */ bind(bindAff);
var $$try5 = /* @__PURE__ */ $$try(monadErrorAff);
var bindFlipped12 = /* @__PURE__ */ bindFlipped(bindEither);
var throwError3 = /* @__PURE__ */ throwError(monadThrowAff);
var append8 = /* @__PURE__ */ append(semigroupString);
var map112 = /* @__PURE__ */ map(functorMaybe);
var voidLeft6 = /* @__PURE__ */ voidLeft(functorArgParser);
var applyFirst4 = /* @__PURE__ */ applyFirst(applyParser);
var map210 = /* @__PURE__ */ map(functorArgParser);
var apply7 = /* @__PURE__ */ apply2(applyParser);
var discard22 = /* @__PURE__ */ discard5(bindAff);
var error4 = /* @__PURE__ */ error3(monadEffectAff);
var liftEffect7 = /* @__PURE__ */ liftEffect(monadEffectAff);
var parTraverse3 = /* @__PURE__ */ parTraverse(parallelAff)(traversableArray);
var bindFlipped22 = /* @__PURE__ */ bindFlipped(bindAff);
var fromFoldable9 = /* @__PURE__ */ fromFoldable(foldableSet);
var unwrap6 = /* @__PURE__ */ unwrap();
var map33 = /* @__PURE__ */ map(functorArray);
var foldl8 = /* @__PURE__ */ foldl(foldableArray);
var for_3 = /* @__PURE__ */ for_(applicativeAff)(foldableArray);
var toUnfoldable7 = /* @__PURE__ */ toUnfoldable3(unfoldableArray);
var foldMap8 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidString);
var log4 = /* @__PURE__ */ log3(monadEffectAff);
var fold4 = /* @__PURE__ */ fold(foldableArray)(monoidString);
var show7 = /* @__PURE__ */ show(showInt);
var map43 = /* @__PURE__ */ map(functorObject);
var parseArgs2 = /* @__PURE__ */ parseArgs(foldableArray);
var fold13 = /* @__PURE__ */ fold(foldableMaybe)(monoidString);
var evalStateT2 = /* @__PURE__ */ evalStateT(functorAff);
var applicativeStateT2 = /* @__PURE__ */ applicativeStateT(monadAff);
var $$for2 = /* @__PURE__ */ $$for(applicativeStateT2)(traversableArray);
var bindStateT2 = /* @__PURE__ */ bindStateT(monadAff);
var bind22 = /* @__PURE__ */ bind(bindStateT2);
var monadStateStateT2 = /* @__PURE__ */ monadStateStateT(monadAff);
var get4 = /* @__PURE__ */ get3(monadStateStateT2);
var bindFlipped32 = /* @__PURE__ */ bindFlipped(bindStateT2);
var state2 = /* @__PURE__ */ state(monadStateStateT2);
var lift3 = /* @__PURE__ */ lift(monadTransStateT)(monadAff);
var pure24 = /* @__PURE__ */ pure(applicativeStateT2);
var fromFoldable13 = /* @__PURE__ */ fromFoldable4(foldableArray);
var nub3 = /* @__PURE__ */ nub(ordString);
var alt7 = /* @__PURE__ */ alt(altAff);
var oneOf2 = /* @__PURE__ */ oneOf(foldableArray)(plusAff);
var voidLeft1 = /* @__PURE__ */ voidLeft(functorAff);
var unsafeWorkerFromPath2 = /* @__PURE__ */ unsafeWorkerFromPath();
var poolTraverse2 = /* @__PURE__ */ poolTraverse()()(traversableArray);
var foldMap14 = /* @__PURE__ */ foldMap(foldableArray)(/* @__PURE__ */ monoidRecord()(/* @__PURE__ */ monoidRecordCons({
  reflectSymbol: function() {
    return "errors";
  }
})(monoidArray)()(/* @__PURE__ */ monoidRecordCons({
  reflectSymbol: function() {
    return "notFormatted";
  }
})(monoidArray)()(monoidRecordNil))));
var guard7 = /* @__PURE__ */ guard2(monoidArray);
var not3 = /* @__PURE__ */ not(/* @__PURE__ */ heytingAlgebraFunction(heytingAlgebraBoolean));
var when4 = /* @__PURE__ */ when(applicativeAff);
var comparing3 = /* @__PURE__ */ comparing(ordNumber);
var log1 = /* @__PURE__ */ log3(monadEffectEffect);
var unless2 = /* @__PURE__ */ unless(applicativeEffect);
var for_1 = /* @__PURE__ */ for_(applicativeEffect)(foldableArray);
var error1 = /* @__PURE__ */ error3(monadEffectEffect);
var traverse3 = /* @__PURE__ */ traverse(traversableMaybe)(applicativeAff);
var Check = /* @__PURE__ */ function() {
  function Check2() {
  }
  ;
  Check2.value = new Check2();
  return Check2;
}();
var Write = /* @__PURE__ */ function() {
  function Write2() {
  }
  ;
  Write2.value = new Write2();
  return Write2;
}();
var Require = /* @__PURE__ */ function() {
  function Require2() {
  }
  ;
  Require2.value = new Require2();
  return Require2;
}();
var Ignore = /* @__PURE__ */ function() {
  function Ignore2() {
  }
  ;
  Ignore2.value = new Ignore2();
  return Ignore2;
}();
var Prefer = /* @__PURE__ */ function() {
  function Prefer2() {
  }
  ;
  Prefer2.value = new Prefer2();
  return Prefer2;
}();
var GenerateOperators = /* @__PURE__ */ function() {
  function GenerateOperators2(value0) {
    this.value0 = value0;
  }
  ;
  GenerateOperators2.create = function(value0) {
    return new GenerateOperators2(value0);
  };
  return GenerateOperators2;
}();
var GenerateRc = /* @__PURE__ */ function() {
  function GenerateRc2(value0) {
    this.value0 = value0;
  }
  ;
  GenerateRc2.create = function(value0) {
    return new GenerateRc2(value0);
  };
  return GenerateRc2;
}();
var FormatInPlace = /* @__PURE__ */ function() {
  function FormatInPlace2(value0, value1, value2, value3, value4, value5) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }
  ;
  FormatInPlace2.create = function(value0) {
    return function(value1) {
      return function(value2) {
        return function(value3) {
          return function(value4) {
            return function(value5) {
              return new FormatInPlace2(value0, value1, value2, value3, value4, value5);
            };
          };
        };
      };
    };
  };
  return FormatInPlace2;
}();
var Format = /* @__PURE__ */ function() {
  function Format2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Format2.create = function(value0) {
    return function(value1) {
      return new Format2(value0, value1);
    };
  };
  return Format2;
}();
var eqFormatMode = {
  eq: function(x) {
    return function(y) {
      if (x instanceof Check && y instanceof Check) {
        return true;
      }
      ;
      if (x instanceof Write && y instanceof Write) {
        return true;
      }
      ;
      return false;
    };
  }
};
var eq17 = /* @__PURE__ */ eq(eqFormatMode);
var readStdin = /* @__PURE__ */ makeAff(function(k) {
  return function __do() {
    var contents = $$new([])();
    onData(stdin)(function(buff) {
      return $$void8(modify(function(v) {
        return snoc(v)(buff);
      })(contents));
    })();
    onEnd(stdin)(bindFlipped9(function($224) {
      return k(Right.create($224));
    })(bindFlipped9(toString8(UTF8.value))(bindFlipped9(concat6)(read(contents)))))();
    return mempty8;
  };
});
var readOperatorTable = function(path2) {
  if (path2 === ".tidyoperators.default") {
    return pure110(defaultOperators);
  }
  ;
  if (otherwise) {
    return map30(split("\n"))(readTextFile2(UTF8.value)(path2));
  }
  ;
  throw new Error("Failed pattern match at Main (line 311, column 1 - line 311, column 52): " + [path2.constructor.name]);
};
var rcFileName = ".tidyrc.json";
var resolveRcForDir = function(root) {
  var unwind2 = function($copy_cache) {
    return function($copy_res) {
      return function($copy_v) {
        var $tco_var_cache = $copy_cache;
        var $tco_var_res = $copy_res;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(cache, res, v) {
          if (v instanceof Cons) {
            $tco_var_cache = insert10(v.value0)(res)(cache);
            $tco_var_res = res;
            $copy_v = v.value1;
            return;
          }
          ;
          if (v instanceof Nil) {
            $tco_done = true;
            return new Tuple(res, cache);
          }
          ;
          throw new Error("Failed pattern match at Main (line 359, column 22 - line 363, column 22): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_cache, $tco_var_res, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
  };
  var go = function(paths) {
    return function(cache) {
      return function(dir) {
        var v = lookup6(dir)(cache);
        if (v instanceof Just) {
          return pure110(unwind2(cache)(v.value0)(paths));
        }
        ;
        if (v instanceof Nothing) {
          var filePath = concat5([dir, rcFileName]);
          return bind16($$try5(readTextFile2(UTF8.value)(filePath)))(function(contents) {
            if (contents instanceof Left) {
              if (dir === root) {
                return pure110(unwind2(cache)(Nothing.value)(new Cons(dir, paths)));
              }
              ;
              if (otherwise) {
                return go(new Cons(dir, paths))(cache)(dirname(dir));
              }
              ;
            }
            ;
            if (contents instanceof Right) {
              var v1 = bindFlipped12(fromJson)(parseJson(contents.value0));
              if (v1 instanceof Left) {
                return throwError3(error("Could not decode " + (filePath + (": " + printJsonDecodeError(v1.value0)))));
              }
              ;
              if (v1 instanceof Right) {
                var resolvedOptions = {
                  operatorsFile: map112(relative(dir))(v1.value0.operatorsFile),
                  importSort: v1.value0.importSort,
                  importWrap: v1.value0.importWrap,
                  indent: v1.value0.indent,
                  ribbon: v1.value0.ribbon,
                  typeArrowPlacement: v1.value0.typeArrowPlacement,
                  unicode: v1.value0.unicode,
                  width: v1.value0.width
                };
                return pure110(unwind2(cache)(new Just(resolvedOptions))(new Cons(dir, paths)));
              }
              ;
              throw new Error("Failed pattern match at Main (line 349, column 11 - line 356, column 79): " + [v1.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Main (line 342, column 7 - line 356, column 79): " + [contents.constructor.name]);
          });
        }
        ;
        throw new Error("Failed pattern match at Main (line 336, column 24 - line 356, column 79): " + [v.constructor.name]);
      };
    };
  };
  return go(Nil.value);
};
var parser = /* @__PURE__ */ function() {
  var workerOptions = $$default(4)($$int(argument(["--threads", "-t"])("Number of worker threads to use.\nDefaults to 4.")));
  var timingOption = $$default(false)($$boolean(flag(["--timing"])("Print the time spent formatting each file.")));
  var pursGlobs = unfolded1(unfoldable1Array)(anyNotFlag("PURS_GLOB")("Globs for PureScript sources."));
  var configOption = $$default(Prefer.value)(choose("config behavior")([voidLeft6(flag(["--config-prefer", "-cp"])("Always use config files when present, otherwise use CLI options.\nDefault."))(Prefer.value), voidLeft6(flag(["--config-require", "-cr"])("Require the presence of a config file.\nUseful for editors."))(Require.value), voidLeft6(flag(["--config-ignore", "-ci"])("Ignore all configuration files and only use CLI options.\nNot recommended."))(Ignore.value)]));
  return applyFirst4(applyFirst4(choose("command")([command(["generate-operators"])("Generate an operator precedence table for better operator formatting.\nBest used with `spago sources`. Prints to stdout.")(applyFirst4(map210(GenerateOperators.create)(pursGlobs))(flagHelp)), command(["generate-config"])("Writes a .tidyrc file to the current working directory based\non the command line options given.")(applyFirst4(map210(GenerateRc.create)(formatOptions))(flagHelp)), command(["format-in-place"])("Format source files in place.")(applyFirst4(apply7(apply7(apply7(apply7(map210(FormatInPlace.create(Write.value))(formatOptions))(configOption))(workerOptions))(timingOption))(pursGlobs))(flagHelp)), command(["format"])("Format input over stdin.")(applyFirst4(apply7(map210(Format.create)(formatOptions))(configOption))(flagHelp)), command(["check"])("Check source files are formatted.")(applyFirst4(apply7(apply7(apply7(apply7(map210(FormatInPlace.create(Check.value))(formatOptions))(configOption))(workerOptions))(timingOption))(pursGlobs))(flagHelp))]))(flagInfo(["--version", "-v"])("Shows the current version.")(version)))(flagHelp);
}();
var getOptions = function(cliOptions) {
  return function(rcOptions) {
    return function(filePath) {
      return function(v) {
        if (v instanceof Prefer) {
          return pure110(fromMaybe(cliOptions)(rcOptions));
        }
        ;
        if (v instanceof Ignore) {
          return pure110(cliOptions);
        }
        ;
        if (v instanceof Require) {
          if (rcOptions instanceof Nothing) {
            return discard22(error4(rcFileName + (" not found for " + filePath)))(function() {
              return liftEffect7(exit(1));
            });
          }
          ;
          if (rcOptions instanceof Just) {
            return pure110(rcOptions.value0);
          }
          ;
          throw new Error("Failed pattern match at Main (line 304, column 5 - line 309, column 21): " + [rcOptions.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Main (line 300, column 44 - line 309, column 21): " + [v.constructor.name]);
      };
    };
  };
};
var generateOperatorsCommand = function(globs) {
  return bind16(expandGlobsCwd(globs))(function(sourcePaths) {
    return bind16(parTraverse3(function(path2) {
      return bind16(bindFlipped22(function() {
        var $225 = toString8(UTF8.value);
        return function($226) {
          return liftEffect7($225($226));
        };
      }())(readFile3(path2)))(function(contents) {
        return pure110(parseModule2(contents));
      });
    })(fromFoldable9(sourcePaths)))(function(modules) {
      var parsedModules = mapMaybe(function(v2) {
        if (v2 instanceof ParseSucceeded) {
          return new Just(toRecovered(v2.value0));
        }
        ;
        if (v2 instanceof ParseSucceededWithErrors) {
          return new Just(v2.value0);
        }
        ;
        return Nothing.value;
      })(modules);
      var v = sortModules(function($227) {
        return function(v1) {
          return v1.header;
        }(unwrap6($227));
      })(parsedModules);
      if (v instanceof CycleDetected) {
        var getModuleName = function(v1) {
          return v1.header.name.name;
        };
        var modNames = map33(function($228) {
          return unwrap6(getModuleName($228));
        })(v.value0);
        return error4(joinWith("\n")(["Cycle detected in modules:", joinWith("\n")(map33(append8("  "))(modNames))]));
      }
      ;
      if (v instanceof Sorted) {
        var precMap = foldl8(resolveOperatorExports)(empty3)(v.value0);
        return for_3(toUnfoldable7(precMap))(function(v1) {
          var modName = foldMap8(unwrap6)(v1.value0);
          return for_3(toUnfoldable7(v1.value1))(function(v2) {
            return log4(fold4([modName, function() {
              if (v2.value0.value0 instanceof OperatorType) {
                return ".(" + (unwrap6(v2.value0.value1) + ") type");
              }
              ;
              if (v2.value0.value0 instanceof OperatorValue) {
                return ".(" + (unwrap6(v2.value0.value1) + ")");
              }
              ;
              throw new Error("Failed pattern match at Main (line 403, column 15 - line 405, column 58): " + [v2.value0.value0.constructor.name]);
            }(), " " + show7(v2.value1)]));
          });
        });
      }
      ;
      throw new Error("Failed pattern match at Main (line 388, column 3 - line 407, column 14): " + [v.constructor.name]);
    });
  });
};
var formatInPlaceOne = function(v) {
  return function(v1) {
    var parsedOperatorsByPath = map43(function(operators2) {
      return defer2(function(v2) {
        return parseOperatorTable(operators2);
      });
    })(v.operatorsByPath);
    var operators = maybe(empty3)(force)(lookup(v1.config.operatorsFile)(parsedOperatorsByPath));
    return formatInPlaceCommand(v.shouldCheck)(operators)(v1);
  };
};
var expandGlobs2 = /* @__PURE__ */ function() {
  var onlyFiles = function() {
    var $229 = toUnfoldable4(unfoldableArray);
    var $230 = filter4(ordString)(isFile);
    return function($231) {
      return $229(keys3($230($231)));
    };
  }();
  var dirToGlob = function(path2) {
    var $176 = extname(path2) === "";
    if ($176) {
      var $177 = isJust(stripSuffix("**")(path2));
      if ($177) {
        return concat5([path2, "*.purs"]);
      }
      ;
      return concat5([path2, "**", "*.purs"]);
    }
    ;
    return path2;
  };
  var $232 = map30(onlyFiles);
  var $233 = map33(dirToGlob);
  return function($234) {
    return $232(expandGlobsWithStatsCwd($233($234)));
  };
}();
var main = /* @__PURE__ */ launchAff_(/* @__PURE__ */ bind16(/* @__PURE__ */ map30(/* @__PURE__ */ drop(2))(/* @__PURE__ */ liftEffect7(argv)))(function(args) {
  var parsedCmd = parseArgs2("purs-tidy")("A tidy-upper for PureScript source code.")(parser)(args);
  if (parsedCmd instanceof Left) {
    return discard22(log4(printArgError(parsedCmd.value0)))(function() {
      if (parsedCmd.value0.value1 instanceof ShowHelp) {
        return liftEffect7(exit(0));
      }
      ;
      if (parsedCmd.value0.value1 instanceof ShowInfo) {
        return liftEffect7(exit(0));
      }
      ;
      return liftEffect7(exit(1));
    });
  }
  ;
  if (parsedCmd instanceof Right) {
    if (parsedCmd.value0 instanceof GenerateOperators) {
      return generateOperatorsCommand(parsedCmd.value0.value0);
    }
    ;
    if (parsedCmd.value0 instanceof GenerateRc) {
      return bind16($$try5(stat3(rcFileName)))(function(rcStats) {
        var $188 = isLeft(rcStats);
        if ($188) {
          var contents = stringifyWithIndent(2)(toJson(parsedCmd.value0.value0));
          return writeTextFile2(UTF8.value)(rcFileName)(contents + "\n");
        }
        ;
        return discard22(error4(rcFileName + " already exists."))(function() {
          return liftEffect7(exit(1));
        });
      });
    }
    ;
    if (parsedCmd.value0 instanceof FormatInPlace) {
      return bind16(liftEffect7(cwd))(function(currentDir) {
        var root = parse2(currentDir).root;
        return bind16(map30(fold13)(liftEffect7(lookupEnv("TIDY_INSTALL_LOC"))))(function(srcLocation) {
          return bind16(expandGlobs2(parsedCmd.value0.value5))(function(files) {
            return bind16(flip(evalStateT2)(empty3)($$for2(files)(function(filePath) {
              return bind22(get4)(function(rcMap) {
                return bind22(bindFlipped32(function($235) {
                  return state2($$const($235));
                })(lift3(resolveRcForDir(root)(rcMap)(dirname(filePath)))))(function(rcOptions) {
                  return bind22(lift3(getOptions(parsedCmd.value0.value1)(rcOptions)(filePath)(parsedCmd.value0.value2)))(function(options) {
                    return pure24({
                      filePath,
                      config: toWorkerConfig(options)
                    });
                  });
                });
              });
            })))(function(filesWithOptions) {
              return bind16(map30(fromFoldable13)(parTraverse3(function(path2) {
                return map30(Tuple.create(path2))(readOperatorTable(path2));
              })(nub3(map33(function(v) {
                return v.config.operatorsFile;
              })(filesWithOptions)))))(function(operatorsByPath) {
                var workerData = {
                  shouldCheck: eq17(parsedCmd.value0.value0)(Check.value),
                  operatorsByPath
                };
                return bind16(function() {
                  var $190 = length(filesWithOptions) > (parsedCmd.value0.value3 * 2 | 0);
                  if ($190) {
                    var bundleLocation = concat5([srcLocation, "bundle", "Bin.Worker", "index.js"]);
                    var outputLocation = concat5([srcLocation, "output", "Bin.Worker", "index.js"]);
                    return bind16(alt7(oneOf2([voidLeft1(stat3(bundleLocation))(unsafeWorkerFromPath2(bundleLocation)), voidLeft1(stat3(outputLocation))(unsafeWorkerFromPath2(outputLocation))]))(throwError3(error("Worker not found"))))(function(worker) {
                      return poolTraverse2(worker)(workerData)(parsedCmd.value0.value3)(filesWithOptions);
                    });
                  }
                  ;
                  return parTraverse3(formatInPlaceOne(workerData))(filesWithOptions);
                }())(function(results) {
                  var v = foldMap14(function(v1) {
                    return {
                      errors: guard7(not3($$null3)(v1.error))([new Tuple(v1.filePath, v1.error)]),
                      notFormatted: guard7(!v1.alreadyFormatted)([v1.filePath])
                    };
                  })(results);
                  return discard22(when4(parsedCmd.value0.value4)(for_3(sortBy(comparing3(function(v1) {
                    return v1.timing;
                  }))(results))(function(v1) {
                    return when4(v1.timing > 0)(log4(fold4([relative(currentDir)(v1.filePath), " ", toStringWith(fixed(2))(v1.timing), "ms"])));
                  })))(function() {
                    if (parsedCmd.value0.value0 instanceof Write) {
                      return for_3(v.errors)(function(v1) {
                        return error4(v1.value0 + (":\n  " + (v1.value1 + "\n")));
                      });
                    }
                    ;
                    if (parsedCmd.value0.value0 instanceof Check) {
                      return liftEffect7(function() {
                        var $203 = $$null(v.errors) && $$null(v.notFormatted);
                        if ($203) {
                          return function __do() {
                            log1("All files are formatted.")();
                            return exit(0)();
                          };
                        }
                        ;
                        return function __do() {
                          unless2($$null(v.errors))(function __do2() {
                            log1("Some files have errors:\n")();
                            return for_1(v.errors)(function(v1) {
                              return error1(v1.value0 + (":\n  " + (v1.value1 + "\n")));
                            })();
                          })();
                          unless2($$null(v.notFormatted))(function __do2() {
                            log1("Some files are not formatted:\n")();
                            return for_1(v.notFormatted)(error1)();
                          })();
                          return exit(1)();
                        };
                      }());
                    }
                    ;
                    throw new Error("Failed pattern match at Main (line 247, column 11 - line 264, column 31): " + [parsedCmd.value0.value0.constructor.name]);
                  });
                });
              });
            });
          });
        });
      });
    }
    ;
    if (parsedCmd.value0 instanceof Format) {
      return bind16(liftEffect7(cwd))(function(currentDir) {
        var root = parse2(currentDir).root;
        return bind16(resolveRcForDir(root)(empty3)(currentDir))(function(v) {
          return bind16(getOptions(parsedCmd.value0.value0)(v.value0)("the current directory.")(parsedCmd.value0.value1))(function(options) {
            return bind16(map30(function() {
              var $236 = fromMaybe(defaultOperators);
              return function($237) {
                return parseOperatorTable($236($237));
              };
            }())(traverse3(readOperatorTable)(options.operatorsFile)))(function(operators) {
              return bind16(readStdin)(function(contents) {
                var v1 = formatCommand(options)(operators)(contents);
                if (v1 instanceof Left) {
                  return discard22(error4(printParseError(v1.value0)))(function() {
                    return liftEffect7(exit(1));
                  });
                }
                ;
                if (v1 instanceof Right) {
                  return makeAff(function(k) {
                    return function __do() {
                      writeString3(stdout)(UTF8.value)(v1.value0)($$const(k(new Right(unit))))();
                      return mempty8;
                    };
                  });
                }
                ;
                throw new Error("Failed pattern match at Main (line 273, column 11 - line 280, column 28): " + [v1.constructor.name]);
              });
            });
          });
        });
      });
    }
    ;
    throw new Error("Failed pattern match at Main (line 173, column 7 - line 280, column 28): " + [parsedCmd.value0.constructor.name]);
  }
  ;
  throw new Error("Failed pattern match at Main (line 162, column 3 - line 280, column 28): " + [parsedCmd.constructor.name]);
}));
export {
  Check,
  Format,
  FormatInPlace,
  GenerateOperators,
  GenerateRc,
  Ignore,
  Prefer,
  Require,
  Write,
  eqFormatMode,
  expandGlobs2 as expandGlobs,
  formatInPlaceOne,
  generateOperatorsCommand,
  getOptions,
  main,
  parser,
  rcFileName,
  readOperatorTable,
  readStdin,
  resolveRcForDir
};
